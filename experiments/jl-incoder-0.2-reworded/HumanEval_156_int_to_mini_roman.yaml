name: HumanEval_156_int_to_mini_roman
language: jl
prompt: "\"\"\"\n    Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\
  \n    Examples:\n    >>> int_to_mini_roman(19)\n    \"xix\"\n    >>> int_to_mini_roman(152)\n\
  \    \"clii\"\n    >>> int_to_mini_roman(426)\n    \"cdxxvi\"\n    \"\"\"\nfunction\
  \ int_to_mini_roman(number::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = int_to_mini_roman;\n\t@test(candidate(19)\
  \ == \"xix\")\n\t@test(candidate(152) == \"clii\")\n\t@test(candidate(251) == \"\
  ccli\")\n\t@test(candidate(426) == \"cdxxvi\")\n\t@test(candidate(500) == \"d\"\
  )\n\t@test(candidate(1) == \"i\")\n\t@test(candidate(4) == \"iv\")\n\t@test(candidate(43)\
  \ == \"xliii\")\n\t@test(candidate(90) == \"xc\")\n\t@test(candidate(94) == \"xciv\"\
  )\n\t@test(candidate(532) == \"dxxxii\")\n\t@test(candidate(900) == \"cm\")\n\t\
  @test(candidate(994) == \"cmxciv\")\n\t@test(candidate(1000) == \"m\")\nend\n"
completions: ["    if number == 0 \n        then return \"0\"\n    else if number\
    \ < 0 \n        then return \"-\"\n    else if number < 100\n        then return\
    \ int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n    else if number\
    \ < 500\n        then return int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 1000\n        then return\
    \ int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else return \"Error\"\nend\n</code>\n<|/\
    \ a tags=julia,roman-numerals |>\n<| c |>\nI believe that your function will fail\
    \ for `int_to_mini_roman(1000)`\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've updated the code to handle that case.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ function below will convert a number to a roman numeral in Julia. \n<code>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = String[]\n    roman[1] = roman[2] = roman[3] = roman[4] = roman[5]\
    \ = roman[6] = roman[7] = roman[8] = roman[9] = roman[10] = roman[11] = roman[12]\
    \ = roman[13] = roman[14] = roman[15] = roman[16] = roman[17] = roman[18] = roman[19]\
    \ = roman[20] = roman[21] = roman[22] = roman[23] = roman[24] = roman[25] = roman[26]\
    \ = roman[27] = roman[28] = roman[29] = roman[30] = roman[31] = roman[32] = roman[33]\
    \ = roman[34] = roman[35] = roman[36] = roman[37] = roman[38] = roman[39] = roman[40]\
    \ = roman[41] = roman[42] = roman[43] = roman[44] = roman[45] = roman[46] = roman[47]\
    \ = roman[48] = roman[49] = roman[50] = roman[51] = roman[52] = roman[53] = roman[54]\
    \ = roman[55] = roman[56] = roman[57] = roman[58] = roman[59] = roman[60] = roman[61]\
    \ = roman[62] = roman[63] = roman[64] = roman[65] = roman[66] = roman[67] = roman[68]\
    \ = roman[69] = roman[70] = roman[71] = roman[72] = roman[73] = roman[74] = roman[75]\
    \ = roman[76] = roman[77] = roman[78] = roman[79] = roman[80] = roman[81] = roman[82]\
    \ = roman[83] = roman[84] = roman[85] = roman[86] = roman[87] = roman[88] = roman[89]\
    \ = roman[90] = roman[91] = roman[92] = roman[93] = roman[94] = roman[95] = roman[96]\
    \ = roman[97] = roman[98] = roman[99] = roman[100] = roman[101] = roman[102] =\
    \ roman[103] = roman[104] = ", "    roman = roman_numerals(number)\n    roman\
    \ = roman.map(&lowercase)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman\
    \ = roman.map(&char2int)\n    roman = roman.map(&char2int)\n    roman = roman.map(&char2int)\n\
    \    roman = roman.map(", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals = roman_numerals(number)\n\
    \    for roman_numeral in roman_numerals\n        roman_numeral_digit = roman_numerals[roman_numeral]\n\
    \        if roman_numeral_digit == 0\n            roman_numeral += roman_numerals[roman_numeral+1]\n\
    \            roman_numerals[roman_numeral+1] = 0\n        end\n        roman +=\
    \ roman_numeral_digit\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = [\"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    ", "    roman = roman_numeral(number)\n    roman = roman.lower()\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input: number must be between 1 and 1000\"\
    )\n    else \n        roman = roman_to_int(roman_to_str(int_to_mini_roman(number-1)))\n\
    \        return roman_to_str(roman)\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that converts a positive integer to a binary string.", "    roman\
    \ = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    \n    if number < 0 or\
    \ number > 1000 then\n        error(\"Invalid input\")\n    end\n    \n    for\
    \ roman_numeral in roman_numerals do\n        if number >= roman_numerals[roman_numeral]\
    \ then\n            roman = roman_numeral + roman\n            number -= roman_numerals[roman_numeral]\n\
    \        end\n    end\n    \n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    elseif\
    \ number == 1 \n        return \"x\"\n    elseif number == 2 \n        return\
    \ \"x\"\n    elseif number == 3 \n        return \"l\"\n    elseif number == 4\
    \ \n        return \"c\"\n    elseif number == 5 \n        return \"l\"\n    elseif\
    \ number == 6 \n        return \"x\"\n    elseif number == 7 \n        return\
    \ \"l\"\n    elseif number == 8 \n        return \"c\"\n    elseif number == 9\
    \ \n        return \"x\"\n    elseif number == 10 \n        return \"l\"\n   \
    \ elseif number == 11 \n        return \"c\"\n    elseif number == 12 \n     \
    \   return \"x\"\n    elseif number == 13 \n        return \"l\"\n    elseif number\
    \ == 14 \n        return \"c\"\n    elseif number == 15 \n        return \"x\"\
    \n    elseif number == 16 \n        return \"l\"\n    elseif number == 17 \n \
    \       return \"c\"\n    elseif number == 18 \n        return \"x\"\n    elseif\
    \ number == 19 \n        return \"l\"\n    elseif number == 20 \n        return\
    \ \"c\"\n    elseif number == 21 \n        return \"x\"\n    elseif number ==\
    \ 22 \n        return \"l\"\n    elseif number == 23 \n        return \"c\"\n\
    \    elseif number == 24 \n        return \"x\"\n    elseif number == 25 \n  \
    \      return \"l\"\n    elseif number == 26 \n        return \"c\"\n    elseif\
    \ number == 27 \n        return \"x\"\n    elseif number == 28 \n        return\
    \ \"l\"\n    elseif number == 29 \n        return \"c\"\n    elseif number ==\
    \ 30 \n        return \"x\"\n    elseif number == 31 \n        return \"l\"\n\
    \    elseif number == 32 \n        return \"c\"\n    elseif number == 33 \n  \
    \      return \"x\"\n    elseif number == 34 \n        return \"l\"\n    elseif\
    \ number == 35 \n        return \"c\"\n    elseif number == 36 \n        return\
    \ \"x\"\n    elseif number == 37 \n        return \"l\"\n    elseif number ==\
    \ 38 \n        return \"c\"\n    elseif number == 39 \n        return \"x\"\n\
    \    elseif number == 40 \n        return \"l\"\n    elseif number == 41 \n  \
    \      return \"c\"\n    elseif number == 42 \n        return \"x\"\n    elseif\
    \ number == 43 \n        return \"l\"\n    elseif number == 44 \n        return\
    \ \"c\"\n    elseif number == 45 \n        return \"x\"\n    elseif number ==\
    \ 46 \n        return \"l\"\n    elseif number == 47 \n        return \"c\"\n\
    \    elseif number == 48 \n        return \"x\"\n    elseif number == 49 \n  \
    \      return \"l", "    roman_numerals = roman_numerals()\n    roman_numerals_map\
    \ = roman_numerals.map{|x| x.to_i}\n    roman_numerals_map[number]\nend", "  \
    \  roman = \"\"\n    roman = roman.concat(\"x\")\n    roman = roman.concat(\"\
    i\")\n    roman = roman.concat(\"v\")\n    roman = roman.concat(\"c\")\n    roman\
    \ = roman.concat(\"d\")\n    roman = roman.concat(\"l\")\n    roman = roman.concat(\"\
    m\")\n    roman = roman.concat(\"n\")\n    roman = roman.concat(\"x\")\n    roman\
    \ = roman.concat(\"l\")\n    roman = roman.concat(\"x\")\n    roman = roman.concat(\"\
    i\")\n    roman = roman.concat(\"v\")\n    roman = roman.concat(\"c\")\n    roman\
    \ = roman.concat(\"d\")\n    roman = roman.concat(\"l\")\n    roman = roman.concat(\"\
    m\")\n    roman = roman.concat(\"n\")\n    roman = roman.concat(\"x\")\n    roman\
    \ = roman.concat(\"l\")\n    roman = roman.concat(\"x\")\n    roman = roman.concat(\"\
    i\")\n    roman = roman.concat(\"v\")\n    roman = roman.concat(\"c\")\n    roman\
    \ = roman.concat(\"d\")\n    roman = roman.concat(\"l\")\n    roman = roman.concat(\"\
    m\")\n    roman = roman.concat(\"n\")\n    roman = roman.concat(\"x\")\n    roman\
    \ = roman.concat(\"l\")\n    roman = roman.concat(\"x\")\n    roman = roman.concat(\"\
    i\")\n    roman = roman.concat(\"v\")\n    roman = roman.concat(\"c\")\n    roman\
    \ = roman.concat(\"d\")\n    roman = roman.concat(\"l\")\n    roman = roman.concat(\"\
    m\")\n    roman = roman.concat(\"n\")\n    roman = roman.concat(\"x\")\n    roman\
    \ = roman.concat(\"l\")\n    roman = roman.concat(\"x\")\n    roman = roman.concat(\"\
    i\")\n    roman = roman.concat(\"v\")", "    if number < 1 || number > 1000 \n\
    \        error(\"Invalid input\")\n    else\n        roman_numerals = roman_numerals_table()\n\
    \        roman_numerals_table = roman_numerals_table()\n        roman_numerals_table[1]\
    \ = roman_numerals[1]\n        roman_numerals_table[2] = roman_numerals[2]\n \
    \       roman_numerals_table[3] = roman_numerals[3]\n        roman_numerals_table[4]\
    \ = roman_numerals[4]\n        roman_numerals_table[5] = roman_numerals[5]\n \
    \       roman_numerals_table[6] = roman_numerals[6]\n        roman_numerals_table[7]\
    \ = roman_numerals[7]\n        roman_numerals_table[8] = roman_numerals[8]\n \
    \       roman_numerals_table[9] = roman_numerals[9]\n        roman_numerals_table[10]\
    \ = roman_numerals[10]\n        roman_numerals_table[11] = roman_numerals[11]\n\
    \        roman_numerals_table[12] = roman_numerals[12]\n        roman_numerals_table[13]\
    \ = roman_numerals[13]\n        roman_numerals_table[14] = roman_numerals[14]\n\
    \        roman_numerals_table[15] = roman_numerals[15]\n        roman_numerals_table[16]\
    \ = roman_numerals[16]\n        roman_numerals_table[17] = roman_numerals[17]\n\
    \        roman_numerals_table[18] = roman_numerals[18]\n        roman_numerals_table[19]\
    \ = roman_numerals[19]\n        roman_numerals_table[20] = roman_numerals[20]\n\
    \        roman_numerals_table[21] = roman_numerals[21]\n        roman_numerals_table[22]\
    \ = roman_numerals[22]\n        roman_numerals_table[23] = roman_numerals[23]\n\
    \        roman_numerals_table[24] = roman_numerals[24]\n        roman_numerals_table[25]\
    \ = roman_numerals[25]\n        roman_numerals_table[26] = roman_numerals[26]\n\
    \        roman_numerals_table[27] = roman_numerals[27]\n        roman_numerals_table[28]\
    \ = roman_numerals[28]\n        roman_numerals_table[", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_table()\n        roman_numerals_string = \"\"\n        for\
    \ i in roman_numerals[number]\n            roman_numerals_string += i\n      \
    \  return roman_numerals_string\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    elseif number == 1 \n        return \"x\"\n  \
    \  elseif number == 2 \n        return \"ix\"\n    elseif number == 3 \n     \
    \   return \"xix\"\n    elseif number == 4 \n        return \"lx\"\n    elseif\
    \ number == 5 \n        return \"ixl\"\n    elseif number == 6 \n        return\
    \ \"lxl\"\n    elseif number == 7 \n        return \"xh\"\n    elseif number ==\
    \ 8 \n        return \"xl\"\n    elseif number == 9 \n        return \"ixh\"\n\
    \    elseif number == 10 \n        return \"lxh\"\n    elseif number == 11 \n\
    \        return \"xlh\"\n    elseif number == 12 \n        return \"xhx\"\n  \
    \  elseif number == 13 \n        return \"lxh\"\n    elseif number == 14 \n  \
    \      return \"xixl\"\n    elseif number == 15 \n        return \"ixlx\"\n  \
    \  elseif number == 16 \n        return \"lxix\"\n    elseif number == 17 \n \
    \       return \"ixix\"\n    elseif number == 18 \n        return \"lxixl\"\n\
    \    elseif number == 19 \n        return \"ixlxl\"\n    elseif number == 20 \n\
    \        return \"lxixl\"\n    elseif number == 21 \n        return \"ixixl\"\n\
    \    elseif number == 22 \n        return \"lxixl\"\n    elseif number == 23 \n\
    \        return \"ixixl\"\n    elseif number == 24 \n        return \"lxixl\"\n\
    \    elseif number == 25 \n        return \"ixixl\"\n    elseif number == 26 \n\
    \        return \"lxixl\"\n    elseif number == 27 \n        return \"ixixl\"\n\
    \    elseif number == 28 \n        return \"lxixl\"\n    elseif number == 29 \n\
    \        return \"ixixl\"\n    elseif number == 30 \n        return \"lxixl\"\n\
    \    elseif number == 31 \n        return \"ixixl\"\n    elseif number == 32 \n\
    \        return \"lxixl\"\n    elseif number == 33 \n        return \"ixixl\"\n\
    \    elseif number == 34 \n        return \"lxixl\"\n    elseif number == 35 \n\
    \        return \"ixixl\"\n    elseif number == 36 \n        return \"lxixl\"\n\
    \    elseif number == 37 \n        return \"ixixl\"\n    elseif number == 38 \n\
    \        return \"lxixl\"\n    elseif number == 39 \n        return \"ixixl\"\n\
    \    elseif number == 40 \n        return \"lxixl\"\n    elseif number == 41 \n\
    \        return \"ixixl\"\n    elseif number == ", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:first)\n    roman = roman.map(&:capitalize)\n    roman\
    \ = roman.map(&:join)\n    roman = roman.join\n    return roman\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    end\n    roman = String[]\n    roman[1] = roman[2] = roman[3]\
    \ = roman[4] = roman[5] = roman[6] = roman[7] = roman[8] = roman[9] = roman[10]\
    \ = roman[11] = roman[12] = roman[13] = roman[14] = roman[15] = roman[16] = roman[17]\
    \ = roman[18] = roman[19] = roman[20] = roman[21] = roman[22] = roman[23] = roman[24]\
    \ = roman[25] = roman[26] = roman[27] = roman[28] = roman[29] = roman[30] = roman[31]\
    \ = roman[32] = roman[33] = roman[34] = roman[35] = roman[36] = roman[37] = roman[38]\
    \ = roman[39] = roman[40] = roman[41] = roman[42] = roman[43] = roman[44] = roman[45]\
    \ = roman[46] = roman[47] = roman[48] = roman[49] = roman[50] = roman[51] = roman[52]\
    \ = roman[53] = roman[54] = roman[55] = roman[56] = roman[57] = roman[58] = roman[59]\
    \ = roman[60] = roman[61] = roman[62] = roman[63] = roman[64] = roman[65] = roman[66]\
    \ = roman[67] = roman[68] = roman[69] = roman[70] = roman[71] = roman[72] = roman[73]\
    \ = roman[74] = roman[75] = roman[76] = roman[77] = roman[78] = roman[79] = roman[80]\
    \ = roman[81] = roman[82] = roman[83] = roman[84] = roman[85] = roman[86] = roman[87]\
    \ = roman[88] = roman[89] = roman[90] = roman[91] = roman[92] = roman[93] = roman[94]\
    \ = roman[95] = roman[96] = roman[97] = roman[98] = roman[99] = roman[100] = roman[101]\
    \ = roman[102] = roman[103] = roman[104] = ", "    if number == 0 \n        then\
    \ return \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if\
    \ number < 1000 \n        then return int_to_mini_roman(number / 10) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 10000 \n        then return int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n\
    \    else if number < 100000 \n        then return int_to_mini_roman(number /\
    \ 1000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 100) +\
    \ int_to_mini_roman(number % 10)\n    else if number < 1000000 \n        then\
    \ return int_to_mini_roman(number / 10000) + int_to_mini_roman(number % 10000)\
    \ + int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 10000000 \n        then return int_to_mini_roman(number\
    \ / 100000) + int_to_mini_roman(number % 100000) + int_to_mini_roman(number %\
    \ 1000) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n \
    \   else if number < 100000000 \n        then return int_to_mini_roman(number\
    \ / 1000000) + int_to_mini_roman(number % 1000000) + int_to_mini_roman(number\
    \ % 1000) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n\
    \    else if number < 1000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000) + int_to_mini_roman(number % 10000000) + int_to_mini_roman(number\
    \ % 1000) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n\
    \    else if number < 10000000000 \n        then return int_to_mini_roman(number\
    \ / 100000000) + int_to_mini_roman(number % 100000000) + int_to_mini_roman(number\
    \ % 1000) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n\
    \    else if number < 100000000000 \n        then return int_to_mini_roman(number ",
  "    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numer", "    roman = \"\"\n    if number < 1 \n        roman = \"x\"\
    \n    elif number < 10 \n        roman = \"x\"\n    elif number < 100 \n     \
    \   roman = \"x\"\n    elif number < 1000 \n        roman = \"x\"\n    else \n\
    \        roman = \"x\"\n        for i in (2..(number-1))\n            roman =\
    \ roman.concat(\"i\")\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number == 0 \n        then return \"0\"\n    else if number < 0 \n     \
    \   then return \"-\"\n    else if number < 10 \n        then return \"x\"\n \
    \   else if number < 100 \n        then return \"c\"\n    else if number < 1000\
    \ \n        then return \"m\"\n    else if number < 10000 \n        then return\
    \ \"d\"\n    else if number < 100000 \n        then return \"l\"\n    else if\
    \ number < 1000000 \n        then return \"xl\"\n    else if number < 10000000\
    \ \n        then return \"xc\"\n    else if number < 100000000 \n        then\
    \ return \"xm\"\n    else if number < 1000000000 \n        then return \"xd\"\n\
    \    else if number < 10000000000 \n        then return \"xl\"\n    else if number\
    \ < 100000000000 \n        then return \"xc\"\n    else if number < 1000000000000\
    \ \n        then return \"xm\"\n    else if number < 10000000000000 \n       \
    \ then return \"xd\"\n    else if number < 100000000000000 \n        then return\
    \ \"xl\"\n    else if number < 1000000000000000 \n        then return \"xc\"\n\
    \    else if number < 10000000000000000 \n        then return \"xm\"\n    else\
    \ if number < 100000000000000000 \n        then return \"xd\"\n    else if number\
    \ < 1000000000000000000 \n        then return \"xl\"\n    else if number < 10000000000000000000\
    \ \n        then return \"xc\"\n    else if number < 100000000000000000000 \n\
    \        then return \"xm\"\n    else if number < 1000000000000000000000 \n  \
    \      then return \"xd\"\n    else if number < 10000000000000000000000 \n   \
    \     then return \"xl\"\n    else if number < 100000000000000000000000 \n   \
    \     then return \"xc\"\n    else if number < 1000000000000000000000000 \n  \
    \      then return \"xm\"\n    else if number < 10000000000000000000000000 \n\
    \        then return \"xd\"\n    else if number < 100000000000000000000000000\
    \ \n        then return \"xl\"\n    else if number < 1000000000000000000000000000\
    \ \n        then return \"xc\"\n    else if number < 10000000000000000000000000000\
    \ \n        then return \"xm\"\n    else if number < 100000000000000000000000000000\
    \ \n        then return \"xd\"\n    else if number < 1000000000000000000000000000000\
    \ \n        then return \"xl\"\n    else if ", "    if number == 0 \n        return\
    \ \"0\"\n    roman_numerals = roman_numerals_of(number)\n    roman_numerals_sorted\
    \ = sort(roman_numerals)\n    roman_numerals_sorted_reversed = reverse(roman_numerals_sorted)\n\
    \    roman_numerals_sorted_reversed_sorted = sort(roman_numerals_sorted_reversed)\n\
    \    roman_numerals_sorted_reversed_sorted_reversed = reverse(sort(roman_numerals_sorted_reversed_sorted))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted = sort(reverse(roman_numerals_sorted_reversed_sorted_reversed))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed = sort(reverse(sort(roman_numerals_sorted_reversed_sorted_reversed_sorted)))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted = sort(reverse(sort(reverse(roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed))))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = sort(reverse(sort(reverse(sort(reverse(roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted))))))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)))))))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted))))))))))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)))))))))))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed)))))))))))\n\
    \    roman_numerals_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(sort(reverse(roman_numerals_sorted_reverse",
  "    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse.reverse()\n    \n    if number\
    \ < 0 or number > 1000 then\n        error(\"Invalid input\")\n    end", "   \
    \ if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals_list(number)\n        roman_numerals_string\
    \ = roman_numerals.join(\"\")\n        roman_numerals_string = roman_numerals_string.lower()\n\
    \        return roman_numerals_string\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Int must be between 1 and\
    \ 1000\")\n    end\n    roman_numerals = roman_numerals_array\n    roman_numerals_array\
    \ = roman_numerals[1..end]\n    roman_numerals_array[1] = roman_numerals[1] *\
    \ 10 + roman_numerals[2] \n    roman_numerals_array[2] = roman_numerals[3] * 10\
    \ + roman_numerals[4] \n    roman_numerals_array[3] = roman_numerals[5] * 10 +\
    \ roman_numerals[6] \n    roman_numerals_array[4] = roman_numerals[7] * 10 + roman_numerals[8]\
    \ \n    roman_numerals_array[5] = roman_numerals[9] * 10 + roman_numerals[10]\
    \ \n    roman_numerals_array[6] = roman_numerals[11] * 10 + roman_numerals[12]\
    \ \n    roman_numerals_array[7] = roman_numerals[13] * 10 + roman_numerals[14]\
    \ \n    roman_numerals_array[8] = roman_numerals[15] * 10 + roman_numerals[16]\
    \ \n    roman_numerals_array[9] = roman_numerals[17] * 10 + roman_numerals[18]\
    \ \n    roman_numerals_array[10] = roman_numerals[19] * 10 + roman_numerals[20]\
    \ \n    roman_numerals_array[11] = roman_numerals[21] * 10 + roman_numerals[22]\
    \ \n    roman_numerals_array[12] = roman_numerals[23] * 10 + roman_numerals[24]\
    \ \n    roman_numerals_array[13] = roman_numerals[25] * 10 + roman_numerals[26]\
    \ \n    roman_numerals_array[14] = roman_numerals[27] * 10 + roman_numerals[28]\
    \ \n    roman_numerals_array[15] = roman_numerals[29] * 10 + roman_numerals[30]\
    \ \n    roman_numerals_array[16] = roman_numerals[31] * 10 + roman_numerals[32]\
    \ \n    roman_numerals_array[17] = roman_numerals[33] * 10 + roman_numerals[34]\
    \ \n    roman_numerals_array[18] = roman_numerals[35] * 10 + roman_numerals[36]\
    \ \n    ", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    ) \n    else \n        roman = roman_numeral(number)\n        roman = roman.lower()\n\
    \        return roman\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman\
    \ = roman_to_int(number)\n    roman = roman.to_string()\n    roman = roman.chars().filter(elem\
    \ => elem >= 'a' && elem <= 'z').map(elem => elem - 'a' + 1).collect::String +\
    \ roman\n    roman = roman.chars().filter(elem => elem >= 'A' && elem <= 'Z').map(elem\
    \ => elem - 'A' + 1).collect::String + roman\n    roman = roman.chars().filter(elem\
    \ => elem >= '0' && elem <= '9').map(elem => elem - '0' + 1).collect::String +\
    \ roman\n    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman_numerals = roman_numerals_list(number)\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numer", "    roman = \"\"\n \
    \   \n    if number < 1 \n        roman = \"x\"\n        return roman\n    \n\
    \    if number < 10 \n        roman = \"x\"\n        return roman\n    \n    if\
    \ number < 100 \n        roman = \"x\"\n        return roman\n    \n    if number\
    \ < 1000 \n        roman = \"x\"\n        return roman\n    \n    if number <\
    \ 10000 \n        roman = \"x\"\n        return roman\n    \n    if number < 100000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 100000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 1000000000000000000000000\
    \ \n        roman = \"x\"\n        return roman\n    \n    if number < 10000000000000000000000000\
    \ \n        roman = \"", "    if number < 1 || number > 1000\n        error(\"\
    Int must be between 1 and 1000\")\n    end\n    roman = \"\"\n    roman_digits\
    \ = Int64[]\n    roman_digits[1] = \"I\"\n    roman_digits[2] = \"V\"\n    roman_digits[3]\
    \ = \"X\"\n    roman_digits[4] = \"L\"\n    roman_digits[5] = \"C\"\n    roman_digits[6]\
    \ = \"D\"\n    roman_digits[7] = \"M\"\n    roman_digits[8] = \"M\"\n    roman_digits[9]\
    \ = \"C\"\n    roman_digits[10] = \"L\"\n    roman_digits[11] = \"X\"\n    roman_digits[12]\
    \ = \"V\"\n    roman_digits[13] = \"I\"\n    roman_digits[14] = \"X\"\n    roman_digits[15]\
    \ = \"L\"\n    roman_digits[16] = \"C\"\n    roman_digits[17] = \"D\"\n    roman_digits[18]\
    \ = \"M\"\n    roman_digits[19] = \"M\"\n    roman_digits[20] = \"C\"\n    roman_digits[21]\
    \ = \"L\"\n    roman_digits[22] = \"X\"\n    roman_digits[23] = \"V\"\n    roman_digits[24]\
    \ = \"I\"\n    roman_digits[25] = \"X\"\n    roman_digits[26] = \"L\"\n    roman_digits[27]\
    \ = \"C\"\n    roman_digits[28] = \"D\"\n    roman_digits[29] = \"M\"\n    roman_digits[30]\
    \ = \"M\"\n    roman_digits[31] = \"C\"\n    roman_digits[32] = \"L\"\n    roman_digits[33]\
    \ = \"X\"\n    roman_digits[34] = \"V\"\n    roman_digits[35] = \"I\"\n    roman_digits[36]\
    \ = \"X\"\n    roman_digits[37] = \"L\"\n    roman_digits[38] = \"C\"\n    roman_digits[39]\
    \ = \"D\"\n    roman_digits[40] = \"M\"\n    roman_digits[41] = \"M\"\n    roman_digits[42]\
    \ = \"C\"\n    roman_digits[43] = \"L\"\n    roman_digits[44] = \"X\"\n    roman_digits[45]\
    \ = \"V\"\n    roman_digits[46] = \"I\"\n    roman_digits[47] = \"X\"\n    roman_digits[48]\
    \ = \"L", "    if number < 1 || number > 1000\n        throw(ArgumentError(\"\
    number must be between 1 and 1000\"))\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_table = roman_numerals_table()\n    roman_numerals_table[1]\
    \ = roman_numerals[1]\n    roman_numerals_table[2] = roman_numerals[2]\n    roman_numerals_table[3]\
    \ = roman_numerals[3]\n    roman_numerals_table[4] = roman_numerals[4]\n    roman_numerals_table[5]\
    \ = roman_numerals[5]\n    roman_numerals_table[6] = roman_numerals[6]\n    roman_numerals_table[7]\
    \ = roman_numerals[7]\n    roman_numerals_table[8] = roman_numerals[8]\n    roman_numerals_table[9]\
    \ = roman_numerals[9]\n    roman_numerals_table[10] = roman_numerals[10]\n   \
    \ roman_numerals_table[11] = roman_numerals[11]\n    roman_numerals_table[12]\
    \ = roman_numerals[12]\n    roman_numerals_table[13] = roman_numerals[13]\n  \
    \  roman_numerals_table[14] = roman_numerals[14]\n    roman_numerals_table[15]\
    \ = roman_numerals[15]\n    roman_numerals_table[16] = roman_numerals[16]\n  \
    \  roman_numerals_table[17] = roman_numerals[17]\n    roman_numerals_table[18]\
    \ = roman_numerals[18]\n    roman_numerals_table[19] = roman_numerals[19]\n  \
    \  roman_numerals_table[20] = roman_numerals[20]\n    roman_numerals_table[21]\
    \ = roman_numerals[21]\n    roman_numerals_table[22] = roman_numerals[22]\n  \
    \  roman_numerals_table[23] = roman_numerals[23]\n    roman_numerals_table[24]\
    \ = roman_numerals[24]\n    roman_numerals_table[25] = roman_numerals[25]\n  \
    \  roman_numerals_table[26] = roman_numerals[26]\n    roman_numerals_table[27]\
    \ = roman_numerals[27]\n    roman_numerals_table[28] = roman_numerals[28]\n  \
    \  ", "    roman = roman_to_int(\"MCMXCIV\")\n    roman = roman[roman.index(\"\
    I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"\
    V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman\
    \ = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"\
    I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"\
    V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman\
    \ = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"\
    I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"\
    V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman\
    \ = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"\
    I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"\
    V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman\
    \ = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"\
    I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"\
    V\")+1]\n    roman = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman\
    \ = roman[roman.index(\"I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"\
    I\"):roman.index(\"V\")+1]\n    roman = roman[roman.index(\"I", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman\
    \ = Int64[]\n    roman[1] = convert(number)\n    roman[2] = convert(number * 10)\n\
    \    roman[3] = convert(number * 100)\n    roman[4] = convert(number * 1000)\n\
    \    roman[5] = convert(number * 10000)\n    roman[6] = convert(number * 100000)\n\
    \    roman[7] = convert(number * 1000000)\n    roman[8] = convert(number * 10000000)\n\
    \    roman[9] = convert(number * 100000000)\n    roman[10] = convert(number *\
    \ 1000000000)\n    roman[11] = convert(number * 10000000000)\n    roman[12] =\
    \ convert(number * 100000000000)\n    roman[13] = convert(number * 1000000000000)\n\
    \    roman[14] = convert(number * 10000000000000)\n    roman[15] = convert(number\
    \ * 100000000000000)\n    roman[16] = convert(number * 1000000000000000)\n   \
    \ roman[17] = convert(number * 10000000000000000)\n    roman[18] = convert(number\
    \ * 100000000000000000)\n    roman[19] = convert(number * 1000000000000000000)\n\
    \    roman[20] = convert(number * 10000000000000000000)\n    roman[21] = convert(number\
    \ * 100000000000000000000)\n    roman[22] = convert(number * 1000000000000000000000)\n\
    \    roman[23] = convert(number * 10000000000000000000000)\n    roman[24] = convert(number\
    \ * 100000000000000000000000)\n    roman[25] = convert(number * 1000000000000000000000000)\n\
    \    roman[26] = convert(number * 10000000000000000000000000)\n    roman[27] =\
    \ convert(number * 100000000000000000000000000)\n    roman[28] = convert(number\
    \ * 1000000000000000000000000000)\n    roman[29] = convert(number * 10000000000000000000000000000)\n\
    \    roman[30] = convert(number * 100000000000000000000000000000)\n    roman[31]\
    \ = convert(number * 1000000000000000000000000000000)\n    roman[32] = convert(number\
    \ * 10000000000000000000000000000000)\n    roman[33] = convert(number * 100000000000000000000000000000000)\n\
    \    roman[34] = convert(number * 1000000000000000000000000000000000)\n    roman[35]\
    \ = convert(number * 10000000000000000000000000000000000)\n    roman[36] = convert(number\
    \ * 100000000000000000000000000000000000)\n    roman[37] = convert(number * 1000000000000000000000000000000000000)\n\
    \    roman[38] = convert(number * 100000000000000000000000000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_table = roman_numerals[roman_numerals_table]\n\
    \    roman_numerals_table\n    roman_numerals_table[number]\n    roman_numerals_table[number]\n\
    end", "    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\"\
    , \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n\
    \    ]\n    roman_numerals_reversed = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals)\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = Dict(\"M\"=>1000, \"CM\"=>900, \"D\"=>500,\
    \ \"CD\"=>400, \"C\"=>100, \"XC\"=>90,\n        \"L\"=>50, \"XL\"=>40, \"X\"=>10,\
    \ \"IX\"=>9, \"V\"=>5, \"IV\"=>4, \"I\"=>1)\n    for roman_numeral in keys(roman_numerals)\n\
    \        if number >= roman_numerals[roman_numeral]\n            roman = roman_numeral\
    \ + roman\n            number -= roman_numerals[roman_numeral]\n        end\n\
    \    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>", "    roman\
    \ = \"\"\n    roman_numerals = roman_numerals(number)\n    for numeral in roman_numerals\
    \ \n        roman = roman + numeral\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = \"\"\n    roman_digits = \"\"\n    \n    if number < 1 \n        error(\"\
    number must be positive\")\n    \n    if number == 1\n        roman = \"x\"\n\
    \    else\n        roman = \"x\"\n        \n    for i = 2 to (number - 1)\n  \
    \      roman_digits = roman_digits + roman\n        roman = roman_digits[roman_digits.length\
    \ - i]\n    end\n    \n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 \n        error(\"The number must be positive\")\n    else if\
    \ number < 1000 \n        return roman_to_mini_roman(number)\n    else \n    \
    \    error(\"The number must be between 1 and 1000\")\nend", "    if number <\
    \ 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\"\
    \ => \"c\", \"D\" => \"d\", \"M\" => \"m\")\n    roman_numerals_reverse = Dict(\"\
    i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\",\
    \ \"d\" => \"D\", \"m\" => \"M\")\n    roman_numerals_reverse[\"I\"] = \"i\"\n\
    \    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"X\"]\
    \ = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals = Dict(\"\
    I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n\
    \    roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"\
    X\", \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.keys()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.keys()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.keys()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.keys()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_", "    roman_numerals = roman_numerals(number)\n    roman_numerals\
    \ = roman_numerals.map(&lowercase)\n    roman_numerals = roman_numerals.map(&char.method(:ord))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:chr))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:upcase))\n    roman_numerals = roman_numerals.map(&char.method(:downcase))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:capitalize))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:delete))\n    roman_numerals = roman_numerals.map(&char.method(:delete!))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:delete))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:delete!))\n    roman_numerals = roman_numerals.map(&char.method(:delete))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:delete!))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:delete))\n    roman_numerals = roman_numerals.map(&char.method(:delete!))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:delete))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:delete!))\n    roman_numerals = roman_numerals.map(&char.method(:delete))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:delete!))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:delete))\n    roman_numerals = roman_numerals.map(&char.method(:delete!))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:delete))\n    roman_numerals\
    \ = roman_numerals.map(&char.method(:delete!))\n    roman_numerals = roman_numerals.map(&char.method(:delete))\n\
    \    roman_numerals = roman_numerals.map(&char.method(:delete!))\n    roman_numerals\
    \ = roman_numerals.map(", "    roman = roman_numeral(number)\n    roman = roman.lower()\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number <\
    \ 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_list(number)\n        roman_numerals_str = roman_numerals.map(roman_numeral_to_string)\n\
    \        roman_numerals_str = roman_numerals_str.map(lowercase)\n        roman_numerals_str\
    \ = roman_numerals_str.join()\n        return roman_numerals_str\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = String[]\n    roman = roman.(\n        roman.(\n\
    \            roman.(\n                roman.(\n                    roman.(\n \
    \                       roman.(\n                            roman.(\n       \
    \                         roman.(\n                                    roman.(\n\
    \                                        roman.(\n                           \
    \                 roman.(\n                                                roman.(\n\
    \                                                    roman.(\n               \
    \                                         roman.(\n                          \
    \                                  roman.(\n                                 \
    \                               roman.(\n                                    \
    \                                roman.(\n                                   \
    \                                     roman.(\n                              \
    \                                              roman.(\n                     \
    \                                                           roman.(\n        \
    \                                                                            roman.(\n\
    \                                                                            \
    \            roman.(\n                                                       \
    \                                     roman.(\n                              \
    \                                                                  roman.(\n \
    \                                                                            \
    \                       roman.(\n                                            \
    \                                                            roman.(\n       \
    \                                                                            \
    \                         roman.(\n                                          \
    \                                                                      roman.(\n\
    \                                                                            \
    \                                        roman.(\n                           \
    \                                                                            \
    \                 roman.(\n                                                  \
    \                                                                          roman.(\n\
    \                                                                            \
    \                                                    roman.(\n               \
    \                                                                            \
    \                                         roman.(\n                          \
    \                                                                            \
    \                                  roman.(\n                                 \
    \                                                                            \
    \                               roman.(\n                                    \
    \                                                                            \
    \                                roman.(\n                                   \
    \                                                                            \
    \                                     roman.(\n                              \
    \                                                                            \
    \                                              roman.(\n                     \
    \                                                                            \
    \                                                           roman.(\n        \
    \                                                                            \
    \                                                                            roman.(\n\
    \                                                                            \
    \                                                                            \
    \            roman.(\n                                                       \
    \                                                                            \
    \                                     roman.(\n                              \
    \                                                                            \
    \                                                                  roman.(\n \
    \                                                                            \
    \                                                                            \
    \                       roman.(\n                                            \
    \                                                                            \
    \                                                            roman.(\n       \
    \                                                                            \
    \                                                                            \
    \                         roman.(\n                                          \
    \                                                                            \
    \                                                                      roman.(\n\
    \                                                                            \
    \                                                                            \
    \                                        roman.(\n                           \
    \                                                                            \
    \                                                                            \
    \                 roman.(\n                                                  \
    \                                                                            \
    \                                                                          roman.(\n\
    \                                                                            \
    \                                                                            \
    \                                                    roman.(\n               \
    \                                                                            \
    \                                                                            \
    \                                         roman.(\n                          \
    \                                                                            \
    \                                                                            \
    \                                  roman.(\n                                 \
    \                                                                            \
    \                                                                            \
    \                               roman.(\n                                    \
    \                                                                            \
    \                                                                            \
    \                                roman.(\n                                   \
    \                                                                            \
    \                                                                            \
    \                                     roman.(\n                              \
    \                                                                            \
    \                                                                            \
    \                                              roman.(\n                     \
    \                                                                            \
    \                                                                            \
    \                                                           roman.(\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            roman.(\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            roman.(\n                                                       \
    \                                                                            \
    \                                                                            \
    \                                     roman.(\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                  roman.(\n \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       roman.(\n                                            \
    \                                                                            \
    \                                                                            \
    \                                                            roman.(\n       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                         ro", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals = [\n        \"\
    M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"\n    ]\n    roman_numerals_reversed = [\n        \"M\", \"CM\"\
    , \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"\n    ]\n    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.push(\"\
    I\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    IV\")\n    roman_numerals_reversed.push(\"II\")\n    roman_numerals_reversed.push(\"\
    III\")\n    roman_numerals_reversed.push(\"IV\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"\
    V\")\n    roman_numerals_reversed.push(\"V\")\n    roman_numerals_reversed.push(\"",
  "    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   roman_numerals_reversed = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"\
    L\" => \"l\", \"C\" => \"c\")\n    roman_numerals_reverse = Dict(\"i\" => \"I\"\
    , \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    I\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"", "    if number == 0 \n        then return \"0\"\n    else if number\
    \ < 0 \n        then return \"-\"\n    else if number < 1000 \n        then return\
    \ int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100)\n    else\
    \ if number < 9000 \n        then return int_to_mini_roman(number / 1000) + int_to_mini_roman(number\
    \ % 1000)\n    else if number < 10000 \n        then return int_to_mini_roman(number\
    \ / 10000) + int_to_mini_roman(number % 10000)\n    else if number < 100000 \n\
    \        then return int_to_mini_roman(number / 100000) + int_to_mini_roman(number\
    \ % 100000)\n    else if number < 1000000 \n        then return int_to_mini_roman(number\
    \ / 1000000) + int_to_mini_roman(number % 1000000)\n    else if number < 10000000\
    \ \n        then return int_to_mini_roman(number / 10000000) + int_to_mini_roman(number\
    \ % 10000000)\n    else if number < 100000000 \n        then return int_to_mini_roman(number\
    \ / 100000000) + int_to_mini_roman(number % 100000000)\n    else if number < 1000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000) + int_to_mini_roman(number\
    \ % 1000000000)\n    else if number < 10000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000000) + int_to_mini_roman(number % 10000000000)\n    else if number\
    \ < 100000000000 \n        then return int_to_mini_roman(number / 100000000000)\
    \ + int_to_mini_roman(number % 100000000000)\n    else if number < 1000000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000000) + int_to_mini_roman(number\
    \ % 1000000000000)\n    else if number < 10000000000000 \n        then return\
    \ int_to_mini_roman(number / 10000000000000) + int_to_mini_roman(number % 10000000000000)\n\
    \    else if number < 100000000000000 \n        then return int_to_mini_roman(number\
    \ / 100000000000000) + int_to_mini_roman(number % 100000000000000)\n    else if\
    \ number < 1000000000000000 \n        then return int_to_mini_roman(number / 100",
  "    if number == 0 \n        then return \"0\"\n    else if number < 0 \n     \
    \   then return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number\
    \ / 10) + int_to_mini_roman(number % 10)\n    else if number < 500\n        then\
    \ return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000)\n    else if number < 1000\n    \
    \    then return int_to_mini_roman(number / 1000) + int_to_mini_roman(number %\
    \ 1000)\n    else if number < 10000\n        then return int_to_mini_roman(number\
    \ / 10000) + int_to_mini_roman(number % 10000) + int_to_mini_roman(number / 100000)\
    \ + int_to_mini_roman(number % 100000)\n    else if number < 100000\n        then\
    \ return int_to_mini_roman(number / 100000) + int_to_mini_roman(number % 100000)\n\
    \    else if number < 1000000\n        then return int_to_mini_roman(number /\
    \ 1000000) + int_to_mini_roman(number % 1000000) + int_to_mini_roman(number /\
    \ 10000000) + int_to_mini_roman(number % 10000000)\n    else if number < 10000000\n\
    \        then return int_to_mini_roman(number / 10000000) + int_to_mini_roman(number\
    \ % 10000000)\n    else if number < 100000000\n        then return int_to_mini_roman(number\
    \ / 100000000) + int_to_mini_roman(number % 100000000) + int_to_mini_roman(number\
    \ / 1000000000) + int_to_mini_roman(number % 1000000000)\n    else if number <\
    \ 1000000000\n        then return int_to_mini_roman(number / 1000000000) + int_to_mini_roman(number\
    \ % 1000000000)\n    else if number < 10000000000\n        then return int_to_mini_roman(number\
    \ / 10000000000) + int_to_mini_roman(number % 10000000000) + int_to_mini_roman(number\
    \ / 100000000000) + int_to_mini_roman(number % 100000000000)\n    else if number\
    \ < 100000000000\n        then return int_to_mini_roman(number / 100000000000)\
    \ + int_to_mini_roman(number % 10000000000", "    if number < 1 || number > 1000\n\
    \        throw(ArgumentError(\"number must be between 1 and 1000\"))\n    end",
  "    roman = \"\"\n    roman_digits = [\"\", \"c\", \"l\", \"i\", \"x\", \"vi\"\
    , \"l\"]\n    roman_digits_rev = [\"\", \"x\", \"c\", \"l\", \"i\", \"vi\", \"\
    x\"]\n    roman_digits_rev[roman_digits.index(roman_digits_rev[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(roman_digits[roman_digits.index(",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_digits = \"\"\n    roman_digits_count = 0\n    roman_digit_count\
    \ = 0\n    roman_digit_sum = 0\n    roman_digit_sum2 = 0\n    roman_digit_sum3\
    \ = 0\n    roman_digit_sum4 = 0\n    roman_digit_sum5 = 0\n    roman_digit_sum6\
    \ = 0\n    roman_digit_sum7 = 0\n    roman_digit_sum8 = 0\n    roman_digit_sum9\
    \ = 0\n    roman_digit_sum10 = 0\n    roman_digit_sum11 = 0\n    roman_digit_sum12\
    \ = 0\n    roman_digit_sum13 = 0\n    roman_digit_sum14 = 0\n    roman_digit_sum15\
    \ = 0\n    roman_digit_sum16 = 0\n    roman_digit_sum17 = 0\n    roman_digit_sum18\
    \ = 0\n    roman_digit_sum19 = 0\n    roman_digit_sum20 = 0\n    roman_digit_sum21\
    \ = 0\n    roman_digit_sum22 = 0\n    roman_digit_sum23 = 0\n    roman_digit_sum24\
    \ = 0\n    roman_digit_sum25 = 0\n    roman_digit_sum26 = 0\n    roman_digit_sum27\
    \ = 0\n    roman_digit_sum28 = 0\n    roman_digit_sum29 = 0\n    roman_digit_sum30\
    \ = 0\n    roman_digit_sum31 = 0\n    roman_digit_sum32 = 0\n    roman_digit_sum33\
    \ = 0\n    roman_digit_sum34 = 0\n    roman_digit_sum35 = 0\n    roman_digit_sum36\
    \ = 0\n    roman_digit_sum37 = 0\n    roman_digit_sum38 = 0\n    roman_digit_sum39\
    \ = 0\n    roman_digit_sum40 = 0\n    roman_digit_sum41 = 0\n    roman_digit_sum42\
    \ = 0\n    roman_digit_sum43 = 0\n    roman_digit_sum44 = 0\n    roman_digit_sum45\
    \ = 0\n    roman_digit_sum46 = 0\n    roman_digit_sum47 = 0\n    roman_digit_sum48\
    \ = 0\n    roman_digit_sum49 = 0\n    roman_digit_sum50 = 0\n    roman_digit_sum51\
    \ = 0\n    roman_digit_sum52 = 0\n    roman_digit_sum53 = 0\n    roman_digit_sum54\
    \ = 0\n    roman_digit_sum55 = 0\n    roman_digit_sum56 = 0\n    roman_digit_sum57\
    \ = 0\n    roman_digit_sum58 = 0\n    roman_digit_sum59 = 0\n", "    if number\
    \ < 1 || number > 1000\n        error(\"number must be between 1 and 1000\")\n\
    \    end\n    roman = \"\"\n    roman_num = [\"\", \"c\", \"l\", \"x\", \"i\"\
    ]\n    roman_num_rev = [\"\", \"c\", \"d\", \"x\", \"i\"]\n    roman_num_rev[1]\
    \ = roman_num[1]\n    roman_num_rev[2] = roman_num[2]\n    roman_num_rev[3] =\
    \ roman_num[3]\n    roman_num_rev[4] = roman_num[4]\n    roman_num_rev[5] = roman_num[5]\n\
    \    roman_num_rev[6] = roman_num[6]\n    roman_num_rev[7] = roman_num[7]\n  \
    \  roman_num_rev[8] = roman_num[8]\n    roman_num_rev[9] = roman_num[9]\n    roman_num_rev[10]\
    \ = roman_num[10]\n    roman_num_rev[11] = roman_num[11]\n    roman_num_rev[12]\
    \ = roman_num[12]\n    roman_num_rev[13] = roman_num[13]\n    roman_num_rev[14]\
    \ = roman_num[14]\n    roman_num_rev[15] = roman_num[15]\n    roman_num_rev[16]\
    \ = roman_num[16]\n    roman_num_rev[17] = roman_num[17]\n    roman_num_rev[18]\
    \ = roman_num[18]\n    roman_num_rev[19] = roman_num[19]\n    roman_num_rev[20]\
    \ = roman_num[20]\n    roman_num_rev[21] = roman_num[21]\n    roman_num_rev[22]\
    \ = roman_num[22]\n    roman_num_rev[23] = roman_num[23]\n    roman_num_rev[24]\
    \ = roman_num[24]\n    roman_num_rev[25] = roman_num[25]\n    roman_num_rev[26]\
    \ = roman_num[26]\n    roman_num_rev[27] = roman_num[27]\n    roman_num_rev[28]\
    \ = roman_num[28]\n    roman_num_rev[29] = roman_num[29]\n    roman_num_rev[30]\
    \ = roman_num[30]\n    roman_num_rev[31] = roman_num[31]\n    roman_num_rev[32]\
    \ = roman_num[32]\n    roman_num_rev[33] = roman_num[33]\n    ", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    for roman_numeral\
    \ in roman_numerals\n        if number >= roman_numeral\n            roman = roman_numeral\
    \ + roman\n            number -= roman_numeral\n        end\n    end\n    return\
    \ roman\nend", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    )\n    end\n    roman = String[]\n    roman[1] = roman[2] = roman[3] = roman[4]\
    \ = roman[5] = roman[6] = roman[7] = roman[8] = roman[9] = roman[10] = roman[11]\
    \ = roman[12] = roman[13] = roman[14] = roman[15] = roman[16] = roman[17] = roman[18]\
    \ = roman[19] = roman[20] = roman[21] = roman[22] = roman[23] = roman[24] = roman[25]\
    \ = roman[26] = roman[27] = roman[28] = roman[29] = roman[30] = roman[31] = roman[32]\
    \ = roman[33] = roman[34] = roman[35] = roman[36] = roman[37] = roman[38] = roman[39]\
    \ = roman[40] = roman[41] = roman[42] = roman[43] = roman[44] = roman[45] = roman[46]\
    \ = roman[47] = roman[48] = roman[49] = roman[50] = roman[51] = roman[52] = roman[53]\
    \ = roman[54] = roman[55] = roman[56] = roman[57] = roman[58] = roman[59] = roman[60]\
    \ = roman[61] = roman[62] = roman[63] = roman[64] = roman[65] = roman[66] = roman[67]\
    \ = roman[68] = roman[69] = roman[70] = roman[71] = roman[72] = roman[73] = roman[74]\
    \ = roman[75] = roman[76] = roman[77] = roman[78] = roman[79] = roman[80] = roman[81]\
    \ = roman[82] = roman[83] = roman[84] = roman[85] = roman[86] = roman[87] = roman[88]\
    \ = roman[89] = roman[90] = roman[91] = roman[92] = roman[93] = roman[94] = roman[95]\
    \ = roman[96] = roman[97] = roman[98] = roman[99] = roman[100] = roman[101] =\
    \ roman[102] = roman[103] = roman[104] = ", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input: number must be between 1 and 1000\")\n    else\
    \ \n        roman = roman_numeral(number)\n        roman = roman.lower()\n   \
    \     return roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = \"\
    \"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\"\
    , \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()",
  "    if number == 0 \n        then return \"0\"\n    else if number < 0 \n     \
    \   then return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number//10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number//100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number//1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"error\"\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nHere's a solution using recursion:\n<code>", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    else\n        roman_numerals\
    \ = roman_numerals(number)\n        roman_numerals_str = roman_numerals.map(roman_numeral\
    \ => roman_numeral.to_lowercase)\n        roman_numerals_str.join(\"\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000 \n \
    \       error(\"Invalid input: number must be between 1 and 1000\")\n    else\
    \ \n        roman = roman_to_mini_roman(number)\n        roman = roman.substring(0,roman.length-1)\n\
    \        return roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ romans[number]\n    roman = roman.substring(1,roman.length)\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000\n  \
    \      error(\"Invalid input\")\n    end\n    roman = Int64[]\n    roman[1] =\
    \ Int64(\"I\")\n    roman[2] = Int64(\"II\")\n    roman[3] = Int64(\"III\")\n\
    \    roman[4] = Int64(\"IV\")\n    roman[5] = Int64(\"V\")\n    roman[6] = Int64(\"\
    VI\")\n    roman[7] = Int64(\"VII\")\n    roman[8] = Int64(\"VIII\")\n    roman[9]\
    \ = Int64(\"IX\")\n    roman[10] = Int64(\"X\")\n    roman[11] = Int64(\"XI\"\
    )\n    roman[12] = Int64(\"XII\")\n    roman[13] = Int64(\"XIII\")\n    roman[14]\
    \ = Int64(\"XIV\")\n    roman[15] = Int64(\"XV\")\n    roman[16] = Int64(\"XVI\"\
    )\n    roman[17] = Int64(\"XVII\")\n    roman[18] = Int64(\"XVIII\")\n    roman[19]\
    \ = Int64(\"XIX\")\n    roman[20] = Int64(\"XX\")\n    roman[21] = Int64(\"XXI\"\
    )\n    roman[22] = Int64(\"XXII\")\n    roman[23] = Int64(\"XXIII\")\n    roman[24]\
    \ = Int64(\"XXIV\")\n    roman[25] = Int64(\"XXV\")\n    roman[26] = Int64(\"\
    XXVI\")\n    roman[27] = Int64(\"XXVII\")\n    roman[28] = Int64(\"XXVIII\")\n\
    \    roman[29] = Int64(\"XXIX\")\n    roman[30] = Int64(\"XXX\")\n    roman[31]\
    \ = Int64(\"XXXI\")\n    roman[32] = Int64(\"XXXII\")\n    roman[33] = Int64(\"\
    XXXIII\")\n    roman[34] = Int64(\"XXXIV\")\n    roman[35] = Int64(\"XXXV\")\n\
    \    roman[36] = Int64(\"XXXVI\")\n    roman[37] = Int64(\"XXXVII\")\n    roman[38]\
    \ = Int64(\"XXXVIII\")\n    roman[", "    if number < 1 || number > 1000 \n  \
    \      error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals\
    \ = roman_numerals_table()\n    for i = 1:number\n        roman_numeral = roman_numerals[i]\n\
    \        roman = roman.(roman_numeral)\n    end\n    return roman\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that converts a positive integer to a binary\
    \ string.", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    )\n    end\n    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"\
    D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\
    \n    ]\n    for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman = roman_numeral + roman\n            number -= roman_numeral\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_to_int(roman_to_str(int_to_roman(number)))\n       \
    \ roman = roman.substring(0,roman.length-1)\n        return roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    roman_numerals = roman_numerals(number)\n   \
    \ roman_numerals = roman_numerals.map(&lowercase)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_numerals.map(&char2roman)\n    roman_numerals = roman_numerals.map(&char2roman)\n\
    \    roman_numerals = roman_", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else \n        roman_numerals = roman_numerals_list(number)\n\
    \        roman_numerals_str = roman_numerals.join(\"\")\n        roman_numerals_str\
    \ = roman_numerals_str.lower()\n        return roman_numerals_str\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_length = length(roman_numerals)\n    roman_numerals_index\
    \ = 0\n    roman_numerals_string = \"\"\n    while roman_numerals_index < roman_numerals_length\n\
    \        if number >= roman_numerals[roman_numerals_index][1]\n            roman_numerals_string\
    \ += roman_numerals[roman_numerals_index][2]\n            number -= roman_numerals[roman_numerals_index][1]\n\
    \            roman_numerals_index += 1\n        else\n            roman_numerals_string\
    \ += roman_numerals[roman_numerals_index][1]\n            number -= roman_numerals[roman_numerals_index][0]\n\
    \            roman_numerals_index += 1\n        end\n    end\n    return roman_numerals_string\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer\
    \ and returns the number of its digits in base 10.", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = \"\"\n    digits\
    \ = Int64[]\n    roman_digits = Int64[]\n    \n    for digit in 1:number\n   \
    \     digit = digit*10\n        digits.push(digit)\n    end\n    \n    for digit\
    \ in digits\n        roman_digit = digit%100\n        roman_digits.push(roman_digit)\n\
    \        digit = digit/100\n    end\n    \n    for roman_digit in roman_digits\n\
    \        roman = roman.concat(roman_digits[roman_digit])\n    end\n    \n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed[1]\
    \ = roman_numerals_reversed[1][end-1]\n    roman_numerals_reversed[2] = roman_numerals_reversed[2][end-1]\n\
    \    roman_numerals_reversed[3] = roman_numerals_reversed[3][end-1]\n    roman_numerals_reversed[4]\
    \ = roman_numerals_reversed[4][end-1]\n    roman_numerals_reversed[5] = roman_numerals_reversed[5][end-1]\n\
    \    roman_numerals_reversed[6] = roman_numerals_reversed[6][end-1]\n    roman_numerals_reversed[7]\
    \ = roman_numerals_reversed[7][end-1]\n    roman_numerals_reversed[8] = roman_numerals_reversed[8][end-1]\n\
    \    roman_numerals_reversed[9] = roman_numerals_reversed[9][end-1]\n    roman_numerals_reversed[10]\
    \ = roman_numerals_reversed[10][end-1]\n    roman_numerals_reversed[11] = roman_numerals_reversed[11][end-1]\n\
    \    roman_numerals_reversed[12] = roman_numerals_reversed[12][end-1]\n    roman_numerals_reversed[13]\
    \ = roman_numerals_reversed[13][end-1]\n    roman_numerals_reversed[14] = roman_numerals_reversed[14][end-1]\n\
    \    roman_numerals_reversed[15] = roman_numerals_reversed[15][end-1]\n    roman_numerals_reversed[16]\
    \ = roman_numerals_reversed[16][end-1]\n    roman_numerals_reversed[17] = roman_numerals_reversed[17][end-1]\n\
    \    roman_numerals_reversed[18] = roman_numerals_reversed[18][end-1]\n    roman_numerals_reversed[19]\
    \ = roman_numerals_reversed[19][end-1]\n    roman_numerals_reversed[20] = roman_numerals_reversed[20][end-1]\n\
    \    roman_numerals_reversed[21] = roman_numerals_reversed[21][end-1]\n    roman_numerals_reverse",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_numeral(number)\n        roman = roman.lower()\n   \
    \     return roman\nend\n</cell>\n<code language=julia-1.5>", "    roman = \"\"\
    \n    roman_digits = [\"\", \"c\", \"l\", \"x\", \"i\"]\n    roman_digits_reversed\
    \ = [\"\", \"x\", \"c\", \"l\", \"i\"]\n    roman_digits_reversed[1] = roman_digits[2]\n\
    \    roman_digits_reversed[2] = roman_digits[3]\n    roman_digits_reversed[3]\
    \ = roman_digits[4]\n    roman_digits_reversed[4] = roman_digits[5]\n    roman_digits_reversed[5]\
    \ = roman_digits[6]\n    roman_digits_reversed[6] = roman_digits[7]\n    roman_digits_reversed[7]\
    \ = roman_digits[8]\n    roman_digits_reversed[8] = roman_digits[9]\n    roman_digits_reversed[9]\
    \ = roman_digits[10]\n    roman_digits_reversed[10] = roman_digits[11]\n    roman_digits_reversed[11]\
    \ = roman_digits[12]\n    roman_digits_reversed[12] = roman_digits[13]\n    roman_digits_reversed[13]\
    \ = roman_digits[14]\n    roman_digits_reversed[14] = roman_digits[15]\n    roman_digits_reversed[15]\
    \ = roman_digits[16]\n    roman_digits_reversed[16] = roman_digits[17]\n    roman_digits_reversed[17]\
    \ = roman_digits[18]\n    roman_digits_reversed[18] = roman_digits[19]\n    roman_digits_reversed[19]\
    \ = roman_digits[20]\n    roman_digits_reversed[20] = roman_digits[21]\n    roman_digits_reversed[21]\
    \ = roman_digits[22]\n    roman_digits_reversed[22] = roman_digits[23]\n    roman_digits_reversed[23]\
    \ = roman_digits[24]\n    roman_digits_reversed[24] = roman_digits[25]\n    roman_digits_reversed[25]\
    \ = roman_digits[26]\n    roman_digits_reversed[26] = roman_digits[27]\n    roman_digits_reversed[27]\
    \ = roman_digits[28]\n    roman_digits_reversed[28] = roman_digits[29]\n    roman_digits_reversed[29]\
    \ = roman_digits[30]\n    roman_digits_reversed[30] = roman_digits[31]\n    roman_digits_reversed[31]\
    \ = roman_digit", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    else \n        roman_numerals = roman_numerals_list(number)\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numer",
  "    roman = \"\"\n    roman_digits = \"\"\n    \n    if number < 0 or number >\
    \ 999:\n        error(\"Invalid input\")\n    \n    if number < 100:\n       \
    \ roman = \"x\"\n        roman_digits = number\n    \n    if number < 50:\n  \
    \      roman = \"l\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"c\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"d\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"m\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"s\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"f\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"p\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"n\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"x\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"v\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"b\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"q\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"y\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"k\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"m\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"j\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"x\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"h\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"v\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"d\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"s\"\n        roman_digits = number\n    \n    if number < 100:\n\
    \        roman = \"r\"\n        roman_digits = number\n    \n    if number < 50:\n\
    \        roman = \"", "    roman_numerals = roman_numerals_map()\n    roman_numerals_map\
    \ = roman_numerals_map()\n    roman_numerals_map[\"x\"] = \"x\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    c\"] = \"c\"\n    roman_numerals_map[\"d\"] = \"d\"\n    roman_numerals_map[\"\
    m\"] = \"m\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"x\"] = \"x\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    c\"] = \"c\"\n    roman_numerals_map[\"d\"] = \"d\"\n    roman_numerals_map[\"\
    m\"] = \"m\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"x\"] = \"x\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    c\"] = \"c\"\n    roman_numerals_map[\"d\"] = \"d\"\n    roman_numerals_map[\"\
    m\"] = \"m\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"x\"] = \"x\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    c\"] = \"c\"\n    roman_numerals_map[\"d\"] = \"d\"\n    roman_numerals_map[\"\
    m\"] = \"m\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"x\"] = \"x\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    c\"] = \"c\"\n    roman_numerals_map[\"d\"] = \"d\"\n    roman_numerals_map[\"\
    m\"] = \"m\"", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    )\n    end\n    roman = \"\"\n    roman_nums = [\"\",\"i\",\"ii\",\"iii\",\"iv\"\
    ,\"v\",\"vi\",\"vii\",\"viii\",\"ix\",\"x\",\"xi\",\"xii\",\"xiii\",\"xiv\",\"\
    xix\"]\n    roman_nums_rev = [\"\",\"i\",\"ii\",\"iii\",\"iv\",\"v\",\"vi\",\"\
    vii\",\"viii\",\"ix\",\"x\",\"xi\",\"xii\",\"xiii\",\"xiv\",\"xix\"]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_nums_rev.length-2]\n    roman_nums_rev[roman_nums_rev.length-1]\
    \ = roman_nums[roman_nums_rev.length-1]\n    roman_nums_rev[roman_nums_rev.length-2]\
    \ = roman_nums[roman_", "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    return roman.join(\"\")\nend", "    roman = roman_numerals(number)\n    roman\
    \ = roman.map(&lowercase)\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    V\"))\n    roman = roman.map(&char(\"X\"))\n    roman = roman.map(&char(\"L\"\
    ))\n    roman = roman.map(&char(\"C\"))\n    roman = roman.map(&char(\"D\"))\n\
    \    roman = roman.map(&char(\"M\"))\n    roman = roman.map(&char(\"M\"))\n  \
    \  roman = roman.map(&char(\"D\"))\n    roman = roman.map(&char(\"C\"))\n    roman\
    \ = roman.map(&char(\"L\"))\n    roman = roman.map(&char(\"X\"))\n    roman =\
    \ roman.map(&char(\"V\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman\
    \ = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman =\
    \ roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"\
    I\"))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"\
    ))\n    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n\
    \    roman = roman.map(&char(\"I\"))\n    roman = roman.map(&char(\"I\"))\n  \
    \  roman = roman.map(&char(\"I\"))", "    roman = \"\"\n    roman_numerals = [\n\
    \        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"\
    IX\", \"V\", \"IV\", \"I\"\n    ]\n    \n    if number < 0 or number > 1000:\n\
    \        return \"Invalid input\"\n    \n    roman_numerals.reverse()\n    \n\
    \    for numeral in roman_numerals:\n        roman_number = number // numeral\n\
    \        roman_number %= numeral\n        roman += roman_numerals[roman_number]\n\
    \        number -= roman_number * numeral\n        \n    return roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number == 0 \n        then return \"0\"\n\
    \    else if number < 0 \n        then return \"-\"\n    else if number < 100\n\
    \        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</cell>\n<code language=julia-1.5>", "    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_len = length(roman_numerals)\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numer", "  \
    \  roman = roman_to_int(number)\n    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c\
    \ == 'x').collect{|c| c == 'x' ? c : 'i'}.join\n    roman = roman.to_string()\n\
    \    roman = roman.chars().filter(|c|c == 'i').collect{|c| c == 'i' ? c : 'x'}.join\n\
    \    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c == 'i').collect{|c|\
    \ c == 'i' ? c : 'l'}.join\n    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c\
    \ == 'l').collect{|c| c == 'l' ? c : 'v'}.join\n    roman = roman.to_string()\n\
    \    roman = roman.chars().filter(|c|c == 'v').collect{|c| c == 'v' ? c : 'c'}.join\n\
    \    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c == 'c').collect{|c|\
    \ c == 'c' ? c : 'd'}.join\n    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c\
    \ == 'd').collect{|c| c == 'd' ? c : 'm'}.join\n    roman = roman.to_string()\n\
    \    roman = roman.chars().filter(|c|c == 'm').collect{|c| c == 'm' ? c : 'n'}.join\n\
    \    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c == 'n').collect{|c|\
    \ c == 'n' ? c : 'g'}.join\n    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c\
    \ == 'g').collect{|c| c == 'g' ? c : 'h'}.join\n    roman = roman.to_string()\n\
    \    roman = roman.chars().filter(|c|c == 'h').collect{|c| c == 'h' ? c : 'q'}.join\n\
    \    roman = roman.to_string()\n    roman = roman.chars().filter(|c|c == 'q').collect{|c|\
    \ c == 'q' ? c : 'y'}", "    roman_numerals = roman_numerals_table()\n    roman_numerals_length\
    \ = roman_numerals.length\n    roman_numerals_length = roman_numerals_length -\
    \ 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numeral",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_nums = Int64[]\n    roman_nums[1] = \"I\"\n    roman_nums[2]\
    \ = \"II\"\n    roman_nums[3] = \"III\"\n    roman_nums[4] = \"IV\"\n    roman_nums[5]\
    \ = \"V\"\n    roman_nums[6] = \"VI\"\n    roman_nums[7] = \"VII\"\n    roman_nums[8]\
    \ = \"VIII\"\n    roman_nums[9] = \"IX\"\n    roman_nums[10] = \"X\"\n    roman_nums[11]\
    \ = \"XI\"\n    roman_nums[12] = \"XII\"\n    roman_nums[13] = \"XIII\"\n    roman_nums[14]\
    \ = \"XIV\"\n    roman_nums[15] = \"XV\"\n    roman_nums[16] = \"XVI\"\n    roman_nums[17]\
    \ = \"XVII\"\n    roman_nums[18] = \"XVIII\"\n    roman_nums[19] = \"XIX\"\n \
    \   roman_nums[20] = \"XX\"\n    roman_nums[21] = \"XXI\"\n    roman_nums[22]\
    \ = \"XXII\"\n    roman_nums[23] = \"XXIII\"\n    roman_nums[24] = \"XXIV\"\n\
    \    roman_nums[25] = \"XXV\"\n    roman_nums[26] = \"XXVI\"\n    roman_nums[27]\
    \ = \"XXVII\"\n    roman_nums[28] = \"XXVIII\"\n    roman_nums[29] = \"XXIX\"\n\
    \    roman_nums[30] = \"XXX\"\n    roman_nums[31] = \"XXXI\"\n    roman_nums[32]\
    \ = \"XXXII\"\n    roman_nums[33] = \"XXXIII\"\n    roman_nums[34] = \"XXXIV\"\
    \n    roman_nums[35] = \"XXXV\"\n    roman_nums[36] = \"XXXVI\"\n    roman_nums[37]\
    \ = \"XXXVII\"\n    roman_nums[38] = \"XXXVIII\"\n    roman_nums[39] = \"XXXIX\"\
    \n    roman_nums[40] = \"XL\"\n    roman_nums[41] = \"L\"\n    roman_nums[42]\
    \ = \"LX\"\n    roman_nums[43] = \"LXI\"\n    roman_", "    if number < 1 || number\
    \ > 1000 \n        error(\"number must be between 1 and 1000\")\n    else \n \
    \       roman = roman_numeral(number)\n        roman = roman.lower()\n       \
    \ return roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 || number\
    \ > 1000\n        throw(ArgumentError(\"number must be between 1 and 1000\"))\n\
    \    end\n    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    return roman.join(\"\")\nend", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 100\n        then return int_to_mini_roman(number / 10) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 500\n        then return int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number / 1000)\
    \ + int_to_mini_roman(number % 1000)\n    else if number < 1000\n        then\
    \ return int_to_mini_roman(number / 1000) + int_to_mini_roman(number % 1000)\n\
    \    else return \"?\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input: number must be between\
    \ 1 and 1000\")\n    end\n    roman_numerals = roman_numerals_dictionary()\n \
    \   roman_numerals_string = \"\"\n    for roman_numeral in roman_numerals\n  \
    \      if roman_numerals[roman_numeral] == number\n            roman_numerals_string\
    \ += roman_numeral\n        end\n    end\n    return roman_numerals_string\nend\n\
    </cell>\n<code language=julia-1.5>", "    roman_numerals = roman_numerals(number)\n\
    \    roman_numerals = roman_numerals[roman_numerals.index(\"i\"):]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"x\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    v\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"c\"):]\n  \
    \  roman_numerals = roman_numerals[roman_numerals.index(\"d\"):]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"m\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    l\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"n\"):]\n  \
    \  roman_numerals = roman_numerals[roman_numerals.index(\"g\"):]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"p\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    q\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"s\"):]\n  \
    \  roman_numerals = roman_numerals[roman_numerals.index(\"z\"):]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"y\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    h\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"v\"):]\n  \
    \  roman_numerals = roman_numerals[roman_numerals.index(\"b\"):]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"q\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"\
    x\"):]\n    roman_numerals = roman_numerals[roman_numerals.index(\"w\"):]\n  \
    \  roman_numerals = roman_numerals[roman_numerals.index(\"f\"):]\n    roman_numerals\
    \ = roman_numerals[roman_numerals.index(\"e\"):]\n    roman_numerals = roman_numerals[roman_numeral",
  "    if number < 1 || number > 1000\n        error(\"number must be between 1 and\
    \ 1000\")\n    end\n    roman_numerals = roman_numerals()\n    roman_numerals_lowercase\
    \ = roman_numerals.lowercase()\n    roman_numerals_lowercase[roman_numerals_lowercase.length\
    \ - 1] = \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length]\
    \ = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] =\
    \ \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\
    \n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] = \"0\"\n\
    \    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length\
    \ - 1] = \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length]\
    \ = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] =\
    \ \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\
    \n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] = \"0\"\n\
    \    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length\
    \ - 1] = \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length]\
    \ = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] =\
    \ \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\
    \n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] = \"0\"\n\
    \    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length\
    \ - 1] = \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length]\
    \ = \"i\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] =\
    \ \"0\"\n    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\
    \n    roman_numerals_lowercase[roman_numerals_lowercase.length - 1] = \"0\"\n\
    \    roman_numerals_lowercase[roman_numerals_lowercase.length] = \"i\"\n    roman_numerals_lowercase[ro",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_digits = Int64[]\n    roman_digits.push(number)\n\
    \    roman_digits.push(number / 10)\n    roman_digits.push(number % 10)\n    roman_digits.push(number\
    \ / 100)\n    roman_digits.push(number % 100)\n    roman_digits.push(number /\
    \ 1000)\n    roman_digits.push(number % 1000)\n    roman_digits.push(number /\
    \ 10000)\n    roman_digits.push(number % 10000)\n    roman_digits.push(number\
    \ / 100000)\n    roman_digits.push(number % 100000)\n    roman_digits.push(number\
    \ / 1000000)\n    roman_digits.push(number % 1000000)\n    roman_digits.push(number\
    \ / 10000000)\n    roman_digits.push(number % 10000000)\n    roman_digits.push(number\
    \ / 100000000)\n    roman_digits.push(number % 100000000)\n    roman_digits.push(number\
    \ / 1000000000)\n    roman_digits.push(number % 1000000000)\n    roman_digits.push(number\
    \ / 10000000000)\n    roman_digits.push(number % 10000000000)\n    roman_digits.push(number\
    \ / 100000000000)\n    roman_digits.push(number % 100000000000)\n    roman_digits.push(number\
    \ / 1000000000000)\n    roman_digits.push(number % 1000000000000)\n    roman_digits.push(number\
    \ / 10000000000000)\n    roman_digits.push(number % 10000000000000)\n    roman_digits.push(number\
    \ / 1000000000000000)\n    roman_digits.push(number % 1000000000000000)\n    roman_digits.push(number\
    \ / 10000000000000000)\n    roman_digits.push(number % 10000000000000000)\n  \
    \  roman_digits.push(number / 100000000000000000)\n    roman_digits.push(number\
    \ % 100000000000000000)\n    roman_digits.push(number / 1000000000000000000)\n\
    \    roman_digits.push(number % 1000000000000000000)\n    roman_digits.push(number\
    \ / 10000000000000000000)\n    roman_digits.push(number % 10000000000000000000)\n\
    \    roman_digits.push(number / 100000000000000000000)\n    roman_digits.push(number\
    \ % 100000000000000000000)\n    roman_digits.push(number / 1000000000000000000000)\n\
    \    roman_digits.push(number % 1000000000000000000000)\n    roman_digits.push(number\
    \ / 10000000000000000000000)\n    roman_digits.push(number % 10000000000000000000000)\n\
    \    roman_digits.push(number / 100000000000000000000000)\n    roman_digits.push(number\
    \ % 100000000000000000000000)", "    if number < 1 || number > 1000 \n       \
    \ error(\"Invalid input\")\n    else \n        roman = roman_to_int(roman_to_str(int_to_roman(number)))\n\
    \        return roman_to_str(roman)\nend", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    for roman_numeral in roman_numerals\n\
    \        if number >= roman_numeral\n            roman = roman_numeral + roman\n\
    \            number -= roman_numeral\n        end\n    end\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    roman = roman_numeral(number)\n   \
    \ roman = roman.lower()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"\
    XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed.reverse()\n    \n    if number\
    \ == 0 \n        return roman\n    \n    if number < 0 \n        error(\"Invalid\
    \ input\")\n    \n    if number < 100\n        roman = roman_numerals[number]\n\
    \        return roman\n    \n    if number < 500\n        roman = roman_numerals[number/100]\
    \ + roman_numerals[number%100]\n        return roman\n    \n    if number < 1000\n\
    \        roman = roman_numerals[number/1000] + roman_numerals[number%1000] + roman_numerals[number%100]\n\
    \        return roman\n    \n    if number < 5000\n        roman = roman_numerals[number/10000]\
    \ + roman_numerals[number%10000] + roman_numerals[number%1000] + roman_numerals[number%100]\
    \ + roman_numerals[number%10]\n        return roman\n    \n    if number < 10000\n\
    \        roman = roman_numerals[number/100000] + roman_numerals[number%100000]\
    \ + roman_numerals[number%10000] + roman_numerals[number%1000] + roman_numerals[number%100]\
    \ + roman_numerals[number%10] + roman_numerals[number%1]\n        return roman\n\
    \    \n    if number < 100000\n        roman = roman_numerals[number/1000000]\
    \ + roman_numerals[number%1000000] + roman_numerals[number%100000] + roman_numerals[number%10000]\
    \ + roman_numerals[number%10000] + roman_numerals[number%1000] + roman_numerals[number%100]\
    \ + roman_numerals[number%10] + roman_numerals[number%1]\n        return roman\n\
    \    \n    if number < 1000000\n        roman = roman_numerals[number/10000000]\
    \ + roman_numerals[number%10000000] + roman_numerals[number%1000000] + roman_numerals[number%100000]\
    \ + roman_numerals[number%10000] + ", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 1000 \n        then return int_to_mini_roman(number / 10) + int_to_mini_roman(number\
    \ % 10)\n    else \n        roman_numerals = roman_numerals_table()\n        roman_numerals_len\
    \ = length(roman_numerals)\n        roman_numerals_len = roman_numerals_len -\
    \ 2\n        roman_numerals_len = roman_numerals_len % roman_numerals_len\n  \
    \      roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len % roman_numerals_len\n        roman_numerals_len = roman_numerals_len\
    \ + 2\n        roman_numerals_len = roman_numerals_len % roman_numerals_len\n\
    \        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len % roman_numerals_len\n        roman_numerals_len = roman_numerals_len\
    \ + 2\n        roman_numerals_len = roman_numerals_len % roman_numerals_len\n\
    \        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len % roman_numerals_len\n        roman_numerals_len = roman_numerals_len\
    \ + 2\n        roman_numerals_len = roman_numerals_len % roman_numerals_len\n\
    \        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len % roman_numerals_len\n        roman_numerals_len = roman_numerals_len\
    \ + 2\n        roman_numerals_len = roman_numerals_len % roman_numerals_len\n\
    \        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len % roman_numerals_len\n        roman_numerals_len = roman_numerals_len\
    \ + 2\n        roman_numerals_len = roman_numerals_len % roman_numerals_len\n\
    \        roman_numerals_len = roman_numerals_len + 2\n        roman_", "    roman\
    \ = roman_to_int(\"MCMXCIV\")\n    roman = roman[roman.index(\"M\") + 1 : roman.index(\"\
    C\")]\n    roman = roman[roman.index(\"D\") + 1 : roman.index(\"X\")]\n    roman\
    \ = roman[roman.index(\"L\") + 1 : roman.index(\"V\")]\n    roman = roman[roman.index(\"\
    I\") + 1 : roman.index(\"I\")]\n    roman = roman[roman.index(\"X\") + 1 : roman.index(\"\
    V\")]\n    roman = roman[roman.index(\"V\") + 1 : roman.index(\"I\")]\n    roman\
    \ = roman[roman.index(\"I\") + 1 : roman.index(\"M\")]\n    roman = roman[roman.index(\"\
    M\") + 1 : roman.index(\"C\")]\n    roman = roman[roman.index(\"C\") + 1 : roman.index(\"\
    L\")]\n    roman = roman[roman.index(\"L\") + 1 : roman.index(\"X\")]\n    roman\
    \ = roman[roman.index(\"X\") + 1 : roman.index(\"L\")]\n    roman = roman[roman.index(\"\
    L\") + 1 : roman.index(\"C\")]\n    roman = roman[roman.index(\"C\") + 1 : roman.index(\"\
    M\")]\n    roman = roman[roman.index(\"M\") + 1 : roman.index(\"M\")]\n    roman\
    \ = roman[roman.index(\"M\") + 1 : roman.index(\"C\")]\n    roman = roman[roman.index(\"\
    C\") + 1 : roman.index(\"D\")]\n    roman = roman[roman.index(\"D\") + 1 : roman.index(\"\
    L\")]\n    roman = roman[roman.index(\"L\") + 1 : roman.index(\"X\")]\n    roman\
    \ = roman[roman.index(\"X\") + 1 : roman.index(\"L\")]\n    roman = roman[roman.index(\"\
    L\") + 1 : roman.index(\"C\")]\n    roman = roman[roman.index(\"C\") + 1 : ",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman = roman_numeral + roman\n            number -= roman_numeral\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = roman_to_mini_roman(number)\n    roman = roman.lower()\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals = Dict(\"\
    I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\",\
    \ \"D\" => \"d\", \"M\" => \"m\")\n    roman_numerals_reverse = Dict(\"i\" =>\
    \ \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\", \"d\"\
    \ => \"D\", \"m\" => \"M\")\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"", "    if number == 0 \n        then return \"0\"\n    else if number\
    \ < 0 \n        then return \"-\"\n    else if number < 1000 \n        then return\
    \ int_to_mini_roman(number / 10) + int_to_mini_roman(number % 10)\n    else if\
    \ number < 10000 \n        then return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 10)\n    else if number < 100000 \n    \
    \    then return int_to_mini_roman(number / 1000) + int_to_mini_roman(number %\
    \ 1000) + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n \
    \   else if number < 1000000 \n        then return int_to_mini_roman(number /\
    \ 10000) + int_to_mini_roman(number % 10000) + int_to_mini_roman(number % 1000)\
    \ + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 10)\n    else\
    \ if number < 10000000 \n        then return int_to_mini_roman(number / 100000)\
    \ + int_to_mini_roman(number % 100000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number\
    \ % 100) + int_to_mini_roman(number % 10)\n    else if number < 100000000 \n \
    \       then return int_to_mini_roman(number / 1000000) + int_to_mini_roman(number\
    \ % 1000000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 100)\
    \ + int_to_mini_roman(number % 10)\n    else if number < 1000000000 \n       \
    \ then return int_to_mini_roman(number / 10000000) + int_to_mini_roman(number\
    \ % 10000000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number %\
    \ 100) + int_to_mini_roman(number % 10)\n    else if number < 10000000000 \n \
    \       then return int_to_mini_roman(number / 100000000) + int_to_mini_roman(number\
    \ % 100000000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number %\
    \ 100) + int_to_mini_roman(number % 10)\n    else if number < 100000000000 \n\
    \        then return int_to_mini_roman(number ", "    roman = roman_to_int(number)\n\
    \    roman = roman.map(|x| char_to_mini_roman(x))\n    roman = roman.map(|x| x.to_string())\n\
    \    roman = roman.map(|x| x.to_lowercase())\n    roman = roman.map(|x| x.to_uppercase())\n\
    \    roman = roman.map(|x| x.to_ascii_lowercase())\n    roman = roman.map(|x|\
    \ x.to_ascii_uppercase())\n    roman = roman.map(|x| x.to_digit())\n    roman\
    \ = roman.map(|x| x.to_digit(10))\n    roman = roman.map(|x| x.to_digit(16))\n\
    \    roman = roman.map(|x| x.to_digit(20))\n    roman = roman.map(|x| x.to_digit(26))\n\
    \    roman = roman.map(|x| x.to_digit(30))\n    roman = roman.map(|x| x.to_digit(36))\n\
    \    roman = roman.map(|x| x.to_digit(42))\n    roman = roman.map(|x| x.to_digit(48))\n\
    \    roman = roman.map(|x| x.to_digit(54))\n    roman = roman.map(|x| x.to_digit(60))\n\
    \    roman = roman.map(|x| x.to_digit(66))\n    roman = roman.map(|x| x.to_digit(72))\n\
    \    roman = roman.map(|x| x.to_digit(78))\n    roman = roman.map(|x| x.to_digit(84))\n\
    \    roman = roman.map(|x| x.to_digit(90))\n    roman = roman.map(|x| x.to_digit(98))\n\
    \    roman = roman.map(|x| x.to_digit(104))\n    roman = roman.map(|x| x.to_digit(110))\n\
    \    roman = roman.map(|x| x.to_digit(116))\n    roman = roman.map(|x| x.to_digit(122))\n\
    \    roman = roman.map(|x| x.to_digit(128))\n    roman = roman.map(|x", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n\
    \        roman = roman_numeral(number)\n        roman = roman.lower()\n      \
    \  return roman\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ == 0 \n        then return \"0\"\n    else if number < 0 \n        then return\
    \ \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"?\"\nend\n</cell>\n<code language=julia-1.5>", "    roman_numerals\
    \ = roman_numerals()\n    roman_numerals_map = roman_numerals_map()\n    roman_numerals_map[\"\
    x\"] = \"x\"\n    roman_numerals_map[\"c\"] = \"c\"\n    roman_numerals_map[\"\
    d\"] = \"d\"\n    roman_numerals_map[\"m\"] = \"m\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    x\"] = \"x\"\n    roman_numerals_map[\"c\"] = \"c\"\n    roman_numerals_map[\"\
    d\"] = \"d\"\n    roman_numerals_map[\"m\"] = \"m\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    x\"] = \"x\"\n    roman_numerals_map[\"c\"] = \"c\"\n    roman_numerals_map[\"\
    d\"] = \"d\"\n    roman_numerals_map[\"m\"] = \"m\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    x\"] = \"x\"\n    roman_numerals_map[\"c\"] = \"c\"\n    roman_numerals_map[\"\
    d\"] = \"d\"\n    roman_numerals_map[\"m\"] = \"m\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    roman_numerals_map[\"\
    l\"] = \"l\"\n    roman_numerals_map[\"n\"] = \"n\"\n    roman_numerals_map[\"\
    x\"] = \"x\"\n    roman_numerals_map[\"c\"] = \"c\"\n    roman_numerals_map[\"\
    d\"] = \"d\"\n    roman_numerals_map[\"m\"] = \"m\"\n    roman_numerals_map[\"\
    i\"] = \"i\"\n    roman_numerals_map[\"v\"] = \"v\"\n    ", "    if number < 1\
    \ || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_string = \"\"\n    for roman_numeral\
    \ in roman_numerals\n        if roman_numerals[roman_numeral] == number\n    \
    \        roman_numerals_string += roman_numeral\n        end\n    end\n    return\
    \ roman_numerals_string\nend\n</cell>\n<code language=julia-1.5>", "    roman_numerals\
    \ = roman_numerals()\n    roman_numerals_map = roman_numerals_map()\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)\n\
    \    roman_numerals_map.keys.map(roman_numerals_map.get)\n    roman_numerals_map.keys.map(roman_numerals_map.get)",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    else \n        roman_numerals = roman_numerals_table()\n\
    \        roman_numerals_length = length(roman_numerals)\n        roman_numerals_index\
    \ = roman_numerals_length - 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index\
    \ -= 1\n        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n\
    \        roman_numerals_index -= 1\n        roman_numerals_index -= 1\n      \
    \  roman_numerals_index -= 1\n        roman_numeral", "    roman = roman_to_mini_roman(number)\n\
    \    roman = roman.substring(0,roman.length-1)\n    return roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    roman = \"\"\n    roman_numerals = [\n      \
    \  \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\",\
    \ \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed = [\n        \"M\"\
    , \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"\
    IV\", \"I\"\n    ]\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed\
    \ = reverse(roman_numerals_reversed)\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_", "    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"\
    CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n   \
    \ roman_numerals_reverse = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\"\
    , \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    \n    if number < 0 or number\
    \ > 1000 then\n        error(\"Invalid number\")\n    end", "    if number < 1\
    \ || number > 1000 \n        error(\"Invalid input\")\n    else \n        roman\
    \ = roman_to_int(roman_to_roman(int_to_roman(number)))\n        roman = roman.substring(0,roman.length-1)\n\
    \        return roman\nend", "    if number < 1 || number > 1000\n        error(\"\
    Int must be between 1 and 1000\")\n    end\n    roman = Int64[]\n    roman[1]\
    \ = [\"M\"]\n    roman[2] = [\"D\", \"C\", \"L\", \"X\", \"V\", \"I\"]\n    roman[3]\
    \ = [\"M\", \"C\", \"D\", \"L\", \"X\", \"V\", \"I\"]\n    roman[4] = [\"M\",\
    \ \"C\", \"D\", \"L\", \"X\", \"V\"]\n    roman[5] = [\"M\", \"C\", \"D\", \"\
    L\", \"X\"]\n    roman[6] = [\"M\", \"C\", \"D\", \"L\"]\n    roman[7] = [\"M\"\
    , \"C\", \"D\"]\n    roman[8] = [\"M\", \"C\", \"D\", \"L\", \"X\", \"V\", \"\
    I\"]\n    roman[9] = [\"M\", \"C\", \"D\", \"L\", \"X\", \"V\"]\n    roman[10]\
    \ = [\"M\", \"C\", \"D\", \"L\", \"X\"]\n    roman[11] = [\"M\", \"C\", \"D\"\
    , \"L\"]\n    roman[12] = [\"M\", \"C\", \"D\"]\n    roman[13] = [\"M\", \"C\"\
    , \"D\", \"L\", \"X\", \"V\", \"I\"]\n    roman[14] = [\"M\", \"C\", \"D\", \"\
    L\", \"X\", \"V\"]\n    roman[15] = [\"M\", \"C\", \"D\", \"L\", \"X\"]\n    roman[16]\
    \ = [\"M\", \"C\", \"D\", \"L\"]\n    roman[17] = [\"M\", \"C\", \"D\"]\n    roman[18]\
    \ = [\"M\", \"C\", \"D\", \"L\", \"X\", \"V\", \"I\"]\n    roman[19] = [\"M\"\
    , \"C\", \"D\", \"L\", \"X\", \"V\"]\n    roman[20] = [\"M\", \"C\", \"D\", \"\
    L\", \"X\"]\n    roman[21] = [\"M\", \"C\", \"D\", \"L\"]\n    roman[22] = [\"\
    M\", \"C\", \"D\"]\n    roman[23] = [\"M\", \"C\", \"D\", \"L\", \"X\", \"V\"\
    , \"I\"]\n    roman[24] = [\"M\", \"C\", \"D\", \"L\", \"X\", \"V\"]\n    roman[25]\
    \ = [\"M\", \"C\", \"D\", \"L\", \"X\"]\n    roman[26] = [\"M\", \"C\", \"D\"\
    , \"L\"]\n    roman[27] = [\"M\", \"C\", \"D\"]\n    roman[28] = [\"M\", \"C\"\
    , \"D\", \"L\", \"X\", \"V\", \"I", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"?\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its decimal equivalent as a string,\n    and return it in lowercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000 \n \
    \       error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_digits\
    \ = Int64[]\n    roman_digits[1] = \"M\"\n    roman_digits[2] = \"CM\"\n    roman_digits[3]\
    \ = \"D\"\n    roman_digits[4] = \"CD\"\n    roman_digits[5] = \"C\"\n    roman_digits[6]\
    \ = \"XC\"\n    roman_digits[7] = \"L\"\n    roman_digits[8] = \"XL\"\n    roman_digits[9]\
    \ = \"X\"\n    roman_digits[10] = \"IX\"\n    roman_digits[11] = \"V\"\n    roman_digits[12]\
    \ = \"IV\"\n    roman_digits[13] = \"I\"\n    roman_digits[14] = \"IU\"\n    roman_digits[15]\
    \ = \"U\"\n    roman_digits[16] = \"UU\"\n    roman_digits[17] = \"U\"\n    roman_digits[18]\
    \ = \"UU\"\n    roman_digits[19] = \"M\"\n    roman_digits[20] = \"MM\"\n    roman_digits[21]\
    \ = \"MMM\"\n    roman_digits[22] = \"MMMM\"\n    roman_digits[23] = \"MMMMM\"\
    \n    roman_digits[24] = \"MMMMMM\"\n    roman_digits[25] = \"MMMMMMM\"\n    roman_digits[26]\
    \ = \"MMMMMMMM\"\n    roman_digits[27] = \"MMMMMMMMM\"\n    roman_digits[28] =\
    \ \"MMMMMMMMMM\"\n    roman_digits[29] = \"MMMMMMMMMMM\"\n    roman_digits[30]\
    \ = \"MMMMMMMMMMMM\"\n    roman_digits[31] = \"MMMMMMMMMMMMM\"\n    roman_digits[32]\
    \ = \"MMMMMMMMMMMMMM\"\n    roman_digits[33] = \"MMMMMMMMMMMMMMM\"\n    roman_digits[34]\
    \ = \"MMMMMMMMMMMMMMMM\"\n    roman_digits[35] = \"MMMMMMMMMMMMMMMMM\"\n    roman_digits[36]\
    \ = \"MMMMMMMMMMMMMMMMMM\"\n    roman_digits[37] = \"MMMMMMMMMMMMMMMMMMM\"\n \
    \   roman_digits[38] = \"MMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[39] = \"MMMMMMMMMMMMMMMMMMMMM\"\
    \n    roman_digits[40] = \"MMMMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[41] = \"\
    MMMMMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[42] = \"MMMMMMMMMMMMMMMMMMMMMMMM\"",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"\", \"c\", \"l\", \"i\", \"x\", \"\
    vi\", \"l\", \"x\"]\n    roman_numerals_reversed = [\"\", \"x\", \"vi\", \"l\"\
    , \"x\",\"l\", \"i\", \"c\"]\n    roman_numerals_reversed[1] = roman_numerals[1]\n\
    \    roman_numerals_reversed[2] = roman_numerals[2]\n    roman_numerals_reversed[3]\
    \ = roman_numerals[3]\n    roman_numerals_reversed[4] = roman_numerals[4]\n  \
    \  roman_numerals_reversed[5] = roman_numerals[5]\n    roman_numerals_reversed[6]\
    \ = roman_numerals[6]\n    roman_numerals_reversed[7] = roman_numerals[7]\n  \
    \  roman_numerals_reversed[8] = roman_numerals[8]\n    roman_numerals_reversed[9]\
    \ = roman_numerals[9]\n    roman_numerals_reversed[10] = roman_numerals[10]\n\
    \    roman_numerals_reversed[11] = roman_numerals[11]\n    roman_numerals_reversed[12]\
    \ = roman_numerals[12]\n    roman_numerals_reversed[13] = roman_numerals[13]\n\
    \    roman_numerals_reversed[14] = roman_numerals[14]\n    roman_numerals_reversed[15]\
    \ = roman_numerals[15]\n    roman_numerals_reversed[16] = roman_numerals[16]\n\
    \    roman_numerals_reversed[17] = roman_numerals[17]\n    roman_numerals_reversed[18]\
    \ = roman_numerals[18]\n    roman_numerals_reversed[19] = roman_numerals[19]\n\
    \    roman_numerals_reversed[20] = roman_numerals[20]\n    roman_numerals_reversed[21]\
    \ = roman_numerals[21]\n    roman_numerals_reversed[22] = roman_numerals[22]\n\
    \    roman_numerals_reversed[23] = roman_numerals[23]\n    roman_numerals_reversed[24]\
    \ = roman_numerals[24]\n    roman_numerals_reversed[25] = roman_numerals[25]\n\
    \    roman_numerals_reversed[26] = ro", "    if number < 1 || number > 1000 \n\
    \        error(\"Invalid input\")\n    else \n        roman = roman_numeral(number)\n\
    \        roman = roman.lower()\n        return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 \n        error(\"Invalid input: number must be positive\")\n\
    \    else if number < 1000 \n        return roman_to_mini_roman(number)\n    else\
    \ \n        error(\"Invalid input: number must be <= 1000\")\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 \n        error(\"The number must be positive\"\
    )\n    else if number < 1000 \n        return roman_to_mini_roman(number)\n  \
    \  else \n        error(\"The number must be between 1 and 1000\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Number must be between 1 and 1000\")\n    end\n    roman_numerals = roman_numerals(number)\n\
    \    roman_numerals = roman_numerals.map(&lowercase)\n    roman_numerals = roman_numerals.map(&roman_numeral)\n\
    \    roman_numerals = roman_numerals.join(\"\")\n    return roman_numerals\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000\n        then return int_to_mini_roman(number/10000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 100000\n        then return int_to_mini_roman(number/100000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000000\n        then return int_to_mini_roman(number/1000000) + int_to_mini_roman(number%1000000)\
    \ + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 10000000\n        then return int_to_mini_roman(number/10000000) +\
    \ int_to_mini_roman(number%10000000) + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000\n        then\
    \ return int_to_mini_roman(number/100000000) + int_to_mini_roman(", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_table = roman_numerals[roman_numerals.keys[roman_numerals.keys.length\
    \ - 1]]\n    roman_numerals_table = roman_numerals_table[1:roman_numerals_table.length]\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse()\n\
    \    roman_numerals_table = roman_numerals_table.reverse()\n    roman_numerals_table\
    \ = roman_numerals_table.reverse()\n    roman_numerals_table = roman_numerals_table.reverse",
  "    roman_numerals = roman_numerals_table()\n    roman_numerals_length = roman_numerals.length\n\
    \    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numeral", "    if number == 0 \n    \
    \    then return \"0\"\n    else if number < 0 \n        then return \"-\"\n \
    \   else if number < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</code>\n<|/ a tags=julia,roman-numerals |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `int_to_mini_roman(-10)` returns `\"--\"` instead\
    \ of `\"--x\"`.\n<|/ c |>\n<| a tags=julia,roman-numerals |>\n<code>", "    roman\
    \ = \"\"\n    roman_digits = \"\"\n    roman_digits_count = 0\n    roman_digit_count\
    \ = 1\n    roman_digit_count_prev = 1\n    roman_digit_count_prev2 = 1\n    roman_digit_count_prev3\
    \ = 1\n    roman_digit_count_prev4 = 1\n    roman_digit_count_prev5 = 1\n    roman_digit_count_prev6\
    \ = 1\n    roman_digit_count_prev7 = 1\n    roman_digit_count_prev8 = 1\n    roman_digit_count_prev9\
    \ = 1\n    roman_digit_count_prev10 = 1\n    roman_digit_count_prev11 = 1\n  \
    \  roman_digit_count_prev12 = 1\n    roman_digit_count_prev13 = 1\n    roman_digit_count_prev14\
    \ = 1\n    roman_digit_count_prev15 = 1\n    roman_digit_count_prev16 = 1\n  \
    \  roman_digit_count_prev17 = 1\n    roman_digit_count_prev18 = 1\n    roman_digit_count_prev19\
    \ = 1\n    roman_digit_count_prev20 = 1\n    roman_digit_count_prev21 = 1\n  \
    \  roman_digit_count_prev22 = 1\n    roman_digit_count_prev23 = 1\n    roman_digit_count_prev24\
    \ = 1\n    roman_digit_count_prev25 = 1\n    roman_digit_count_prev26 = 1\n  \
    \  roman_digit_count_prev27 = 1\n    roman_digit_count_prev28 = 1\n    roman_digit_count_prev29\
    \ = 1\n    roman_digit_count_prev30 = 1\n    roman_digit_count_prev31 = 1\n  \
    \  roman_digit_count_prev32 = 1\n    roman_digit_count_prev33 = 1\n    roman_digit_count_prev34\
    \ = 1\n    roman_digit_count_prev35 = 1\n    roman_digit_count_prev36 = 1\n  \
    \  roman_digit_count_prev37 = 1\n    roman_digit_count_prev38 = 1\n    roman_digit_count_prev39\
    \ = 1\n    roman_digit_count_prev40 = 1\n    roman_digit_count_prev41 = 1\n  \
    \  roman_digit_count_prev42 = 1\n    roman_digit_count_prev43 = 1\n    roman_digit_count_prev44\
    \ = 1\n    roman_digit_count_prev45 = 1\n    roman_digit_count_prev46 = 1\n  \
    \  roman_digit_count_prev47 = 1\n    roman_digit_count_prev48 = 1\n    roman_digit_count_prev49\
    \ = 1\n    roman_digit_count_prev50 = 1\n    roman_digit_count_prev51 = 1\n  \
    \  roman_digit_count_prev52 = 1\n    roman_digit_count_prev53 = 1\n    ", "  \
    \  if number < 1 || number > 1000\n        error(\"number must be between 1 and\
    \ 1000\")\n    end\n    roman = roman_numerals(number)\n    roman = roman.map(x\
    \ => x.lower)\n    return roman.join(\"\")\nend", "    if number == 0 \n     \
    \   return \"0\"\n    if number < 0 \n        return \"0\"\n    if number < 1000\
    \ \n        return int_to_mini_roman(number / 10) + int_to_mini_roman(number %\
    \ 10) + int_to_mini_roman(number % 100)\n    \n    mini_roman = int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100)\n    if number % 100 < 10 \n      \
    \  return mini_roman + int_to_mini_roman(number % 10)\n    \n    return mini_roman\
    \ + int_to_mini_roman(number % 10)\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman_numerals\
    \ = [\n        \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\"\
    , \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\"\
    , \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\", \"XXIII\", \"XXIV\", \"XXV\"\
    , \"XXVI\", \"XXVII\", \"XXVIII\", \"XXIX\", \"XXX\", \"XXXI\", \"XXXII\", \"\
    XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"XXXVII\", \"XXXVIII\", \"XXXIX\",\
    \ \"XL\", \"L\", \"LI\", \"LII\", \"LII\", \"LIII\", \"LIV\", \"LV\", \"LVI\"\
    , \"LVII\", \"LVIII\", \"LIX\", \"LX\", \"LXI\", \"LXII\", \"LXIII\", \"LXIV\"\
    , \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\"\
    , \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\"\
    , \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIV\", \"LXXXV\", \"LXXXVI\"\
    , \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\", \"CI\", \"CII\", \"CII\"\
    , \"CIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"CIX\", \"CX\", \"\
    CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\"\
    , \"CXIX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\", \"CXXV\", \"\
    CXXVI\", \"CXXVII\", \"CXXVIII\", \"CXXIX\", \"CXXX\", \"CXXXI\", \"CXXXII\",\
    \ \"CXXXIII\", \"CXXXIV\", \"CXXXV\", \"CXXXVI\", \"CXXXVII\", \"CXXXVIII\", \"\
    CXXXIX\", \"CC\", \"CCI\", \"CCII\", \"CCIII\", \"CCIV\", \"CV\", \"CVI\", \"\
    CVII\", \"CVIII\", \"CIX\", \"CX\", \"CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"\
    CXV\", \"CXVI\", \"CXVII\", \"CXV", "    if number < 1 || number > 1000\n    \
    \    error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n \
    \   roman = roman.map(&:to_lowercase)\n    roman = roman.map(&:capitalize)\n \
    \   roman = roman.join\n    return roman\nend", "    roman = roman_to_int(number)\n\
    \    roman = roman.to_string()\n    roman = roman.chars()\n    roman = roman.map(&:to_lowercase)\n\
    \    roman = roman.join()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number == 0 \n        then return \"0\"\n    else if number == 1 \n    \
    \    then return \"x\"\n    else if number == 2 \n        then return \"xx\"\n\
    \    else if number == 3 \n        then return \"xxx\"\n    else if number ==\
    \ 4 \n        then return \"xxxx\"\n    else if number == 5 \n        then return\
    \ \"xxxxx\"\n    else if number == 6 \n        then return \"xxxxxx\"\n    else\
    \ if number == 7 \n        then return \"xxxxxxx\"\n    else if number == 8 \n\
    \        then return \"xxxxxxxx\"\n    else if number == 9 \n        then return\
    \ \"xxxxxxxxx\"\n    else if number == 10 \n        then return \"xxxxxxxxxx\"\
    \n    else if number == 11 \n        then return \"xxxxxxxxxxx\"\n    else if\
    \ number == 12 \n        then return \"xxxxxxxxxxxx\"\n    else if number == 13\
    \ \n        then return \"xxxxxxxxxxxxx\"\n    else if number == 14 \n       \
    \ then return \"xxxxxxxxxxxxxx\"\n    else if number == 15 \n        then return\
    \ \"xxxxxxxxxxxxxxx\"\n    else if number == 16 \n        then return \"xxxxxxxxxxxxxxxx\"\
    \n    else if number == 17 \n        then return \"xxxxxxxxxxxxxxxxx\"\n    else\
    \ if number == 18 \n        then return \"xxxxxxxxxxxxxxxxxx\"\n    else if number\
    \ == 19 \n        then return \"xxxxxxxxxxxxxxxxxxx\"\n    else if number == 20\
    \ \n        then return \"xxxxxxxxxxxxxxxxxxxx\"\n    else if number == 21 \n\
    \        then return \"xxxxxxxxxxxxxxxxxxxxx\"\n    else if number == 22 \n  \
    \      then return \"xxxxxxxxxxxxxxxxxxxxxx\"\n    else if number == 23 \n   \
    \     then return \"xxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number == 24 \n   \
    \     then return \"xxxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number == 25 \n  \
    \      then return \"xxxxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number == 26 \n\
    \        then return \"xxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number == 27\
    \ \n        then return \"xxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number ==\
    \ 28 \n        then return \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number\
    \ == 29 \n        then return \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    else if number ",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   roman_numerals_reversed = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[roman_numerals.size - roman_numerals.indices(number)]\n\
    \    roman_numerals_reversed = ro", "    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_len = length(roman_numerals)\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len\
    \ = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len - 1\n\
    \    roman_numerals_len = roman_numerals_len - 1\n    roman_numerals_len = roman_numerals_len\
    \ - 1\n    roman_numerals_len = roman_numerals_len - 1\n    roman_numer", "  \
    \  if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    for roman_numeral\
    \ in roman_numerals\n        if number >= roman_numeral\n            roman = roman_numeral\
    \ + roman\n            number -= roman_numeral\n        end\n    end\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    if number == 0 \n    \
    \    then return \"0\"\n    else if number < 0 \n        then return \"-\"\n \
    \   else if number < 100\n        then return int_to_mini_roman(number//10) +\
    \ int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number//100) + int_to_mini_roman(number%100) + int_to_mini_roman(number//10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 1000\n        then return\
    \ int_to_mini_roman(number//1000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number//100)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n\
    \    else return \"?\"\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman\
    \ = romans[number]\n    roman = roman.split(\"\")\n    roman = roman.map(&:capitalize)\n\
    \    roman = roman.join(\"\")\n    return roman\nend\n</code>\n<|/ a tags=julia,roman-numerals\
    \ |>\n<| a tags=julia,roman-numerals |>\nI wrote a package to do this in Julia.\
    \ \nhttps://github.com/jamie-may/roman-numerals\n<code>\nusing RomanNumerals",
  "    if number < 1 || number > 1000 \n        error(\"number must be between 1 and\
    \ 1000\")\n    else\n        roman = roman_to_int(\"MCMXCIV\")\n        roman\
    \ = roman * number // 1000\n        roman = roman_to_int(\"M\") + roman\n    \
    \    roman = roman * number % 1000\n        roman = roman_to_int(\"CM\") + roman\n\
    \        roman = roman * number % 1000\n        roman = roman_to_int(\"D\") +\
    \ roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    CD\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    C\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    XC\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    L\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    XL\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    X\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    IX\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    V\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    IV\") + roman\n        roman = roman_to_int(\"I\") + roman\n        return roman_to_lower(roman)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number == 0 \n \
    \       then return \"0\"\n    else if number < 0 \n        then return \"-\"\n\
    \    else if number < 1000 \n        then return int_to_mini_roman(number / 100)\
    \ + int_to_mini_roman(number % 100)\n    else if number < 1000000 \n        then\
    \ return int_to_mini_roman(number / 1000) + int_to_mini_roman(number % 1000) +\
    \ int_to_mini_roman(number / 1000000) + int_to_mini_roman(number % 1000000)\n\
    \    else if number < 1000000000 \n        then return int_to_mini_roman(number\
    \ / 1000000) + int_to_mini_roman(number % 1000000) + int_to_mini_roman(number\
    \ / 1000000000) + int_to_mini_roman(number % 1000000000)\n    else if number <\
    \ 1000000000000 \n        then return int_to_mini_roman(number / 1000000000) +\
    \ int_to_mini_roman(number % 1000000000) + int_to_mini_roman(number / 1000000000000)\
    \ + int_to_mini_roman(number % 1000000000000)\n    else if number < 1000000000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000000) + int_to_mini_roman(number\
    \ % 1000000000000) + int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000)\n    else if number < 1000000000000000000 \n        then\
    \ return int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000) + int_to_mini_roman(number / 1000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000)\n    else if number < 1000000000000000000000 \n     \
    \   then return int_to_mini_roman(number / 1000000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000000) + int_to_mini_roman(number / 1000000000000000000000000)\
    \ + int_to_mini_roman(number % 1000000000000000000000000)\n    else if number\
    \ < 10000000000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000000000000000000000) + int_to_mini_roman(number % 10000000000000000000000000)\
    \ + int_to_mini_roman(number / 10000000000000000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000000000000000)\n    else if number < 10000000000000000000000000000000\
    \ \n        then return int_to_mini_", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"?\"\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input: number must be between 1 and 1000\"\
    )\n    else\n        roman = roman_numerals(number)\n        roman = roman.map(&lowercase)\n\
    \        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"i\"\
    ))\n        roman = roman.map(&char(\"c\"))\n        roman = roman.map(&char(\"\
    d\"))\n        roman = roman.map(&char(\"v\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    i\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = roman.map(&char(\"\
    l\"))\n        roman = roman.map(&char(\"x\"))\n        roman = ro", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman_numerals = roman_numerals_list(number)\n        roman_numerals_str = roman_numerals.join(\"\
    \")\n        roman_numerals_str = roman_numerals_str.lower()\n        return roman_numerals_str\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    for roman_numeral in roman_numerals\n        if number\
    \ >= roman_numeral\n            roman = roman_numeral + roman\n            number\
    \ -= roman_numeral\n        end\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if number == 0\n        \"\"\n    elseif number ==\
    \ 1\n        \"x\"\n    elseif number == 2\n        \"xx\"\n    elseif number\
    \ == 3\n        \"xxx\"\n    elseif number == 4\n        \"XL\"\n    elseif number\
    \ == 5\n        \"LX\"\n    elseif number == 6\n        \"LXX\"\n    elseif number\
    \ == 7\n        \"LXXX\"\n    elseif number == 8\n        \"XC\"\n    elseif number\
    \ == 9\n        \"XC\"\n    elseif number == 10\n        \"XXL\"\n    elseif number\
    \ == 11\n        \"XXXL\"\n    elseif number == 12\n        \"XXXXL\"\n    elseif\
    \ number == 13\n        \"XLXL\"\n    elseif number == 14\n        \"XLL\"\n \
    \   elseif number == 15\n        \"XLLL\"\n    elseif number == 16\n        \"\
    XXC\"\n    elseif number == 17\n        \"XXCC\"\n    elseif number == 18\n  \
    \      \"XXCCC\"\n    elseif number == 19\n        \"XXCCCX\"\n    elseif number\
    \ == 20\n        \"XXCCCX\"\n    elseif number == 21\n        \"XXCCCX\"\n   \
    \ elseif number == 22\n        \"XXCCCX\"\n    elseif number == 23\n        \"\
    XXCCCX\"\n    elseif number == 24\n        \"XXCCCX\"\n    elseif number == 25\n\
    \        \"XXCCCX\"\n    elseif number == 26\n        \"XXCCCX\"\n    elseif number\
    \ == 27\n        \"XXCCCX\"\n    elseif number == 28\n        \"XXCCCX\"\n   \
    \ elseif number == 29\n        \"XXCCCX\"\n    elseif number == 30\n        \"\
    XXCCCX\"\n    elseif number == 31\n        \"XXCCCX\"\n    elseif number == 32\n\
    \        \"XXCCCX\"\n    elseif number == 33\n        \"XXCCCX\"\n    elseif number\
    \ == 34\n        \"XXCCCX\"\n    elseif number == 35\n        \"XXCCCX\"\n   \
    \ elseif number == 36\n        \"XXCCCX\"\n    elseif number == 37\n        \"\
    XXCCCX\"\n    elseif number == 38\n        \"XXCCCX\"\n    elseif number == 39\n\
    \        \"XXCCCX\"\n    elseif number == 40\n        \"XXCCCX\"\n    elseif number\
    \ == 41\n        \"XXCCCX\"\n    elseif number == 42\n        \"XXCCCX\"\n   \
    \ elseif number == 43\n        \"XXCCCX\"\n    elseif number == 44\n        \"\
    XXCC", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman = \"\"\n    roman_numerals = roman_numerals()\n    for roman_numeral\
    \ in roman_numerals\n        if number % roman_numeral == 0\n            roman\
    \ = roman_numeral + roman\n            number /= roman_numeral\n            break\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ < 1000 \n        return roman_to_mini_roman(number)\n    else \n        error(\"\
    number too large\")\nend", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman_numerals = roman_numerals_table()\n    roman_numerals_length\
    \ = length(roman_numerals)\n    roman_numerals_index = 0\n    roman_numerals_index_length\
    \ = length(roman_numerals_index)\n    roman_numerals_index_string = \"\"\n   \
    \ roman_numerals_index_string_length = length(roman_numerals_index_string)\n \
    \   roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numerals_index_string)\n    roman_numerals_index_string = \"\"\
    \n    roman_numerals_index_string_length = length(roman_numerals_index_string)\n\
    \    roman_numerals_index_string = \"\"\n    roman_numerals_index_string_length\
    \ = length(roman_numer", "    if number < 1 || number > 1000\n        error(\"\
    number must be between 1 and 1000\")\n    end\n    roman = romans[number]\n  \
    \  roman = roman.substring(0,roman.length-1)\n    return roman\nend", "    if\
    \ number == 0 \n        then return \"0\"\n    else if number < 0 \n        then\
    \ return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else return \"Error\"\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number == 0\n        \"\"\n    else\n        roman = roman_numeral(number)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(1,roman.length)\n\
    \        roman = roman.substring(0,1)\n        roman = roman", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman = \"\"\n        roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n        roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n        roman_numerals_reverse.reverse()\n        for\
    \ roman_numeral in roman_numerals \n            roman_numeral_count = roman_numerals.index(roman_numeral)\n\
    \            roman_numeral_count -= 1\n            roman_numeral_count %= len(roman_numerals)\n\
    \            roman += roman_numerals[roman_numeral_count]\n            roman_numerals[roman_numeral_count]\
    \ = roman_numerals[roman_numeral_count + 1]\n            roman_numerals[roman_numeral_count\
    \ + 1] = \"\"\n        roman = roman.strip() + roman_numerals[0]\n        return\
    \ roman\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ Int64[]\n    roman[1] = convert(1)\n    roman[2] = convert(2)\n    roman[3]\
    \ = convert(3)\n    roman[4] = convert(4)\n    roman[5] = convert(5)\n    roman[6]\
    \ = convert(6)\n    roman[7] = convert(7)\n    roman[8] = convert(8)\n    roman[9]\
    \ = convert(9)\n    roman[10] = convert(10)\n    roman[11] = convert(11)\n   \
    \ roman[12] = convert(12)\n    roman[13] = convert(13)\n    roman[14] = convert(14)\n\
    \    roman[15] = convert(15)\n    roman[16] = convert(16)\n    roman[17] = convert(17)\n\
    \    roman[18] = convert(18)\n    roman[19] = convert(19)\n    roman[20] = convert(20)\n\
    \    roman[21] = convert(21)\n    roman[22] = convert(22)\n    roman[23] = convert(23)\n\
    \    roman[24] = convert(24)\n    roman[25] = convert(25)\n    roman[26] = convert(26)\n\
    \    roman[27] = convert(27)\n    roman[28] = convert(28)\n    roman[29] = convert(29)\n\
    \    roman[30] = convert(30)\n    roman[31] = convert(31)\n    roman[32] = convert(32)\n\
    \    roman[33] = convert(33)\n    roman[34] = convert(34)\n    roman[35] = convert(35)\n\
    \    roman[36] = convert(36)\n    roman[37] = convert(37)\n    roman[38] = convert(38)\n\
    \    roman[39] = convert(39)\n    roman[40] = convert(40)\n    roman[41] = convert(41)\n\
    \    roman[42] = convert(42)\n    roman[43] = convert(43)\n    roman[44] = convert(44)\n\
    \    roman[45] = convert(45)\n    roman[46] = convert(46)\n    roman[47] = convert(47)\n\
    \    roman[48] = convert(48)\n    roman[49] = convert(49)\n    roman[50] = convert(50)\n\
    \    roman[51] = convert(51)\n    roman[52] = convert(52)\n    roman[53] = convert(53)\n\
    \    roman[54] = convert(", "    roman = roman_numeral(number)\n    roman = roman.lower()\n\
    \    return roman\nend", "    roman = \"\"\n    roman_numerals = [\"M\", \"CM\"\
    , \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"]\n    roman_numerals_reverse = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\"\
    , \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    \n    if number < 0\
    \ or number > 999:\n        return roman\n    \n    if number < 50:\n        roman\
    \ = roman_numerals[number]\n        return roman\n    \n    roman_number = number\
    \ % 100\n    roman_numeral = roman_numerals[roman_number]\n    roman_numerals_reverse[roman_number]\n\
    \    \n    if roman_number < 20:\n        roman = roman_numeral + roman\n    \
    \    return roman\n    \n    roman_number = roman_number % 10\n    roman_numeral\
    \ = roman_numerals[roman_number]\n    roman_numerals_reverse[roman_number]\n \
    \   \n    if roman_number < 20:\n        roman = roman_numeral + roman\n     \
    \   return roman\n    \n    roman_number = roman_number % 10\n    roman_numeral\
    \ = roman_numerals[roman_number]\n    roman_numerals_reverse[roman_number]\n \
    \   \n    if roman_number < 20:\n        roman = roman_numeral + roman\n     \
    \   return roman\n    \n    roman_number = roman_number % 10\n    roman_numeral\
    \ = roman_numerals[roman_number]\n    roman_numerals_reverse[roman_number]\n \
    \   \n    if roman_number < 20:\n        roman = roman_numeral + roman\n     \
    \   return roman\n    \n    roman_number = roman_number % 10\n    roman_numeral\
    \ = roman_numerals[roman_number]\n    roman_numerals_reverse[roman_number]\n \
    \   \n    if roman_number < 20:\n        roman = roman_numeral + roman\n     \
    \   return roman\n    \n    roman_number = roman_number % 10\n    roman_numeral\
    \ = roman_numerals[roman_number]\n    roman_numerals_reverse[roman_number]\n \
    \   \n    if roman_number < 20:\n        roman = roman_numeral + roman\n     \
    \   return roman\n    \n    roman_number = roman_number % 10", "    roman = \"\
    \"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\"\
    , \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()\n\
    \    roman_numerals_reversed.reverse()\n    roman_numerals_reversed.reverse()",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = roman_numerals_table()\n    roman_numerals_string = \"\"\
    \n    roman_numerals_string += roman_numerals[number][1]\n    for i = 2 to number\n\
    \        roman_numerals_string += roman_numerals[number][i]\n    end\n    return\
    \ roman_numerals_string\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman\
    \ = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\"\
    , \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed.reverse()\n\
    \    \n    if number < 0 or number > 1000:\n        raise ArgumentError(\"Argument\
    \ must be between 1 and 1000\")\n    \n    if number < 100:\n        return roman_numerals[number]\n\
    \    \n    roman_numerals_reversed.reverse()\n    \n    roman_numerals_reversed.each_with_index\
    \ do |numeral, index|\n        if number >= index * 100:\n            roman_numerals_reversed.insert(index,\
    \ numeral)\n            roman_numerals_reversed.insert(index + 1, numeral)\n \
    \           roman_numerals_reversed.insert(index + 2, numeral)\n            roman_numerals_reversed.insert(index\
    \ + 3, numeral)\n            roman_numerals_reversed.insert(index + 4, numeral)\n\
    \            roman_numerals_reversed.insert(index + 5, numeral)\n            roman_numerals_reversed.insert(index\
    \ + 6, numeral)\n            roman_numerals_reversed.insert(index + 7, numeral)\n\
    \            roman_numerals_reversed.insert(index + 8, numeral)\n            roman_numerals_reversed.insert(index\
    \ + 9, numeral)\n            roman_numerals_reversed.insert(index + 10, numeral)\n\
    \            roman_numerals_reversed.insert(index + 11, numeral)\n           \
    \ roman_numerals_reversed.insert(index + 12, numeral)\n            roman_numerals_reversed.insert(index\
    \ + 13, numeral)\n            roman_numerals_reversed.insert(index + 14, numeral)\n\
    \            roman_numerals_reversed.insert(index + 15, numeral)\n           \
    \ roman_numerals_reversed.insert(index + 16, numeral)\n            roman_numerals_reversed.insert(index\
    \ + 17, numeral)\n            roman_numerals_reversed.insert(index + 18, numeral)\n\
    \            roman_numerals_reversed.insert(index + 19, numeral)\n           \
    \ roman_numerals_reversed.insert(index + 20, numeral)\n            roman_numerals_reversed.insert(index\
    \ + 21, numeral)\n            roman_numerals_reversed.insert(index + ", "    roman\
    \ = roman_numerals(number)\n    roman = roman.map(|x| x.to_lowercase())\n    roman\
    \ = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = roman.map(|x| x.to_lowercase())\n\
    \    roman = roman.filter(|x| x != \"\")\n    roman = ro", "    if number < 1\
    \ || number > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    roman = roman.map(&char.method(:ord))\n\
    \    roman = roman.map(&char.method(:chr))\n    roman = roman.map(&char.method(:upcase))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(&char.method(:delete))\n    roman = roman.map(&char.method(:delete))\n\
    \    roman = roman.map(", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else \n        roman_numerals = roman_numerals_table()\n\
    \        roman_numerals_string = \"\"\n        for roman_numeral in roman_numerals\n\
    \            if roman_numerals[roman_numeral] == number\n                roman_numerals_string\
    \ += roman_numeral\n            end\n        end\n        return roman_numerals_string\n\
    \    end\nend\n</cell>\n<text>\nProblem 9\nWrite a Julia function that takes a\
    \ positive integer and returns its decimal equivalent as a string.\nRestrictions:\
    \ 1 <= num <= 10^9", "    roman = roman_numeral(number)\n    roman = roman.lower()\n\
    \    return roman\nend", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = romans[number]\n    roman = roman.substring(0,1)\n\
    \    roman = roman.substring(1,roman.length)\n    return roman\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 || number > 1000\n        throw(ArgumentError(\"\
    number must be between 1 and 1000\"))\n    end\n    roman = \"\"\n    roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    for roman_numeral in roman_numerals\n        if number\
    \ >= roman_numeral\n            roman_numeral_value = roman_numerals[roman_numerals.index(roman_numeral)]\n\
    \            roman = roman.(roman_numeral_value)\n            number = number\
    \ - roman_numerals[roman_numerals.index(roman_numeral)]\n        else\n      \
    \      roman = roman.(roman_numeral)\n        end\n    end\n    return roman\n\
    end", "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n\
    \    end\n    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"\
    x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\", \"d\" => \"D\", \"m\" => \"M\")\n    roman_numerals_reverse[\"I\"\
    ] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    for roman_numeral in roman_numerals\n        if number\
    \ >= roman_numeral\n            roman = roman_numeral + roman\n            number\
    \ -= roman_numeral\n        end\n    end\n    return roman\nend", "    if number\
    \ == 0 \n        then return \"0\"\n    else if number == 1 \n        then return\
    \ \"x\"\n    else if number == 2 \n        then return \"c\"\n    else if number\
    \ == 3 \n        then return \"m\"\n    else if number == 4 \n        then return\
    \ \"b\"\n    else if number == 5 \n        then return \"l\"\n    else if number\
    \ == 6 \n        then return \"x\"\n    else if number == 7 \n        then return\
    \ \"ix\"\n    else if number == 8 \n        then return \"v\"\n    else if number\
    \ == 9 \n        then return \"vi\"\n    else if number == 10 \n        then return\
    \ \"i\"\n    else if number == 11 \n        then return \"x\"\n    else if number\
    \ == 12 \n        then return \"l\"\n    else if number == 13 \n        then return\
    \ \"c\"\n    else if number == 14 \n        then return \"d\"\n    else if number\
    \ == 15 \n        then return \"m\"\n    else if number == 16 \n        then return\
    \ \"b\"\n    else if number == 17 \n        then return \"l\"\n    else if number\
    \ == 18 \n        then return \"x\"\n    else if number == 19 \n        then return\
    \ \"ix\"\n    else if number == 20 \n        then return \"v\"\n    else if number\
    \ == 21 \n        then return \"vi\"\n    else if number == 22 \n        then\
    \ return \"i\"\n    else if number == 23 \n        then return \"x\"\n    else\
    \ if number == 24 \n        then return \"l\"\n    else if number == 25 \n   \
    \     then return \"c\"\n    else if number == 26 \n        then return \"d\"\n\
    \    else if number == 27 \n        then return \"m\"\n    else if number == 28\
    \ \n        then return \"b\"\n    else if number == 29 \n        then return\
    \ \"l\"\n    else if number == 30 \n        then return \"x\"\n    else if number\
    \ == 31 \n        then return \"ix\"\n    else if number == 32 \n        then\
    \ return \"v\"\n    else if number == 33 \n        then return \"vi\"\n    else\
    \ if number == 34 \n        then return \"i\"\n    else if number == 35 \n   \
    \     then return \"x\"\n    else if number == 36 \n        then return \"l\"\n\
    \    else if number ", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = roman_numeral(number)\n    roman = roman.split(\"\
    .\").map(&:to_i).map(&:to_s)\n    roman = roman.map(&:to_s).join\n    return roman\n\
    end", "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n\
    \    else\n        roman = roman_numerals(number)\n        roman = roman.map(&lowercase)\n\
    \        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&",
  "    if number == 0 \n        return \"0\"\n    roman_numerals = roman_numerals_array()\n\
    \    roman_numerals_length = length(roman_numerals)\n    roman_numerals_index\
    \ = 0\n    roman_numerals_index += roman_numerals_length\n    roman_numerals_index\
    \ += roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n\
    \    roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    roman_numerals_index +=\
    \ roman_numerals_length\n    roman_numerals_index += roman_numerals_length\n \
    \   roman_numerals_index += roman_numerals_length\n    ro", "    roman = \"\"\n\
    \    roman_numerals = roman_numerals()\n    \n    for numeral in roman_numerals[number]:\n\
    \        roman += numeral\n    \n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    end\n    roman_numerals = roman_numerals_table()\n\
    \    roman_numerals_string = \"\"\n    for roman_numeral in roman_numerals \n\
    \        if roman_numerals[roman_numeral] <= number \n            roman_numerals_string\
    \ += roman_numerals[roman_numeral]\n        end\n    end\n    return roman_numerals_string\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a positive integer\
    \ and returns the number of its digits in base 10.", "    if number < 1 || number\
    \ > 1000\n        throw(ArgumentError(\"Invalid input: number must be between\
    \ 1 and 1000\"))\n    else\n        roman = roman_to_mini_roman(number)\n    \
    \    roman = roman.lower()\n        return roman\nend", "    if number == 0 \n\
    \        then return \"0\"\n    else if number < 0 \n        then return \"-\"\
    \n    else if number < 100\n        then return int_to_mini_roman(number/10) +\
    \ int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000\n        then return int_to_mini_roman(number/10000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000\n        then return\
    \ int_to_mini_roman(number/100000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000\n        then return int_to_mini_roman(number/1000000)\
    \ + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%10000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000000\n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%1000000) + int_to_mini_roman(number%100000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000000\n        then\
    \ return int_to_mini_roman(number/100000000) + int_to_mini_roman(", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numeral",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = roman_numerals_dictionary()\n    roman_numerals_string =\
    \ roman_numerals[number]\n    return roman_numerals_string\nend", "    roman =\
    \ roman_to_mini_roman(number)\n    roman = roman.substring(0,roman.length-1)\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number <\
    \ 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman = \"\
    \"\n    roman_digits = Int64[]\n    roman_digits[1] = \"M\"\n    roman_digits[2]\
    \ = \"CM\"\n    roman_digits[3] = \"D\"\n    roman_digits[4] = \"CD\"\n    roman_digits[5]\
    \ = \"C\"\n    roman_digits[6] = \"XC\"\n    roman_digits[7] = \"L\"\n    roman_digits[8]\
    \ = \"XL\"\n    roman_digits[9] = \"X\"\n    roman_digits[10] = \"IX\"\n    roman_digits[11]\
    \ = \"V\"\n    roman_digits[12] = \"IV\"\n    roman_digits[13] = \"I\"\n    roman_digits[14]\
    \ = \"IU\"\n    roman_digits[15] = \"U\"\n    roman_digits[16] = \"UU\"\n    roman_digits[17]\
    \ = \"U\"\n    roman_digits[18] = \"UU\"\n    roman_digits[19] = \"M\"\n    roman_digits[20]\
    \ = \"CM\"\n    roman_digits[21] = \"D\"\n    roman_digits[22] = \"CD\"\n    roman_digits[23]\
    \ = \"C\"\n    roman_digits[24] = \"XC\"\n    roman_digits[25] = \"L\"\n    roman_digits[26]\
    \ = \"XL\"\n    roman_digits[27] = \"X\"\n    roman_digits[28] = \"IX\"\n    roman_digits[29]\
    \ = \"V\"\n    roman_digits[30] = \"IV\"\n    roman_digits[31] = \"I\"\n    roman_digits[32]\
    \ = \"IU\"\n    roman_digits[33] = \"U\"\n    roman_digits[34] = \"UU\"\n    roman_digits[35]\
    \ = \"U\"\n    roman_digits[36] = \"UU\"\n    roman_digits[37] = \"M\"\n    roman_digits[38]\
    \ = \"CM\"\n    roman_digits[39] = \"D\"\n    roman_digits[40] = \"CD\"\n    roman_digits[41]\
    \ = \"C\"\n    roman_digits[42] = \"XC\"\n    roman_digits[43] = \"L\"\n    roman_digits[44]\
    \ = \"XL\"\n    roman_digits[45] = \"X\"\n    roman_digits[46] = \"IX\"\n    roman_digits[47]\
    \ = \"V\"\n    roman_digits[48", "    if number == 0 \n        then return \"\
    0\"\n    else if number < 0 \n        then return \"-\"\n    else if number <\
    \ 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.map(&:chars.to_a)\n\
    \    roman = roman.map(&:join)\n    roman = roman.join(\"\")\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = \"\"\n    roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    \n    if number < 0 or number > 1000:\n        error(\"\
    Invalid input\")\n    \n    if number < 100:\n        roman = roman_numerals[number]\n\
    \        return roman\n    \n    roman = \"\"\n    \n    if number < 50:\n   \
    \     roman += \"M\"\n        number -= 50\n    \n    if number < 100:\n     \
    \   roman += \"CM\"\n        number -= 50\n    \n    if number < 200:\n      \
    \  roman += \"D\"\n        number -= 100\n    \n    if number < 100:\n       \
    \ roman += \"CD\"\n        number -= 100\n    \n    if number < 500:\n       \
    \ roman += \"C\"\n        number -= 200\n    \n    if number < 100:\n        roman\
    \ += \"XC\"\n        number -= 200\n    \n    if number < 200:\n        roman\
    \ += \"L\"\n        number -= 100\n    \n    if number < 100:\n        roman +=\
    \ \"XL\"\n        number -= 100\n    \n    if number < 100:\n        roman +=\
    \ \"X\"\n        number -= 50\n    \n    if number < 50:\n        roman += \"\
    IX\"\n        number -= 50\n    \n    if number < 100:\n        roman += \"V\"\
    \n        number -= 100\n    \n    if number < 200:\n        roman += \"IV\"\n\
    \        number -= 100\n    \n    if number < 100:\n        roman += \"I\"\n \
    \       number -= 50\n    \n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    roman = roman_to_int(number)\n    mini_roman = int_to_mini_roman(roman)\n \
    \   return mini_roman\nend", "    if number == 0 \n        then return \"0\"\n\
    \    else if number < 0 \n        then return \"-\"\n    else if number < 100\n\
    \        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals = [\"\
    M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"]\n    roman_numerals_reverse = [\"M\", \"CM\", \"D\", \"CD\",\
    \ \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    ", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input: number must be between 1 and 1000\")\n    end\n\
    \    roman = \"\"\n    roman_digits = Int64[]\n    roman_digits[1] = \"M\"\n \
    \   roman_digits[2] = \"CM\"\n    roman_digits[3] = \"D\"\n    roman_digits[4]\
    \ = \"CD\"\n    roman_digits[5] = \"C\"\n    roman_digits[6] = \"XC\"\n    roman_digits[7]\
    \ = \"L\"\n    roman_digits[8] = \"XL\"\n    roman_digits[9] = \"X\"\n    roman_digits[10]\
    \ = \"IX\"\n    roman_digits[11] = \"V\"\n    roman_digits[12] = \"IV\"\n    roman_digits[13]\
    \ = \"I\"\n    roman_digits[14] = \"M\"\n    roman_digits[15] = \"CM\"\n    roman_digits[16]\
    \ = \"D\"\n    roman_digits[17] = \"CD\"\n    roman_digits[18] = \"C\"\n    roman_digits[19]\
    \ = \"XC\"\n    roman_digits[20] = \"L\"\n    roman_digits[21] = \"XL\"\n    roman_digits[22]\
    \ = \"X\"\n    roman_digits[23] = \"IX\"\n    roman_digits[24] = \"V\"\n    roman_digits[25]\
    \ = \"IV\"\n    roman_digits[26] = \"I\"\n    roman_digits[27] = \"V\"\n    roman_digits[28]\
    \ = \"IV\"\n    roman_digits[29] = \"I\"\n    roman_digits[30] = \"V\"\n    roman_digits[31]\
    \ = \"IV\"\n    roman_digits[32] = \"I\"\n    roman_digits[33] = \"V\"\n    roman_digits[34]\
    \ = \"IV\"\n    roman_digits[35] = \"I\"\n    roman_digits[36] = \"V\"\n    roman_digits[37]\
    \ = \"IV\"\n    roman_digits[38] = \"I\"\n    roman_digits[39] = \"V\"\n    roman_digits[40]\
    \ = \"IV\"\n    roman_digits[41] = \"I\"\n    roman_digits[42] = \"V\"\n    roman_digits[43]\
    \ = \"IV\"\n    roman_digits[44] = \"I\"\n    roman_digits[45] = \"V\"\n    roman_digits[46]\
    \ = \"IV\"\n    roman_digits[47] = \"I\"\n    roman_", "    roman = roman_to_int()\n\
    \    roman = roman[number]\n    roman = roman.lower()\n    return roman\nend\n\
    </cell>\n<code language=julia-1.4>", "    if number < 1 || number > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman[end-1]\n    roman = roman.substring(0,1)\n    roman = roman.substring(1,2)\n\
    \    roman = roman.substring(2,3)\n    roman = roman.substring(3,4)\n    roman\
    \ = roman.substring(4,5)\n    roman = roman.substring(5,6)\n    roman = roman.substring(6,7)\n\
    \    roman = roman.substring(7,8)\n    roman = roman.substring(8,9)\n    roman\
    \ = roman.substring(9,10)\n    roman = roman.substring(10,11)\n    roman = roman.substring(11,12)\n\
    \    roman = roman.substring(12,13)\n    roman = roman.substring(13,14)\n    roman\
    \ = roman.substring(14,15)\n    roman = roman.substring(15,16)\n    roman = roman.substring(16,17)\n\
    \    roman = roman.substring(17,18)\n    roman = roman.substring(18,19)\n    roman\
    \ = roman.substring(19,20)\n    roman = roman.substring(20,21)\n    roman = roman.substring(21,22)\n\
    \    roman = roman.substring(22,23)\n    roman = roman.substring(23,24)\n    roman\
    \ = roman.substring(24,25)\n    roman = roman.substring(25,26)\n    roman = roman.substring(26,27)\n\
    \    roman = roman.substring(27,28)\n    roman = roman.substring(28,29)\n    roman\
    \ = roman.substring(29,30)\n    roman = roman.substring(30,31)\n    roman = roman.substring(31,32)\n\
    \    roman = roman.substring(32,33)\n    roman = roman.substring(33,34)\n    roman\
    \ = roman.substring(34,35)\n    roman = roman.substring(35,36)\n    roman = roman.substring(36,37)\n\
    \    roman = roman.substring(37,38)\n    roman = roman.substring(38,39)\n    roman\
    \ = roman.substring(39,40)\n    roman = roman.substring(40,41)\n    roman = roman.",
  "    roman = roman_to_int(number)\n    roman = roman.to_string()\n    roman = roman.chars().map(&:to_lowercase).collect{|x|\
    \ x.to_s}\n    roman = roman.join\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman = roman_to_int(number)\n    roman_str = roman_to_str(roman)\n    return\
    \ roman_str.lower()\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed = roman_numerals[0..(length(roman_numerals)\
    \ - 1)]\n    roman_numerals_reversed[1] = roman_numerals_reversed[1] .* 10\n \
    \   roman_numerals_reversed[2] = roman_numerals_reversed[2] .* 10\n    roman_numerals_reversed[3]\
    \ = roman_numerals_reversed[3] .* 10\n    roman_numerals_reversed[4] = roman_numerals_reversed[4]\
    \ .* 10\n    roman_numerals_reversed[5] = roman_numerals_reversed[5] .* 10\n \
    \   roman_numerals_reversed[6] = roman_numerals_reversed[6] .* 10\n    roman_numerals_reversed[7]\
    \ = roman_numerals_reversed[7] .* 10\n    roman_numerals_reversed[8] = roman_numerals_reversed[8]\
    \ .* 10\n    roman_numerals_reversed[9] = roman_numerals_reversed[9] .* 10\n \
    \   roman_numerals_reversed[10] = roman_numerals_reversed[10] .* 10\n    roman_numerals_reversed[11]\
    \ = roman_numerals_reversed[11] .* 10\n    roman_numerals_reversed[12] = roman_numerals_reversed[12]\
    \ .* 10\n    roman_numerals_reversed[13] = roman_numerals_reversed[13] .* 10\n\
    \    roman_numerals_reversed[14] = roman_numerals_reversed[14] .* 10\n    roman_numerals_reversed[15]\
    \ = roman_numerals_reversed[15] .* 10\n    roman_numerals_reversed[16] = roman_numerals_reversed[16]\
    \ .* 10\n    roman_numerals_reversed[17] = roman_numerals_reversed[17] .* 10\n\
    \    roman_numerals_reversed[18] = roman_numerals_reversed[18] .* 10\n    roman_numerals_reversed[19]\
    \ = roman_numerals_reversed[19] .* 10\n    roman_numerals_reverse", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ \"\"\n    roman_digits = Int64[]\n    roman_digits.push(number)\n    roman_digits.push(Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64[Int64",
  "    if number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ < 1000 \n        return roman_to_mini_roman(number)\n    else \n        error(\"\
    number too large\")\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman = roman_numeral(number)\n        roman = roman.lower()\n        return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    if number == 0 \n    \
    \    then return \"0\"\n    else if number < 0 \n        then return \"-\"\n \
    \   else if number < 1000 \n        then return int_to_mini_roman(number / 100)\
    \ + int_to_mini_roman(number % 100) + int_to_mini_roman(number % 1000)\n    else\
    \ if number < 1000000 \n        then return int_to_mini_roman(number / 1000) +\
    \ int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 10000)\n    else\
    \ if number < 1000000000 \n        then return int_to_mini_roman(number / 100000)\
    \ + int_to_mini_roman(number % 100000) + int_to_mini_roman(number % 1000000)\n\
    \    else if number < 1000000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000) + int_to_mini_roman(number % 10000000) + int_to_mini_roman(number\
    \ % 100000000)\n    else if number < 1000000000000000 \n        then return int_to_mini_roman(number\
    \ / 100000000) + int_to_mini_roman(number % 100000000) + int_to_mini_roman(number\
    \ % 1000000000) \n    else if number < 100000000000000000 \n        then return\
    \ int_to_mini_roman(number / 1000000000000) + int_to_mini_roman(number % 1000000000000)\
    \ + int_to_mini_roman(number % 10000000000000) \n    else if number < 1000000000000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000) + int_to_mini_roman(number % 10000000000000000) \n    else\
    \ if number < 1000000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 1000000000000000000) + int_to_mini_roman(number % 1000000000000000000) + int_to_mini_roman(number\
    \ % 100000000000000000000) \n    else if number < 10000000000000000000000000 \n\
    \        then return int_to_mini_roman(number / 1000000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000000) + int_to_mini_roman(number % 1000000000000000000000000)\
    \ \n    else if number < 10000000000000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000000000000000000000) + int_to_mini_roman(number % 10000000000000000000000000)\
    \ + int_to_mini_roman(number ", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman_numerals = Dict(\"I\" => \"i\", \"V\" =>\
    \ \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\"\
    \ => \"m\", \"M\" => \"m\", \"C\" => \"c\")\n    roman_numerals_reverse = Dict(\"\
    i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\",\
    \ \"d\" => \"D\", \"m\" => \"M\", \"m\" => \"M\", \"c\" => \"C\")\n    roman_numerals_reverse[\"\
    i\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"d\"] = \"D\"\n    roman_numerals_reverse[\"\
    m\"] = \"M\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n    roman_numerals_reverse[\"\
    l\"] = \"L\"\n    roman_numerals_reverse[\"c\"] = \"C\"\n    roman_numerals_reverse[\"\
    d\"] = \"D\"\n    roman_numerals_reverse[\"m\"] = \"M\"\n    roman_numerals_reverse[\"\
    M\"] = \"M\"\n    roman_numerals_reverse[\"C\"] = \"C\"\n    roman_numerals_reverse[\"\
    i\"] = \"I\"\n    roman_numerals_reverse[\"v\"] = \"V\"\n    roman_numerals_reverse[\"\
    x\"] = \"X\"\n    roman_numerals_reverse[\"l\"] = \"L\"\n    roman_numerals_reverse[\"\
    c\"] = \"C\"\n    roman_numerals_reverse[\"d\"] = \"D\"\n    roman_numerals_reverse[\"\
    m\"] = \"M\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"i\"] = \"I\"\n    roman_numerals_reverse[\"\
    v\"] = \"V\"\n    roman_numerals_reverse[\"x\"] = \"X\"\n", "    if number < 1\
    \ || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman = \"\
    \"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\"\
    , \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    for roman_numeral\
    \ in roman_numerals\n        if number >= roman_numeral\n            roman = roman_numeral\
    \ + roman\n            number -= roman_numeral\n        end\n    end\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    roman = roman_to_int()\n\
    \    roman = roman[number]\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number == 0 \n        then return \"0\"\n    else if number < 0 \n     \
    \   then return \"-\"\n    else if number < 1000 \n        then return int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100)\n    else \n        roman_numerals\
    \ = roman_numerals_list(number)\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_table = roman_numerals_table()\n\
    \    roman_numerals_table[1] = roman_numerals[1]\n    roman_numerals_table[2]\
    \ = roman_numerals[2]\n    roman_numerals_table[3] = roman_numerals[3]\n    roman_numerals_table[4]\
    \ = roman_numerals[4]\n    roman_numerals_table[5] = roman_numerals[5]\n    roman_numerals_table[6]\
    \ = roman_numerals[6]\n    roman_numerals_table[7] = roman_numerals[7]\n    roman_numerals_table[8]\
    \ = roman_numerals[8]\n    roman_numerals_table[9] = roman_numerals[9]\n    roman_numerals_table[10]\
    \ = roman_numerals[10]\n    roman_numerals_table[11] = roman_numerals[11]\n  \
    \  roman_numerals_table[12] = roman_numerals[12]\n    roman_numerals_table[13]\
    \ = roman_numerals[13]\n    roman_numerals_table[14] = roman_numerals[14]\n  \
    \  roman_numerals_table[15] = roman_numerals[15]\n    roman_numerals_table[16]\
    \ = roman_numerals[16]\n    roman_numerals_table[17] = roman_numerals[17]\n  \
    \  roman_numerals_table[18] = roman_numerals[18]\n    roman_numerals_table[19]\
    \ = roman_numerals[19]\n    roman_numerals_table[20] = roman_numerals[20]\n  \
    \  roman_numerals_table[21] = roman_numerals[21]\n    roman_numerals_table[22]\
    \ = roman_numerals[22]\n    roman_numerals_table[23] = roman_numerals[23]\n  \
    \  roman_numerals_table[24] = roman_numerals[24]\n    roman_numerals_table[25]\
    \ = roman_numerals[25]\n    roman_numerals_table[26] = roman_numerals[26]\n  \
    \  roman_numerals_table[27] = roman_numerals[27]\n    roman_numerals_table[28]\
    \ = roman_numerals[28]\n    roman_numerals_table[", "    roman = roman_to_int(number)\n\
    \    mini_roman = int_to_mini_roman(roman)\n    return mini_roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 \n        error(\"number must be\
    \ positive\")\n    else if number < 1000 \n        return roman_to_mini_roman(number)\n\
    \    else \n        error(\"number too large\")\nend", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_list(number)\n        roman_numerals_str = roman_numerals.join(\"\
    \")\n        roman_numerals_str = roman_numerals_str.replace(\" \", \"\")\n  \
    \      roman_numerals_str = roman_numerals_str.replace(\",\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"-\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    +\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"x\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"i\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"v\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"c\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    d\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"m\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"l\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"o\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"n\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    g\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"f\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"h\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"k\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"q\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    s\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"t\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"x\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"z\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"k\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    q\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"s\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"t\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"x\", \"\")\n        roman_numerals_str\
    \ = "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
