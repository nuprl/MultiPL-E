name: HumanEval_110_exchange
language: jl
prompt: "\"\"\"In this problem, you will implement a function that takes two vectors\
  \ of numbers,\n    and determines whether it is possible to perform an exchange\
  \ of elements\n    between them to make lst1 a vector of only even numbers.\n  \
  \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
  \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
  \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
  \ \"NO\".\n    For example:\n    >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n    \"\
  YES\"\n    >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    \"NO\"\n    It is assumed\
  \ that the input vectors will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
  \ lst2::Vector{Int64})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
  \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
  \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
  @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
  \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1])\
  \ == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    even = lst1[findall(x\
    \ -> x % 2 == 0, lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n\
    \    if length(even) == length(odd) \n        return \"YES\"\n    else\n     \
    \   return \"NO\"\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two vectors of numbers, and determines whether it is possible to\
    \ perform an exchange of elements\nbetween them to make lst1 a vector of only\
    \ even numbers.\nThere is no limit on the number of exchanged elements between\
    \ lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and\
    \ lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise,\
    \ return \"NO\".\nFor example:\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\
    \n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\"NO\"\nIt is assumed that the input\
    \ vectors will be non-empty.\nHint: You may want to use the function findall.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(lst1) == 0 || length(lst2)\
    \ == 0 \n        return \"NO\" \n    \n    even = lst1[2:end] \n    odd = lst1[1:end-1]\
    \ \n    \n    if length(even) == length(odd) \n        return \"NO\" \n    \n\
    \    even = sort(even) \n    odd = sort(odd) \n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\" \n    \n    even = union(even, odd) \n    \n    if length(even)\
    \ == length(lst1) \n        return \"YES\" \n    \n    return \"NO\" \nend\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5,6], [1,5,3,6,4,2])\n</cell>\n<text>\n\
    Problem 3\nWrite a function called is_permutation that takes two vectors of numbers\
    \ and returns true if the first vector is a permutation of the second vector.\n\
    For example, \nis_permutation([1,2,3], [1,2,3]) returns true.\nis_permutation([1,2,3],\
    \ [1,3,2]) returns false.\nis_permutation([1,2,3], [1,3,3]) returns false.\nis_permutation([1,2,3],\
    \ [1,3,2,3]) returns false.\nis_permutation([1,2,3], [1,2,3,4,5]) returns false.\n\
    is_permutation([1,2,3], [1,2,3,4,5,6]) returns false.\nis_permutation([1,2,3],\
    \ [1,2,3,4,5,6,7]) is false.\nIt is assumed that the input vectors will be non-empty.\n\
    Hint: You can use the function permutations to generate all permutations of the\
    \ input vectors.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(lst1) != length(lst2)\n\
    \        return \"NO\"\n    \n    even = lst1[findall(x -> x % 2 == 0, lst1)]\n\
    \    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even) ==\
    \ length(odd)\n        return \"NO\"\n    \n    even = sort(even)\n    odd = sort(odd)\n\
    \    \n    even = even[1 : end - 1]\n    odd = odd[1 : end - 1]\n    \n    even\
    \ = union(even, odd)\n    \n    if length(even) == length(lst1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,5,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,6])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,7])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,8])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,10])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,11])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,12])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,13])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,14])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,15])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,16])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,17])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,18])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,19])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,20])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,21])\n</cell>\n<code language=julia-",
  "    \n    even = lst1[findall(x -> x % 2 == 0, lst1)]\n    odd = lst2[findall(x\
    \ -> x % 2 != 0, lst2)]\n    \n    if length(even) == length(odd) && length(even)\
    \ == length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<text>\nProblem 7\nWrite a function that takes two vectors of\
    \ numbers, and determines whether it is possible to perform an exchange of elements\n\
    between them to make lst1 a vector of only even numbers.\nThere is no limit on\
    \ the number of exchanged elements between lst1 and lst2.\nIf it is possible to\
    \ exchange elements between the lst1 and lst2 to make\nall the elements of lst1\
    \ to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\
    \"NO\"\nIt is assumed that the input vectors will be non-empty.\nHint: You can\
    \ use the function exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    defined above.\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    even = lst1[2:end] .== lst2[2:end]\n    even = even\
    \ .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:", "    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(lst1) != length(lst2)\n     \
    \   return \"NO\"\n    \n    even = lst1[findall(x -> x % 2 == 0, lst1)]\n   \
    \ odd = lst1[findall(x -> x % 2 != 0, lst1)]\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    \n    even = sort(even)\n    odd = sort(odd)\n   \
    \ \n    if length(even) == length(odd)\n        return \"NO\"\n    \n    even\
    \ = union(even, odd)\n    \n    if length(even) == length(lst1)\n        return\
    \ \"YES\"\n    \n    return \"NO\"\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 5, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\n", "    \n    if length(lst1) != length(lst2)\n\
    \        return \"NO\"\n    end\n    \n    even = Int64[]\n    \n    for el in\
    \ lst1\n        if el % 2 == 0\n            push!(even, el)\n        end\n   \
    \ end\n    \n    for el in lst2\n        if el % 2 == 0\n            push!(even,\
    \ el)\n        end\n    end\n    \n    even = Int64[el for el in even if el !=\
    \ 0]\n    \n    if length(even) == 0\n        return \"NO\"\n    end\n    \n \
    \   return \"YES\"\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ two vectors of numbers, and determines whether it is possible to perform an\
    \ exchange of elements\nbetween them to make lst1 a vector of only even numbers.\n\
    There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    If it is possible to exchange elements between the lst1 and lst2 to make\nall\
    \ the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\n\
    For example:\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\n>>> exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n\"NO\"\nIt is assumed that the input vectors will be\
    \ non-empty.\nHint: You can use the function exchange.\nHint: You can use the\
    \ function length.\nHint: You can use the function append!.\nHint: You can use\
    \ the function pop!.\nHint: You can use the function push!.\nHint: You can use\
    \ the function ==.\nHint: You can use the function ==.\nHint: You can use the\
    \ function ==.\nHint: You can use the function ==.\nHint: You can use the function\
    \ ==.\nHint: You can use the function ==.\nHint: You can use the function ==.\n\
    Hint: You can use the function ==.\nHint: You can use the function ==.\nHint:\
    \ You can use the function ==.\nHint: You can use the function ==.\nHint: You\
    \ can use the function ==.\nHint: You can use the function ==.\nHint: You can\
    \ use the function ==.\nHint: You can use the function ==.\nHint: You can use\
    \ the function ==.\nHint: You can use the function ==.\nHint: You can use the\
    \ function ==.\nHint: You can use the function ==.\nHint: You can use the function\
    \ ==.\nHint: You can use the function ==.\nHint: You can use the function ==.\n\
    Hint: You can use the function ==.\nHint: You can use the function ==.\nHint:\
    \ You can use the function ==.\nHint: You can use the function ==.\nHint: You\
    \ can use the function ==.\nHint: You can use the function ==.\nHint: You can\
    \ use the function ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if length(lst1) != length(lst2)\n        return \"NO\"\n    end\n   \
    \ \n    even = lst1[findall(x -> x % 2 == 0, lst1)]\n    odd = lst1[findall(x\
    \ -> x % 2 != 0, lst1)]\n    \n    if length(even) == length(odd)\n        return\
    \ \"NO\"\n    end\n    \n    if length(even) > length(odd)\n        even = even[1\
    \ : end - 1]\n        odd = odd[1 : end - 1]\n    end\n    \n    even = Int64(even)\n\
    \    odd = Int64(odd)\n    \n    if even > odd\n        exchange(even, odd)\n\
    \    else\n        exchange(odd, even)\n    end\n    \n    return \"YES\"\nend\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell", "   \
    \ \n    even = lst1[2:end]\n    odd = lst1[1:end-1]\n    even = even.==0\n   \
    \ even = even.==true\n    even = even.==false\n    even = even.==nothing\n   \
    \ even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even.==nothing\n    even = even.==nothing\n    even = even.==nothing\n\
    \    even = even."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
