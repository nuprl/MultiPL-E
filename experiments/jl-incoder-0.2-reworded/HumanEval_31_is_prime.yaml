name: HumanEval_31_is_prime
language: jl
prompt: "\"\"\"Return true if a given number is prime, and false otherwise.\n    >>>\
  \ is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n\
  \    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n \
  \   >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n    \"\"\"\nfunction\
  \ is_prime(n::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_prime;\n\t@test(candidate(6)\
  \ == false)\n\t@test(candidate(101) == true)\n\t@test(candidate(11) == true)\n\t\
  @test(candidate(13441) == true)\n\t@test(candidate(61) == true)\n\t@test(candidate(4)\
  \ == false)\n\t@test(candidate(1) == false)\n\t@test(candidate(5) == true)\n\t@test(candidate(11)\
  \ == true)\n\t@test(candidate(17) == true)\n\t@test(candidate(85) == false)\n\t\
  @test(candidate(77) == false)\n\t@test(candidate(255379) == false)\nend\n"
completions: ["    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n\
    \    if n < 2 \n        return false\n    \n    if n == 2 \n        return true\n\
    \    \n    if n % 2 == 0 \n        return false\n    \n    prime_cache = [true,\
    \ false]\n    \n    for d in range(3, n-1, 2) \n        if n % d == 0 \n     \
    \       prime_cache[0] = false\n            break\n    \n    for d in range(3,\
    \ n-1, 2) \n        if n % d == 0 \n            prime_cache[1] = false\n     \
    \       break\n    \n    is_prime_cache[n] = prime_cache[1]\n    \n    return\
    \ prime_cache[1]\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of prime factors of a given number.", " \
    \   if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n      \
    \  then return false\n    else if n == 1 || n == 2 || n == 3 || n == 5 || n ==\
    \ 7 \n        then return true\n    else if n % 6 == 0 then return is_prime(n\
    \ / 6) else return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return\
    \ true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n\
    \    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n\
    \    false\n    >>> is_prime(1)\n    false\n    \"\"\"", "    if is_prime_impl(n)\
    \ == true\n    else \n        return false\n    end\nend", "    if n < 2 || n\
    \ % 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else \n        for i in 2..n \n            do if n % i == 0 \n   \
    \             then return false\n        end\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a given number is even.\nWrite a function that checks if a given number is odd.\n\
    Write a function that checks if a given number is prime, and false otherwise.\n\
    Write a function that checks if a given number is even.\nWrite a function that\
    \ checks if a given number is odd.\nWrite a function that checks if a given number\
    \ is prime, and false otherwise.\nWrite a function that checks if a given number\
    \ is even.\nWrite a function that checks if a given number is odd.\nWrite a function\
    \ that checks if a given number is prime, and false otherwise.\nWrite a function\
    \ that checks if a given number is even.\nWrite a function that checks if a given\
    \ number is odd.\nWrite a function that checks if a given number is prime, and\
    \ false otherwise.\nWrite a function that checks if a given number is even.\n\
    Write a function that checks if a given number is odd.\nWrite a function that\
    \ checks if a given number is prime, and false otherwise.\nWrite a function that\
    \ checks if a given number is even.\nWrite a function that checks if a given number\
    \ is odd.\nWrite a function that checks if a given number is prime, and false\
    \ otherwise.\nWrite a function that checks if a given number is even.\nWrite a\
    \ function that checks if a given number is odd.\nWrite a function that checks\
    \ if a given number is prime, and false otherwise.\nWrite a function that checks\
    \ if a given number is even.\nWrite a function that checks if a given number is\
    \ odd.\nWrite a function that checks if a given number is prime, and false otherwise.\n\
    Write a function that checks if a given number is even.\nWrite a function that\
    \ checks if a given number is odd.\nWrite a function that checks if a given number\
    \ is prime, and false otherwise.\nWrite a function that checks if a given number\
    \ is even.\nWrite a function that checks if a given number is odd.\nWrite a ",
  "    if is_prime_impl(n) then return true else return false end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n\
    \    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n\
    \    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n  \
    \  \"\"\"", "    if n == 2 || n == 3 || n == 5\n        true\n    else\n     \
    \   n % 2 != 0 && n % 3 != 0 && n % 5 != 0\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is even, and false otherwise.\n    >>> is_even(6)\n\
    \    false\n    >>> is_even(10)\n    true\n    >>> is_even(11)\n    false\n  \
    \  >>> is_even(13441)\n    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n\
    \    false\n    >>> is_even(1)\n    false\n    \"\"\"", "    if n < 2 || n % 2\
    \ == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n    then return false\n   \
    \ else return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true\
    \ if a given number is divisible by all numbers from 1 to n.\n    >>> is_divisible(6,\
    \ 2)\n    true\n    >>> is_divisible(6, 3)\n    false\n    >>> is_divisible(6,\
    \ 4)\n    false\n    >>> is_divisible(6, 5)\n    false\n    >>> is_divisible(6,\
    \ 6)\n    true\n    >>> is_divisible(6, 7)\n    true\n    >>> is_divisible(6,\
    \ 8)\n    true\n    >>> is_divisible(6, 9)\n    true\n    >>> is_divisible(6,\
    \ 10)\n    true\n    >>> is_divisible(6, 11)\n    true\n    >>> is_divisible(6,\
    \ 12)\n    true\n    >>> is_divisible(6, 13)\n    true\n    >>> is_divisible(6,\
    \ 14)\n    true\n    >>> is_divisible(6, 15)\n    true\n    >>> is_divisible(6,\
    \ 16)\n    true\n    >>> is_divisible(6, 17)\n    true\n    >>> is_divisible(6,\
    \ 18)\n    true\n    >>> is_divisible(6, 19)\n    true\n    >>> is_divisible(6,\
    \ 20)\n    true\n    >>> is_divisible(6, 21)\n    true\n    >>> is_divisible(6,\
    \ 22)\n    true\n    >>> is_divisible(6, 23)\n    true\n    >>> is_divisible(6,\
    \ 24)\n    true\n    >>> is_divisible(6, 25)\n    true\n    >>> is_divisible(6,\
    \ 26)\n    true\n    >>> is_divisible(6, 27)\n    true\n    >>> is_divisible(6,\
    \ 28)\n    true\n    >>> is_divisible(6, 29)\n    true\n    >>> is_divisible(6,\
    \ 30)\n    true\n    >>> is_divisible(6, 31)\n    true\n    >>> is_divisible(6,\
    \ 32)\n    true\n    >>> is_divisible(6, 33)\n    true\n    >>> is_divisible(6,\
    \ 34)\n    true\n    >>> is_divisible(6, 35)\n    true\n    >>> is_divisible(6,\
    \ 36)\n    true\n    >>> is_divisible(6, 37)\n    true\n    >>> is_divisible(6,\
    \ 38)\n    true\n    >>> is_divisible(6, 39)\n    true\n    >>> is_divisible(6,\
    \ 40)\n    true\n    >>> is_divisible(6, 41)\n    true\n    >>> is_divisible(6,\
    \ 42)\n    true\n    >>> is_divisible(6, 43)\n    true\n    >>> is_divisible(6,\
    \ 44)\n    true\n    >>> is_divisible(6, 45)\n    true", "    if n < 2 || n %\
    \ 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else \n        for m in range(3, floor(sqrt(n))+1, 2) \n         \
    \   if n % m == 0 \n                then return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as", "    if n < 2 || n % 2 == 0\
    \ \n        then return false\n    else if n % 3 == 0 \n        then return false\n\
    \    else if n % 5 == 0 \n        then return false\n    else if n % 7 == 0 \n\
    \        then return false\n    else \n        n <= sqrt(Int64(n))\n        then\
    \ return true\n        else return is_prime(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by any number between\
    \ 1 and 100 (both included).", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n < 2 \n        return false\n    \n    prime_cache = [true, false,\
    \ true]\n    \n    if n == 2 \n        return prime_cache[1]\n    \n    if n ==\
    \ 3 \n        return prime_cache[2]\n    \n    if n % 2 == 0 \n        return\
    \ false\n    \n    i = 5\n    while i * i <= n \n        prime_cache[i] = false\n\
    \        i += 2\n    \n    if prime_cache[n] \n        return prime_cache[n]\n\
    \    \n    prime_cache[n] = true\n    \n    for d in range(3, n + 1, 2) \n   \
    \     if n % d == 0 \n            return false\n    \n    return prime_cache[n]\n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if a given number is divisible by all numbers from\
    \ 1 to 10, and false otherwise.\nWrite a function that returns true if a given\
    \ number is divisible by all numbers from 1 to 100, and false otherwise.\nWrite\
    \ a function that returns true if a given number is divisible by all numbers from\
    \ 1 to 1000, and false otherwise.\nWrite a function that returns true if a given\
    \ number is divisible by all numbers from 1 to 10000, and false otherwise.\nWrite\
    \ a function that returns true if a given number is divisible by all numbers from\
    \ 1 to 100000, and false otherwise.\nWrite a function that returns true if a given\
    \ number is divisible by all numbers from 1 to 1000000, and false otherwise.\n\
    Write a function that returns true if a given number is divisible by all numbers\
    \ from 1 to 10000000, and false otherwise.", "    if n < 2 || n % 2 == 0 \n  \
    \      then return false\n    else if n == 2 \n        then return true\n    else\
    \ \n        for m in 3..sqrt(n) \n            do if n % m == 0 \n            \
    \    then return false\n        end\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that checks if a given number is even.\nHint: Use a for loop.",
  "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n    prime_cache[n]\
    \ = true\n    \n    if n <= 1 \n        return true\n    \n    if n % 2 == 0 \n\
    \        return false\n    \n    i = 2\n    \n    while i * i <= n \n        if\
    \ n % i == 0 \n            return false\n        i += 1\n    \n    return true\n\
    end", "    if n < 2 || n % 2 == 0 \n        return false\n    else if n == 2 \n\
    \        return true\n    else \n        return is_prime(n - 1) || n % 2 == 0\n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.3>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime factors\
    \ of a given number.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0\
    \ || n % 7 == 0 \n        then return false\n    else if n == 2 || n == 3 || n\
    \ == 5\n        then return true\n    else if n % 6 == 0 \n        then return\
    \ false\n    else if n % 6 == 1 \n        then return true\n    else if n % 6\
    \ == 2 \n        then return false\n    else if n % 6 == 3 \n        then return\
    \ true\n    else if n % 6 == 5 \n        then return false\n    else if n % 6\
    \ == 7 \n        then return true\n    else if n % 6 == 11\n        then return\
    \ false\n    else if n % 6 == 13\n        then return true\n    else if n % 6\
    \ == 17\n        then return false\n    else if n % 6 == 19\n        then return\
    \ true\n    else if n % 6 == 23 \n        then return false\n    else if n % 6\
    \ == 29\n        then return true\n    else if n % 6 == 31 \n        then return\
    \ false\n    else if n % 6 == 37\n        then return true\n    else if n % 6\
    \ == 41 \n        then return false\n    else if n % 6 == 47\n        then return\
    \ true\n    else if n % 6 == 53 \n        then return false\n    else if n % 6\
    \ == 59\n        then return true\n    else if n % 6 == 63 \n        then return\
    \ false\n    else if n % 6 == 67\n        then return true\n    else if n % 6\
    \ == 73 \n        then return false\n    else if n % 6 == 79\n        then return\
    \ true\n    else if n % 6 == 83 \n        then return false\n    else if n % 6\
    \ == 89\n        then return true\n    else if n % 6 == 93 \n        then return\
    \ false\n    else if n % 6 == 97\n        then return true\n    else if n % 6\
    \ == 111\n        then return false\n    else if n % 6 == 127\n        then return\
    \ true\n    else if n % 6 == 131\n        then return false\n    else if n % 6\
    \ == 137\n        then return true\n    else if n % 6 == 153\n        then return\
    \ false\n    else if n % 6 == 159\n        then return true\n    else if n % 6\
    \ == 173\n        then return false\n    else if n % 6 == 179\n        then return\
    \ true\n    else if n % 6 == 181\n        then return false\n    else if n % 6\
    \ == 191\n        then return true\n    else if n % ", "    if n < 2 || n % 2\
    \ == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        || n % 11 == 0 || n\
    \ % 13 == 0 || n % 17 == 0 || n % 19 == 0 \n        || n % 23 == 0 || n % 29 ==\
    \ 0 || n % 31 == 0 || n % 37 == 0 \n        || n % 41 == 0 || n % 43 == 0 || n\
    \ % 47 == 0 || n % 53 == 0 \n        || n % 59 == 0 || n % 61 == 0 || n % 67 ==\
    \ 0 || n % 71 == 0 \n        || n % 73 == 0 || n % 79 == 0 || n % 83 == 0 || n\
    \ % 89 == 0 \n        || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 105\
    \ == 0 \n        || n % 107 == 0 || n % 109 == 0 || n % 113 == 0 || n % 117 ==\
    \ 0 \n        || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 || n % 129 == 0\
    \ \n        || n % 131 == 0 || n % 133 == 0 || n % 137 == 0 || n % 139 == 0 \n\
    \        || n % 141 == 0 || n % 143 == 0 || n % 145 == 0 || n % 147 == 0 \n  \
    \      || n % 149 == 0 || n % 151 == 0 || n % 153 == 0 || n % 157 == 0 \n    \
    \    || n % 159 == 0 || n % 161 == 0 || n % 163 == 0 || n % 165 == 0 \n      \
    \  || n % 167 == 0 || n % 169 == 0 || n % 171 == 0 || n % 173 == 0 \n        ||\
    \ n % 177 == 0 || n % 179 == 0 || n % 181 == 0 || n % 183 == 0 \n        || n\
    \ % 185 == 0 || n % 187 == 0 || n % 189 == 0 || n % 191 == 0 \n        || n %\
    \ 193 == 0 || n % 195 == 0 || n % 197 == 0 || n % 199 == 0 \n        || n % 201\
    \ == 0 || n % 203 == 0 || n % 205 == 0 || n % 207 == 0 \n        || n % 209 ==\
    \ 0 || n % 211 == 0 || n % 213 == 0 || n % 215 == 0 \n        || n % 217 == 0\
    \ || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 \n        || n % 225 == 0 ||\
    \ n % 227 == 0 || n % 229 == 0 || n % 231 == 0 \n        || n % 233 == 0 || n\
    \ % 239 == 0 || n % 241 == 0 || n % 243 == 0 \n        || n % 245 == 0 || n %\
    \ 247 == 0 || n % 249 == 0 || n % 251 == 0 \n        || n % 253 == 0 || n % 255\
    \ == 0 || n % 257 == 0 || n % 259 == 0 \n        || n % 261 == 0 || n % 263 ==\
    \ 0 || n % 265 == 0 || n % 267 == 0 \n        || n % 269 == 0 || n % 271 == 0\
    \ || n % 273 == 0 || n % 275 == 0 \n        || n % 277 == 0 || n % 279 == 0 ||\
    \ n % 281 == 0 || n % 283 == 0 ", "    if n < 2 || n % 2 == 0 || n % 3 == 0 then\
    \ return false \n    else if n == 2 || n == 3 then return true \n    else if n\
    \ % 5 == 0 then return false \n    else if n % 7 == 0 then return false \n   \
    \ else return is_prime(3*n-5) \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n\
    \    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n\
    \    false\n    >>> is_prime(1)\n    false\n    \"\"\"", "    if n == 1\n    \
    \    return true\n    if n == 0\n        return false\n    if n % 2 == 0\n   \
    \     return false\n    \n    i = 5\n    while i * i <= n\n        i += 2\n  \
    \  return isprime(n)\nend", "    if n < 2 || n % 2 == 0\n        return false\n\
    \    \n    i = 5\n    while i * i <= n\n        if n % i == 0\n            return\
    \ false\n        i += 6\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return true if a given number is even, and false otherwise.\n    >>> is_even(6)\n\
    \    false\n    >>> is_even(101)\n    true\n    >>> is_even(11)\n    true\n  \
    \  >>> is_even(13441)\n    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n\
    \    false\n    >>> is_even(1)\n    false\n    \"\"\"", "    if is_prime_impl(n)\
    \ then return true else return false end\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_prime(6)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_prime(101)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_prime(11)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_prime(13441)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype is_prime(4)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if a given\
    \ number is even.", "    if n < 2\n        return false\n    \n    if n == 2\n\
    \        return true\n    \n    i = 2\n    \n    while i <= sqrt(n)\n        if\
    \ n % i == 0\n            return false\n        i += 1\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if\
    \ a given number is divisible by another given number. \nFor example, divisible_by_two(7,\
    \ 3) should return true.\nHint: use an if statement and modulus division.", " \
    \   if n == 2 || n == 3 || n == 5 || n == 7 || n == 9 || n == 11 \n        ||\
    \ n == 13 || n == 17 || n == 19 || n == 23 || n == 29 || n == 37 || n == 47 \n\
    \        || n == 63 || n == 79 || n == 93 || n == 109 || n == 127 || n == 137\
    \ || n == 173 \n        || n == 193 || n == 197 || n == 231 || n == 239 || n ==\
    \ 243 || n == 247 || n == 251 \n        || n == 257 || n == 269 || n == 273 ||\
    \ n == 277 || n == 283 || n == 297 || n == 303 \n        || n == 307 || n == 311\
    \ || n == 313 || n == 317 || n == 330 || n == 333 || n == 337 \n        || n ==\
    \ 341 || n == 347 || n == 399 || n == 407 || n == 411 || n == 419 || n == 429\
    \ \n        || n == 431 || n == 433 || n == 439 || n == 467 || n == 473 || n ==\
    \ 481 || n == 483 \n        || n == 487 || n == 499 || n == 503 || n == 509 ||\
    \ n == 521 \n        \n        || n == 531 || n == 541 || n == 547 || n == 553\
    \ || n == 569 || n == 571 || n == 577 \n        || n == 583 || n == 603 || n ==\
    \ 609 || n == 611 || n == 617 || n == 623 || n == 629 \n        || n == 641 ||\
    \ n == 643 || n == 647 || n == 653 || n == 659 || n == 661 \n        \n      \
    \  || n == 673 || n == 677 || n == 683 || n == 691 || n == 697 || n == 703 ||\
    \ n == 709 \n        || n == 711 || n == 727 || n == 733 || n == 739 || n == 743\
    \ || n == 751 || n == 757 \n        || n == 761 | n == 769 || n == 773 || n ==\
    \ 790 || n == 797 || n == 803 || n == 809 \n        || n == 827 || n == 833 ||\
    \ n == 839 || n == 867 || n == 877 || n == 883 || n == 889 \n        || n == 897\
    \ || n == 907 || n == 911 || n == 919 || n == 929 || n == 937 || n == 949 \n \
    \       || n == 959 || n == 969 || n == 971 || n == 973 || n == 983 || n == 989\
    \ || n == 991 \n        || n == 997 || n == 1021 || n == 1023 || n == 1029 ||\
    \ n == 1039", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7\
    \ == 0 \n        || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 \n\
    \        || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 \n      \
    \  || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 \n        || n\
    \ % 59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 \n        || n % 73 ==\
    \ 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 \n        || n % 97 == 0 || n\
    \ % 101 == 0 || n % 103 == 0 || n % 107 == 0 \n        || n % 111 == 0 || n %\
    \ 117 == 0 || n % 121 == 0 || n % 123 == 0 \n        || n % 127 == 0 || n % 131\
    \ == 0 || n % 137 == 0 || n % 139 == 0 \n        || n % 143 == 0 || n % 147 ==\
    \ 0 || n % 151 == 0 || n % 157 == 0 \n        || n % 161 == 0 || n % 165 == 0\
    \ || n % 167 == 0 || n % 171 == 0 \n        || n % 177 == 0 || n % 179 == 0 ||\
    \ n % 183 == 0 || n % 187 == 0 \n        || n % 191 == 0 || n % 193 == 0 || n\
    \ % 197 == 0 || n % 199 == 0 \n        || n % 201 == 0 || n % 203 == 0 || n %\
    \ 207 == 0 || n % 209 == 0 \n        || n % 211 == 0 || n % 213 == 0 || n % 217\
    \ == 0 || n % 219 == 0 \n        || n % 223 == 0 || n % 227 == 0 || n % 229 ==\
    \ 0 || n % 233 == 0 \n        || n % 239 == 0 || n % 241 == 0 || n % 251 == 0\
    \ || n % 257 == 0 \n        || n % 261 == 0 || n % 263 == 0 || n % 269 == 0 ||\
    \ n % 271 == 0 \n        || n % 273 == 0 || n % 277 == 0 || n % 281 == 0 || n\
    \ % 283 == 0 \n        || n % 293 == 0 || n % 307 == 0 || n % 309 == 0 || n %\
    \ 311 == 0 \n        || n % 313 == 0 || n % 317 == 0 || n % 319 == 0 || n % 323\
    \ == 0 \n        || n % 329 == 0 || n % 331 == 0 || n % 337 == 0 || n % 341 ==\
    \ 0 \n        || n % 347 == 0 || n % 349 == 0 || n % 353 == 0 || n % 359 == 0\
    \ \n        || n % 361 == 0 || n % 363 == 0 || n % 367 == 0 || n % 369 == 0 \n\
    \        || n % 373 == 0 || n % 377 == 0 || n % 381 == 0 || n % 383 == 0 \n  \
    \      || n % 389 == 0 || n % 391 == 0 || n % 397 == 0 || n % 401 == 0 \n    \
    \    || n % 403 == 0 || n % 407 == 0 || n % 409 == 0 || n % 411", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    \n    if n <= 1 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    i = 5\n    \n    while i * i <= n \n        i += 2\n\
    \    \n    if n == i \n        return true\n    \n    return false\nend", "  \
    \  if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n \
    \       return false\n    if n == 2 \n        return true\n    if n % 2 == 0 \n\
    \        return false\n    \n    i = 5\n    while i * i <= n \n        if n %\
    \ i == 0 \n            return false\n        i += 6\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime_cache = [false] * (2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(log2(2^(ceil(",
  "    if is_prime_impl(n) == true\n    else \n        return false\nend", "    if\
    \ n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n     \
    \   then return true\n    else \n        begin \n            x <- 2\n        \
    \    y <- 3\n            while y <= n \n                do if n % y == 0 \n  \
    \                  then return false\n                    else y <- y + 1\n  \
    \          end \n            return true\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n\
    \    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n\
    \    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n  \
    \  \"\"\"", "    if n < 2 || n % 2 == 0 \n        then return false\n    else\
    \ if n == 2 \n        then return true\n    else \n        begin \n          \
    \  n = n / 2\n            while (n % 2 == 0) \n                do \n         \
    \           n = n / 2\n                while (n > 1)\n            return false\n\
    \        end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a\
    \ given number is even, and false otherwise.\n    >>> is_even(6)\n    false\n\
    \    >>> is_even(101)\n    true\n    >>> is_even(11)\n    true\n    >>> is_even(13441)\n\
    \    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n    false\n    >>>\
    \ is_even(1)\n    false\n    \"\"\"", "    if is_prime_impl(n) then return true\
    \ else return false\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(6)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(4)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns true if the given number is odd, and false\
    \ otherwise.\nHint: Use the modulo operator %.", "    if n < 2 || n == 1 \n  \
    \      return false\n    else if n == 2 \n        return true\n    else if n %\
    \ 2 == 0 \n        return false\n    else \n        return is_prime(n - 1) \n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a given number is divisible by another\
    \ number. Hint: Use a while loop.", "    if is_prime_cache[n] \n        return\
    \ is_prime_cache[n]\n    if n <= 1 \n        return false\n    if n == 2 \n  \
    \      return true\n    if n % 2 == 0 \n        return false\n    \n    prime_cache\
    \ = [true, false, true]\n    \n    for i = 3 \n        prime_cache[i] = false\n\
    \    \n    for i = 5\n        prime_cache[i] = false\n    \n    for i = 7\n  \
    \      prime_cache[i] = false\n    \n    for i = 11\n        prime_cache[i] =\
    \ false\n    \n    for i = 13\n        prime_cache[i] = false\n    \n    for i\
    \ = 17\n        prime_cache[i] = false\n    \n    for i = 19\n        prime_cache[i]\
    \ = false\n    \n    for i = 23\n        prime_cache[i] = false\n    \n    for\
    \ i = 29\n        prime_cache[i] = false\n    \n    for i = 31\n        prime_cache[i]\
    \ = false\n    \n    for i = 37\n        prime_cache[i] = false\n    \n    for\
    \ i = 41\n        prime_cache[i] = false\n    \n    for i = 43\n        prime_cache[i]\
    \ = false\n    \n    for i = 47\n        prime_cache[i] = false\n    \n    for\
    \ i = 53\n        prime_cache[i] = false\n    \n    for i = 59\n        prime_cache[i]\
    \ = false\n    \n    for i = 61\n        prime_cache[i] = false\n    \n    for\
    \ i = 67\n        prime_cache[i] = false\n    \n    for i = 71\n        prime_cache[i]\
    \ = false\n    \n    for i = 73\n        prime_cache[i] = false\n    \n    for\
    \ i = 79\n        prime_cache[i] = false\n    \n    for i = 83\n        prime_cache[i]\
    \ = false\n    \n    for i = 89\n        prime_cache[i] = false\n    \n    for\
    \ i = 97\n        prime_cache[i] = false\n    \n    for i = 101\n        prime_cache[i]\
    \ = false\n    \n    for i = 113\n        prime_cache[i] = false\n    \n    for\
    \ i = 127\n        prime_cache[i] = false\n    \n    for i = 131\n        prime_cache[i]\
    \ = false\n    \n    for i = 137\n        prime_cache[i] = false\n    \n    for\
    \ i = 141\n        prime_cache[i] = false\n    \n    for i = 147\n        prime_cache[i]\
    \ = false\n    \n    for i = 151\n        prime_cache[i] = false\n    \n    for\
    \ i = 157\n        prime_cache[i] = false\n    \n    for i = 161\n        prime_cache[i]\
    \ = false\n    \n    for i = 163\n        prime_cache[i] = false", "    if n <\
    \ 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        || n % 11\
    \ == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 \n        || n % 23 == 0 ||\
    \ n % 29 == 0 || n % 31 == 0 || n % 37 == 0 \n        || n % 41 == 0 || n % 43\
    \ == 0 || n % 47 == 0 || n % 53 == 0 \n        || n % 59 == 0 || n % 61 == 0 ||\
    \ n % 67 == 0 || n % 71 == 0 \n        || n % 73 == 0 || n % 79 == 0 || n % 83\
    \ == 0 || n % 89 == 0 \n        || n % 97 == 0 || n % 101 == 0 || n % 103 == 0\
    \ || n % 105 == 0 \n        || n % 107 == 0 || n % 109 == 0 || n % 113 == 0 ||\
    \ n % 115 == 0 \n        || n % 117 == 0 || n % 121 == 0 || n % 123 == 0 || n\
    \ % 127 == 0 \n        || n % 129 == 0 || n % 131 == 0 || n % 133 == 0 || n %\
    \ 137 == 0 \n        || n % 139 == 0 || n % 141 == 0 || n % 143 == 0 || n % 145\
    \ == 0 \n        || n % 147 == 0 || n % 149 == 0 || n % 151 == 0 || n % 153 ==\
    \ 0 \n        || n % 157 == 0 || n % 159 == 0 || n % 161 == 0 || n % 163 == 0\
    \ \n        || n % 165 == 0 || n % 167 == 0 || n % 169 == 0 || n % 171 == 0 \n\
    \        || n % 173 == 0 || n % 177 == 0 || n % 179 == 0 || n % 181 == 0 \n  \
    \      || n % 183 == 0 || n % 185 == 0 || n % 187 == 0 || n % 189 == 0 \n    \
    \    || n % 191 == 0 || n % 193 == 0 || n % 195 == 0 || n % 197 == 0 \n      \
    \  || n % 199 == 0 || n % 201 == 0 || n % 203 == 0 || n % 205 == 0 \n        ||\
    \ n % 207 == 0 || n % 209 == 0 || n % 211 == 0 || n % 213 == 0 \n        || n\
    \ % 215 == 0 || n % 217 == 0 || n % 219 == 0 || n % 221 == 0 \n        || n %\
    \ 223 == 0 || n % 225 == 0 || n % 227 == 0 || n % 229 == 0 \n        || n % 231\
    \ == 0 || n % 233 == 0 || n % 235 == 0 || n % 237 == 0 \n        || n % 239 ==\
    \ 0 || n % 241 == 0 || n % 243 == 0 || n % 245 == 0 \n        || n % 247 == 0\
    \ || n % 249 == 0 || n % 251 == 0 || n % 253 == 0 \n        || n % 255 == 0 ||\
    \ n % 257 == 0 || n % 259 == 0 || n % 261 == 0 \n        || n % 263 == 0 || n\
    \ % 265 == 0 || n % 267 == 0 || n % 269 == 0 \n        || n % 271 == 0 || n %\
    \ 273 == 0 || n % 275 == 0 || n % 277 == 0 ", "    if is_prime_cache[n] \n   \
    \     return is_prime_cache[n]\n    if n <= 1 \n        return false\n    if n\
    \ == 2 \n        return true\n    if n % 2 == 0 \n        return false\n    \n\
    \    i = 5\n    while i * i <= n \n        i += 2\n    \n    if n == i \n    \
    \    return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime_cache = Dict()\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time ", "    if n < 2 || n == 1 \n        true\n    else\n        if n % 2 ==\
    \ 0 \n            false\n        else\n            if n % 3 == 0 \n          \
    \      false\n            else\n                if n % 5 == 0 \n             \
    \       false\n                else\n                    if n % 7 == 0 \n    \
    \                    false\n                    else\n                       \
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if\
    \ a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n\
    \    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n\
    \    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n  \
    \  >>> is_prime(1)\n    false\n    \"\"\"", "    if is_prime_cache[n] == true\
    \ \n    else \n        is_prime_cache[n] = is_prime_cache[n] or is_prime_test(n)\
    \ \n    return is_prime_cache[n] \nend\n</cell>\n<code language=julia-1.5>\nis_prime_cache\
    \ = [true]\n</cell>\n<code language=julia-1.5>\nis_prime_test(n::Int64)::Bool\
    \ \n    if n == 1 \n        return true \n    else \n        return false \n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime factors of a given number.", "    if n < 2\
    \ || n % 2 == 0\n        return false\n    \n    i = 5\n    while i * i <= n\n\
    \        if n % i == 0\n            return false\n        i += 6\n    return true\n\
    end", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n   \
    \ if n <= 1 \n        return false\n    \n    if n == 2 \n        return true\n\
    \    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    while i\
    \ * i <= n \n        i += 2\n    \n    if i == n \n        return true\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_prime_cache = [false]\
    \ * (2^(ceil(log2(2))))\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by any number between 1 and 100 (both included).", "    if n < 2 || n % 2 ==\
    \ 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        || n % 11 == 0 || n %\
    \ 13 == 0 || n % 17 == 0 || n % 19 == 0 \n        || n % 23 == 0 || n % 29 ==\
    \ 0 || n % 31 == 0 || n % 37 == 0 \n        || n % 41 == 0 || n % 43 == 0 || n\
    \ % 47 == 0 || n % 53 == 0 \n        || n % 59 == 0 || n % 61 == 0 || n % 67 ==\
    \ 0 || n % 71 == 0 \n        || n % 73 == 0 || n % 79 == 0 || n % 83 == 0 || n\
    \ % 89 == 0 \n        || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 105\
    \ == 0 \n        || n % 107 == 0 || n % 109 == 0 || n % 113 == 0 || n % 117 ==\
    \ 0 \n        || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 || n % 129 == 0\
    \ \n        || n % 131 == 0 || n % 133 == 0 || n % 137 == 0 || n % 139 == 0 \n\
    \        || n % 141 == 0 || n % 143 == 0 || n % 145 == 0 || n % 147 == 0 \n  \
    \      || n % 149 == 0 || n % 151 == 0 || n % 153 == 0 || n % 157 == 0 \n    \
    \    || n % 159 == 0 || n % 161 == 0 || n % 163 == 0 || n % 165 == 0 \n      \
    \  || n % 167 == 0 || n % 169 == 0 || n % 171 == 0 || n % 173 == 0 \n        ||\
    \ n % 177 == 0 || n % 179 == 0 || n % 181 == 0 || n % 183 == 0 \n        || n\
    \ % 185 == 0 || n % 187 == 0 || n % 189 == 0 || n % 191 == 0 \n        || n %\
    \ 193 == 0 || n % 195 == 0 || n % 197 == 0 || n % 199 == 0 \n        || n % 201\
    \ == 0 || n % 203 == 0 || n % 205 == 0 || n % 207 == 0 \n        || n % 209 ==\
    \ 0 || n % 211 == 0 || n % 213 == 0 || n % 215 == 0 \n        || n % 217 == 0\
    \ || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 \n        || n % 225 == 0 ||\
    \ n % 227 == 0 || n % 229 == 0 || n % 231 == 0 \n        || n % 233 == 0 || n\
    \ % 239 == 0 || n % 241 == 0 || n % 243 == 0 \n        || n % 245 == 0 || n %\
    \ 247 == 0 || n % 249 == 0 || n % 251 == 0 \n        || n % 253 == 0 || n % 255\
    \ == 0 || n % 257 == 0 || n % 259 == 0 \n        || n % 261 == 0 || n % 263 ==\
    \ 0 || n % 265 == 0 || n % 267 == 0 \n        || n % 269 == 0 || n % 271 == 0\
    \ || n % 273 == 0 || n % 275 == 0 \n        || n % 277 == 0 || n % 279 == 0 ||\
    \ n % 281 == 0 || n % 283 == 0 ", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else if n % 3 == 0 \n        then return false\n    else if n % 5\
    \ == 0 \n        then return false\n    else if n % 7 == 0 \n        then return\
    \ false\n    else \n        prime_sum::Int64 = 0\n        for i::Int64 in 2..n\
    \ \n            do if n % i == 0 \n                then return false\n       \
    \         prime_sum += i\n        if prime_sum > n \n            then return true\n\
    \        else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime factors\
    \ of a given number.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n < 2 \n        return false\n    \n    if n == 2 \n        return\
    \ true\n    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    while\
    \ i * i <= n \n        if n % i == 0 \n            return false\n        i +=\
    \ 2\n    \n    return true\nend", '    if n < 2 || n % 2 == 0 || n % 3 == 0 ||
    n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19
    == 0 || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 || n % 41 ==
    0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n % 61 == 0 ||
    n % 67 == 0 || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n % 83 == 0 || n %
    89 == 0 || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 107 == 0 || n %
    109 == 0 || n % 113 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123 == 0 || n
    % 127 == 0 || n % 129 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139 == 0 ||
    n % 143 == 0 || n % 147 == 0 || n % 149 == 0 || n % 151 == 0 || n % 157 == 0 ||
    n % 159 == 0 || n % 163 == 0 || n % 167 == 0 || n % 171 == 0 || n % 173 == 0 ||
    n % 177 == 0 || n % 179 == 0 || n % 181 == 0 || n % 183 == 0 || n % 185 == 0 ||
    n % 187 == 0 || n % 189 == 0 || n % 191 == 0 || n % 193 == 0 || n % 197 == 0 ||
    n % 199 == 0 || n % 211 == 0 || n % 213 == 0 || n % 217 == 0 || n % 219 == 0 ||
    n % 221 == 0 || n % 223 == 0 || n % 227 == 0 || n % 229 == 0 || n % 233 == 0 ||
    n % 239 == 0 || n % 241 == 0 || n % 251 == 0 || n % 253 == 0 || n % 257 == 0 ||
    n % 263 == 0 || n % 269 == 0 || n % 271 == 0 || n % 273 == 0 || n % 279 == 0 ||
    n % 281 == 0 || n % 283 == 0 || n % 287 == 0 || n % 291 == 0 || n % 293 == 0 ||
    n % 297 == 0 || n % 301 == 0 || n % 303 == 0 || n % 307 == 0 || n % 309 == 0 ||
    n % 311 == 0 || n % 313 == 0 || n % 315 == 0 || n % 317 == 0 || n % 319 == 0 ||
    n % 321 == 0 || n % 323 == 0 || n % 327 == 0 || n % 329 == 0 || n % 331 == 0 ||
    n % 333 == 0 || n % 337 == 0 || n % 339 == 0 || n % 341 == 0 || n % 343 == 0 ||
    n % 347 == 0 || n % 349 == 0 || n % 351 == 0 || n % 353 == 0 || n % 357 == 0 ||
    n % 359 == 0 || n % 361 == 0 || n % 363 == 0 || n % 367 == 0 || n % 369 == 0 ||
    n % 371 == 0 || n % 373 == 0 || n % 377 == 0 || n % 379 == 0 || n % 381 == 0 ||
    n % 383 == 0 || n % 387 == 0 || n % 389 == 0 || n % 391 == 0 || n % 393 == 0 ||
    n % 397 == 0 || n % 399 == 0 || n % 401 == 0 || n % 403 == 0 || n % 40', "   \
    \ if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n] == false\
    \ \n        else \n            prime_cache[n] = is_prime_cache[n]\n          \
    \  prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache",
  "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n \
    \       then return true\n    else if n % 3 == 0 \n        then return false\n\
    \    else if n % 5 == 0 \n        then return false\n    else if n % 7 == 0 \n\
    \        then return false\n    else \n        return is_prime(3*n+2)\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n\
    \    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n\
    \    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n  \
    \  \"\"\"", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then return false\n\
    \    else if n % 5 == 0 \n        then return false\n    else if n % 7 == 0 \n\
    \        then return false\n    else if n % 11 == 0 \n        then return false\n\
    \    else if n % 13 == 0 \n        then return false\n    else if n % 17 == 0\
    \ \n        then return false\n    else if n % 19 == 0 \n        then return false\n\
    \    else if n % 23 == 0 \n        then return false\n    else if n % 29 == 0\
    \ \n        then return false\n    else if n % 31 == 0 \n        then return false\n\
    \    else if n % 37 == 0 \n        then return false\n    else if n % 41 == 0\
    \ \n        then return false\n    else if n % 43 == 0 \n        then return false\n\
    \    else if n % 47 == 0 \n        then return false\n    else if n % 53 == 0\
    \ \n        then return false\n    else if n % 59 == 0 \n        then return false\n\
    \    else if n % 61 == 0 \n        then return false\n    else if n % 67 == 0\
    \ \n        then return false\n    else if n % 71 == 0 \n        then return false\n\
    \    else if n % 73 == 0 \n        then return false\n    else if n % 79 == 0\
    \ \n        then return false\n    else if n % 83 == 0 \n        then return false\n\
    \    else if n % 89 == 0 \n        then return false\n    else if n % 97 == 0\
    \ \n        then return false\n    else if n % 101 == 0 \n        then return\
    \ false\n    else if n % 103 == 0 \n        then return false\n    else if n %\
    \ 107 == 0 \n        then return false\n    else if n % 113 == 0 \n        then\
    \ return false\n    else if n % 117 == 0 \n        then return false\n    else\
    \ if n % 121 == 0 \n        then return false\n    else if n % 123 == 0 \n   \
    \     then return false\n    else if n % 127 == 0 \n        then return false\n\
    \    else if n % 131 == 0 \n        then return false\n    else if n % 137 ==\
    \ 0 \n        then return false\n    else if n % 141 == 0 \n        then return\
    \ false\n    else if n % 147 == 0 \n        then return false\n    else if n %\
    \ 151 == 0 \n        then return false\n    else if n % 157 == 0 \n        then\
    \ return false\n    else if n % 163 == 0 \n        then return false\n    else ",
  "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n % 3 == 0\
    \ \n        then return false\n    else if n % 5 == 0 \n        then return false\n\
    \    else if n % 7 == 0 \n        then return false\n    else \n        return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given\
    \ number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>>\
    \ is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n\
    \    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n  \
    \  >>> is_prime(1)\n    false\n    \"\"\"", "    if is_prime_cache[n] \n     \
    \   return is_prime_cache[n]\n    \n    prime_cache[n] = true\n    \n    if n\
    \ == 2 || n == 3 || n == 5 || n == 7 || n == 11 \n        prime_cache[n] = true\n\
    \        return true\n    \n    if n % 2 == 0 || n % 3 == 0 \n        prime_cache[n]\
    \ = false\n        return false\n    \n    if n % 5 == 0 \n        prime_cache[n]\
    \ = false\n        return false\n    \n    if n % 7 == 0 \n        prime_cache[n]\
    \ = false\n        return false\n    \n    if n % 11 == 0 \n        prime_cache[n]\
    \ = false\n        return false\n    \n    prime_cache[n] = true\n    return true\n\
    end", "    if n < 2 || n == 0 || n % 2 == 1 || n % 3 == 0 \n    then return false\n\
    \    else if n == 2 || n == 3 \n    then return true\n    else if n % 4 == 0 \n\
    \    then return false\n    else if n % 6 == 0 \n    then return false\n    else\
    \ if n % 8 == 0 \n    then return false\n    else if n % 10 == 0 \n    then return\
    \ false\n    else if n % 12 == 0 \n    then return false\n    else if n % 14 ==\
    \ 0 \n    then return false\n    else if n % 16 == 0 \n    then return false\n\
    \    else if n % 18 == 0 \n    then return false\n    else if n % 20 == 0 \n \
    \   then return false\n    else if n % 22 == 0 \n    then return false\n    else\
    \ if n % 24 == 0 \n    then return false\n    else if n % 26 == 0 \n    then return\
    \ false\n    else if n % 28 == 0 \n    then return false\n    else if n % 30 ==\
    \ 0 \n    then return false\n    else if n % 32 == 0 \n    then return false\n\
    \    else if n % 34 == 0 \n    then return false\n    else if n % 36 == 0 \n \
    \   then return false\n    else if n % 38 == 0 \n    then return false\n    else\
    \ if n % 40 == 0 \n    then return false\n    else if n % 42 == 0 \n    then return\
    \ false\n    else if n % 44 == 0 \n    then return false\n    else if n % 46 ==\
    \ 0 \n    then return false\n    else if n % 48 == 0 \n    then return false\n\
    \    else if n % 50 == 0 \n    then return false\n    else if n % 52 == 0 \n \
    \   then return false\n    else if n % 54 == 0 \n    then return false\n    else\
    \ if n % 56 == 0 \n    then return false\n    else if n % 58 == 0 \n    then return\
    \ false\n    else if n % 60 == 0 \n    then return false\n    else if n % 62 ==\
    \ 0 \n    then return false\n    else if n % 64 == 0 \n    then return false\n\
    \    else if n % 66 == 0 \n    then return false\n    else if n % 68 == 0 \n \
    \   then return false\n    else if n % 70 == 0 \n    then return false\n    else\
    \ if n % 72 == 0 \n    then return false\n    else if n % 74 == 0 \n    then return\
    \ false\n    else if n % 76 == 0 \n    then return false", '    if n < 2 || n
    % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 ==
    0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 ||
    n % 37 == 0 || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 || n %
    59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 || n % 73 == 0 || n % 79
    == 0 || n % 83 == 0 || n % 89 == 0 || n % 97 == 0 || n % 101 == 0 || n % 103 ==
    0 || n % 107 == 0 || n % 111 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123 ==
    0 || n % 127 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139 == 0 || n % 143 ==
    0 || n % 147 == 0 || n % 149 == 0 || n % 151 == 0 || n % 157 == 0 || n % 161 ==
    0 || n % 163 == 0 || n % 167 == 0 || n % 173 == 0 || n % 179 == 0 || n % 181 ==
    0 || n % 185 == 0 || n % 191 == 0 || n % 193 == 0 || n % 197 == 0 || n % 199 ==
    0 || n % 211 == 0 || n % 213 == 0 || n % 217 == 0 || n % 221 == 0 || n % 227 ==
    0 || n % 229 == 0 || n % 233 == 0 || n % 239 == 0 || n % 241 == 0 || n % 251 ==
    0 || n % 257 == 0 || n % 261 == 0 || n % 263 == 0 || n % 269 == 0 || n % 271 ==
    0 || n % 277 == 0 || n % 281 == 0 || n % 283 == 0 || n % 293 == 0 || n % 307 ==
    0 || n % 309 == 0 || n % 311 == 0 || n % 313 == 0 || n % 317 == 0 || n % 321 ==
    0 || n % 323 == 0 || n % 329 == 0 || n % 337 == 0 || n % 341 == 0 || n % 347 ==
    0 || n % 349 == 0 || n % 353 == 0 || n % 359 == 0 || n % 361 == 0 || n % 363 ==
    0 || n % 365 == 0 || n % 367 == 0 || n % 369 == 0 || n % 371 == 0 || n % 377 ==
    0 || n % 381 == 0 || n % 383 == 0 || n % 389 == 0 || n % 397 == 0 || n % 401 ==
    0 || n % 403 == 0 || n % 407 == 0 || n % 409 == 0 || n % 411 == 0 || n % 413 ==
    0 || n % 415 == 0 || n % 417 == 0 || n % 419 == 0 || n % 421 == 0 || n % 423 ==
    0 || n % 427 == 0 || n % 429 == 0 || n % 433 == 0 || n % 439 == 0 || n % 441 ==
    0 || n % 449 == 0 || n % 451 == 0 || n % 457 == 0 || n % 461 == 0 || n % 463 ==
    0 || n % 467 == 0 || n % 469 == 0 || n % 471 == 0 || n % 477 == 0 || n % 481 ==
    0 || n % 483 == 0 || n % 487 == ', "    if is_prime_impl(n) == true\n    else\
    \ return false\nend", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0\
    \ || n % 7 == 0 \n        then return false\n    else if n == 1 || n == 3 || n\
    \ == 5 || n == 7 || n == 9 || n == 11 \n        then return true\n    else if\
    \ n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 9 == 0 \n      \
    \  then return false\n    else if n % 11 == 0 then return false\n    else return\
    \ is_prime(3*n-1) || is_prime(3*n+1)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of a given number. \nFor example,\
    \ for the number 12, there are two divisors: 2 and 3. \nWrite a function that\
    \ returns the number of divisors of a given number. \nFor example, for the number\
    \ 12, there are two divisors: 2 and 3. \nWrite a function that returns the number\
    \ of divisors of a given number. \nFor example, for the number 12, there are two\
    \ divisors: 2 and 3. \nWrite a function that returns the number of divisors of\
    \ a given number. \nFor example, for the number 12, there are two divisors: 2\
    \ and 3. \nWrite a function that returns the number of divisors of a given number.\
    \ \nFor example, for the number 12, there are two divisors: 2 and 3. \nWrite a\
    \ function that returns the number of divisors of a given number. \nFor example,\
    \ for the number 12, there are two divisors: 2 and 3. \nWrite a function that\
    \ returns the number of divisors of a given number. \nFor example, for the number\
    \ 12, there are two divisors: 2 and 3. \nWrite a function that returns the number\
    \ of divisors of a given number. \nFor example, for the number 12, there are two\
    \ divisors: 2 and 3. \nWrite a function that returns the number of divisors of\
    \ a given number. \nFor example, for the number 12, there are two divisors: 2\
    \ and 3. \nWrite a function that returns the number of divisors of a given number.\
    \ \nFor example, for the number 12, there are two divisors: 2 and 3. \nWrite a\
    \ function that returns the number of divisors of a given number. \nFor example,\
    \ for the number 12, there are two divisors: 2 and 3. \nWrite a function that\
    \ returns the number of divisors of a given number. \nFor example, for the number\
    \ 12, there are two divisors: 2 and 3. \nWrite a function that returns the number\
    \ of divisors of a given number. \nFor example, for the number 12, there are two\
    \ divisors: 2 and 3. \nWrite a function that returns the number of divisors of\
    \ a given number. \nFor example, for the number 12, there are two divisors: 2\
    \ and 3. \nWrite a function that returns the number of divisors of a given number.\
    \ \nFor example, for the number 12, there are two divisors: 2 and 3. \nWrite a\
    \ function that returns the number of divisors of a given number. \nFor example,\
    \ for the number 12, there are two divisors: 2 and 3. \nWrite a function that\
    \ returns the number of divisors of a given number. \nFor example, for the number\
    \ 12, there are two divisors: 2 and 3. \nWrite a function that returns the number\
    \ of divisors of a given number. \nFor example, for the number 12, there are two\
    \ divisors: 2 and 3. \n", "    if is_prime_cache[n] == true \n    else \n    \
    \    if is_prime_cache[n] == false \n        then \n            if is_prime_cache[n+1]\
    \ == true \n            then \n                is_prime_cache[n+1] == false \n\
    \            else \n                is_prime_cache[n+1] == is_prime(n+2) \n  \
    \      else \n            is_prime_cache[n] == is_prime(n+2) \n    end\nend\n\
    is_prime_cache = [false, true]\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of prime factors of a given number.", "    if n < 2 || n\
    \ % 2 == 0\n        return false\n    \n    primes :: [Int64] = [2..n]\n    \n\
    \    for p in primes\n        if n % p == 0\n            return false\n    \n\
    \    return true\nend", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 1 \n        return false\n    if n == 2 \n        return true\n \
    \   if n % 2 == 0 \n        return false\n    if n % 3 == 0 \n        return false\n\
    \    \n    prime_cache = [true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, ", "    if n < 2 || n % 2 ==\
    \ 0 \n        then return false\n    else if n == 2 \n        then return true\n\
    \    else \n        for i in 2..n \n            do if n % i == 0 \n          \
    \      then return false\n    else \n        return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n\
    \    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n\
    \    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n  \
    \  \"\"\"", "    if is_prime_impl(n) \n    else \n        false\nend", "    if\
    \ is_prime_impl(n) \n    else \n        prime_impl_error(n)\nend", "    if n <\
    \ 2 || n % 2 == 0\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if n == 1\n        return true\n    \n    if n % 2 == 0\n        return\
    \ false\n    \n    i = 5\n    while i * i <= n\n        if n % i == 0\n      \
    \      return false\n        i += 6\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(61)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=",
  "    if n < 2 || n % 2 == 0\n        return false\n    \n    i = 2\n    while i\
    \ <= sqrt(n)\n        if n % i == 0\n            return false\n        i += 1\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(6)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.3>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by all numbers from 1 to 100. Hint: Use a for loop.", "    if n < 2 || n % 2\
    \ == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        || n % 11 == 0 || n\
    \ % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0 \n        || n % 29 ==\
    \ 0 || n % 31 == 0 || n % 37 == 0 || n % 41 == 0 || n % 43 == 0 \n        || n\
    \ % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n % 61 == 0 || n % 67 == 0 \n   \
    \     || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n % 83 == 0 || n % 89 ==\
    \ 0 \n        || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 105 == 0 ||\
    \ n % 107 == 0 \n        || n % 109 == 0 || n % 113 == 0 || n % 117 == 0 || n\
    \ % 121 == 0 || n % 123 == 0 \n        || n % 127 == 0 || n % 129 == 0 || n %\
    \ 131 == 0 || n % 133 == 0 || n % 135 == 0 \n        || n % 137 == 0 || n % 139\
    \ == 0 || n % 141 == 0 || n % 143 == 0 || n % 145 == 0 \n        || n % 147 ==\
    \ 0 || n % 149 == 0 || n % 151 == 0 || n % 153 == 0 || n % 155 == 0 \n       \
    \ || n % 157 == 0 || n % 159 == 0 || n % 161 == 0 || n % 163 == 0 || n % 165 ==\
    \ 0 \n        || n % 167 == 0 || n % 169 == 0 || n % 171 == 0 || n % 173 == 0\
    \ || n % 175 == 0 \n        || n % 177 == 0 || n % 179 == 0 || n % 181 == 0 ||\
    \ n % 183 == 0 || n % 185 == 0 \n        || n % 187 == 0 || n % 189 == 0 || n\
    \ % 191 == 0 || n % 193 == 0 || n % 195 == 0 \n        || n % 197 == 0 || n %\
    \ 199 == 0 || n % 201 == 0 || n % 203 == 0 || n % 205 == 0 \n        || n % 207\
    \ == 0 || n % 209 == 0 || n % 211 == 0 || n % 213 == 0 || n % 215 == 0 \n    \
    \    || n % 217 == 0 || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 || n % 225\
    \ == 0 \n        || n % 227 == 0 || n % 229 == 0 || n % 231 == 0 || n % 233 ==\
    \ 0 || n % 235 == 0 \n        || n % 237 == 0 || n % 239 == 0 || n % 241 == 0\
    \ || n % 243 == 0 || n % 245 == 0 \n        || n % 247 == 0 || n % 249 == 0 ||\
    \ n % 251 == 0 || n % 253 == 0 || n % 255 == 0 \n        || n % 257 == 0 || n\
    \ % 259 == 0 || n % 261 == 0 || n % 263 == 0 || n % 265 == 0 \n        || n %\
    \ 267 == 0 || n % 269 == 0 || n % 271 == 0 || n % 273 == 0 || n % 275 == 0 \n\
    \        || n % 277 == 0 || n % 279 == 0 || ", '    if n < 2 || n % 2 == 0 ||
    n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17
    == 0 || n % 19 == 0 || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 ==
    0 || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 ||
    n % 61 == 0 || n % 67 == 0 || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n %
    83 == 0 || n % 89 == 0 || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 107
    == 0 || n % 109 == 0 || n % 113 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123
    == 0 || n % 127 == 0 || n % 129 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139
    == 0 || n % 143 == 0 || n % 147 == 0 || n % 149 == 0 || n % 151 == 0 || n % 157
    == 0 || n % 161 == 0 || n % 163 == 0 || n % 167 == 0 || n % 173 == 0 || n % 179
    == 0 || n % 181 == 0 || n % 185 == 0 || n % 187 == 0 || n % 191 == 0 || n % 193
    == 0 || n % 197 == 0 || n % 199 == 0 || n % 211 == 0 || n % 213 == 0 || n % 217
    == 0 || n % 219 == 0 || n % 223 == 0 || n % 227 == 0 || n % 229 == 0 || n % 233
    == 0 || n % 239 == 0 || n % 241 == 0 || n % 251 == 0 || n % 257 == 0 || n % 263
    == 0 || n % 269 == 0 || n % 271 == 0 || n % 277 == 0 || n % 281 == 0 || n % 283
    == 0 || n % 293 == 0 || n % 307 == 0 || n % 309 == 0 || n % 311 == 0 || n % 313
    == 0 || n % 317 == 0 || n % 331 == 0 || n % 337 == 0 || n % 341 == 0 || n % 347
    == 0 || n % 349 == 0 || n % 353 == 0 || n % 359 == 0 || n % 361 == 0 || n % 363
    == 0 || n % 365 == 0 || n % 367 == 0 || n % 369 == 0 || n % 371 == 0 || n % 377
    == 0 || n % 381 == 0 || n % 383 == 0 || n % 389 == 0 || n % 397 == 0 || n % 401
    == 0 || n % 403 == 0 || n % 409 == 0 || n % 411 == 0 || n % 413 == 0 || n % 415
    == 0 || n % 417 == 0 || n % 419 == 0 || n % 421 == 0 || n % 423 == 0 || n % 429
    == 0 || n % 433 == 0 || n % 441 == 0 || n % 449 == 0 || n % 457 == 0 || n % 461
    == 0 || n % 463 == 0 || n % 467 == 0 || n % 469 == 0 || n % 471 == 0 || n % 477
    == 0 || n % 481 == 0 || n % 483 == 0 || n % 485 == 0 || n % 491 == 0 || n % 499
    == 0 || n % 503 == 0 || n % ', "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else if n == 2 \n        then return true\n    else \n        for\
    \ m in range(3, floor(sqrt(n))+1, 2) \n            if n % m == 0 \n          \
    \      then return false\n    else \n        return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 2\n \
    \   while i <= sqrt(n) \n        if n % i == 0 \n            return false\n  \
    \      i += 1 \n    return true\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ is_prime(101)\n</cell>\n<code language=julia-1.4>\n@time is_prime(11)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by all numbers from 1\
    \ to 100, and false otherwise.\nHint: Use a for loop.", "    if n < 2 || n % 2\
    \ == 0\n        return false\n    \n    i = 5\n    while i * i <= n\n        if\
    \ n % i == 0\n            return false\n        i += 6\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given number is even,\
    \ and false otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n\
    \    true\n    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n \
    \   >>> is_even(61)\n    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n\
    \    false\n    \"\"\"", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 ==\
    \ 0 || n % 7 == 0 \n    then return false\n    else return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n\
    \ == 2 \n        then return true\n    else \n        begin \n            i =\
    \ 2\n            while i <= sqrt(n) \n                do \n                  \
    \  if n % i == 0 \n                        then return false \n              \
    \      else \n                        i = i + 1 \n            end \n         \
    \   return true \n        end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    Return true if a given number is even, and false otherwise.\n    >>> is_even(6)\n\
    \    false\n    >>> is_even(101)\n    true\n    >>> is_even(11)\n    true\n  \
    \  >>> is_even(13441)\n    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n\
    \    false\n    >>> is_even(1)\n    false\n    \"\"\"", "    if n < 2 || n % 2\
    \ == 0 \n        then return false\n    else if n == 2 \n        then return true\n\
    \    else if n % 3 == 0 \n        then return false\n    else \n        do return\
    \ is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the first n prime numbers. \nHint: Use\
    \ a while loop and a counter variable.", "    if n < 2 || n % 2 == 0 \n      \
    \  then return false\n    else if n == 2 \n        then return true\n    else\
    \ if n % 3 == 0 \n        then return false\n    else \n        for m in range(3,\
    \ floor(sqrt(n)), 2) \n            if n % m == 0 \n                then return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should take an optional argument n\
    \ that defaults to 10.", "    if n < 2 || n % 2 == 0 \n        then return false\n\
    \    else \n        if is_prime(n - 1) \n            then return true\n      \
    \  else return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by any number between\
    \ 1 and 100. Hint: Use a for loop.", "    if n < 2 || n % 2 == 0 \n        then\
    \ return false\n    else if n == 2 \n        then return true\n    else \n   \
    \     begin \n            x <- 3\n            while x < n \n                do\
    \ if n % x == 0 \n                    then return false\n                else\n\
    \                    x <- x + 2\n        end\nend\n</code>\n<|/ a tags=julia,primes\
    \ |>\n<| c |>\nThe `is_prime` function can be simplified a little bit: `return\
    \ n <= 2 && all(n % i == 0 for i in 2:floor(n/2))`\n<|/ c |>\n<| c |>\nThanks\
    \ for the suggestion! I edited my answer to include your suggestion.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe first thing that comes to mind is to use an iterative sieve.\
    \ Here is a simple implementation in Julia:\n<code>", "    if n < 2 || n % 2 ==\
    \ 0 \n        then return false\n    else if n == 2 \n        then return true\n\
    \    else if n % 3 == 0 \n        then return false\n    else if n % 5 == 0 \n\
    \        then return false\n    else if n % 7 == 0 \n        then return false\n\
    \    else \n        return is_prime(3*n-5) \nend\n</cell>\n<code language=julia-1.3>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.3>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.3>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a given number is divisible by all\
    \ numbers from 1 to 20. \nHint: Use a for loop.", "    if n < 2 || n % 2 == 0\
    \ || n % 3 == 0 \n        then return false\n    else if n == 2 || n == 3 \n \
    \       then return true\n    else if n % 5 == 0 \n        then return false\n\
    \    else if n % 7 == 0 \n        then return false\n    else \n        n <= sqrt(n)\
    \ \n            then return true\n        else return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by any number between 1 and 100. Hint: Use a for loop.", "    if is_prime_impl(n)\
    \ == true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n    if\
    \ n <= 1 \n        return false\n    \n    if n % 2 == 0 \n        return false\n\
    \    \n    i = 5\n    while i * i <= n \n        i += 2\n    \n    if n == 1 \n\
    \        return true\n    \n    if n % i == 0 \n        return false\n    \n \
    \   return is_prime_cache[n] = is_prime(i)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a given number is divisible by another\
    \ number.", "    if is_prime_impl(n) then return true else return false end\n\
    end\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime_impl(n::Int64)", " \
    \   if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n\
    \        return false\n    if n == 2 \n        return true\n    if n % 2 == 0\
    \ \n        return false\n    \n    i = 5\n    while i * i <= n \n        i +=\
    \ 2\n    if i == n \n        return true\n    \n    return false\nend", "    if\
    \ n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        then\
    \ return false\n    else if n == 1 || n == 3 || n == 5 || n == 7 \n        then\
    \ return true\n    else if n % 6 == 1 then return is_prime(n / 6) else return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)", " \
    \   if n < 2 || n % 2 == 0 \n        then return false\n    else if n % 3 == 0\
    \ \n        then return false\n    else if n % 5 == 0 \n        then return false\n\
    \    else if n % 7 == 0 \n        then return false\n    else return true\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a given number is\
    \ divisible by any number between 2 and 100. \nHint: use is_divisible.", "   \
    \ if n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n  \
    \      then return true\n    else \n        for m in range(3, floor(sqrt(n))+1,\
    \ 2) \n            if n % m == 0 \n            then return false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nis_prime(6)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(101)\n</cell>\n<code language=julia-1.4>\nis_prime(11)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(13441)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(61)\n</cell>\n<code language=julia-1.4>\nis_prime(4)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that checks if a given number is even.\nHint: Use isodd.", "    if n < 2 ||\
    \ n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        then return false\n\
    \    else if n == 1 || n == 2 || n == 3 || n == 5 || n == 7 \n        then return\
    \ true\n    else if n % 6 == 0 then return false\n    else if n % 12 == 1 then\
    \ return false\n    else if n % 12 == 2 then return true\n    else if n % 12 ==\
    \ 3 then return false\n    else if n % 12 == 5 then return true\n    else if n\
    \ % 12 == 7 then return false\n    else if n % 12 == 11 || n % 12 == 13 then return\
    \ true\n    else if n % 12 == 17 then return false\n    else if n % 12 == 19 then\
    \ return true\n    else if n % 12 == 23 then return false\n    else if n % 12\
    \ == 29 then return true\n    else if n % 12 == 31 then return false\n    else\
    \ if n % 12 == 37 then return true\n    else if n % 12 == 43 then return false\n\
    \    else if n % 12 == 47 then return true\n    else if n % 12 == 53 then return\
    \ false\n    else if n % 12 == 59 then return true\n    else if n % 12 == 61 then\
    \ return false\n    else if n % 12 == 73 then return true\n    else if n % 12\
    \ == 79 then return false\n    else if n % 12 == 91 then return true\n    else\
    \ if n % 12 == 111 then return false\n    else if n % 12 == 131 then return true\n\
    \    else if n % 12 == 137 then return false\n    else if n % 12 == 139 then return\
    \ true\n    else if n % 12 == 149 then return false\n    else if n % 12 == 151\
    \ then return true\n    else if n % 12 == 157 then return false\n    else if n\
    \ % 12 == 159 then return true\n    else if n % 12 == 163 then return false\n\
    \    else if n % 12 == 167 then return true\n    else if n % 12 == 173 then return\
    \ false\n    else if n % 12 == 179 then return true\n    else if n % 12 == 181\
    \ then return false\n    else if n % 12 == 191 then return true\n    else if n\
    \ % 12 == 193 then return false\n    else if n % 12 == 197 then return true\n\
    \    else if n % 12 == 199 then return false\n    else if n % 12 == 210 then return\
    \ true\n    else if n % 12 == 211 then return false\n    else if n % 12 == 213",
  "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n \
    \       return false\n    if n == 2 \n        return true\n    if n % 2 == 0 \n\
    \        return false\n    if n % 3 == 0 \n        return false\n    \n    i =\
    \ 5\n    while i * i <= n \n        i += 2\n    if i == n \n        return true\n\
    \    \n    primes = primes_cache\n    primes_cache = []\n    \n    while primes[i]\
    \ \n        primes_cache.append(primes[i])\n        i += 1\n    \n    for p in\
    \ primes_cache \n        if n % p == 0 \n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of prime factors of a given number.", "    if n < 2 || n % 2 == 0 \n       \
    \ return false\n    else \n        return true\nend\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.0>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(1)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of prime factors of a given number.", " \
    \   if n < 2 || n % 2 == 0 \n        then return false\n    else \n        for\
    \ m in range(3, n+1, 2) \n            if n % m == 0 \n                then return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<text>\nExercise\nWrite a function that checks if a given number is divisible\
    \ by all numbers from 1 to 20.", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false \n    else \n        if is_prime(n / 2) \n            then return true\
    \ \n        else return false \nend\n</cell>\n<text>\nExercise: Write a function\
    \ that checks if a given number is divisible by any number between 1 and a given\
    \ number. Hint: Use a while loop.", "    if n < 2 || n % 2 == 0\n        return\
    \ false\n    \n    i = 5\n    while i * i <= n\n        if n % i == 0\n      \
    \      return false\n        i += 6\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise\nWrite a function that checks if a given number is prime, and\
    \ returns true or false accordingly.", "    if is_prime_impl(n) then return true\
    \ else return false end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a given number is divisible by another number.", "    if n < 2 ||\
    \ n % 2 == 0\n        return false\n    \n    i = 5\n    while i * i <= n\n  \
    \      i += 1\n        if n % i == 0\n            return false\n    return true\n\
    end", "    if n < 2 || n % 2 == 0\n        return false\n    \n    for d in range(3,\
    \ floor(sqrt(n)), 2)\n        if n % d == 0\n            return false\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given\
    \ number is even, and false otherwise.\n    >>> is_even(6)\n    false\n    >>>\
    \ is_even(101)\n    true\n    >>> is_even(11)\n    true\n    >>> is_even(13441)\n\
    \    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n    false\n    >>>\
    \ is_even(1)\n    false\n    \"\"\"", "    if n < 2 || n % 2 == 0 \n        then\
    \ return false\n    else if n == 2 \n        then return true\n    else \n   \
    \     for m in range(3, floor(sqrt(n)), 2)\n            if n % m == 0\n      \
    \      then return false\n        end\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns the number of prime factors of a given number.",
  '    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11
    == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0 || n % 29 ==
    0 || n % 31 == 0 || n % 37 == 0 || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 ||
    n % 53 == 0 || n % 59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 || n %
    73 == 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 || n % 97 == 0 || n % 101
    == 0 || n % 103 == 0 || n % 107 == 0 || n % 109 == 0 || n % 113 == 0 || n % 117
    == 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 || n % 129 == 0 || n % 131
    == 0 || n % 137 == 0 || n % 139 == 0 || n % 143 == 0 || n % 147 == 0 || n % 149
    == 0 || n % 151 == 0 || n % 157 == 0 || n % 161 == 0 || n % 163 == 0 || n % 167
    == 0 || n % 173 == 0 || n % 179 == 0 || n % 181 == 0 || n % 185 == 0 || n % 187
    == 0 || n % 191 == 0 || n % 193 == 0 || n % 197 == 0 || n % 199 == 0 || n % 211
    == 0 || n % 213 == 0 || n % 217 == 0 || n % 219 == 0 || n % 223 == 0 || n % 227
    == 0 || n % 229 == 0 || n % 233 == 0 || n % 239 == 0 || n % 241 == 0 || n % 251
    == 0 || n % 257 == 0 || n % 263 == 0 || n % 269 == 0 || n % 271 == 0 || n % 277
    == 0 || n % 281 == 0 || n % 283 == 0 || n % 293 == 0 || n % 303 == 0 || n % 307
    == 0 || n % 309 == 0 || n % 311 == 0 || n % 313 == 0 || n % 315 == 0 || n % 317
    == 0 || n % 319 == 0 || n % 323 == 0 || n % 329 == 0 || n % 331 == 0 || n % 337
    == 0 || n % 341 == 0 || n % 347 == 0 || n % 349 == 0 || n % 353 == 0 || n % 359
    == 0 || n % 361 == 0 || n % 367 == 0 || n % 369 == 0 || n % 373 == 0 || n % 377
    == 0 || n % 381 == 0 || n % 383 == 0 || n % 389 == 0 || n % 397 == 0 || n % 401
    == 0 || n % 403 == 0 || n % 407 == 0 || n % 409 == 0 || n % 411 == 0 || n % 413
    == 0 || n % 415 == 0 || n % 417 == 0 || n % 419 == 0 || n % 421 == 0 || n % 423
    == 0 || n % 427 == 0 || n % 429 == 0 || n % 433 == 0 || n % 439 == 0 || n % 441
    == 0 || n % 449 == 0 || n % 451 == 0 || n % 457 == 0 || n % 461 == 0 || n % 463
    == 0 || n % 467 == 0 || n % 469 == 0 || n % 473 == 0 || n % ', "    if n < 2\n\
    \        return false\n    if n == 2\n        return true\n    if n % 2 == 0\n\
    \        return false\n    \n    i = 5\n    while i * i <= n\n        i += 2\n\
    \    return isprime(n)\nend", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else if n == 2 \n        then return true\n    else \n        begin\
    \ \n            i = 5\n            while i * i <= n \n                do \n  \
    \                  if n % i == 0 \n                        then return false \n\
    \                    i += 2 \n            end \n            return true\n    \
    \    end\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of prime factors of a given number.", "    if n < 2\n        return\
    \ false\n    \n    if n == 2\n        return true\n    \n    if n % 2 == 0\n \
    \       return false\n    \n    i = 5\n    \n    while i * i <= n\n        i +=\
    \ 1\n    \n    if n % i == 0\n        return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>", "    if n < 2 || n %\
    \ 2 == 0 \n        return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if is_prime_impl(n) == true\n    else \n        error(\"The given\
    \ number is not prime\")\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n < 2 || n % 2 == 0\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if a number is\
    \ even, and False otherwise.\nWrite a function that returns True if a number is\
    \ odd, and False otherwise.\nWrite a function that returns True if a number is\
    \ prime, and False otherwise.\nWrite a function that returns True if a number\
    \ is even, and False otherwise.\nWrite a function that returns True if a number\
    \ is odd, and False otherwise.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n <= 1 \n        return false\n    \n    if n == 2 \n        return\
    \ true\n    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    while\
    \ i * i <= n \n        i += 2\n    \n    if n == i \n        return true\n   \
    \ \n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_prime_cache\
    \ = [false, true]\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.5>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(62)\n</cell>\n", "    if n < 2 || n\
    \ % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n    then return false\n\
    \    else return true\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(101)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.0>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.0>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the first n prime numbers. \n\
    Hint: Use a for loop to iterate over all numbers from 2 to n.", "    if n < 2\
    \ || n % 2 == 0 \n        then return false\n    else if n == 2 \n        then\
    \ return true\n    else if n % 3 == 0 \n        then return false\n    else \n\
    \        for m in range(3, floor(sqrt(n)), 2) \n            do if n % m == 0 \n\
    \                then return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n\
    \    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n\
    \    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n  \
    \  \"\"\"", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 || n % 11 == 0 \n    then return false\n    else return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime factors of a given number.", "    if is_prime_impl(n) ==\
    \ true\n    else \n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-",
  "    if is_prime_impl(n) \n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_prime(6)\n@test is_prime(101)\n@test is_prime(11)\n@test is_prime(13441)\n\
    @test is_prime(61)\n@test is_prime(4)\n@test is_prime(1)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is divisible by another number.\
    \ \nThe function should take two arguments: an integer $n$ and an integer $d$.\
    \ \nThe function should return true if the number is divisible by $d$, and false\
    \ otherwise.\nThe function should return false if the number is less than or equal\
    \ to 0.", "    if n < 2 || n % 2 == 0\n        return false\n    \n    i = 5\n\
    \    while i*i <= n\n        if n % i == 0\n            return false\n       \
    \ i += 2\n    return true\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=", "  \
    \  if n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n \
    \       then return true\n    else \n        for m in 3:(n-1)/2 \n           \
    \ do if n % m == 0 \n                then return false\n    else \n        return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given\
    \ number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>>\
    \ is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n\
    \    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n  \
    \  >>> is_prime(1)\n    false\n    \"\"\"", "    if n < 2 || n % 2 == 0 \n   \
    \     then return false\n    else if n == 2 \n        then return true\n    else\
    \ \n        for i in 2..n \n            do if n % i == 0 \n                then\
    \ return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n\
    \    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n\
    \    false\n    >>> is_prime(1)\n    false\n    \"\"\"", "    if n < 2 || n %\
    \ 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else if n % 3 == 0 \n        then return false\n    else if n % 5\
    \ == 0 \n        then return false\n    else \n        do return (is_prime(n -\
    \ 1) || is_prime(n - 3) || is_prime(n - 5)) end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a given number is divisible by another given number.\
    \ \nFor example, divisible(7, 2) should return true. \nWrite a function that checks\
    \ if a given number is divisible by all numbers from 1 to 100. \nFor example,\
    \ divisible(7, 100) should return true. \nWrite a function that checks if a given\
    \ number is divisible by all numbers from 1 to 10000. \nFor example, divisible(7,\
    \ 10000) should return true. \nWrite a function that checks if a given number\
    \ is divisible by all numbers from 1 to 1000000. \nFor example, divisible(7, 1000000)\
    \ should return true. \nWrite a function that checks if a given number is divisible\
    \ by all numbers from 1 to 100000000. \nFor example, divisible(7, 100000000) should\
    \ return true. \nWrite a function that checks if a given number is divisible by\
    \ all numbers from 1 to 1000000000000. \nFor example, divisible(7, 1000000000000)\
    \ should return true. \nWrite a function that checks if a given number is divisible\
    \ by all numbers from 1 to 1000000000000000. \nFor example, divisible(7, 1000000000000000)\
    \ should return true. \nWrite a function that checks if a given number is divisible\
    \ by all numbers from 1 to 1000000000000000000. \nFor example, divisible(7, 1000000000000000000)\
    \ should return true. \nWrite a function that checks if a given number is divisible\
    \ by all numbers from 1 to 100000000000000000000. \nFor example, divisible(7,\
    \ 100000000000000000000) should return true. \nWrite a function that checks if\
    \ a given number is divisible by all numbers from 1 to 100000000000000000000000.\
    \ \nFor example, divisible(7, 100000000000000000000000) should return true. \n\
    Write a function that checks if a given number is divisible by all numbers from\
    \ 1 to 100000000000000000000000000. \nFor example, divisible(7, ", "    if is_prime_impl(n)\
    \ == true\n    else \n        error(\"is_prime: n is not prime\")\n    end\nend",
  "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n    if n < 2\
    \ \n        return false\n    \n    if n == 2 \n        return true\n    \n  \
    \  if n % 2 == 0 \n        return false\n    \n    i = 5\n    while i * i <= n\
    \ \n        i += 2\n    \n    if n == i \n        return true\n    \n    return\
    \ false\nend", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then return\
    \ false\n    else if n % 5 == 0 \n        then return false\n    else if n % 7\
    \ == 0 \n        then return false\n    else \n        return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n    true\n\
    \    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n\
    \    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n    false\n  \
    \  \"\"\"", "    if n < 2 || n % 2 == 0\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise\nWrite a function that checks if a given\
    \ number is divisible by any number between 1 and a given number. For example,\
    \ if the given number is 10, the function should return true if the number is\
    \ divisible by 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10.", "    if n == 1\n        return\
    \ true\n    \n    if n % 2 == 0\n        return false\n    \n    i = 5\n    while\
    \ i * i <= n\n        if n % i == 0\n            return false\n        i = i +\
    \ 6\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_prime(6)\
    \ == false\n@assert is_prime(101) == true\n@assert is_prime(11) == true\n@assert\
    \ is_prime(13441) == true\n@assert is_prime(61) == true\n@assert is_prime(4) ==\
    \ false\n@assert is_prime(1) == false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime factors of a given number. For example, given\
    \ $n = 2^{1000}$ you should return $2^{1000}$, $3^{1000}$, $5^{1000}$, $7^{1000}$,\
    \ $11^{1000}$, $13^{1000}$, $17^{1000}$, $19^{1000}$, $23^{1000}$, $29^{1000}$,\
    \ $31^{1000}$, $37^{1000}$, $41^{1000}$, $43^{1000}$, $47^{1000}$, $53^{1000}$,\
    \ $59^{1000}$, $61^{1000}$, $67^{1000}$, $71^{1000}$, $73^{1000}$, $79^{1000}$,\
    \ $83^{1000}$, $89^{1000}$, $97^{1000}$, $101^{1000}$, $103^{1000}$, $107^{1000}$,\
    \ $109^{1000}$, $113^{1000}$, $117^{1000}$, $121^{1000}$, $123^{1000}$, $127^{1000}$,\
    \ $131^{1000}$, $135^{1000}$, $139^{1000}$, $143^{1000}$, $147^{1000}$, $151^{1000}$,\
    \ $157^{1000}$, $163^{1000}$, $167^{1000}$, $173^{1000}$, $179^{1000}$, $181^{1000}$,\
    \ $185^{1000}$, $189^{1000}$, $193^{1000}$, $197^{1000}$, $201^{1000}$, $205^{1000}$,\
    \ $209^{1000}$, $213^{1000}$, $217^{1000}$, $223^{1000}$, $227^{1000}$, $231^{1000}$,\
    \ $235^{1000}$, $239^{1000}$, $243^{1000}$, $247^{1000}$, $251^{1000}$, $255^{1000}$,\
    \ $259^{1000}$, $263^{1000}$, $267^{1000}$, $271^{1000}$, $275^{1000}$, $279^{1000}$",
  "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n % 3 == 0\
    \ \n        then return false\n    else if n % 5 == 0 \n        then return false\n\
    \    else if n % 7 == 0 \n        then return false\n    else if n % 11 == 0 \n\
    \        then return false\n    else if n % 13 == 0 \n        then return false\n\
    \    else if n % 17 == 0 \n        then return false\n    else if n % 19 == 0\
    \ \n        then return false\n    else if n % 23 == 0 \n        then return false\n\
    \    else if n % 29 == 0 \n        then return false\n    else if n % 31 == 0\
    \ \n        then return false\n    else if n % 37 == 0 \n        then return false\n\
    \    else if n % 41 == 0 \n        then return false\n    else if n % 43 == 0\
    \ \n        then return false\n    else if n % 47 == 0 \n        then return false\n\
    \    else if n % 53 == 0 \n        then return false\n    else if n % 59 == 0\
    \ \n        then return false\n    else if n % 61 == 0 \n        then return false\n\
    \    else if n % 67 == 0 \n        then return false\n    else if n % 71 == 0\
    \ \n        then return false\n    else if n % 73 == 0 \n        then return false\n\
    \    else if n % 79 == 0 \n        then return false\n    else if n % 83 == 0\
    \ \n        then return false\n    else if n % 89 == 0 \n        then return false\n\
    \    else if n % 97 == 0 \n        then return false\n    else if n % 101 == 0\
    \ \n        then return false\n    else if n % 103 == 0 \n        then return\
    \ false\n    else if n % 107 == 0 \n        then return false\n    else if n %\
    \ 109 == 0 \n        then return false\n    else if n % 113 == 0 \n        then\
    \ return false\n    else if n % 117 == 0 \n        then return false\n    else\
    \ if n % 121 == 0 \n        then return false\n    else if n % 123 == 0 \n   \
    \     then return false\n    else if n % 127 == 0 \n        then return false\n\
    \    else if n % 131 == 0 \n        then return false\n    else if n % 137 ==\
    \ 0 \n        then return false\n    else if n % 141 == 0 \n        then return\
    \ false\n    else if n % 147 == 0 \n        then return false\n    else if n %\
    \ 151 == 0 \n        then return false\n    else if n % 157 == ", "    if n <\
    \ 2\n        return false\n    \n    if n == 2\n        return true\n    \n  \
    \  i = 2\n    \n    while i <= sqrt(n)\n        if n % i == 0\n            return\
    \ false\n        i += 1\n    \n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.3>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by any number between 1 and 100. Hint: Use a while loop.", "    if is_prime_impl(n)\
    \ \n    else \n        false\nend\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@", "    if is_prime_cache[n]\
    \ == true \n    else \n        is_prime_cache[n] = is_prime_cache[n] ||\n    \
    \        n <= 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 ||\n \
    \           n >= 13 && n <= 17 || n >= 19 && n <= 21 or n >= 25 && n <= 29 ||\
    \ \n            n >= 31 && n <= 33 || n >= 35 && n <= 37 || n >= 39 && n <= 41\
    \ || \n            n >= 43 && n <= 47 || n >= 49 && n <= 51 || n >= 55 && n <=\
    \ 59 ||\n            n >= 61 && n <= 67 || n >= 69 && n <= 71 || n >= 73 && n\
    \ <= 79 ||\n            n >= 81 && n <= 87 || n >= 89 && n <= 91 || n >= 93 &&\
    \ n <= 97 ||\n            n >= 99 && n <= 101 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime factors of a given\
    \ number.", "    if n < 2 || n % 2 == 0\n        return false\n    \n    i = 5\n\
    \    while i * i <= n\n        i += 1\n        if n % i == 0\n            return\
    \ false\n    return true\nend", "    if is_prime_cache[n]\n        return is_prime_cache[n]\n\
    \    if n < 2\n        return false\n    if n == 2\n        return true\n    if\
    \ n % 2 == 0\n        return false\n    \n    prime_cache = [true, false]\n  \
    \  \n    for i in 2..n\n        if is_prime_cache[i]\n            prime_cache[i]\
    \ = false\n        else\n            prime_cache[i] = true\n    end\n    \n  \
    \  is_prime_cache[n] = prime_cache[n]\n    return prime_cache[n]\nend", "    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n     \
    \   return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 3 \n        return true\n    if is_prime_cache[n] \n        return\
    \ is_prime_cache[n]\n    if n % 2 == 0 \n        return false\n    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n % 3 == 0 \n        return false\n\
    \    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 5 ==\
    \ 0 \n        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 7 == 0 \n        return false\n    if is_prime_cache[n] \n       \
    \ return is_prime_cache[n]\n    if n % 11 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 13 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 17 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 19 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 23 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 29 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 31 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 37 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 41 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 43 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 47 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 53 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 59 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 61 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 67 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache", "    if n < 2 || n % 2 == 0\n        return false\n\
    \    \n    primes :: Set{Int64} = (2..n-1)\n    \n    for i in primes\n      \
    \  if n % i == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n        || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n\
    \ % 23 == 0 \n        || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 || n % 41 ==\
    \ 0 || n % 43 == 0 \n        || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n\
    \ % 63 || n % 69 == 0 \n        || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 ||\
    \ n % 83 == 0 || n % 89 == 0 \n        || n % 97 == 0 || n % 101 == 0 || n % 103\
    \ == 0 || n % 107 == 0 || n % 109 == 0 \n        || n % 113 == 0 || n % 117 ==\
    \ 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 \n        || n % 129 == 0\
    \ || n % 131 == 0 || n % 137 == 0 || n % 139 == 0 || n % 141 == 0 \n        ||\
    \ n % 143 == 0 || n % 147 == 0 || n % 149 == 0 || n % 151 == 0 || n % 153 == 0\
    \ \n        || n % 157 == 0 || n % 159 == 0 || n % 163 == 0 || n % 167 == 0 ||\
    \ n % 171 == 0 \n        || n % 173 == 0 || n % 177 == 0 || n % 179 == 0 || n\
    \ % 181 == 0 || n % 183 == 0 \n        || n % 185 == 0 || n % 187 == 0 || n %\
    \ 189 == 0 || n % 191 == 0 || n % 193 == 0 \n        || n % 197 == 0 || n % 199\
    \ == 0 || n % 201 == 0 || n % 203 == 0 || n % 205 == 0 \n        || n % 207 ==\
    \ 0 || n % 209 == 0 || n % 211 == 0 || n % 213 == 0 || n % 215 == 0 \n       \
    \ || n % 217 == 0 || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 || n % 225 ==\
    \ 0 \n        || n % 227 == 0 || n % 229 == 0 || n % 231 == 0 || n % 233 == 0\
    \ || n % 235 == 0 \n        || n % 239 == 0 || n % 241 == 0 || n % 243 == 0 ||\
    \ n % 245 == 0 || n % 247 == 0 \n        || n % 249 == 0 || n % 251 == 0 || n\
    \ % 253 == 0 || n % 255 == 0 \n        || n % 257 == 0 || n % 259 == 0 || n %\
    \ 261 == 0 || n % 263 == 0 || n % 265 == 0 \n        || n % 267 == 0 || n % 269\
    \ == 0 || n % 271 == 0 || n % 273 == 0 || n % 275 == 0 \n        || n % 277 ==\
    \ 0 || n % 279 == 0 || n % 281 == 0 || n % 283 == 0 || n % 285 == 0 \n       \
    \ || n % 287 == 0 || n % 289 == 0 || n % 291 == 0 || n % 293 == 0 || n % 295 ==\
    \ 0 \n        || n % 297 == 0 || n % 299 == 0 || n % 301 == 0 || ", "    if is_prime_impl(n)\
    \ == true\n    else \n        false\n    end\nend", "    if is_prime_impl(n) \n\
    \    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@", "    if n < 2 || n\
    \ % 2 == 0\n        return false\n    \n    i = 2\n    while i <= sqrt(n)\n  \
    \      if n % i == 0\n            return false\n        i += 1\n    return true\n\
    end", "    if n < 2 || n == 0 || n == 1 \n        true\n    else\n        n %\
    \ 2 != 0 && is_prime(n - 1) || n % 2 == 0 && is_prime(n - 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of prime factors of a given number.", " \
    \   if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n    if n <=\
    \ 1 \n        return false\n    \n    prime::Bool = true\n    \n    if n == 2\
    \ \n        prime = false\n    else \n        prime = true\n        for i::Int64\
    \ in 2..n \n            if n % i == 0 \n                prime = false\n      \
    \          break\n    \n    is_prime_cache[n] = prime\n    return prime\nend",
  "    if n < 2 || n % 2 == 0\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<text>\nExercise: Write a function that checks if a given number is divisible\
    \ by another number. Hint: Use a for loop.", "    if n < 2 || n % 2 == 0\n   \
    \     return false\n    \n    i = 5\n    while i * i <= n\n        if n % i ==\
    \ 0\n            return false\n        i += 6\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n       \
    \ return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\n\
    is_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.1>\n\"\"\"\n\
    is_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\n\
    is_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(6)\n\
    is_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\
    \"\"\"\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(6)\nis_prime(101)\n\
    is_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\"\"\"\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\n\
    is_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code\
    \ language=julia-1.1>\n\"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\n\
    is_prime(61)\nis_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\n\
    is_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.1>\n\"\"\"\n\
    is_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\n\
    is_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(6)\n\
    is_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\
    \"\"\"\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(6)\nis_prime(101)\n\
    is_", "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n ==\
    \ 2 \n        then return true\n    else \n        begin \n            x <- 3\n\
    \            while x < n \n                do \n                    x <- x + 2\n\
    \                    if n % x == 0 \n                        then return false\n\
    \        end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis code doesn't work\
    \ for me. `is_prime(6)` returns `true` but `is_prime(101)` returns `false`.\n\
    <|/ c |>\n<| c |>\nThe code I posted is correct. `is_prime(101)` returns `true`\
    \ because `101` is divisible by `3` and `2`.\n<|/ c |>\n<| c |>\nYes, I see that.\
    \ But `is_prime(6)` returns `false` because `6` is divisible by `2` and `3`.\n\
    <|/ c |>\n<| c |>\nYes, I see that. But `is_prime(6)` returns `false` because\
    \ `6` is divisible by `2` and `3`.\n<|/ c |>\n<| c |>\nYes, I see that. But `is_prime(6)`\
    \ returns `false` because `6` is divisible by `2` and `3`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    if n < 2 || n % 2 == 0 \n        then return false\n    else\
    \ if n == 2 \n        then return true\n    else \n        for i in 2..n \n  \
    \          do if n % i == 0 \n                then return false\n    return true\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a given number\
    \ is divisible by another given number. \nThe function should take two arguments:\
    \ an Int and a Int. \nThe function should return true if the first argument is\
    \ divisible by the second argument, and false otherwise. \nThe function should\
    \ return false if the first argument is less than the second argument. \nThe function\
    \ should return false if the first argument is equal to the second argument. \n\
    The function should return false if the first argument is greater than the second\
    \ argument. \nThe function should return false if the first argument is negative.\
    \ \nThe function should return false if the second argument is negative. \nThe\
    \ function should return false if the second argument is zero. \nThe function\
    \ should return false if the second argument is positive. \nThe function should\
    \ return false if the second argument is larger than the second argument. \nThe\
    \ function should return false if the second argument is larger than the second\
    \ argument. \nThe function should return false if the second argument is larger\
    \ than the second argument. \nThe function should return false if the second argument\
    \ is larger than the second argument. \nThe function should return false if the\
    \ second argument is larger than the second argument. \nThe function should return\
    \ false if the second argument is larger than the second argument. \nThe function\
    \ should return false if the second argument is larger than the second argument.\
    \ \nThe function should return false if the second argument is larger than the\
    \ second argument. \nThe function should return false if the second argument is\
    \ larger than the second argument. \nThe function should return false if the second\
    \ argument is larger than the second argument. \nThe function should return false\
    \ if the second argument is larger than the second argument. \nThe function should\
    \ return false if the second argument is larger than the second argument. \nThe\
    \ function should return false if the second argument is larger than the second\
    \ argument. \nThe function should return false if the second argument is larger\
    \ than the second argument. \nThe function should return false if the second argument\
    \ is larger than the second argument. \nThe function should return false if the\
    \ second argument is larger than the second argument. \nThe function should return\
    \ false if the second argument is larger than the second argument. \nThe function\
    \ should return false if the second argument is larger than the second argument.\
    \ \nThe function should return false if the second argument is larger than the\
    \ second argument. \nThe function should return false if the second argument is\
    \ larger than the second argument. \nThe function should return false if the second\
    \ argument is larger than the second argument. \nThe function should return false\
    \ if the second argument is larger than the second argument. \nThe function should\
    \ return false if the second argument is larger than the second argument. \n",
  "    if is_prime_cache[n]\n        return is_prime_cache[n]\n    if n < 2\n    \
    \    return false\n    if n == 2\n        return true\n    if n % 2 == 0\n   \
    \     return false\n    \n    prime_cache = [\n        2,\n        3,\n      \
    \  5,\n        7,\n        11,\n        13,\n        17,\n        19,\n      \
    \  23,\n        29,\n        31,\n        37,\n        41,\n        43,\n    \
    \    47,\n        53,\n        59,\n        61,\n        67,\n        71,\n  \
    \      73,\n        79,\n        83,\n        89,\n        97,\n        101,\n\
    \        103,\n        107,\n        109,\n        113,\n        127,\n      \
    \  131,\n        137,\n        139,\n        149,\n        151,\n        157,\n\
    \        163,\n        167,\n        173,\n        179,\n        181,\n      \
    \  191,\n        193,\n        197,\n        199,\n        211,\n        223,\n\
    \        227,\n        229,\n        233,\n        239,\n        241,\n      \
    \  251,\n        257,\n        263,\n        269,\n        271,\n        277,\n\
    \        281,\n        283,\n        293,\n        307,\n        311,\n      \
    \  313,\n        317,\n        331,\n        337,\n        347,\n        349,\n\
    \        353,\n        359,\n        367,\n        373,\n        379,\n      \
    \  383,\n        389,\n        397,\n        401,\n        409,\n        419,\n\
    \        429,\n        433,\n        439,\n        443,\n        449,\n      \
    \  457,\n        461,\n        463,\n        467,\n        479,\n        483,\n\
    \        487,\n        491,\n        499,\n        503,\n        509,\n      \
    \  521,\n        523,\n        541,\n        547,\n        557,\n        563,\n\
    \        569,\n        571,\n        577,\n        587,\n        593,\n      \
    \  599,\n        601,\n        607,\n        613,\n        617,\n        619,\n\
    \        631,\n        641,\n        643,\n        647,\n        653,\n      \
    \  659,\n        ", "    if is_prime_impl(n) \n    else \n        false\nend\n\
    </cell>\n<code language=julia-1.1>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.1>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.1>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.1>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.1>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.1>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.1>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.1>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.1>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.1>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.1>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.1>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.1>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.1>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.1>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.1>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.1>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.1>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.1>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.1>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.1>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n", "    if n == 0\n        true\n    else\n\
    \        if is_prime(n - 1)\n            true\n        else\n            if n\
    \ % 2 == 0\n                false\n            else\n                if n % 3\
    \ == 0\n                    false\n                else\n                    if\
    \ n % 5 == 0\n                        false\n                    else\n      \
    \                  if n % 7 == 0\n                            false\n        \
    \                else\n                            if n <= 2\n               \
    \                 true\n                            else\n                   \
    \             if n <= 4\n                                    true\n          \
    \                      else\n                                    if n <= 6\n \
    \                                       true\n                               \
    \     else\n                                        if n <= 8\n              \
    \                              true\n                                        else\n\
    \                                            if n <= 10\n                    \
    \                            true\n                                          \
    \  else\n                                                if n <= 12\n        \
    \                                            true\n                          \
    \                      else\n                                                \
    \    if n <= 14\n                                                        true\n\
    \                                                    else\n                  \
    \                                      if n <= 16\n                          \
    \                                  true\n                                    \
    \                    else\n                                                  \
    \          if n <= 18\n                                                      \
    \          true\n                                                            else\n\
    \                                                                if n <= 20\n\
    \                                                                    true\n  \
    \                                                              else\n        \
    \                                                            if n <= 22\n    \
    \                                                                    true\n  \
    \                                                                  else\n    \
    \                                                                            \
    \        if n <= 24\n                                                        \
    \                    true\n                                                  \
    \                      else\n                                                \
    \                            if n <= 26\n                                    \
    \                                            true\n                          \
    \                                                  else\n                    \
    \                                                            if n <= 28\n    \
    \                                                                            \
    \    true\n                                                                  \
    \              else\n                                                        \
    \                            if n <= 30\n                                    \
    \                                                    true\n                  \
    \                                                                  else\n    \
    \                                                                            \
    \        if n <= 32\n                                                        \
    \                                    true\n                                  \
    \                                                      else\n                \
    \                                                                            if\
    \ n <= 34\n                                                                  \
    \                              true\n                                        \
    \                                                    else\n                  \
    \                                                                            \
    \  if n <= 36\n                                                              \
    \                                      true\n                                \
    \                                                                else\n      \
    \                                                                            \
    \                  if n <= 38\n                                              \
    \                                                          true\n            \
    \                                                                            \
    \            else\n                                                          \
    \                                              if n <= 40\n                  \
    \                                                                            \
    \              true\n                                                        \
    \                                                else\n                      \
    \                                                                            \
    \          if n <= 42\n                                                      \
    \                                                          true\n            \
    \                                                                            \
    \                    else\n                                                  \
    \                                                              if n <= 44\n  \
    \                                                                            \
    \                                      true\n                                \
    \                                                                            \
    \    else\n                                                                  \
    \                                                  if n <= 46\n              \
    \                                                                            \
    \                              true\n                                        \
    \                                                                            else\n\
    \                                                                            \
    \                                            if n <= 48\n                    \
    \                                                                            \
    \                            true\n                                          \
    \                                                                            \
    \  else\n                                                                    \
    \                                                        if n <= 50\n        \
    \                                                                            \
    \                                            true\n                          \
    \                                                                            \
    \                      else\n                                                \
    \                                                                            \
    \    if n <= 52\n                                                            \
    \                                                                        true\n\
    \                                                                            \
    \                                                    else\n                  \
    \                                                                            \
    \                                      if n <= 54\n                          \
    \                                                                            \
    \                                  true\n                                    \
    \                                                                            \
    \                    else\n                                                  \
    \                                                                            \
    \          if n <= 56\n                                                      \
    \                                                                            \
    \          true\n                                                            \
    \                                                                            else\n\
    \                                                                            \
    \                                                                if n <= 58\n\
    \                                                                            \
    \                                                                    true\n  \
    \                                                                            \
    \                                                              else\n        \
    \                                                                            \
    \                                                            if n <= 60\n    \
    \                                                                            \
    \                                                                    true\n  \
    \                                                                            \
    \                                                                  else\n    \
    \                                                                            \
    \                                                                    if n <= 62\n\
    \                                                                            \
    \                                                                            true\n\
    \                                                                            \
    \                                                                        else\n\
    \                                                                            \
    \                                                                            if\
    \ n <= 64\n", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n \
    \   \n    if n <= 1 \n        return false\n    \n    if n == 2 \n        return\
    \ true\n    \n    if n % 2 == 0 \n        return false\n    \n    prime_candidates\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    for i in prime_candidates \n        if n % i\
    \ == 0 \n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime_cache = [false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, ", " \
    \   if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n    then\
    \ return false\n    else if n == 2 || n == 3 || n == 5 || n == 7 then return true\n\
    \    else if n % 6 == 0 then return is_prime(n / 6) else return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(13)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13)\n", "    if is_prime_cache[n] \n        return\
    \ is_prime_cache[n]\n    if n <= 1 \n        return false\n    if n == 2 \n  \
    \      return true\n    if n % 2 == 0 \n        return false\n    if n % 3 ==\
    \ 0 \n        return false\n    i = 5\n    while i * i <= n \n        i += 2 \n\
    \    if i == n \n        return true\n    return false\nend\nis_prime_cache =\
    \ Dict()\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a given\
    \ number is even.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 ||\
    \ n % 7 == 0 \n    then return false\n    else return true\nend\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a given number is divisible by any number\
    \ between 2 and 100. Hint: Use a for loop.", "    if n < 2 || n % 2 == 0 \n  \
    \      then return false\n    else if n % 3 == 0 \n        then return false\n\
    \    else if n % 5 == 0 \n        then return false\n    else if n % 7 == 0 \n\
    \        then return false\n    else \n        return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime factors of a given number.", "    if n == 2 || n == 3 ||\
    \ n == 5 || n == 7 || n == 11 \n        || n == 13 || n == 17 || n == 19 || n\
    \ == 23 || n == 29 || n == 37\n        || n == 47 || n == 91 || n == 93 || n ==\
    \ 97 || n == 103 || n == 107\n        || n == 111 || n == 193 || n == 197 || n\
    \ == 199 || n == 203 || n == 207\n        || n == 23 || n == 25 || n == 27 ||\
    \ n == 29 || n == 31 || n == 33\n        || n == 37 || n == 39 || n == 41 || n\
    \ == 43\n        || n == 91 || n == 93 || n == 97 || n == 103 || n == 107 || n\
    \ == 111\n        || n == 193 || n == 197 || n == 199 || n == 203 || n == 207\
    \ || n == 23 \n        || n == 25 || n == 27 || n == 29 || n == 31 || n == 33\
    \ || n == 37 || n == 39\n        || n == 41 || n == 43\n        || n == 91 ||\
    \ n == 93 || n == 97 || n == 103 || n == 107 || n == 111\n        || n == 193\
    \ || n == 197 || n == 199 || n == 203 || n == 207 || n == 23 \n        || n ==\
    \ 25 || n == 27 || n == 29 || n == 31 || n == 33 || n == 37 || n == 39\n     \
    \   || n == 41 || n == 43\n        || n == 91 || n == 93 || n == 97 || n == 103\
    \ || n == 107 || n == 111\n        || n == 193 || n == 197 || n == 199 || n ==\
    \ 203 || n == 207 || n == 23 \n        || n == 25 || n == 27 || n == 29 || n ==\
    \ 31 || n == 33 || n == 37 || n == 39\n        || n == 41 || n == 43\n       \
    \ || n == 91 || n == 93 || n == 97 || n == 103 || n == 107 || n == 111\n     \
    \   || n == 193 || n == 197 || n == 199 || n == 203 || n == 207 || n == 23 \n\
    \        || n == 25 || n == 27 || n == 29 || n == 31 || n == 33 || n == 37 ||\
    \ n == 39\n        || n == 41 || n == 43\n        || n == 91 || n == 93 || n ==\
    \ 97 || n == 103 || n == 107 || n == 111\n        || n == 193 || n == 197 || n\
    \ == 199 || n == 203 || n == 207 || n == 23 \n        || n == 25 || n == 27 ||\
    \ n == 29 || n == 31 || n == 33 || n == 37 || n == 39\n        || n == 41 || n\
    \ == 43\n        ", "    if n < 2 || n % 2 == 0 \n        then return false\n\
    \    else if n == 2 \n        then return true\n    else \n        if is_prime(n\
    \ - 1) \n            then return true\n        else return false\nend\n</cell>\n\
    <text>\nExercise: Write a function that checks if a given number is divisible\
    \ by another number. Hint: Use a while loop.", "    if n == 2\n        return\
    \ true\n    else if n % 2 == 0\n        return false\n    else\n        return\
    \ is_prime(n - 1) or is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.4>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.4>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of prime factors of a given number. For example,\
    \ given $n = 6$, the function should return $3$.", "    if is_prime_cache[n] ==\
    \ true \n    else \n        if is_prime_cache[n] == false \n        else \n  \
    \          is_prime_cache[n] = is_prime_cache[n] or is_prime(n-1)\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime factors of a given number.", "    if n < 2\
    \ || n % 2 == 0\n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if n < 2 || n % 2 == 0 \n        return false\n    else if n == 2\
    \ \n        return true\n    else \n        return is_prime(n - 1) || is_prime(n\
    \ - 3)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return true if a given\
    \ number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>>\
    \ is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n\
    \    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n  \
    \  >>> is_prime(1)\n    false\n    \"\"\"", "    if n < 2\n        return false\n\
    \    \n    if n == 2\n        return true\n    \n    if n % 2 == 0\n        return\
    \ false\n    \n    i = 5\n    while i * i <= n\n        i += 1\n    \n    return\
    \ n == i\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\nis_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\nis_prime(101)\n</cell>\n<code language=julia-1.4>\n\"\"\"\nis_prime(11)\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\nis_prime(13441)\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\nis_prime(6)\n</cell>\n<code language=julia-1.4>\n\"\"\"\nis_prime(4)\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\nis_prime(1)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if a given number is divisible by all numbers\
    \ from 1 to 100, and false otherwise.\nWrite a function that returns true if a\
    \ given number is divisible by all numbers from 1 to 1000, and false otherwise.\n\
    Write a function that returns true if a given number is divisible by all numbers\
    \ from 1 to 10000, and false otherwise.\nWrite a function that returns true if\
    \ a given number is divisible by all numbers from 1 to 100000, and false otherwise.\n\
    Write a function that returns true if a given number is divisible by all numbers\
    \ from 1 to 1000000, and false otherwise.\nWrite a function that returns true\
    \ if a given number is divisible by all numbers from 1 to 10000000, and false\
    \ otherwise.\nWrite a function that returns true if a given number is divisible\
    \ by all numbers from 1 to 100000000, and false otherwise.\nWrite a function that\
    \ returns true if a given number is divisible by all numbers from 1 to 1000000000,\
    \ and false otherwise.\nWrite a function that returns true if a given number is\
    \ divisible by all numbers from 1 to 10000000000, and false otherwise.\nWrite\
    \ a function that returns true if a given number is divisible by all numbers from\
    \ 1 to 100000000000, and false otherwise.\nWrite a function that returns true\
    \ if a given number is divisible by all numbers from 1 to 1000000000000, and false\
    \ otherwise.\nWrite a function that returns true if a given number is divisible\
    \ by all numbers from 1 to 10000000000000, and false otherwise.\nWrite a function\
    \ that returns true if a given number is divisible by all numbers from 1 to 100000000000000,\
    \ and false otherwise.\nWrite a function that returns true if a given number is\
    \ divisible by all numbers from 1 to 1000000000000000, and false otherwise.\n\
    Write a function that returns true if a given number is divisible by all numbers\
    \ from 1 to 10000000000000000, and false otherwise.\nWrite a function that returns\
    \ true if a given number is divisible by all number", "    if n < 2 || n % 2 ==\
    \ 0\n        return false\n    \n    i = 5\n    while i * i <= n\n        i +=\
    \ 2\n    return n == 1\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. Use a while loop to do this.", "    if is_prime_impl(n)\
    \ \n    else \n        false\nend", "    if n < 2 || n % 2 == 0\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of prime factors of a given number.", "    if n < 2\
    \ || n % 2 == 0 \n        then return false\n    else if n % 3 == 0 \n       \
    \ then return false\n    else if n % 5 == 0 \n        then return false\n    else\
    \ if n % 7 == 0 \n        then return false\n    else if n % 11 == 0 \n      \
    \  then return false\n    else if n % 13 == 0 \n        then return false\n  \
    \  else if n % 17 == 0 \n        then return false\n    else if n % 19 == 0 \n\
    \        then return false\n    else if n % 23 == 0 \n        then return false\n\
    \    else if n % 29 == 0 \n        then return false\n    else if n % 31 == 0\
    \ \n        then return false\n    else if n % 37 == 0 \n        then return false\n\
    \    else if n % 41 == 0 \n        then return false\n    else if n % 43 == 0\
    \ \n        then return false\n    else if n % 47 == 0 \n        then return false\n\
    \    else if n % 53 == 0 \n        then return false\n    else if n % 59 == 0\
    \ \n        then return false\n    else if n % 61 == 0 \n        then return false\n\
    \    else if n % 67 == 0 \n        then return false\n    else if n % 71 == 0\
    \ \n        then return false\n    else if n % 73 == 0 \n        then return false\n\
    \    else if n % 79 == 0 \n        then return false\n    else if n % 83 == 0\
    \ \n        then return false\n    else if n % 89 == 0 \n        then return false\n\
    \    else if n % 97 == 0 \n        then return false\n    else if n % 101 == 0\
    \ \n        then return false\n    else if n % 103 == 0 \n        then return\
    \ false\n    else if n % 107 == 0 \n        then return false\n    else if n %\
    \ 113 == 0 \n        then return false\n    else if n % 117 == 0 \n        then\
    \ return false\n    else if n % 121 == 0 \n        then return false\n    else\
    \ if n % 123 == 0 \n        then return false\n    else if n % 127 == 0 \n   \
    \     then return false\n    else if n % 131 == 0 \n        then return false\n\
    \    else if n % 137 == 0 \n        then return false\n    else if n % 143 ==\
    \ 0 \n        then return false\n    else if n % 147 == 0 \n        then return\
    \ false\n    else if n % 151 == 0 \n        then return false\n    else if n %\
    \ 157 == 0 \n        then return false\n    else if n % 163 == ", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    \n    if n < 2 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    prime_cache = [true]\n    \n    for d in range(3, n+1,\
    \ 2) do \n        if n % d == 0 \n            prime_cache = false\n          \
    \  break\n    \n    is_prime_cache[n] = prime_cache\n    return prime_cache\n\
    end\n</cell>\n<code language=julia-1.0>\nis_prime(6)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.0>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.0>\nis_prime(13441)\n</cell>\n<code language=julia-1.0>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.0>\nis_prime(4)\n</cell>\n<code language=julia-1.0>\n\
    is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ number is divisible by any number between 1 and a given number. For example,\
    \ divisible_number(6, 10) returns true.", "    if is_prime_impl(n) == true\n \
    \   else \n        false\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a given number is divisible by another given number.\
    \ \nFor example, 6 is divisible by 3, because 3 divides 6. \nWrite a function\
    \ that checks if a given number is divisible by all numbers from 1 to 100.\nFor\
    \ example, 6 is divisible by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99.", "    if n < 2 || n % 2 == 0 \n        then\
    \ return false\n    else if n == 2 \n        then return true\n    else \n   \
    \     for i in 3..(sqrt(n) - 1)\n            if n % i == 0 \n                then\
    \ return false\n            else \n                return true\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    false\n    >>> is_even(101)\n    true\n\
    \    >>> is_even(11)\n    true\n    >>> is_even(13441)\n    true\n    >>> is_even(61)\n\
    \    true\n    >>> is_even(4)\n    false\n    >>> is_even(1)\n    false\n    \"\
    \"\"", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then return false\n\
    \    else if n == 2 || n == 3 \n        then return true\n    else if n % 5 ==\
    \ 0 \n        then return false\n    else if n % 7 == 0 \n        then return\
    \ false\n    else \n        return is_prime(n - 1) || is_prime(n - 3) \nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Return true if a given number is prime,\
    \ and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n\
    \    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n\
    \    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n\
    \    false\n    \"\"\"", "    if n == 1 \n        return true\n    else if n %\
    \ 2 == 0 \n        return false\n    else if n % 3 == 0 \n        return false\n\
    \    else if n % 5 == 0 \n        return false\n    else if n % 7 == 0 \n    \
    \    return false\n    else if n % 11 == 0 \n        return false\n    else if\
    \ n % 13 == 0 \n        return false\n    else if n % 17 == 0 \n        return\
    \ false\n    else if n % 19 == 0 \n        return false\n    else if n % 23 ==\
    \ 0 \n        return false\n    else if n % 29 == 0 \n        return false\n \
    \   else if n % 31 == 0 \n        return false\n    else if n % 37 == 0 \n   \
    \     return false\n    else if n % 41 == 0 \n        return false\n    else if\
    \ n % 43 == 0 \n        return false\n    else if n % 47 == 0 \n        return\
    \ false\n    else if n % 53 == 0 \n        return false\n    else if n % 59 ==\
    \ 0 \n        return false\n    else if n % 61 == 0 \n        return false\n \
    \   else if n % 67 == 0 \n        return false\n    else if n % 71 == 0 \n   \
    \     return false\n    else if n % 73 == 0 \n        return false\n    else if\
    \ n % 79 == 0 \n        return false\n    else if n % 83 == 0 \n        return\
    \ false\n    else if n % 89 == 0 \n        return false\n    else if n % 97 ==\
    \ 0 \n        return false\n    else if n % 101 == 0 \n        return false\n\
    \    else if n % 103 == 0 \n        return false\n    else if n % 107 == 0 \n\
    \        return false\n    else if n % 113 == 0 \n        return false\n    else\
    \ if n % 117 == 0 \n        return false\n    else if n % 121 == 0 \n        return\
    \ false\n    else if n % 123 == 0 \n        return false\n    else if n % 127\
    \ == 0 \n        return false\n    else if n % 131 == 0 \n        return false\n\
    \    else if n % 137 == 0 \n        return false\n    else if n % 141 == 0 \n\
    \        return false\n    else if n % 147 == 0 \n        return false\n    else\
    \ if n % 151 == 0 \n        return false\n    else if n % 157 == 0 \n        return\
    \ false\n    else if n % 163 == 0 \n        return false\n    else if n % 167\
    \ == 0 \n        return false\n    else if n % 173 == 0 \n        return false\n\
    \    else if n % 177 == 0 \n        return false\n    else if n % 181 == 0 \n\
    \        return false\n    else if n % 185 == 0 \n        return false\n    else\
    \ if n % 191 == 0 \n        return false\n    ", "    if n < 2 || n % 2 == 0 ||\
    \ n % 3 == 0 \n    then return false\n    else if n % 2 == 1 \n    then return\
    \ true\n    else if n % 3 == 1 \n    then return true\n    else return is_prime(3*n-1)\
    \ || is_prime(3*n+1)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true\
    \ if a given number is even, and false otherwise.\n    >>> is_even(6)\n    false\n\
    \    >>> is_even(101)\n    true\n    >>> is_even(11)\n    true\n    >>> is_even(13441)\n\
    \    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n    false\n    >>>\
    \ is_even(1)\n    false\n    \"\"\"", "    if is_prime_impl(n) then return true\
    \ else return false \nend\n</cell>\n<code language=julia-1.5>\n@code_native is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@code_native is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @code_native is_prime(101)\n</cell>\n<code language=julia-1.5>\n@code_native is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@code_native is_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_native is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @code_native is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a given number is divisible by another given number.", "    if n < 2 || n\
    \ % 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else \n        for i in 2..n \n            do if n % i == 0 \n   \
    \             then return false\n    end \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(6)\n</cell>\n<code language=julia-1.4>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(11)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.4>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(4)\n</cell>\n<code language=julia-1.4>\nis_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of divisors\
    \ of a given number. Hint: Use a for loop.", "    if n < 2 || n % 2 == 0 \n  \
    \      then return false\n    else if n == 2 \n        then return true\n    else\
    \ if n % 3 == 0 \n        then return false\n    else if n % 5 == 0 \n       \
    \ then return false\n    else if n % 7 == 0 \n        then return false\n    else\
    \ \n        return is_prime(3*n+2)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime factors of a given\
    \ number.", "    if n < 2\n        return false\n    \n    if n == 2\n       \
    \ return true\n    \n    if n % 2 == 0\n        return false\n    \n    i = 5\n\
    \    \n    while i * i <= n\n        i += 1\n    \n    if n == i * i\n       \
    \ return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of divisors of a given number. For example,\
    \ if the input is 6, the function should return 3.", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    \n    if n <= 1 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    i = 5\n    while i * i <= n \n        i += 2\n    \n\
    \    if i == n \n        return true\n    \n    return false\nend", "    if n\
    \ < 2\n        true\n    else\n        n % 2 != 0 && n != 1 && is_prime(n - 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a given number is even.\nHint: Use the modulo operator %.", "    if is_prime_impl(n)\
    \ \n    else \n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n <= 1 \n        return false\n    \n    if n == 2 \n        return\
    \ true\n    \n    if n % 2 == 0 \n        return false\n    \n    prime_cache\
    \ = [true]\n    \n    for d in range(3, n+1, 2) do \n        if prime_cache[d]\
    \ \n            prime_cache[d] = false\n        \n        if n % d == 0 \n   \
    \         prime_cache[d] = false\n    \n    is_prime_cache[n] = prime_cache[n]\n\
    \    return prime_cache[n]\nend", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else if n % 3 == 0 \n        then return false\n    else if n % 5\
    \ == 0 \n        then return false\n    else if n % 7 == 0 \n        then return\
    \ false\n    else if n % 11 == 0 \n        then return false\n    else if n %\
    \ 13 == 0 \n        then return false\n    else if n % 17 == 0 \n        then\
    \ return false\n    else if n % 19 == 0 \n        then return false\n    else\
    \ if n % 23 == 0 \n        then return false\n    else if n % 29 == 0 \n     \
    \   then return false\n    else if n % 31 == 0 \n        then return false\n \
    \   else if n % 37 == 0 \n        then return false\n    else if n % 41 == 0 \n\
    \        then return false\n    else if n % 43 == 0 \n        then return false\n\
    \    else if n % 47 == 0 \n        then return false\n    else if n % 53 == 0\
    \ \n        then return false\n    else if n % 59 == 0 \n        then return false\n\
    \    else if n % 61 == 0 \n        then return false\n    else if n % 67 == 0\
    \ \n        then return false\n    else if n % 71 == 0 \n        then return false\n\
    \    else if n % 73 == 0 \n        then return false\n    else if n % 79 == 0\
    \ \n        then return false\n    else if n % 83 == 0 \n        then return false\n\
    \    else if n % 89 == 0 \n        then return false\n    else if n % 97 == 0\
    \ \n        then return false\n    else if n % 101 == 0 \n        then return\
    \ false\n    else if n % 103 == 0 \n        then return false\n    else if n %\
    \ 107 == 0 \n        then return false\n    else if n % 113 == 0 \n        then\
    \ return false\n    else if n % 117 == 0 \n        then return false\n    else\
    \ if n % 121 == 0 \n        then return false\n    else if n % 123 == 0 \n   \
    \     then return false\n    else if n % 127 == 0 \n        then return false\n\
    \    else if n % 131 == 0 \n        then return false\n    else if n % 137 ==\
    \ 0 \n        then return false\n    else if n % 141 == 0 \n        then return\
    \ false\n    else if n % 147 == 0 \n        then return false\n    else if n %\
    \ 151 == 0 \n        then return false\n    else if n % 157 == 0 \n        then\
    \ return false\n    else if n % 163 == ", "    if n < 2 || n % 2 == 0 || n % 3\
    \ == 0 || n % 5 == 0 || n % 7 == 0 \n    then return false\n    else if n == 2\
    \ || n == 3 || n == 5 || n == 7 \n    then return true\n    else if n % 6 == 0\
    \ \n    then return false\n    else if n % 12 == 0 \n    then return false\n \
    \   else if n % 13 == 0 \n    then return false\n    else if n % 17 == 0 \n  \
    \  then return false\n    else if n % 19 == 0 \n    then return false\n    else\
    \ if n % 23 == 0 \n    then return false\n    else if n % 29 == 0 \n    then return\
    \ false\n    else if n % 31 == 0 \n    then return false\n    else if n % 37 ==\
    \ 0 \n    then return false\n    else if n % 41 == 0 \n    then return false\n\
    \    else if n % 43 == 0 \n    then return false\n    else if n % 47 == 0 \n \
    \   then return false\n    else if n % 53 == 0 \n    then return false\n    else\
    \ if n % 59 == 0 \n    then return false\n    else if n % 61 == 0 \n    then return\
    \ false\n    else if n % 67 == 0 \n    then return false\n    else if n % 71 ==\
    \ 0 \n    then return false\n    else if n % 73 == 0 \n    then return false\n\
    \    else if n % 79 == 0 \n    then return false\n    else if n % 83 == 0 \n \
    \   then return false\n    else if n % 89 == 0 \n    then return false\n    else\
    \ if n % 97 == 0 \n    then return false\n    else if n % 101 == 0 \n    then\
    \ return false\n    else if n % 103 == 0 \n    then return false\n    else if\
    \ n % 107 == 0 \n    then return false\n    else if n % 113 == 0 \n    then return\
    \ false\n    else if n % 117 == 0 \n    then return false\n    else if n % 121\
    \ == 0 \n    then return false\n    else if n % 127 == 0 \n    then return false\n\
    \    else if n % 131 == 0 \n    then return false\n    else if n % 137 == 0 \n\
    \    then return false\n    else if n % 143 == 0 \n    then return false\n   \
    \ else if n % 147 == 0 \n    then return false\n    else if n % 151 == 0 \n  \
    \  then return false\n    else if n % 157 == 0 \n    then return false\n    else\
    \ if n % 163 == 0 \n    then return false\n", "    if is_prime_cache[n] \n   \
    \     return is_prime_cache[n]\n    if n <= 1 \n        return false\n    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n % 2 == 0 \n        return false\n\
    \    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 3 ==\
    \ 0 \n        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 5 == 0 \n        return false\n    if is_prime_cache[n] \n       \
    \ return is_prime_cache[n]\n    if n % 7 == 0 \n        return false\n    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n % 11 == 0 \n        return false\n\
    \    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 13 ==\
    \ 0 \n        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 17 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 19 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 23 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 29 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 31 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 37 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 41 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 43 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 47 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 53 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 59 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n % 61 == 0 \n\
    \        return false\n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n % 67 == 0 \n        return false\n    if is_prime_cache[n] \n      \
    \  return is_prime_cache[n]\n    if n % 71 == 0 \n        return false\n    if\
    \ is_prime_cache[n] \n        return is_prime_", "    if n == 2 || n == 3 || n\
    \ == 5 || n == 7 || n == 11 || n == 13 || n == 17 || n == 19 || n == 23 || n ==\
    \ 29 || n == 31 || n == 37 || n == 39 || n == 43 || n == 47 || n == 53 || n ==\
    \ 59 || n == 63 || n == 67 || n == 71 || n == 77 || n == 83 || n == 89 || n ==\
    \ 93 || n == 97 || n == 101 || n == 103 || n == 107 || n == 111 || n == 117 ||\
    \ n == 123 || n == 131 \n    then return true\n    else return false\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(number::Int64)", " \
    \   if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n\
    \        return false\n    if n == 2 \n        return true\n    if n % 2 == 0\
    \ \n        return false\n    if n % 3 == 0 \n        return false\n    \n   \
    \ candidates = prime_candidates(n)\n    \n    for candidate in candidates \n \
    \       if candidate > n \n            return false\n    \n    return true\nend",
  "    if is_prime_impl(n) == true\n    else \n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of prime factors of a given number.", " \
    \   if n < 2 || n % 2 == 0\n        return false\n    \n    i = 2\n    while i\
    \ * i <= n\n        if n % i == 0\n            return false\n        i += 1\n\
    \    return true\nend\n</cell>\n<code language=julia-1.4>\n@time is_prime(101)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(11)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.4>\n@time is_prime(4)\n</cell>\n<code language=julia-1.4>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a given number is divisible by all numbers from 1 to 100, and false otherwise.\n\
    Hint: Use a for loop.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then\
    \ return false\n    else if n % 5 == 0 \n        then return false\n    else if\
    \ n % 7 == 0 \n        then return false\n    else if n % 11 == 0 \n        then\
    \ return false\n    else if n % 13 == 0 \n        then return false\n    else\
    \ if n % 17 == 0 \n        then return false\n    else if n % 19 == 0 \n     \
    \   then return false\n    else if n % 23 == 0 \n        then return false\n \
    \   else if n % 29 == 0 \n        then return false\n    else if n % 31 == 0 \n\
    \        then return false\n    else if n % 37 == 0 \n        then return false\n\
    \    else if n % 41 == 0 \n        then return false\n    else if n % 43 == 0\
    \ \n        then return false\n    else if n % 47 == 0 \n        then return false\n\
    \    else if n % 53 == 0 \n        then return false\n    else if n % 59 == 0\
    \ \n        then return false\n    else if n % 61 == 0 \n        then return false\n\
    \    else if n % 67 == 0 \n        then return false\n    else if n % 71 == 0\
    \ \n        then return false\n    else if n % 73 == 0 \n        then return false\n\
    \    else if n % 79 == 0 \n        then return false\n    else if n % 83 == 0\
    \ \n        then return false\n    else if n % 89 == 0 \n        then return false\n\
    \    else if n % 97 == 0 \n        then return false\n    else if n % 101 == 0\
    \ \n        then return false\n    else if n % 103 == 0 \n        then return\
    \ false\n    else if n % 107 == 0 \n        then return false\n    else if n %\
    \ 109 == 0 \n        then return false\n    else if n % 113 == 0 \n        then\
    \ return false\n    else if n % 117 == 0 \n        then return false\n    else\
    \ if n % 121 == 0 \n        then return false\n    else if n % 123 == 0 \n   \
    \     then return false\n    else if n % 127 == 0 \n        then return false\n\
    \    else if n % 131 == 0 \n        then return false\n    else if n % 137 ==\
    \ 0 \n        then return false\n    else if n % 139 == 0 \n        then return\
    \ false\n    else if n % 143 == 0 \n        then return false\n    else if n %\
    \ 147 == 0 \n        then return false\n    else if n % 151 == 0 \n        then\
    \ return false\n    else ", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else if n == 2 \n        then return true\n    else \n        begin\
    \ \n            x <- 3\n            y <- 2\n            while y <= n \n      \
    \          do if n % y == 0 \n                    then return false\n        \
    \            else y <- y + 1\n            end \n            return true\n    \
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return true if a given\
    \ number is prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>>\
    \ is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n\
    \    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n  \
    \  >>> is_prime(1)\n    false\n    \"\"\"", "    if is_prime_cache[n] \n     \
    \   return is_prime_cache[n]\n    \n    if n <= 1 \n        return false\n   \
    \ \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n        return\
    \ false\n    \n    i = 5\n    \n    while i * i <= n \n        i += 2\n    \n\
    \    if i == n \n        return true\n    \n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of prime factors\
    \ of a given number.", "    if is_prime_cache[n] == true \n    else \n       \
    \ is_prime_cache[n] = is_prime_cache[n] || (n <= 2 && is_prime(3*n-1))\n    end\n\
    \    return is_prime_cache[n]\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6", " \
    \   if n == 1\n        true\n    else\n        n % 2 != 0 && n != 1 && n != 3\
    \ && n != 5 && n != 7 && n != 11 && n != 13 && n != 17 && n != 19 && n != 23 &&\
    \ n != 29 && n != 31 && n != 37 && n != 41 && n != 43 && n != 47 && n != 53 &&\
    \ n != 59 && n != 61 && n != 67 && n != 71 && n != 73 && n != 79 && n != 83 &&\
    \ n != 89 && n != 97\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. Use a while loop to iterate\
    \ through the numbers from 2 to n.", "    if n < 2 || n % 2 == 0 \n        then\
    \ return false\n    else if n == 2 \n        then return true\n    else \n   \
    \     prime_candidates <- primes(n)\n        for i in prime_candidates\n     \
    \       if n % i == 0 \n                then return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(101)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.0>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.0>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the first n prime numbers. \n\
    Hint: Use a while loop to keep checking the condition of the while loop.", " \
    \   if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n < 2 \n \
    \       return false\n    if is_prime_cache[n] = true\n    \n    prime_cache =\
    \ [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n \
    \   \n    for i in prime_cache\n        if n % i == 0 \n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<code language=julia-1.5>\n\
    is_prime_cache = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,",
  "    if n < 2 || n % 2 == 0\n        return false\n    \n    for d in range(3, floor(sqrt(n))+1,\
    \ 2)\n        if n % d == 0\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of prime factors of a given number.",
  "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n       \
    \ then return false\n    else if n == 2 || n == 3 || n == 5\n        then return\
    \ true\n    else if n % 6 == 0 \n        then return false\n    else if n % 6\
    \ == 1 || n % 6 == 2\n        then return true\n    else if n % 6 == 3 || n %\
    \ 6 == 4\n        then return true\n    else if n % 6 == 5 || n % 6 == 6\n   \
    \     then return true\n    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 ||\
    \ n % 6 == 4 || n % 6 == 5 || n % 6 == 6\n        then return true\n    else return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given\
    \ number is even, and false otherwise.\n    >>> is_even(6)\n    false\n    >>>\
    \ is_even(101)\n    true\n    >>> is_even(11)\n    true\n    >>> is_even(13441)\n\
    \    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n    false\n    >>>\
    \ is_even(1)\n    false\n    \"\"\"", "    if n < 2 || n % 2 == 0 || n % 3 ==\
    \ 0 || n % 5 == 0 || n % 7 == 0 \n        then return false\n    else if n ==\
    \ 1 || n == 3 || n == 5 || n == 7 \n        then return true\n    else if n %\
    \ 6 == 1 || n % 6 == 0 \n        then return false\n    else if n % 9 == 1 ||\
    \ n % 9 == 0 \n        then return false\n    else if n % 11 == 1 || n % 11 ==\
    \ 0 \n        then return false\n    else if n % 13 == 1 || n % 13 == 0 \n   \
    \     then return false\n    else if n % 17 == 1 || n % 17 == 0 \n        then\
    \ return false\n    else if n % 19 == 1 || n % 19 == 0 \n        then return false\n\
    \    else if n % 23 == 1 || n % 23 == 0 \n        then return false\n    else\
    \ if n % 29 == 1 || n % 29 == 0 \n        then return false\n    else if n % 31\
    \ == 1 || n % 31 == 0 \n        then return false\n    else if n % 37 == 1 ||\
    \ n % 37 == 0 \n        then return false\n    else if n % 41 == 1 || n % 41 ==\
    \ 0 \n        then return false\n    else if n % 43 == 1 || n % 43 == 0 \n   \
    \     then return false\n    else if n % 47 == 1 || n % 47 == 0 \n        then\
    \ return false\n    else if n % 53 == 1 || n % 53 == 0 \n        then return false\n\
    \    else if n % 59 == 1 || n % 59 == 0 \n        then return false\n    else\
    \ if n % 63 ==1 || n % 63 == 0\n        then return false\n    else if n % 67\
    \ == 1 || n % 67 == 0 \n        then return false\n    else if n % 71 == 1 ||\
    \ n % 71 == 0 \n        then return false\n    else if n % 73 == 1 || n % 73 ==\
    \ 0 \n        then return false\n    else if n % 79 == 1 || n % 79 == 0 \n   \
    \     then return false\n    else if n % 83 == 1 || n % 83 == 0 \n        then\
    \ return false\n    else if n % 89 == 1 || n % 89 == 0 \n        then return false\n\
    \    else if n % 97 == 1 || n % 97 == 0 \n        then return false\n    else\
    \ if n % 101 == 1 || n % 101 == 0 \n        then return false\n    else if n %\
    \ 103 == 1 || n % 103 == 0 \n        then return false\n    else if n % 107 ==\
    \ 1 || n % 107 == 0 \n        then return false\n    else if n % 113 == 1 || n\
    \ % 113 == 0 \n        then return false\n    else if n % 117 == 1 || n % 117\
    \ == ", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n \
    \   if n <= 1 \n        return false\n    \n    if n == 2 \n        return true\n\
    \    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    \n    while\
    \ i * i <= n \n        i := i + 2\n    \n    if n == i \n        return true\n\
    \    \n    return false\nend", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    prime_cache = [\n        2,\n        3,\n        5,\n        7,\n \
    \       11,\n        13,\n        17,\n        19,\n        23,\n        29,\n\
    \        31,\n        37,\n        41,\n        43,\n        47,\n        53,\n\
    \        59,\n        61,\n        67,\n        71,\n        73,\n        79,\n\
    \        83,\n        89,\n        97,\n        101,\n        103,\n        107,\n\
    \        109,\n        113,\n        127,\n        131,\n        137,\n      \
    \  139,\n        149,\n        151,\n        157,\n        163,\n        167,\n\
    \        173,\n        179,\n        181,\n        191,\n        193,\n      \
    \  197,\n        199,\n        211,\n        223,\n        227,\n        229,\n\
    \        233,\n        239,\n        241,\n        251,\n        257,\n      \
    \  263,\n        269,\n        271,\n        277,\n        281,\n        283,\n\
    \        293,\n        307,\n        311,\n        313,\n        317,\n      \
    \  331,\n        337,\n        347,\n        349,\n        353,\n        359,\n\
    \        367,\n        373,\n        379,\n        383,\n        389,\n      \
    \  397,\n        401,\n        409,\n        419,\n        429,\n        433,\n\
    \        439,\n        443,\n        449,\n        457,\n        461,\n      \
    \  463,\n        467,\n        479,\n        483,\n        487,\n        491,\n\
    \        499,\n        503,\n        509,\n        521,\n        523,\n      \
    \  541,\n        547,\n        557,\n        563,\n        569,\n        571,\n\
    \        577,\n        587,\n        593,\n        599,\n        601,\n      \
    \  607,\n        613,\n        617,\n        619,\n        631,\n        641,\n\
    \        643,\n        647,\n        653,\n        659,\n        661,\n      \
    \  673,\n        677,\n        683,\n        691,\n        701,", "    if n <\
    \ 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        || n % 11\
    \ == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 \n        || n % 23 == 0 ||\
    \ n % 29 == 0 || n % 31 == 0 || n % 37 == 0 \n        || n % 41 == 0 || n % 43\
    \ == 0 || n % 47 == 0 || n % 53 == 0 \n        || n % 59 == 0 || n % 61 == 0 ||\
    \ n % 67 == 0 || n % 71 == 0 \n        || n % 73 == 0 || n % 79 == 0 || n % 83\
    \ == 0 || n % 89 == 0 \n        || n % 97 == 0 || n % 101 == 0 || n % 103 == 0\
    \ || n % 107 == 0 \n        || n % 111 == 0 || n % 117 == 0 || n % 121 == 0 ||\
    \ n % 123 == 0 \n        || n % 129 == 0 || n % 131 == 0 || n % 137 == 0 || n\
    \ % 147 == 0 \n        || n % 151 == 0 || n % 157 == 0 || n % 163 == 0 || n %\
    \ 167 == 0 \n        || n % 173 == 0 || n % 179 == 0 || n % 181 == 0 || n % 185\
    \ == 0 \n        || n % 191 == 0 || n % 193 == 0 || n % 197 == 0 || n % 199 ==\
    \ 0 \n        || n % 211 == 0 || n % 213 == 0 || n % 217 == 0 || n % 219 == 0\
    \ \n        || n % 223 == 0 || n % 227 == 0 || n % 229 == 0 || n % 233 == 0 \n\
    \        || n % 239 == 0 || n % 241 == 0 || n % 251 == 0 || n % 257 == 0 \n  \
    \      || n % 263 == 0 || n % 269 == 0 || n % 271 == 0 || n % 277 == 0 \n    \
    \    || n % 281 == 0 || n % 283 == 0 || n % 293 == 0 || n % 307 == 0 \n      \
    \  || n % 311 == 0 || n % 313 == 0 || n % 317 == 0 || n % 321 == 0 \n        ||\
    \ n % 323 == 0 || n % 329 == 0 || n % 331 == 0 || n % 337 == 0 \n        || n\
    \ % 347 == 0 || n % 349 == 0 || n % 351 == 0 || n % 357 == 0 \n        || n %\
    \ 359 == 0 || n % 361 == 0 || n % 363 == 0 || n % 365 == 0 \n        || n % 367\
    \ == 0 || n % 369 == 0 || n % 371 == 0 || n % 377 == 0 \n        || n % 381 ==\
    \ 0 || n % 383 == 0 || n % 389 == 0 || n % 397 == 0 \n        || n % 401 == 0\
    \ || n % 403 == 0 || n % 407 == 0 || n % 409 == 0 \n        || n % 411 == 0 ||\
    \ n % 413 == 0 || n % 417 == 0 || n % 419 == 0 \n        || n % 421 == 0 || n\
    \ % 423 == 0 || n % 427 == 0 || n % 429 == 0 \n        || n % 433 == 0 || n %\
    \ 439 == ", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n        || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 \n \
    \       || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 \n       \
    \ || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 \n        || n %\
    \ 59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 \n        || n % 73 ==\
    \ 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 \n        || n % 97 == 0 || n\
    \ % 101 == 0 || n % 103 == 0 || n % 107 == 0 \n        || n % 111 == 0 || n %\
    \ 117 == 0 || n % 121 == 0 || n % 123 == 0 \n        || n % 129 == 0 || n % 131\
    \ == 0 || n % 137 == 0 || n % 147 == 0 \n        || n % 151 == 0 || n % 157 ==\
    \ 0 || n % 163 == 0 || n % 167 == 0 \n        || n % 173 == 0 || n % 179 == 0\
    \ || n % 181 == 0 || n % 185 == 0 \n        || n % 191 == 0 || n % 193 == 0 ||\
    \ n % 197 == 0 || n % 199 == 0 \n        || n % 211 == 0 || n % 213 == 0 || n\
    \ % 217 == 0 || n % 219 == 0 \n        || n % 223 == 0 || n % 227 == 0 || n %\
    \ 229 == 0 || n % 233 == 0 \n        || n % 239 == 0 || n % 241 == 0 || n % 251\
    \ == 0 || n % 257 == 0 \n        || n % 263 == 0 || n % 269 == 0 || n % 271 ==\
    \ 0 || n % 277 == 0 \n        || n % 281 == 0 || n % 283 == 0 || n % 293 == 0\
    \ || n % 307 == 0 \n        || n % 311 == 0 || n % 313 == 0 || n % 317 == 0 ||\
    \ n % 319 == 0 \n        || n % 323 == 0 || n % 329 == 0 || n % 331 == 0 || n\
    \ % 337 == 0 \n        || n % 347 == 0 || n % 349 == 0 || n % 351 == 0 || n %\
    \ 357 == 0 \n        || n % 359 == 0 || n % 361 == 0 || n % 363 == 0 || n % 365\
    \ == 0 \n        || n % 367 == 0 || n % 369 == 0 || n % 371 == 0 || n % 377 ==\
    \ 0 \n        || n % 381 == 0 || n % 383 == 0 || n % 389 == 0 || n % 397 == 0\
    \ \n        || n % 401 == 0 || n % 403 == 0 || n % 407 == 0 || n % 409 == 0 \n\
    \        || n % 411 == 0 || n % 413 == 0 || n % 417 == 0 || n % 419 == 0 \n  \
    \      || n % 421 == 0 || n % 423 == 0 || n % 427 == 0 || n % 429 == 0 \n    \
    \    || n % 433 == 0 || n % 439 == ", "    if is_prime_cache[n] \n        return\
    \ is_prime_cache[n]\n    \n    prime_cache = [true, false, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, ", "    if is_prime_cache[n] == true \n    else \n       \
    \ if is_prime_cache[n] == false \n        then \n            prime_cache[n] =\
    \ true\n            \n            -- Test for primeness\n            if n <= 1\
    \ \n            then \n                is_prime_cache[n] = false\n           \
    \ else \n                -- Test for factors\n                for f in 2::Int64\
    \ \n                do \n                    if n % f == 0 \n                \
    \    then \n                        is_prime_cache[n] = false\n              \
    \          break\n                end\n            end\n        else \n      \
    \      is_prime_cache[n] = true\n        end\n    end\n    return is_prime_cache[n]\n\
    end\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if a number\
    \ is divisible by another number. Hint: use modulo division.", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n < 2 \n        return false\n  \
    \  if n == 2 \n        return true\n    if n % 2 == 0 \n        return false\n\
    \    \n    prime_cache = [true, false]\n    \n    for d in range(3, n+1, 2) \n\
    \        if n % d == 0 \n            prime_cache[0] = false\n            break\n\
    \    \n    for d in range(3, n+1, 2) \n        if n % d == 0 \n            prime_cache[1]\
    \ = false\n            break\n    \n    is_prime_cache[n] = prime_cache[1]\n \
    \   return prime_cache[1]\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of divisors of a given number.", "    if\
    \ is_prime_impl(n) then true else false\nend", "    if n < 2 || n % 2 == 0 ||\
    \ n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        then return false\n    else\
    \ if n == 1 || n == 3 || n == 5 || n == 7 \n        then return true\n    else\
    \ if n % 6 == 0 then return is_prime(n / 6) else return false\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that returns true if a given number is even,\
    \ and false otherwise.\n>>> is_even(6)\nfalse\n>>> is_even(10)\ntrue\n>>> is_even(13)\n\
    true\n>>> is_even(21)\ntrue\n>>> is_even(25)\ntrue\n>>> is_even(27)\nfalse\n>>>\
    \ is_even(29)\nfalse\n>>> is_even(30)\nfalse\n>>> is_even(32)\nfalse\n>>> is_even(33)\n\
    false\n>>> is_even(34)\nfalse\n>>> is_even(35)\nfalse\n>>> is_even(36)\nfalse\n\
    >>> is_even(37)\nfalse\n>>> is_even(38)\nfalse\n>>> is_even(39)\nfalse\n>>> is_even(40)\
    \ \nfalse\n>>> is_even(41)\nfalse\n>>> is_even(42)\nfalse\n>>> is_even(43)\nfalse\n\
    >>> is_even(44)\nfalse\n>>> is_even(45)\nfalse\n>>> is_even(46)\nfalse\n>>> is_even(47)\n\
    false\n>>> is_even(48)\nfalse\n>>> is_even(49)\nfalse\n>>> is_even(50)\nfalse\n\
    >>> is_even(51)\nfalse\n>>> is_even(52)\nfalse\n>>> is_even(53)\nfalse\n>>> is_even(54)\n\
    false\n>>> is_even(55)\nfalse\n>>> is_even(56)\nfalse\n>>> is_even(57)\nfalse\n\
    >>> is_even(58)\nfalse\n>>> is_even(59)\nfalse\n>>> is_even(60)\nfalse\n>>> is_even(61)\n\
    false\n>>> is_even(62)\nfalse\n>>> is_even(63)\nfalse\n>>> is_even(64)\nfalse\n\
    >>> is_even(65)\nfalse\n>>> is_even(66)\nfalse\n>>> is_even(67)\nfalse\n>>> is_even(68)\n\
    false\n>>> is_even(69)\nfalse\n>>> is_even(70)\nfalse\n>>> is_even(71)\nfalse\n\
    >>> is_even(72)\nfalse\n>>> is_even(73)\nfalse\n>>> is_even(74)\nfalse\n>>> is_even(75)\n\
    false\n>>> is_even(76)\nfalse\n>>> is_even(77)\nfalse\n>>> is_even(78)\n", " \
    \   if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n      \
    \  then return false\n    else \n        for i in 2..(n-1)\n            if n %\
    \ i == 0 || n % (i + 2) == 0 || n % (i + 3) == 0 || n % (i + 5) == 0 || n % (i\
    \ + 7) == 0\n                then return false\n            else return true\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if a given number is\
    \ prime, and false otherwise.\n    >>> is_prime(6)\n    false\n    >>> is_prime(101)\n\
    \    true\n    >>> is_prime(11)\n    true\n    >>> is_prime(13441)\n    true\n\
    \    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n    false\n    >>> is_prime(1)\n\
    \    false\n    \"\"\"", "    if n < 2 || n % 2 == 0 \n        then return false\
    \ \n    else if n == 2 \n        then return true \n    else \n        for m in\
    \ 3:n-1, n-2, n-3 \n            do if n % m == 0 \n                then return\
    \ false \n    return true \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"Return\
    \ true if a given number is even, and false otherwise.\n    >>> is_even(6)\n \
    \   false\n    >>> is_even(101)\n    true\n    >>> is_even(11)\n    true\n   \
    \ >>> is_even(13441)\n    true\n    >>> is_even(61)\n    true\n    >>> is_even(4)\n\
    \    false\n    >>> is_even(1)\n    false\n    \"\"\"", "    if n < 2 || n % 2\
    \ == 0 \n        then return false\n    else if n == 2 \n        then return true\n\
    \    else \n        for m in range(3, floor(sqrt(n))+1, 2) \n            if n\
    \ % m == 0 \n                then return false\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if a given number is even,\
    \ and false otherwise.\n>>> is_even(6)\nfalse\n>>> is_even(10)\ntrue\n>>> is_even(11)\n\
    false\n>>> is_even(13)\ntrue\n>>> is_even(14)\nfalse\n>>> is_even(15)\ntrue\n\
    >>> is_even(16)\nfalse\n>>> is_even(17)\ntrue\n>>> is_even(18)\nfalse\n>>> is_even(19)\n\
    true\n>>> is_even(20)\nfalse\n>>> is_even(21)\ntrue\n>>> is_even(22)\nfalse\n\
    >>> is_even(23)\ntrue\n>>> is_even(24)\nfalse\n>>> is_even(25)\ntrue\n>>> is_even(26)\n\
    false\n>>> is_even(27)\ntrue\n>>> is_even(28)\nfalse\n>>> is_even(29)\ntrue\n\
    >>> is_even(30)\nfalse\n>>> is_even(31)\ntrue\n>>> is_even(32)\nfalse\n>>> is_even(33)\n\
    true\n>>> is_even(34)\nfalse\n>>> is_even(35)\ntrue\n>>> is_even(36)\nfalse\n\
    >>> is_even(37)\ntrue\n>>> is_even(38)\nfalse\n>>> is_even(39)\ntrue\n>>> is_even(40)\n\
    false\n>>> is_even(41)\ntrue\n>>> is_even(42)\nfalse\n>>> is_even(43)\ntrue\n\
    >>> is_even(44)\nfalse\n>>> is_even(45)\ntrue\n>>> is_even(46)\nfalse\n>>> is_even(47)\n\
    true\n>>> is_even(48)\nfalse\n>>> is_even(49)\ntrue\n>>> is_even(50)\nfalse\n\
    >>> is_even(51)\ntrue\n>>> is_even(52)\nfalse\n>>> is_even(53)\ntrue\n>>> is_even(54)\n\
    false\n>>> is_even(55)\ntrue\n>>> is_even(56)\nfalse\n>>> is_even(57)\ntrue\n\
    >>> is_even(58)\nfalse\n>>> is_even(59)\ntrue\n>>> is_even(60)\nfalse\n>>> is_even(61)\n\
    true\n>>> is_even(62)\nfalse\n>>> is_even(63)\ntrue\n>>> is_even(64)\nfalse\n\
    >>> is_even(65)\ntrue\n>>> is_even(66)\nfalse\n>>> ", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n <= 1 \n        return false\n \
    \   if n == 2 \n        return true\n    if n % 2 == 0 \n        return false\n\
    \    \n    i = 5\n    while i * i <= n \n        i += 2\n    \n    if n == i \n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a number is even.", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    \n    if n < 2 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    prime_cache = [true, false]\n    \n    for d in range(3,\
    \ n+1, 2) \n        if n % d == 0 \n            prime_cache[0] = false\n     \
    \       prime_cache[1] = false\n            return prime_cache\n    \n    prime_cache[0]\
    \ = false\n    prime_cache[1] = true\n    return prime_cache\nend", "    if is_prime_impl(n)\
    \ == true\n    else \n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the first n prime numbers. Use\
    \ a while loop to do this.", "    if n < 2 || n % 2 == 0 \n        return false\n\
    \    else \n        return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-",
  "    if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n] == false\
    \ \n        else \n            prime_cache[n] = is_prime_cache[n]\n          \
    \  prime_cache[n] = true\n            \n            \n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n", "    if n < 2 || n % 2 == 0 \n        return false\n    else if n\
    \ == 2 \n        return true\n    else if n % 3 == 0 \n        return true\n \
    \   else \n        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n\
    \    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n\
    \    false\n    >>> is_prime(1)\n    false\n    \"\"\"", "    if n < 2 || n %\
    \ 2 == 0\n        return false\n    \n    i = 2\n    while i <= sqrt(n)\n    \
    \    if n % i == 0\n            return false\n        i += 1\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as", "    if is_prime_impl(n) then\
    \ return true else return false end\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that checks if a given number is even.\nHint: Use a while loop.", "    if n\
    \ < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        then return\
    \ false\n    else if n == 2 || n == 3 || n == 5 || n == 7 \n        then return\
    \ true\n    else if n % 6 == 0 then return false\n    else if n % 6 == 1 then\
    \ return true\n    else if n % 6 == 2 then return false\n    else if n % 6 ==\
    \ 3 then return true\n    else if n % 6 == 5 then return false\n    else if n\
    \ % 6 == 7 then return true\n    else return false\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    false\n    >>> is_prime(101)\n    true\n    >>> is_prime(11)\n    true\n\
    \    >>> is_prime(13441)\n    true\n    >>> is_prime(61)\n    true\n    >>> is_prime(4)\n\
    \    false\n    >>> is_prime(1)\n    false\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
