name: HumanEval_73_smallest_change
language: jl
prompt: "\"\"\"\n    Given a vector arr of integers, find the minimum number of elements\
  \ that\n    need to be changed to make the vector palindromic. A palindromic vector\
  \ is a vector that\n    is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n\n    For example:\n    >>>\
  \ smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
  \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n \
  \   \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
  \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t\
  @test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1,\
  \ 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
  \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
completions: ["    \n    smallest_change = Int64(0)\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        \n        if arr[i] != arr[i+1] \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len <\
    \ 2\n        return len\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:", "    \n    smallest_change = Int64(0)\n\
    \    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 || j >=\
    \ 0 || k >= 0\n        \n        if arr[i] == arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            \n            if i == 0\n               \
    \ k = j\n            elseif j == 0\n                k = i\n            else\n\
    \                k = i - 1\n                j = j - 1\n            end\n     \
    \   else\n            smallest_change = smallest_change + 1\n            \n  \
    \          if i == 0\n                k = j\n            elseif j == 0\n     \
    \           k = i\n            else\n                k = i - 1\n             \
    \   j = j - 1\n            end\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nGiven a binary tree, find the lowest common ancestor\
    \ (LCA) of two given nodes in the tree. \nThe lowest common ancestor is defined\
    \ between two nodes p and q as the lowest node in T that has both p and q as descendants\
    \ (where we allow a node to be a descendant of itself).", "    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr)\
    \ - 1\n        \n        if arr[i] > arr[j]\n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[i] + k\n            arr[j] = arr[j] - k\n    \
    \        arr[k] = arr[k] - k\n            \n        end\n        \n        if\
    \ arr[i] < arr[j]\n            smallest_change = smallest_change + 1\n       \
    \     arr[i] = arr[i] - k\n            arr[j] = arr[j] + k\n            arr[k]\
    \ = arr[k] + k\n        end\n        \n        if arr[i] > arr[j]\n          \
    \  smallest_change = smallest_change + 1\n            arr[i] = arr[i] - k\n  \
    \          arr[j] = arr[j] + k\n            arr[k] = arr[k] - k\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for x in arr\n        smallest_change = smallest_change + 1\n        if\
    \ x != reverse(arr)\n            smallest_change = smallest_change - 1\n     \
    \   end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 1, j = length(arr)\
    \ - 1, k = length(arr) - 1\n        \n        if arr[i] > arr[j]\n           \
    \ smallest_change = k\n            k = k - 1\n        elseif arr[i] < arr[j]\n\
    \            smallest_change = k\n            k = k - 1\n        else\n      \
    \      smallest_change = k\n            k = k - 1\n        end\n    end\n    \n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    smallest_change = 0\n    \n    for i = length(arr) - 1, j = length(arr) -\
    \ 1, k = 0; i >= 0 || j >= 0 || k >= 0; i--, j--, k++ \n        \n        if arr[i]\
    \ != arr[j] \n            smallest_change = k\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for x in arr\n        if x != largest\n            count +=\
    \ 1\n            if diff == 0\n                count += 1\n            else\n\
    \                count += diff / x\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i] != arr[j]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  len = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid+3]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+3]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+3]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n", "    smallest_change = 0\n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change + 1 if arr[i] != arr[i+1] \n   \
    \ end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    len = length(arr)\n    if len == 0 \n        return 0\n    \n    min\
    \ = len\n    \n    for i = len - 1; i>=0; i--\n        if arr[i] != reverse(arr[i])\n\
    \            min = i\n            break\n    end\n    \n    return min\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    \n    if len\
    \ == 0 \n        return 0 \n    \n    if len == 1 \n        return 1 \n    \n\
    \    if arr[len-1] == arr[len-2] \n        return 0 \n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change",
  "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-i)\n     \
    \   end\n    end\n    return smallest_change\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns true if the given string is a palindrome and false\
    \ if not.", "    \n    smallest_change = 0\n    \n    for i = length(arr) downto\
    \ 1 \n        smallest_change = smallest_change if arr[i] > arr[length(arr)-i]\
    \ else 0\n    end\n    \n    return smallest_change\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a vector of integers and returns the number of\
    \ unique elements in the vector. \nFor example, given [1,2,2,3], return 3.", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change if arr[i] != arr[i+1] \n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the number of elements in the vector\
    \ that are greater than the average of the vector. For example, if the vector\
    \ is [10, 20, 30, 40, 50, 60, 70, 80], then the average is 55.5, so the function\
    \ should return 3.", "    len = length(arr)\n    if len < 2\n        return 0\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:",
  "    \n    smallest_change = Int64(0)\n    \n    for i = length(arr) - 2 ; i >=\
    \ 0 ; i-- \n        if arr[i] != arr[i+1] \n            smallest_change = 1 +\
    \ smallest_change \n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    len = length(arr)\n    \n    if\
    \ len == 0 \n        return 0 \n    \n    smallest_change = Inf \n    \n    for\
    \ i = len to 1 \n        \n        if arr[i] != reverse(arr[i]) \n           \
    \ \n            if smallest_change > i - 1 \n                smallest_change =\
    \ i - 1 \n            \n        end \n    end \n    \n    return smallest_change\
    \ \nend \n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2, 3, 5, 4,\
    \ 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers, find the\
    \ minimum number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n\
    \        smallest_change = minimum(smallest_change, arr[i] + arr[i + 1])\n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = Int64(0)\n    \n    for i = length(arr) - 2 ; i >=\
    \ 0 ; i-- \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len < 2\n\
    \        return 0\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    diff = largest - smallest\n    count = 0\n \
    \   for el in arr\n        if el == smallest || el == largest\n            count\
    \ += 1\n        elseif el == diff\n            count += 1\n        elseif el ==\
    \ diff + 1\n            count += 1\n        elseif el == diff - 1\n          \
    \  count += 1\n        elseif el == diff + 2\n            count += 1\n       \
    \ elseif el == diff - 2\n            count += 1\n        elseif el == diff + 3\n\
    \            count += 1\n        elseif el == diff - 3\n            count += 1\n\
    \        elseif el == diff + 4\n            count += 1\n        elseif el == diff\
    \ - 4\n            count += 1\n        elseif el == diff + 5\n            count\
    \ += 1\n        elseif el == diff - 5\n            count += 1\n        elseif\
    \ el == diff + 6\n            count += 1\n        elseif el == diff - 6\n    \
    \        count += 1\n        elseif el == diff + 7\n            count += 1\n \
    \       elseif el == diff - 7\n            count += 1\n        elseif el == diff\
    \ + 8\n            count += 1\n        elseif el == diff - 8\n            count\
    \ += 1\n        elseif el == diff + 9\n            count += 1\n        elseif\
    \ el == diff - 9\n            count += 1\n        elseif el == diff + 10\n   \
    \         count += 1\n        elseif el == diff - 10\n            count += 1\n\
    \        elseif el == diff + 11\n            count += 1\n        elseif el ==\
    \ diff - 11\n            count += 1\n        elseif el == diff + 12\n        \
    \    count += 1\n        elseif el == diff - 12\n            count += 1\n    \
    \    elseif el == diff + 13\n            count += 1\n        elseif el == diff\
    \ - 13\n            count += 1\n        elseif el == diff + 14\n            count\
    \ += 1\n        elseif el == diff - 14\n            count += 1\n        elseif\
    \ el == diff + 15\n            count += 1\n        elseif el == diff - 15\n  \
    \          count += 1\n        elseif el == diff + 16\n            count += 1\n\
    \        elseif el == diff - 16\n            count += 1\n        elseif el ==\
    \ diff + 17\n            count += 1\n        elseif el == diff - 17\n        \
    \    count += 1\n        elseif el == diff + 18\n            count += 1\n    \
    \    elseif el == diff - 18\n            count += 1\n        elseif el == diff\
    \ + 19\n            count += 1\n        elseif el == diff - 19\n            count\
    \ += 1\n        elseif el == diff + 20\n            count += 1\n        elseif\
    \ el == diff - 20\n            count += 1\n        elseif el == diff + 21\n  \
    \          count += 1\n        elseif el == diff - 21\n            count += 1\n\
    \        else", "    \n    len = length(arr)\n    \n    if len < 2\n        return\
    \ 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n   \
    \     return smallest_change(arr[mid+1:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n    end\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    for x in arr\n\
    \        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7: Find the longest palindromic substring\
    \ of a given string.\nGiven a string, find the longest palindromic substring in\
    \ it.", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i\
    \ >= 0 ; i-- \n        \n        if arr[i] > arr[i+1] \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the number of elements that need to be changed to make the vector\
    \ palindromic. For example, if the vector is [1, 2, 3, 5, 4, 7, 9, 6], then your\
    \ function should return 4.", "    \n    smallest_change = 0\n    \n    for i\
    \ = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 || j >= 0 || k >= 0\n\
    \        \n        if i == 0\n            smallest_change = j\n        elseif\
    \ j == 0\n            smallest_change = i\n        elseif k == 0\n           \
    \ smallest_change = i\n        else\n            if arr[i] > arr[j]\n        \
    \        smallest_change = i\n            elseif arr[j] > arr[k]\n           \
    \     smallest_change = j\n            else\n                smallest_change =\
    \ k\n            end\n        end\n        \n        if smallest_change == 0\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    \n    for i\
    \ = length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n       \
    \     smallest_change = smallest_change + 1\n            arr[i] = arr[j] + 1\n\
    \            arr[j] = arr[i]\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len ==\
    \ 0 \n        return 0 \n    end\n    \n    min = len\n    \n    for i = len to\
    \ 1 \n        if arr[i] != reverse(arr[i]) \n            min = i - 1 \n      \
    \      break\n        end\n    end\n    \n    return min\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the number of\
    \ elements in the vector that are greater than the average of the vector. For\
    \ example, if the vector is [10, 20, 30, 40, 50, 60, 70, 80], then the function\
    \ should return 3.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        if arr[i] != arr[i+1] \n            smallest_change = i\n        \
    \    break\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    len = length(arr)\n    if len == 0 \n       \
    \ return 0 \n    end\n    \n    smallest_change = len\n    \n    for i = len -\
    \ 1; i>=0; i-- \n        if arr[i] != reverse(arr[i]) \n            smallest_change\
    \ = i \n            break\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    \n    if\
    \ len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n    else\n\
    \        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    len = length(arr)\n    \n    if len == 0 \n\
    \        return 0 \n    \n    if len == 1 \n        return 1 \n    \n    if arr[len]\
    \ == arr[len-1] \n        return 0 \n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1] \n        return smallest_change(arr[mid+1:end]) + 1 \n    \n\
    \    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[",
  "    \n    len = length(arr)\n    \n    if len < 2\n        return len\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i =\
    \ length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] > arr[i+1] \n \
    \           smallest_change = i\n            break\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    changes = 0\n    \n    for el in arr\n\
    \        if el == largest\n            changes += 1\n            largest = el\n\
    \        elseif el == smallest\n            changes += 1\n            smallest\
    \ = el\n        else\n            changes += 2\n        end\n    end\n    \n \
    \   return changes\nend\n</cell>\n<code language=julia-1.5>", "    \n    len =\
    \ length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    min = Inf\
    \ \n    \n    for i = len to 1 \n        if arr[i] < arr[len-i] \n           \
    \ min = i - 1 \n            break \n        else \n            min = i \n    \
    \    end \n    end \n    \n    if min == 0 \n        return 0 \n    else \n  \
    \      return min \n    end \nend \n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a given value appears in a given vector. For example, given\
    \ [1, 1, 2, 2], return 3.", "    len = length(arr)\n    if len < 2\n        return\
    \ 0\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return\
    \ smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n     \
    \   return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end])\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return smallest_change(arr[mid+1:end])\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return smallest_change(arr[mid-1:end", "    \n    smallest_change = 0\n\
    \    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    \n    if\
    \ len <= 1\n        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    end\n   \
    \ \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+",
  "    \n    smallest_change = 0\n    \n    \n    for i = length(arr) downto 1 do\n\
    \        if arr[i] > arr[i-1] then\n            smallest_change = i\n        \
    \    break\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != reverse(arr[i+1])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nThe second function smallest_change\
    \ is called in the function smallest_change to find the minimum number of elements\
    \ needed to make the vector palindromic. The function reverse() reverses a vector.\
    \ reverse([1, 2, 3, 4, 3, 2, 2]) returns [3, 2, 1]. reverse([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) returns [5, 4, 7, 9, 6].", "    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    \n    if largest == smallest\n        return 0\n    else\n\
    \        changes = 0\n        for el in arr\n            if el == largest\n  \
    \              el = smallest\n                changes += 1\n            end\n\
    \        end\n        return changes\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7: Find the longest palindromic substring\
    \ in arr\nGiven a vector arr of strings, find the longest palindromic substring\
    \ in arr. Return an empty string if there is no such substring. For example, given\
    \ arr = [ \"abba\", \"aba\", \"abc\", \"abba\", \"aba\", \"abc\", \"abba\" ],\
    \ the longest palindromic substring is \"abba\".", "    len = length(arr)\n  \
    \  if len < 2\n        return 0\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    if left > right\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    return smallest_change(arr[mid+1:end])\nend\nsmallest_change(arr)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns the\
    \ number of characters in that string that are not alphanumeric.", "    \n   \
    \ smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n   \
    \     \n        if arr[i] != arr[i+1] \n            smallest_change = i\n    \
    \        break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len == 0 \n\
    \        return 0\n    if len == 1 \n        return arr[1] - arr[0]\n    if arr[1]\
    \ < arr[0] \n        return smallest_change(arr[1..end-1]) + arr[1] - arr[0]\n\
    \    else \n        return smallest_change(arr[1..end-1]) + arr[1] - arr[0]\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 7\nWrite a function that returns true if the given\
    \ string is a palindrome, false otherwise.", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n\
    \            smallest_change = smallest_change + 1\n            arr[i] = arr[j]\
    \ + 1\n            arr[j] = arr[i]\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    smallest_change = 0\n    \n\
    \    for i = length(arr) - 1, j = length(arr) - 2\n        \n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] += 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] += 1\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    len = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n\
    \    \n    smallest_change = len\n    \n    for i = len to 1 \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i \n            break\n \
    \       end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = minimum(smallest_change, length(arr) - i)\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers and returns the number of elements in the vector\
    \ that are greater than or equal to 50. Test your function on a few examples.",
  "    len = length(arr)\n    if len == 0 \n        return 0 \n    end\n    \n   \
    \ smallest_change = Int64(0)\n    \n    for i = len-1 downto 1 \n        smallest_change\
    \ = min(smallest_change, length(arr) - i)\n        if arr[i] != reverse(arr[i:])\n\
    \            smallest_change += 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 3\nGiven a vector arr of integers, find the minimum\
    \ number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    \n  \
    \  smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n  \
    \      if arr[i] != reverse(arr[i+1])\n            smallest_change = i\n     \
    \       break\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 1, j\
    \ = length(arr) - 1, k = 0; i >= 0 || j >= 0 || k >= 0; i--, j--, k++\n      \
    \  if arr[i] != arr[j]\n            smallest_change = k\n            break\n \
    \       end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    changes = 0\n    \n    for el in arr\n\
    \        if el == largest\n            largest = el\n        elseif el == smallest\n\
    \            smallest = el\n        else\n            changes += 1\n        end\n\
    \    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same\
    \ backwards and forward. For example, 321 is a palindrome while 321421 is a palindrome\
    \ but 12321 is not a palindrome.", "    \n    smallest_change = 0\n    \n    \n\
    \    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 || j >= 0 ||\
    \ k >= 0; i--, j--, k++\n        if arr[i] != arr[j]\n            smallest_change\
    \ = k\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 1, j = 1, 0\n        if arr[i] != arr[j]\n     \
    \       smallest_change = j\n        end\n        j += 1\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are less than the mean\
    \ of the vector.", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1] \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns true if the given string\
    \ is a palindrome and false otherwise. For example, given \"A man, a plan, a canal:\
    \ Panama\", your function should return true.", "    len = length(arr)\n    if\
    \ len < 2\n        return 0\n    \n    i = 0\n    j = len - 1\n    while i < j\n\
    \        if arr[i] > arr[j]\n            arr[i] -= 1\n        else\n         \
    \   arr[j] -= 1\n        end\n        i += 1\n        j -= 1\n    end\n    \n\
    \    return len\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = 0\n    \n    for i = length(arr) downto 1 \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:",
  "    smallest_change = 0\n    \n    for i = length(arr) downto 1 do\n        if\
    \ arr[i] > arr[i-1] then\n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend", "    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    end\n    \n    smallest_change\
    \ = Int64(len) \n    \n    for i = 1:len\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i \n            break\n        end\n    end\n \
    \   \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        else \n            smallest_change = smallest_change - 1\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    len = length(arr)\n    if len\
    \ == 0 \n        return 0 \n    \n    min = 1 \n    \n    for i = len-1 downto\
    \ 1 \n        if arr[i] > arr[i-1] \n            min = min + 1 \n        else\
    \ \n            min = min \n        end \n    end \n    return min \nend ", " \
    \   \n    smallest_change = Int64(0)\n    \n    for i = length(arr) - 1 downto\
    \ 1 \n        if arr[i] != reverse(arr[i]) \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr))\n    for i = 1:length(arr)\n       \
    \ if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr) - i)\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the number of\
    \ elements that need to be changed to make the vector palindromic. For example,\
    \ given [1,2,3,4,5,6,7], you should return 3.", "    \n    smallest_change = 0\n\
    \    \n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    \n    len = length(arr)\n    \n    if len < 2\n        return\
    \ 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n   \
    \     return smallest_change(arr[mid+1:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n    end\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == ", "    len = length(arr)\n    if len == 0\
    \ \n        return 0\n    \n    min = Int.(ceil.(log2(len)))\n    \n    changes\
    \ = 0\n    \n    for i = 1:len\n        if arr[i] != reverse(arr[i])\n       \
    \     changes += 1\n        end\n    end\n    \n    return changes\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i =\
    \ length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] != arr[i+1] \n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   smallest_change = 0\n    \n    for i = length(arr) downto 1 \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr))\n    for i = 1:length(arr)\n       \
    \ if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr) - i)\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the number of\
    \ elements in the vector that are less than the mean of the vector.", "    \n\
    \    len = length(arr)\n    if len == 0 \n        return 0 \n    \n    min = Inf\
    \ \n    \n    for i = len to 1 \n        if arr[i] > arr[len-i] \n           \
    \ min = i - 1 \n            break \n        else \n            min = i \n    \
    \    end \n    end \n    \n    return min \nend \n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a vector is a palindrome. For example, \n[1,2,3,4,5,6,7,8,9,10,11,12]\
    \ is a palindrome while [1,2,3,4,5,6,7,8,9,10,11,12] is not a palindrome.", " \
    \   \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        smallest_change = smallest_change + 1 if arr[i] != arr[i+1] \n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = 1:length(arr)\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend", "    len\
    \ = length(arr)\n    if len < 2\n        return 0\n    \n    min = Int.(arr[1])\n\
    \    max = Int.(arr[len-1])\n    \n    for i = 2:len-1\n        if arr[i] > max\
    \ \n            max = arr[i]\n        elseif arr[i] < min \n            min =\
    \ arr[i]\n        end\n    end\n    \n    return min - max\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    The function smallest_change is now implemented in the file smallest_change.jl.",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    change = largest - smallest\n    \n  \
    \  if change == 1\n        return 1\n    \n    if change == -1\n        return\
    \ -1\n    \n    change = change / 2\n    \n    if change == 1\n        return\
    \ smallest_change(arr[smallest:largest]) + 1\n    \n    if change == -1\n    \
    \    return smallest_change(arr[largest:smallest]) + 1\n    \n    return smallest_change(arr[smallest:largest])\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4,\
    \ 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4,\
    \ 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2,\
    \ 1])\n</cell>\n<text>\nProblem 7", "    \n    smallest_change = 0\n    \n   \
    \ for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n \
    \           smallest_change = smallest_change + 1\n            arr[i] -= 1\n \
    \           arr[j] -= 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] -= 1\n  \
    \      elseif arr[i] == arr[j]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    len = length(arr)\n    smallest_change = 0\n\
    \    for i = len - 1; i >= 0; i--\n        if arr[i] != reverse(arr[i])\n    \
    \        smallest_change = i\n            break\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    diff = largest - smallest\n    count = 0\n    for el in\
    \ arr\n        if el == largest\n            count += 1\n        elseif el ==\
    \ smallest\n            count -= 1\n        else\n            if el > largest\n\
    \                count += diff + 1\n            elseif el < smallest\n       \
    \         count -= diff + 1\n            else\n                count += 1\n  \
    \          end\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a\
    \ vector arr of integers, find the minimum number of elements that\nneed to be\
    \ changed to make the vector palindromic. A palindromic vector is a vector that\n\
    is read the same backwards and forwards. In one change, you can change one element\
    \ to any other element.", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1] \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != arr[i+1] \n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nProblem 7", "    len = length(arr)\n    if len == 0 \n        return 0\
    \ \n    end\n    \n    min = Int.(ceil(Int.(len/2))) \n    \n    for i = min to\
    \ len-1 \n        if arr[i] != reverse(arr[i]) \n            min = i \n      \
    \      break \n        end \n    end \n    return min \nend \n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a\
    \ vector of integers, find the minimum number of elements that\nneed to be changed\
    \ to make the vector palindromic. A palindromic vector is a vector that\nis read\
    \ the same backwards and forwards. In one change, you can change one element to\
    \ any other element.", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        \n        if arr[i] > arr[i+1] \n            smallest_change\
    \ = smallest_change + 1\n            arr[i+1] = arr[i]\n            arr[i] = arr[i+1]\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a vector is a palindrome.\
    \ For example, \n    smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) should return true.",
  "    \n    len = length(arr)\n    \n    if len < 2\n        return len\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change = min(smallest_change,\
    \ length(arr) - i)\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i =\
    \ length(arr) downto 1 do\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len <\
    \ 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return 1 + smallest_change(arr[mid+1:end])\n    else\n        return\
    \ smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7\nA palindromic\
    \ number reads the same backwards and forward. For example, 321 is a palindromic\
    \ number while 321421 is a not. Find the sum of all palindromic numbers less than\
    \ one million. The answer can't be over 2 million.", "    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = arr[1]\n    \n\
    \    for i = 2:len\n        if arr[i] < min \n            min = arr[i] \n    \
    \    end\n    end\n    \n    if min == arr[len] \n        return 0 \n    end\n\
    \    \n    count = 0\n    for i = len-1:-1:1\n        if arr[i] > min \n     \
    \       arr[i] = min \n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i+1\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same\
    \ backwards and forward. For example, 321, 132, 213, 321, 132, 213.", "    \n\
    \    len = length(arr)\n    \n    if len < 2\n        return len\n    end\n  \
    \  \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        if arr[i] != reverse(arr[i]) \n            smallest_change = i\n \
    \           break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a vector of integers and\
    \ returns the number of elements in the vector that are less than the average\
    \ of the vector. For example, if the vector is [5, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, ", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        smallest_change = smallest_change + 1 if arr[i]\
    \ != arr[i+1] \n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ downto 1 \n        smallest_change = smallest_change + 1 if arr[i] != reverse(arr[i])\
    \ \n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7: Find the\
    \ longest palindromic substring in arr", "    smallest_change = 0\n    \n    for\
    \ i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != reverse(arr[i+1])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n \
    \       smallest_change = smallest_change + 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            break\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that takes a vector of integers and returns the number of\
    \ elements in the vector that need to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that is read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a given value appears in a given vector.", "    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers, find the\
    \ smallest number of steps to make all elements equal, where a step is one element\
    \ removed. \nFor example, given [10, 20, 30, 40, 50, 60, 70], return [1, 2, 2,\
    \ 2, 3, 3].", "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-i)\n     \
    \   end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3,\
    \ 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change =\
    \ minimum(smallest_change, length(arr) - i)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    for i\
    \ = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1] \n        \
    \    smallest_change = i\n            break\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-i)\n        end\n   \
    \ end\n    return smallest_change\nend", "    largest = maximum(arr)\n    smallest\
    \ = minimum(arr)\n    \n    if largest == smallest\n        return largest\n \
    \   \n    changes = 0\n    \n    for el in arr\n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = largest\n        end\n        \n        if el == largest\n   \
    \         el = smallest\n        end\n        \n        if el == smallest\n  \
    \          el = ", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1] \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    smallest_change = 0\n    \n\
    \    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr) - 1\n     \
    \   while i >= 0 && j >= 0 && k >= 0\n            if arr[i] > arr[j]\n       \
    \         arr[i] -= 1\n                smallest_change += 1\n            elseif\
    \ arr[j] > arr[k]\n                arr[j] -= 1\n                smallest_change\
    \ += 1\n            elseif arr[k] > arr[i]\n                arr[k] -= 1\n    \
    \            smallest_change += 1\n            else\n                i -= 1\n\
    \                j -= 1\n                k -= 1\n            end\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    smallest_change = 0\n    largest = maximum(arr)\n\
    \    smallest_change = largest\n    for el in arr\n        if el == largest\n\
    \            smallest_change = smallest_change + 1\n        elseif el == smallest_change\n\
    \            smallest_change = smallest_change + 1\n        else\n           \
    \ smallest_change = smallest_change + 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers whose elements are the sum of the squares of\
    \ the original elements in the vector. For example, if the input vector is [4,\
    \ 9, 16, 25], then the output vector should be [16, 49, 64, 81]. Make sure your\
    \ function works with vectors of different lengths.", "    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    smallest_change = 0\n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1] \n            smallest_change\
    \ = i\n            break\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = minimum(arr)\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-smallest_change)\n  \
    \  return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7\nA palindromic number reads\
    \ the same both ways. The largest palindrome made from the product of two 2-digit\
    \ numbers is 9009 = 91 x 99.", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return 0\n    \n    changes = 0\n \
    \   \n    for el in arr\n        if el == largest\n            changes += 1\n\
    \            largest = el\n        elseif el == smallest\n            changes\
    \ += 1\n            smallest = el\n        else\n            changes += 1\n  \
    \          largest = el\n            smallest = el\n        end\n    end\n   \
    \ \n    return changes\nend\n</cell>\n<code language=julia-1.5>", "    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[0] != arr[len-1] \n        return 0\
    \ \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid+1:end]) \n    \n    return smallest_change(arr[mid+1:end-1])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n   \
    \ if len < 2\n        return 0\n    \n    min = Int.(floor(Int.(len/2)))\n   \
    \ max = Int.(ceil(Int.(len/2)))\n    \n    if arr[min] == arr[max]\n        return\
    \ min + 1\n    \n    if arr[min] > arr[max]\n        min = Int.(floor(Int.(len/2)))\n\
    \        max = Int.(ceil(Int.(len/2)))\n    end\n    \n    mid = Int.(floor(Int.(len/2)))\n\
    \    \n    while min < max\n        if arr[mid] == arr[min]\n            min =\
    \ Int.(min + 1)\n        elseif arr[mid] > arr[min]\n            max = Int.(ceil(Int.(len/2)))\n\
    \        elseif arr[mid] < arr[min]\n            min = Int.(floor(Int.(len/2)))\n\
    \        end\n        mid = Int.(floor(Int.(len/2)))\n    end\n    \n    if arr[mid]\
    \ == arr[min]\n        return min + 1\n    else\n        return min\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    len = length(arr)\n    \n\
    \    if len == 0 \n        return 0 \n    \n    if len == 1 \n        return 1\
    \ \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid-1:mid+1])\n    \n    if arr[mid] == arr[mid+1] \n  \
    \      return smallest_change(arr[mid-1:mid])\n    \n    if arr[mid] == arr[mid-1]\
    \ \n        return smallest_change(arr[mid+1:mid])\n    \n    if arr[mid] == arr[mid+1]\
    \ \n        return smallest_change(arr[mid+1:mid+1])\n    \n    if arr[mid] ==\
    \ arr[mid-1] \n        return smallest_change(arr[mid-1:mid-1])\n    \n    if\
    \ arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid])\n  \
    \  \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    ", "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if\
    \ largest == smallest\n        return 0\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = lar", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for\
    \ x in arr\n        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that takes a vector of integers and returns\
    \ the number of elements in the vector that are odd.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] >\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 1, j = length(arr)\
    \ - 1, k = 0; i >= 0 && j >= 0; i--, j--, k++\n        if arr[i] != arr[j]\n \
    \           smallest_change = k\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 1, j = length(arr) - 1 \n        while i >= 0 &&\
    \ j >= 0 \n            if arr[i] > arr[j] \n                arr[i] -= 1\n    \
    \            smallest_change += 1\n            elseif arr[i] < arr[j] \n     \
    \           arr[j] -= 1\n                smallest_change += 1\n            else\n\
    \                i -= 1\n                j -= 1\n            end\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for a in arr\n        if a < arr[end-1]\n\
    \            smallest_change = smallest_change + 1\n        else\n           \
    \ smallest_change = smallest_change + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ downto 1 do\n        if arr[i] > arr[i-1] then\n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are greater than the element\
    \ at index 1. For example, if the vector is [5, 3, 7, 9, 1, 3, 6, 4] then your\
    \ function should return 4.", "    len = length(arr)\n    smallest = len\n   \
    \ largest = len\n    \n    for i = len to 1 \n        if arr[i] > arr[largest]\
    \ \n            largest = i\n        else if arr[i] < arr[smallest] \n       \
    \     smallest = i\n        end\n    end\n    \n    if smallest == largest \n\
    \        return 0 \n    else \n        return smallest - largest \n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = Inf \n    \n\
    \    for i = length(arr) - 1 downto 1 \n        if arr[i] > arr[i + 1] \n    \
    \        smallest_change = i \n            break \n        end \n    end \n  \
    \  \n    return smallest_change \nend \n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nQuestion 3\nWrite a function that returns an\
    \ array of integers such that each element of the array is equal to the sum of\
    \ the first and last elements of the original array. For example, if arr = [1,\
    \ 2, 3, 4], the function should return [3, 7, 11, 15].", "    smallest_change\
    \ = 0\n    for i = length(arr) - 1, j = 1, k = 1\n        while i >= k\n     \
    \       if arr[i] < arr[j]\n                arr[i] -= 1\n                smallest_change\
    \ += 1\n            else\n                arr[j] -= 1\n                smallest_change\
    \ += 1\n            end\n            j += 1\n            k += 1\n        end\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.3>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.3>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2, 3,\
    \ 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2,\
    \ 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2,\
    \ 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that need to be changed to make\
    \ the vector palindromic. For example, given [1, 2, 3, 5, 4, 7, 9, 6], it should\
    \ return 4.", "    len = length(arr)\n    smallest_change = 0\n    \n    for i\
    \ = len - 1; i >= 0; i--\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = i\n            break\n    end\n    return smallest_change\nend", "    len\
    \ = length(arr)\n    if len < 2\n        return 0\n    \n    mid = len/2\n   \
    \ \n    left = 0\n    right = mid\n    \n    while left < right\n        if arr[left]\
    \ > arr[right]\n            right -= 1\n        else\n            left += 1\n\
    \        end\n    end\n    \n    if arr[left] > arr[right]\n        left -= 1\n\
    \    end\n    \n    return left - right\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        if arr[i] != arr[i+1] \n            smallest_change = i\n        \
    \    break\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a vector is a palindrome.\
    \ For example, \npalindrome([1, 2, 3]) should return true.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for x in arr\n        if x == largest || x == smallest\n \
    \           count += 1\n        else\n            if x != largest && x != smallest\n\
    \                if x != largest - diff\n                    count += 1\n    \
    \            elseif x != smallest + diff\n                    count += 1\n   \
    \         end\n        end\n    end\n    return count\nend\nsmallest_change(arr::Vector{Int64})\
    \ = smallest_change(arr)\nsmallest_change(arr::Vector{Int64}...) = smallest_change(arr)\n\
    smallest_change(arr::Array{Int64}) = smallest_change(arr)\nsmallest_change(arr::Array{Int64}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T})\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T}...) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector{T,N}) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M}) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector{T,N,M}...) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O})\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O}...) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector{T,N,M,O,P}) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q}) =\
    \ smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q}...) =\
    \ smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q,R}) =\
    \ smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q,R}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,", "    smallest_change\
    \ = minimum(length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   len = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n  \
    \  \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n", "    len = length(arr)\n    if len < 2\n        return 0\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a string and returns the number\
    \ of characters in the string that are not letters.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] >\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    smallest_change\
    \ = 0\n    if len == 0 \n        return smallest_change\n    \n    if arr[len-1]\
    \ == arr[len-2]\n        smallest_change = len\n    else\n        smallest_change\
    \ = smallest_change(arr[len-1:-1:1]) + len\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    \n   \
    \ for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n \
    \           smallest_change = smallest_change + 1\n            arr[i] = arr[i]\
    \ + arr[j]\n            arr[j] = arr[i] - arr[j]\n            arr[i] = arr[i]\
    \ - arr[j]\n        end\n    end\n    \n    return smallest_change\nend", "  \
    \  \n    len = length(arr)\n    \n    if len < 2\n        return 0\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    \n    largest = largest * 10\n    smallest =\
    \ smallest * 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n    largest\
    \ = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest *\
    \ 10\n    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    ", "    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    \n    smallest = arr[1]\n    \n    for\
    \ i = 2 to len\n        if arr[i] < smallest \n            smallest = arr[i]\n\
    \        end\n    end\n    \n    return len - smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given element appears in a given\
    \ vector.", "    smallest_change = 0\n    largest = maximum(arr)\n    smallest_change\
    \ = largest\n    for el in arr\n        if el == largest\n            smallest_change\
    \ = el\n        elseif el == smallest_change\n            smallest_change = el\n\
    \        else\n            smallest_change = el\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nGiven a vector arr of integers, find\
    \ the minimum number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    len =\
    \ length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[len-1] == arr[len-2] \n        return\
    \ 0 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid-1:-1:1]) + 1 \n    \n    return smallest_change(arr[mid-1:-1:1])\
    \ + smallest_change(arr[mid+1:len]) + 1 \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i+1\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    \n    for x\
    \ in arr\n        if x == reverse(arr)\n            smallest_change = smallest_change\
    \ + 1\n        else\n            smallest_change = smallest_change\n        end\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 8\nA palindromic number reads the same\
    \ both ways. The largest palindrome made from the product of two 2-digit numbers\
    \ is 9009 = 91 \xD7 99.", "    \n    smallest_change = Int64(0)\n    \n    for\
    \ i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 || j >= 0 || k >= 0;\
    \ i--, j--, k++\n        smallest_change = minimum(smallest_change, arr[i] + arr[j]\
    \ + arr[k])\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nThe function above\
    \ is called a recursive function, and is often used to solve a problem. Recursive\
    \ functions can have many base cases. In this case, the base case is when there\
    \ are no elements in the array that need to be changed. In this case, the function\
    \ returns 0.", "    len = length(arr)\n    \n    if len == 0 \n        return\
    \ 0 \n    \n    if len == 1 \n        return 1 \n    \n    if arr[len] == arr[len-1]\
    \ \n        return smallest_change(arr[len-1:len]) + 1 \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change = minimum(length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = i\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1] \n \
    \           smallest_change = i\n            break\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  smallest_change = 0\n    for i = length(arr) - 1, j = length(arr) - 2\n   \
    \     if arr[i] > arr[j]\n            smallest_change = smallest_change + 1\n\
    \            arr[i] -= 1\n            arr[j] += 1\n        elseif arr[i] < arr[j]\n\
    \            smallest_change = smallest_change + 1\n            arr[j] -= 1\n\
    \            arr[i] += 1\n        else\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for i = length(arr) downto 1 do\n        if arr[i] < arr[length(arr)-i] then\n\
    \            smallest_change = i\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] !=\
    \ reverse(arr[i]) \n            smallest_change = i\n            break\n     \
    \   end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a vector arr of integers, find\
    \ the minimum number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.", "    len =\
    \ length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    smallest_change\
    \ = len\n    \n    for i = len-1 downto 1 \n        if arr[i] > arr[i-1] \n  \
    \          smallest_change = i \n            break \n    \n    return smallest_change\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    \n    len = length(arr)\n \
    \   \n    if len < 2\n        return len\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid+1] == arr[mid+2]\n  \
    \      return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid]\
    \ == arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid-2]\n    \
    \    return smallest_change(arr[mid+2:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid-2]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+1]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid-2]\n    \
    \    return smallest_change(arr[mid+2:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+1]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+2]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+2]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    \n    if len\
    \ < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    else\n  \
    \      return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[i] -= 1\n            arr[j] -= 1\n  \
    \      elseif arr[i] < arr[j]\n            smallest_change = smallest_change +\
    \ 1\n            arr[j] -= 1\n            arr[i] -= 1\n        else\n        \
    \    smallest_change = smallest_change + 1\n            arr[i] -= 1\n        \
    \    arr[j] -= 1\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    \n    for i\
    \ = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change = minimum(smallest_change,\
    \ arr[i] + arr[i + 1])\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        smallest_change = minimum(smallest_change, length(arr)\
    \ - i - 1) \n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    len = length(arr)\n    \n    if len < 2\n        return len\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[i] -= 1\n            arr[j] += 1\n  \
    \      elseif arr[i] < arr[j]\n            smallest_change = smallest_change +\
    \ 1\n            arr[j] -= 1\n            arr[i] += 1\n        elseif arr[i] ==\
    \ arr[j]\n            smallest_change = smallest_change + 1\n        end\n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes in a list of integers and returns a list of all unique\
    \ permutations of the integers. A permutation is a way of rearranging elements\
    \ of a list without changing the order of the elements. For example:", "    \n\
    \    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 9\nA palindromic number reads the same both ways.\
    \ The largest palindrome made from the product of two 2-digit numbers is 9009\
    \ = 91 x 99.", "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-i)\n     \
    \   end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(arr)\n    if len < 2\n        return 0\n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = len - 1\n        smallest_change = minimum(smallest_change,\
    \ change(arr[i], arr[len-i]))\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nProblem 3\nGiven a vector of integers, find the minimum number\
    \ of elements that\nneed to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\nis read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.", "    smallest_change = minimum(arr)\n\
    \    smallest_change = minimum(smallest_change, length(arr))\n    return smallest_change\n\
    end", "    len = length(arr)\n    if len == 0 \n        return 0 \n    end\n \
    \   \n    min = len\n    \n    for i = len-1:-1:1\n        if arr[i] > arr[len-i]\
    \ \n            min = i\n            break\n        end\n    end\n    \n    if\
    \ min == len\n        return 0 \n    end\n    \n    min = len\n    \n    for i\
    \ = len-1:-1:1\n        if arr[i] < arr[len-i] \n            min = i\n       \
    \     break\n        end\n    end\n    \n    if min == len\n        return 0 \n\
    \    end\n    \n    return min\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n  \
    \      if arr[i] != reverse(arr[i+1])\n            smallest_change = i\n     \
    \       break\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    len = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n\
    \    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nThe longest increasing subsequence\nGiven a vector arr of integers, find\
    \ the longest increasing subsequence. An increasing subsequence is a subsequence\
    \ of arr that is ordered in ascending order. An increasing subsequence is also\
    \ called a longest increasing subsequence.", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i]\
    \ != arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n    \n  \
    \  for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = i\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for x in arr\n        smallest_change = smallest_change + 1\n        if\
    \ x == reverse(arr)[1]\n            return smallest_change\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the\
    \ number of times a given element appears in a given vector.", "    len = length(arr)\n\
    \    smallest_change = 0\n    \n    for i = len-1 downto 1 \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<text>\n\
    Problem 7: smallest_change\nWrite a function that takes in a vector of integers\
    \ and returns the minimum number of elements that\nneed to be changed to make\
    \ the vector palindromic. A palindromic vector is a vector that is\nread the same\
    \ backwards and forwards. In one change, you can change one element to any other\
    \ element.", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2\
    \ ; i >= 0 ; i-- \n        smallest_change = smallest_change + 1 \n        if\
    \ arr[i] != reverse(arr[i]) \n            break\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    len = length(arr)\n    if len ==\
    \ 0 \n        return 0\n    end\n    \n    if arr[len-1] == arr[len-2]\n     \
    \   return len\n    end\n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid+1]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid-1]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid-2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid+2]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid+2]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid-2]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid+2]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid-2]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid-1]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid-2]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid-1]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid+1]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid-2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid+1]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid-2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid-1]\n        return len\n    end\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return len\n", "    smallest_change = 0\n    for i = length(arr) - 1,\
    \ j = length(arr) - 2\n        if arr[i] > arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[i] -= 1\n            arr[j] -= 1\n  \
    \      elseif arr[i] < arr[j]\n            smallest_change = smallest_change +\
    \ 1\n            arr[j] -= 1\n            arr[i] -= 1\n        else\n        \
    \    smallest_change = smallest_change + 1\n            arr[i] -= 1\n        \
    \    arr[j] -= 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of palindromic permutations of a\
    \ given string.", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 ; i >= 0 ; i-- \n        smallest_change = smallest_change + 1 if arr[i]\
    \ != arr[i+1] \n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a vector of integers and returns the\
    \ number of elements in the vector that are greater than or equal to 50. For example:",
  "    \n    len = length(arr)\n    \n    if len < 2\n        return len\n    end\n\
    \    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] != arr[i+1] \n            smallest_change = i\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>", "    len = length(arr)\n    i = 0\n    while\
    \ i < len\n        if arr[i] != reverse(arr[i])\n            i += 1\n        else\n\
    \            i += 1\n        end\n    end\n    return i\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
