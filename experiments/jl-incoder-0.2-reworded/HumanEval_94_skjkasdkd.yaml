name: HumanEval_94_skjkasdkd
language: jl
prompt: "\"\"\"You are given a vector of integers.\n    You need to find the largest\
  \ prime value and return the sum of its digits.\n\n    Examples:\n    >>> skjkasdkd([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n    10\n\
  \    >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  \    25\n    >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3])\n    13\n    >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6])\n    11\n    >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n    3\n    >>>\
  \ skjkasdkd([0, 8, 1, 2, 1, 7])\n    7\n    \"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
  \t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) ==\
  \ 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0,\
  \ 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191,\
  \ 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n"
completions: ["    primes = primes(length(lst))\n    largest = primes[end]\n    sum\
    \ = 0\n    for x in lst\n        if x % largest == 0\n            sum += largest\n\
    \        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for sharing your code. Could you please explain what is the purpose\
    \ of using \"end\" in the for loop?\n<|/ c |>\n<| c |>\n`end` ends the for loop.\
    \ `end` can be omitted when there is only one statement in the loop. `end` can\
    \ also be omitted when there is only one statement in the loop and it is followed\
    \ by a semicolon. `end` can also be omitted when there is only one statement in\
    \ the loop and it is followed by a semicolon and an `end` keyword.\n<|/ c |>\n\
    <| c |>\nThank you for the explanation. Could you please explain what is the purpose\
    \ of using \"end\" in the for loop?\n<|/ c |>\n<| c |>\n`end` ends the for loop.\
    \ `end` can be omitted when there is only one statement in the loop. `end` can\
    \ also be omitted when there is only one statement in the loop and it is followed\
    \ by a semicolon. `end` can also be omitted when there is only one statement in\
    \ the loop and it is followed by a semicolon and an `end` keyword.\n<|/ c |>\n\
    <| c |>\nThank you for the explanation. Could you please explain what is the purpose\
    \ of using \"end\" in the for loop?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  \
    \  \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ x in lst\n        if x == largestPrime\n            largestPrime = largestPrime\
    \ + 1\n            largestSum = largestSum + x\n        else\n            if largestPrime\
    \ == 0\n                largestPrime = x\n                largestSum = x\n   \
    \         else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                end\n            end\n\
    \        end\n    end\n    \n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2", "    \n    primes = primes(length(lst))\n    \n\
    \    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n     \
    \   if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of a number", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = lar", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for p in\
    \ primes\n        if p > largest\n            largest = p\n        end\n    end\n\
    \    for p in primes\n        if p < largest\n            sum += lst[p]\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n@test\
    \ skjkasdkd([2, 3, 1, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\
    \ == 10\n@test skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2,\
    \ 5, 1]) == 25\n@test skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323,\
    \ 32, 30, 1, 9, 3]) == 13\n@test skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
    \ 83, 0, 5, 6]) == 11\n@test skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n@test skjkasdkd([0,\
    \ 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\nProblem 3\nThe Fibonacci sequence is\
    \ defined by the formula:", "    \n    largest = 0\n    largestPrime = 0\n   \
    \ largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n    largest\
    \ = 0\n    for p in primes\n        if lst.contains(p)\n            largest =\
    \ largest+p\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p > largest\n            sum += lst[p]\n    \
    \    end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\
    \ == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, ", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p < largest\n            sum += p - largest\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a vector of integers and returns the number of integers that are divisible\
    \ by 3.", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for n in lst\n        if n % largest == 0\n            sum +=\
    \ largest\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of an integer.", "    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    for x in lst\n        if x == largestPrime\n  \
    \          largestPrime = largestPrime + 1\n        else\n            if largestPrime\
    \ > largest\n                largest = largestPrime\n                largestSum\
    \ = largestPrime\n            largestPrime = 1\n        end\n    end\n    return\
    \ largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of prime numbers less than a given integer $n$. \nFor example,\
    \ for $n=10$, the function should return $5$.", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n\
    \    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n\
    \    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n\
    \    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 =\
    \ 0\n    largestSumPrime12 = 0\n    largestSumPrime13 = 0\n    largestSumPrime14\
    \ = 0\n    largestSumPrime15 = 0\n    largestSumPrime16 = 0\n    largestSumPrime17\
    \ = 0\n    largestSumPrime18 = 0\n    largestSumPrime19 = 0\n    largestSumPrime20\
    \ = 0\n    largestSumPrime21 = 0\n    largestSumPrime22 = 0\n    largestSumPrime23\
    \ = 0\n    largestSumPrime24 = 0\n    largestSumPrime25 = 0\n    largestSumPrime26\
    \ = 0\n    largestSumPrime27 = 0\n    largestSumPrime28 = 0\n    largestSumPrime29\
    \ = 0\n    largestSumPrime30 = 0\n    largestSumPrime31 = 0\n    largestSumPrime32\
    \ = 0\n    largestSumPrime33 = 0\n    largestSumPrime34 = 0\n    largestSumPrime35\
    \ = 0\n    largestSumPrime36 = 0\n    largestSumPrime37 = 0\n    largestSumPrime38\
    \ = 0\n    largestSumPrime39 = 0\n    largestSumPrime40 = 0\n    largestSumPrime41\
    \ = 0\n    largestSumPrime42 = 0\n    largestSumPrime43 = 0\n    largestSumPrime44\
    \ = 0\n    largestSumPrime45 = 0\n    largestSumPrime46 = 0\n    largestSumPrime47\
    \ = 0\n    largestSumPrime48 = 0\n    largestSumPrime49 = 0\n    largestSumPrime50\
    \ = 0\n    largestSumPrime51 = 0\n    largestSumPrime52 = 0\n    largestSumPrime53\
    \ = 0\n    largestSumPrime54 = 0\n    largestSumPrime55", "    largest = 0\n \
    \   largestPrime = 0\n    largestSum = 0\n    for x in lst\n        if x == largestPrime\n\
    \            largestPrime = largestPrime + 1\n            largestSum = largestSum\
    \ + largestPrime\n        else\n            if largestPrime > largest\n      \
    \          largestPrime = largest\n                largestSum = largestPrime\n\
    \            largestPrime = 1\n            largest = largestPrime\n          \
    \  largestSum = largestPrime\n        end\n    end\n    return largestSum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of integers and returns\
    \ the sum of the digits of all the prime numbers less than or equal to the given\
    \ vector.", "    primes = primes(length(lst))\n    largest = primes[end]\n   \
    \ largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = lar", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = 0\n    \n    for p in primes\n        if lst .contains p\n            largest\
    \ = largest+p\n        end\n    end\n    \n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumDigit = 0\n    largestSumDigitDigit =\
    \ 0\n    largestSumDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigit = 0\n\
    \    largestSumDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n\
    \    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigit", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = 0\n    largestPrime = 0\n    largestPrimeIndex = 0\n    \n\
    \    for prime in primes\n        if prime > largest\n            largestPrime\
    \ = prime\n            largestPrimeIndex = prime\n        end\n    end\n    \n\
    \    for index in 1:length(lst)\n        if lst[index] == largestPrimeIndex\n\
    \            largestPrimeIndex += 1\n        end\n    end\n    \n    sum = 0\n\
    \    for index in 1:length(lst)\n        if lst[index] == largestPrimeIndex\n\
    \            sum += Int(lst[index])\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime numbers\
    \ less than a given number. \nThe function should take a single integer as an\
    \ argument and return the number of prime numbers less than that number.", " \
    \   \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ el in lst\n        if el == largestPrime\n            largestPrime = 0\n   \
    \         largestSum = 0\n        elseif el == largest\n            largestPrime\
    \ = 0\n            largestSum = 0\n        elseif el == largestPrime\n       \
    \     largestPrime = 0\n            largestSum = 0\n        elseif el > largestPrime\n\
    \            largestPrime = el\n            largestSum = 0\n        elseif el\
    \ == largestPrime\n            largestPrime = 0\n            largestSum = 0\n\
    \        elseif el > largestPrime\n            largestPrime = el\n           \
    \ largestSum = 0\n        else\n            largestPrime = 0\n            largestSum\
    \ = 0\n        end\n    end\n    \n    return largestSum\nend", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = lar", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for i in primes\n \
    \       \n        if lst.contains(i)\n            \n            sum = 0\n    \
    \        \n            for j in lst\n                \n                if j ==\
    \ i\n                    \n                    sum += j\n                \n  \
    \              else\n                    \n                    break\n       \
    \         \n            \n            if sum > largestSum\n                \n\
    \                largestSum = sum\n                largestPrime = i\n        \
    \        largest = largestSum\n            \n            elseif sum == largestSum\n\
    \                \n                largestPrime = i\n                largest =\
    \ largestSum\n            \n            end\n            \n        end\n     \
    \   \n    end\n    \n    return largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = primes[end]\n    \n    for p in primes\n        if p > largest\n         \
    \   largest = p\n        end\n    end\n    \n    sum = 0\n    for p in primes\n\
    \        if p == largest\n            sum += lst[p]\n        end\n    end\n  \
    \  \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n        if el ==\
    \ largest\n            sum += el\n        else\n            largest = el\n   \
    \     end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of prime numbers\
    \ less than a given number.", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    sum = 0\n    for p in primes\n\
    \        if p > largest\n            sum += lst[p]\n        end\n    end\n   \
    \ return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the most efficient\
    \ solution. `primes(length(lst))` will generate all primes up to `length(lst)`,\
    \ which is `O(sqrt(n))`. `primes(length(lst))[end]` will generate all primes up\
    \ to `length(lst)`, which is `O(n)`. `primes(length(lst))` will generate all primes\
    \ up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]` will generate\
    \ all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))` will\
    \ generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))`\
    \ will generate all primes up to `length(lst)`, which is `O(n)`. `primes(length(lst))[end]` ",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = lar", "    largest = Int64(0)\n    largest = findlargestprime(lst)\n\
    \    largest = sum(map(x -> mod(x, largest), lst))\n    return largest\nend",
  "    \n    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = lar", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = lar",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = lar", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest", " \
    \   primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = lar", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n \
    \   largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = lar",
  "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumPrime\
    \ = 0\n    largestSumPrime2 = 0\n    largestSumPrime3 = 0\n    largestSumPrime4\
    \ = 0\n    largestSumPrime5 = 0\n    largestSumPrime6 = 0\n    largestSumPrime7\
    \ = 0\n    largestSumPrime8 = 0\n    largestSumPrime9 = 0\n    largestSumPrime10\
    \ = 0\n    largestSumPrime11 = 0\n    largestSumPrime12 = 0\n    largestSumPrime13\
    \ = 0\n    largestSumPrime14 = 0\n    largestSumPrime15 = 0\n    largestSumPrime16\
    \ = 0\n    largestSumPrime17 = 0\n    largestSumPrime18 = 0\n    largestSumPrime19\
    \ = 0\n    largestSumPrime20 = 0\n    largestSumPrime21 = 0\n    largestSumPrime22\
    \ = 0\n    largestSumPrime23 = 0\n    largestSumPrime24 = 0\n    largestSumPrime25\
    \ = 0\n    largestSumPrime26 = 0\n    largestSumPrime27 = 0\n    largestSumPrime28\
    \ = 0\n    largestSumPrime29 = 0\n    largestSumPrime30 = 0\n    largestSumPrime31\
    \ = 0\n    largestSumPrime32 = 0\n    largestSumPrime33 = 0\n    largestSumPrime34\
    \ = 0\n    largestSumPrime35 = 0\n    largestSumPrime36 = 0\n    largestSumPrime37\
    \ = 0\n    largestSumPrime38 = 0\n    largestSumPrime39 = 0\n    largestSumPrime40\
    \ = 0\n    largestSumPrime41 = 0\n    largestSumPrime42 = 0\n    largestSumPrime43\
    \ = 0\n    largestSumPrime44 = 0\n    largestSumPrime45 = 0\n    largestSumPrime46\
    \ = 0\n    largestSumPrime47 = 0\n    largestSumPrime48 = 0\n    largestSumPrime49\
    \ = 0\n    largestSumPrime50 = 0\n    largestSumPrime51 = 0\n    largestSumPrime52\
    \ = 0\n    largestSumPrime53 = 0\n    largestSumPrime54 = 0\n    largestSumPrime55",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for elt in lst\n        if elt > largest\n           \
    \ largest = elt\n        end\n    end\n    \n    for elt in lst\n        if elt\
    \ == largest\n            sum += elt\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3,\
    \ 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1,\
    \ 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7,\
    \ 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, 3, 7, 1, ",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest", "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n\
    \    \n    largest = largest * 10 + lst[end]\n    \n    largest = largest * 10\
    \ + lst[end]\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    \n    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = 0\n    for el in lst\n        if el > largest\n            largest = el\n\
    \        end\n    end\n    largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    primes = primes(length(lst))\n    largest\
    \ = 0\n    for p in primes\n        if lst.contains(p)\n            largest =\
    \ largest+p\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.", "    \n    largest\
    \ = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigits =\
    \ digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n \
    \   largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum\
    \ = largestPrimeDigitSum + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum\
    \ + largestPrimeDigitSum\n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    largestPrimeDigitSum = largestPrimeDigitSum + largestPri", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = lar", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = lar", "    largest = findmax(lst)\n    largest = largest[1]\n    largest =\
    \ largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n    largest\
    \ = largest[1]\n    largest = largest[1]", "    \n    largest = Int64(0)\n   \
    \ largestPrime = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex2\
    \ = Int64(0)\n    largestPrimeIndex3 = Int64(0)\n    largestPrimeIndex4 = Int64(0)\n\
    \    largestPrimeIndex5 = Int64(0)\n    largestPrimeIndex6 = Int64(0)\n    largestPrimeIndex7\
    \ = Int64(0)\n    largestPrimeIndex8 = Int64(0)\n    largestPrimeIndex9 = Int64(0)\n\
    \    largestPrimeIndex10 = Int64(0)\n    largestPrimeIndex11 = Int64(0)\n    largestPrimeIndex12\
    \ = Int64(0)\n    largestPrimeIndex13 = Int64(0)\n    largestPrimeIndex14 = Int64(0)\n\
    \    largestPrimeIndex15 = Int64(0)\n    largestPrimeIndex16 = Int64(0)\n    largestPrimeIndex17\
    \ = Int64(0)\n    largestPrimeIndex18 = Int64(0)\n    largestPrimeIndex19 = Int64(0)\n\
    \    largestPrimeIndex20 = Int64(0)\n    largestPrimeIndex21 = Int64(0)\n    largestPrimeIndex22\
    \ = Int64(0)\n    largestPrimeIndex23 = Int64(0)\n    largestPrimeIndex24 = Int64(0)\n\
    \    largestPrimeIndex25 = Int64(0)\n    largestPrimeIndex26 = Int64(0)\n    largestPrimeIndex27\
    \ = Int64(0)\n    largestPrimeIndex28 = Int64(0)\n    largestPrimeIndex29 = Int64(0)\n\
    \    largestPrimeIndex30 = Int64(0)\n    largestPrimeIndex31 = Int64(0)\n    largestPrimeIndex32\
    \ = Int64(0)\n    largestPrimeIndex33 = Int64(0)\n    largestPrimeIndex34 = Int64(0)\n\
    \    largestPrimeIndex35 = Int64(0)\n    largestPrimeIndex36 = Int64(0)\n    largestPrimeIndex37\
    \ = Int64(0)\n    largestPrimeIndex38 = Int64(0)\n    largestPrimeIndex39 = Int64(0)\n\
    \    largestPrimeIndex40 = Int64(0)\n    largestPrimeIndex41 = Int64(0)\n    largestPrimeIndex42\
    \ = Int64(0)\n    ", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n        if el ==\
    \ largest\n            sum += el\n        else\n            largest = el\n   \
    \     end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.3>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the digits in reverse order.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\
    \ == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, ", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in primes\n\
    \        if el > largest\n            largest = el\n        end\n    end\n   \
    \ \n    for el in primes\n        if el == largest\n            sum += el\n  \
    \      end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n   \
    \ largest = largest * 10 + lst[end]\n    \n    largest = largest.digits()\n  \
    \  \n    largest = largest.sum()\n    \n    return largest\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    largest = Int64(0)\n\
    \    largestPrime = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeValue\
    \ = Int64(0)\n    largestPrimeValueIndex = Int64(0)\n    largestPrimeValueSum\
    \ = Int64(0)\n    largestPrimeValueSumIndex = Int64(0)\n    largestPrimeValueSumValue\
    \ = Int64(0)\n    largestPrimeValueSumValueIndex = Int64(0)\n    largestPrimeValueSumValueSum\
    \ = Int64(0)\n    largestPrimeValueSumValueSumIndex = Int64(0)\n    largestPrimeValueSumValueSumValue\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueIndex = Int64(0)\n    largestPrimeValueSumValueSumValueSum\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumIndex = Int64(0)\n    largestPrimeValueSumValueSumValueSumValue\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueIndex = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSum = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValue = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueIndex = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSum\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumIndex =\
    \ Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValue = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueIndex = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSum = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumIndex = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValue = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumIndex = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValueSum = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0)\n", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = lar", "    primes = primes(length(lst))\n\
    \    largest = 0\n    for p in primes\n        if lst.last() % p == 0\n      \
    \      largest = lst.last()\n            break\n        end\n    end\n    return\
    \ largest + sum(map(x -> x % largest, lst))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 1000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a vector of integers and returns the sum of the squares of the\
    \ integers in the vector.", "    \n    largest = Int64(0)\n    largestPrime =\
    \ Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    lar",
  "    primes = primes(length(lst))\n    largest = 0\n    for p in primes\n      \
    \  if lst.contains(p)\n            largest = largest+p\n        end\n    end\n\
    \    return largest\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of prime numbers less than or equal to n.", "    \n    primes\
    \ = Primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n  \
    \  for p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    \n    for p in primes\n        if p > largest\n            sum +=\
    \ p\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    \n    largest = Int.(max(lst))\n  \
    \  largestPrime = Int.(largest)\n    largestPrimeFactor = Int.(largestPrime)\n\
    \    largestPrimeFactor2 = Int.(largestPrimeFactor)\n    largestPrimeFactor3 =\
    \ Int.(largestPrimeFactor2)\n    largestPrimeFactor4 = Int.(largestPrimeFactor3)\n\
    \    largestPrimeFactor5 = Int.(largestPrimeFactor4)\n    largestPrimeFactor6\
    \ = Int.(largestPrimeFactor5)\n    largestPrimeFactor7 = Int.(largestPrimeFactor6)\n\
    \    largestPrimeFactor8 = Int.(largestPrimeFactor7)\n    largestPrimeFactor9\
    \ = Int.(largestPrimeFactor8)\n    largestPrimeFactor10 = Int.(largestPrimeFactor9)\n\
    \    largestPrimeFactor11 = Int.(largestPrimeFactor10)\n    largestPrimeFactor12\
    \ = Int.(largestPrimeFactor11)\n    largestPrimeFactor13 = Int.(largestPrimeFactor12)\n\
    \    largestPrimeFactor14 = Int.(largestPrimeFactor13)\n    largestPrimeFactor15\
    \ = Int.(largestPrimeFactor14)\n    largestPrimeFactor16 = Int.(largestPrimeFactor15)\n\
    \    largestPrimeFactor17 = Int.(largestPrimeFactor16)\n    largestPrimeFactor18\
    \ = Int.(largestPrimeFactor17)\n    largestPrimeFactor19 = Int.(largestPrimeFactor18)\n\
    \    largestPrimeFactor20 = Int.(largestPrimeFactor19)\n    largestPrimeFactor21\
    \ = Int.(largestPrimeFactor20)\n    largestPrimeFactor22 = Int.(largestPrimeFactor21)\n\
    \    largestPrimeFactor23 = Int.(largestPrimeFactor22)\n    largestPrimeFactor24\
    \ = Int.(largestPrimeFactor23)\n    largestPrimeFactor25 = Int.(largestPrimeFactor24)\n\
    \    largestPrimeFactor26 = Int.(largestPrimeFactor25)\n    largestPrimeFactor27\
    \ = Int.(largestPrimeFactor26)\n    largestPrimeFactor28 = Int.", "    \n    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for x in\
    \ lst\n        if x == largest\n            sum += largest\n        else\n   \
    \         largest = primes[end]\n            sum += largest\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, ", "    \n    largest = Int64(0)\n    largestPrime = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex2 = Int64(0)\n    largestPrimeIndex3\
    \ = Int64(0)\n    largestPrimeIndex4 = Int64(0)\n    largestPrimeIndex5 = Int64(0)\n\
    \    largestPrimeIndex6 = Int64(0)\n    largestPrimeIndex7 = Int64(0)\n    largestPrimeIndex8\
    \ = Int64(0)\n    largestPrimeIndex9 = Int64(0)\n    largestPrimeIndex10 = Int64(0)\n\
    \    largestPrimeIndex11 = Int64(0)\n    largestPrimeIndex12 = Int64(0)\n    largestPrimeIndex13\
    \ = Int64(0)\n    largestPrimeIndex14 = Int64(0)\n    largestPrimeIndex15 = Int64(0)\n\
    \    largestPrimeIndex16 = Int64(0)\n    largestPrimeIndex17 = Int64(0)\n    largestPrimeIndex18\
    \ = Int64(0)\n    largestPrimeIndex19 = Int64(0)\n    largestPrimeIndex20 = Int64(0)\n\
    \    largestPrimeIndex21 = Int64(0)\n    largestPrimeIndex22 = Int64(0)\n    largestPrimeIndex23\
    \ = Int64(0)\n    largestPrimeIndex24 = Int64(0)\n    largestPrimeIndex25 = Int64(0)\n\
    \    largestPrimeIndex26 = Int64(0)\n    largestPrimeIndex27 = Int64(0)\n    largestPrimeIndex28\
    \ = Int64(0)\n    largestPrimeIndex29 = Int64(0)\n    largestPrimeIndex30 = Int64(0)\n\
    \    largestPrimeIndex31 = Int64(0)\n    largestPrimeIndex32 = Int64(0)\n    largestPrimeIndex33\
    \ = Int64(0)\n    largestPrimeIndex34 = Int64(0)\n    largestPrimeIndex35 = Int64(0)\n\
    \    largestPrimeIndex36 = Int64(0)\n    largestPrimeIndex37 = Int64(0)\n    largestPrimeIndex38\
    \ = Int64(0)\n    largestPrimeIndex39 = Int64(0)\n    largestPrimeIndex40 = Int64(0)\n\
    \    largestPrimeIndex41 = Int64(0)\n    largestPrimeIndex42 = Int64(0)\n    ",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = lar", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = lar",
  "    \n    largest = Int64(0)\n    largestPrime = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex2 = Int64(0)\n    largestPrimeIndex3 = Int64(0)\n\
    \    largestPrimeIndex4 = Int64(0)\n    largestPrimeIndex5 = Int64(0)\n    largestPrimeIndex6\
    \ = Int64(0)\n    largestPrimeIndex7 = Int64(0)\n    largestPrimeIndex8 = Int64(0)\n\
    \    largestPrimeIndex9 = Int64(0)\n    largestPrimeIndex10 = Int64(0)\n    largestPrimeIndex11\
    \ = Int64(0)\n    largestPrimeIndex12 = Int64(0)\n    largestPrimeIndex13 = Int64(0)\n\
    \    largestPrimeIndex14 = Int64(0)\n    largestPrimeIndex15 = Int64(0)\n    largestPrimeIndex16\
    \ = Int64(0)\n    largestPrimeIndex17 = Int64(0)\n    largestPrimeIndex18 = Int64(0)\n\
    \    largestPrimeIndex19 = Int64(0)\n    largestPrimeIndex20 = Int64(0)\n    largestPrimeIndex21\
    \ = Int64(0)\n    largestPrimeIndex22 = Int64(0)\n    largestPrimeIndex23 = Int64(0)\n\
    \    largestPrimeIndex24 = Int64(0)\n    largestPrimeIndex25 = Int64(0)\n    largestPrimeIndex26\
    \ = Int64(0)\n    largestPrimeIndex27 = Int64(0)\n    largestPrimeIndex28 = Int64(0)\n\
    \    largestPrimeIndex29 = Int64(0)\n    largestPrimeIndex30 = Int64(0)\n    largestPrimeIndex31\
    \ = Int64(0)\n    largestPrimeIndex32 = Int64(0)\n    largestPrimeIndex33 = Int64(0)\n\
    \    largestPrimeIndex34 = Int64(0)\n    largestPrimeIndex35 = Int64(0)\n    largestPrimeIndex36\
    \ = Int64(0)\n    largestPrimeIndex37 = Int64(0)\n    largestPrimeIndex38 = Int64(0)\n\
    \    largestPrimeIndex39 = Int64(0)\n    largestPrimeIndex40 = Int64(0)\n    largestPrimeIndex41\
    \ = Int64(0)\n    largestPrimeIndex42 = Int64(0)\n    ", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largestPrime = primes[end]\n    largestPrimeDigit\
    \ = 0\n    largestPrimeDigitSum = 0\n    for el in lst\n        if el == largestPrime\n\
    \            largestPrimeDigit += 1\n            largestPrimeDigitSum += largestPrimeDigit\n\
    \        else\n            if el > largestPrime\n                largestPrime\
    \ = el\n                largestPrimeDigit = 1\n                largestPrimeDigitSum\
    \ = largestPrimeDigit\n            else\n                largestPrimeDigit +=\
    \ 1\n                largestPrimeDigitSum += largestPrimeDigit\n            end\n\
    \        end\n    end\n    return largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of a number\nThe prime\
    \ factors of a number are all the numbers less than or equal to its square root.\
    \ For example, 6 is a prime factor of 36, and 8 is a prime factor of 64. Write\
    \ a function that takes in a number and returns the largest prime factor of that\
    \ number.", "    \n    largest = Int.(lst[1])\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n",
  "    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    for x in lst\n \
    \       if x == largestPrime\n            largestPrime = largestPrime + 1\n  \
    \          largestSum = largestSum + largestPrime\n        else\n            if\
    \ largestPrime > largest\n                largestPrime = largestPrime\n      \
    \          largestSum = largestSum + largestPrime\n            largestPrime =\
    \ 1\n            largest = largestPrime\n            largestSum = largestSum +\
    \ largestPrime\n        end\n    end\n    return largestSum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 =\
    \ 17.", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n \
    \   sum = 0\n    for i in primes\n        if lst.index(i) == length(lst)\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([1, 1, 2, 5, 7, 3, 6, 5, 6, 4, 3,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, ", "    \n\
    \    largest = Int64(0)\n    largestPrime = Int64(0)\n    largestPrimeIndex =\
    \ Int64(0)\n    largestPrimeIndex2 = Int64(0)\n    largestPrimeIndex3 = Int64(0)\n\
    \    largestPrimeIndex4 = Int64(0)\n    largestPrimeIndex5 = Int64(0)\n    largestPrimeIndex6\
    \ = Int64(0)\n    largestPrimeIndex7 = Int64(0)\n    largestPrimeIndex8 = Int64(0)\n\
    \    largestPrimeIndex9 = Int64(0)\n    largestPrimeIndex10 = Int64(0)\n    largestPrimeIndex11\
    \ = Int64(0)\n    largestPrimeIndex12 = Int64(0)\n    largestPrimeIndex13 = Int64(0)\n\
    \    largestPrimeIndex14 = Int64(0)\n    largestPrimeIndex15 = Int64(0)\n    largestPrimeIndex16\
    \ = Int64(0)\n    largestPrimeIndex17 = Int64(0)\n    largestPrimeIndex18 = Int64(0)\n\
    \    largestPrimeIndex19 = Int64(0)\n    largestPrimeIndex20 = Int64(0)\n    largestPrimeIndex21\
    \ = Int64(0)\n    largestPrimeIndex22 = Int64(0)\n    largestPrimeIndex23 = Int64(0)\n\
    \    largestPrimeIndex24 = Int64(0)\n    largestPrimeIndex25 = Int64(0)\n    largestPrimeIndex26\
    \ = Int64(0)\n    largestPrimeIndex27 = Int64(0)\n    largestPrimeIndex28 = Int64(0)\n\
    \    largestPrimeIndex29 = Int64(0)\n    largestPrimeIndex30 = Int64(0)\n    largestPrimeIndex31\
    \ = Int64(0)\n    largestPrimeIndex32 = Int64(0)\n    largestPrimeIndex33 = Int64(0)\n\
    \    largestPrimeIndex34 = Int64(0)\n    largestPrimeIndex35 = Int64(0)\n    largestPrimeIndex36\
    \ = Int64(0)\n    largestPrimeIndex37 = Int64(0)\n    largestPrimeIndex38 = Int64(0)\n\
    \    largestPrimeIndex39 = Int64(0)\n    largestPrimeIndex40 = Int64(0)\n    largestPrimeIndex41\
    \ = Int64(0)\n    largestPrimeIndex42 = Int64(0)\n    ", "    primes = primes(length(lst))\n\
    \    largest = 0\n    for p in primes\n        if lst.last() == p\n          \
    \  largest = lst.last()\n            break\n        end\n    end\n    sum = 0\n\
    \    for p in primes\n        if lst.last() == p\n            sum += lst.last()\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = lar", " \
    \   \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    largest = largest * 10 + lst[end]\n    \n    largest = largest * 10 + sum(lst[end\
    \ - 1 .. end])\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the digits.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n", "    largest = findmax(lst)\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]\n    largest = largest[2]\n\
    \    largest = largest[1]\n    largest = largest[2]\n    largest = largest[1]\n\
    \    largest = largest[2]\n    largest = largest[1]", "    \n    largest = 0\n\
    \    largestPrime = 0\n    largestSum = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    largestSumDigits\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigits = 0\n    largestSumDigit\
    \ = 0\n    largestSumDigits = 0\n    largestSumDigit = 0\n    lar", "    \n  \
    \  primes = Primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n\
    \    \n    for p in primes\n        if p > largest\n            largest = p\n\
    \        end\n    end\n    \n    for p in primes\n        if p <= largest\n  \
    \          sum += p\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    for n in lst\n        if n <= largest\n            sum += n\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than or equal to n.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 7", "    \n    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n \
    \   largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest", "  \
    \  primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.abs()\n    largest = lar", "    \n    primes = Primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for i in primes\n\
    \        if i == largest\n            sum += i\n        end\n    end\n    \n \
    \   return sum\nend", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n    largest\
    \ = 0\n    for p in primes\n        if lst.last() == p\n            largest =\
    \ lst.last()\n            break\n        end\n    end\n    return largest\nend\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([0,81,12,3,1,21])\n</cell>\n<code\
    \ language=julia-1.0>\nskjkasdkd([0,8,1,2,1,7])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.", "    \n \
    \   primes = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n   \
    \ for elt in lst\n        if elt > largest\n            largest = elt\n      \
    \  end\n    end\n    for elt in lst\n        if elt == largest\n            sum\
    \ += elt\n        end\n    end\n    return sum\nend", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:100000000));\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of prime numbers less than a given number. \nThe function\
    \ should take one argument, an integer $n$, and return an integer $k$, where $k$\
    \ is the number of prime numbers less than $n$.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for i in lst\n\
    \        if isPrime(i)\n            sum += i\n        end\n    end\n    \n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n@test skjkasdkd([2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, ", "    largest = 0\n    largestPrime\
    \ = 0\n    largestPrimeIndex = 0\n    largestPrimeDigit = 0\n    largestPrimeDigitIndex\
    \ = 0\n    largestPrimeDigitSum = 0\n    for x in lst\n        if x == largestPrime\n\
    \            largestPrimeDigitSum += largestPrimeDigit\n            largestPrimeDigitIndex\
    \ += 1\n            if largestPrimeIndex > largestPrimeDigitIndex\n          \
    \      largestPrimeDigitIndex = largestPrimeIndex\n                largestPrimeDigit\
    \ = largestPrimeDigitSum\n            largestPrimeIndex += 1\n        else\n \
    \           largestPrimeDigitSum = 0\n            largestPrimeDigitIndex = 0\n\
    \            largestPrimeDigit = 0\n            largestPrimeIndex = 0\n      \
    \      largestPrime = 0\n        end\n        if x == largestPrime\n         \
    \   largestPrimeDigitSum += largestPrimeDigit\n            largestPrimeDigitIndex\
    \ += 1\n            if largestPrimeIndex > largestPrimeDigitIndex\n          \
    \      largestPrimeDigitIndex = largestPrimeIndex\n                largestPrimeDigit\
    \ = largestPrimeDigitSum\n            largestPrimeIndex += 1\n        else\n \
    \           largestPrimeDigitSum = 0\n            largestPrimeDigitIndex = 0\n\
    \            largestPrimeDigit = 0\n            largestPrimeIndex = 0\n      \
    \      largestPrime = 0\n        end\n        if x == largestPrime\n         \
    \   largestPrimeDigitSum += largestPrimeDigit\n            largestPrimeDigitIndex\
    \ += 1\n            if largestPrimeIndex > largestPrimeDigitIndex\n          \
    \      largestPrimeDigitIndex = largestPrimeIndex\n                largestPrimeDigit\
    \ = largestPrimeDigitSum\n            largestPrimeIndex += 1\n        else\n \
    \           largestPrimeDigitSum = 0\n            largestPrimeDigitIndex = 0\n\
    \            largestPrimeDigit = 0\n            largestPrimeIndex = 0\n      \
    \      largestPrime = 0\n        end\n        if x == largestPrime\n         \
    \   largestPrimeDigitSum += largestPrimeDigit\n            largestPrimeDigitIndex\
    \ += 1\n            if largestPrimeIndex > largestPrimeDigitIndex\n          \
    \      largestPrimeDigitIndex = largestPrimeIndex\n                largestPrimeDigit\
    \ = largestPrimeDigitSum\n            largestPrimeIndex += 1\n        else\n \
    \           largestPrime", "    \n    primes = primes(lst)\n    \n    largest\
    \ = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n        if p >\
    \ largest\n            largest = p\n        end\n    end\n    \n    for p in primes\n\
    \        if p == largest\n            sum += p\n        end\n    end\n    \n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n", "    largest = 0\n    largestPrime\
    \ = 0\n    largestPrimeIndex = 0\n    for index in 1:length(lst)\n        if lst[index]\
    \ == largestPrime\n            largestPrimeIndex += 1\n        elseif lst[index]\
    \ > largestPrime\n            largestPrime = lst[index]\n            largestPrimeIndex\
    \ = index\n        end\n    end\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPri",
  "    \n    primes = primes(length(lst))\n    \n    largest = 0\n    \n    for p\
    \ in primes\n        if lst.contains(p)\n            largest = max(p, largest)\n\
    \        end\n    end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\
    \ == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, ", "    primes = primes(length(lst))\n    largest = primes[end]\n  \
    \  largest = largest * largest\n    largest = largest * largest\n    largest =\
    \ largest * largest\n    largest = largest * largest\n    largest = largest *\
    \ largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = lar", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.ceiling()\n    largest =\
    \ largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = lar", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n   \
    \ sum = 0\n    \n    for x in lst\n        if x % largest == 0\n            sum\
    \ += largest\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    largest = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    sum = 0\n    for x in lst\n\
    \        if x == largest\n            sum += largest\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = largest.largest\n\
    \    largest = largest.digits\n    largest = sum(largest)\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for x in lst\n        if x % largest == 0\n          \
    \  sum += largest\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number. \nFor example, given n = 10, the function\
    \ should return 3.", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for i in primes\n\
    \        if lst[i] > largest\n            largest = lst[i]\n        end\n    end\n\
    \    \n    for i in primes\n        if lst[i] <= largest\n            sum += lst[i]\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = largest.abs()\n    largest = largest.floor()\n  \
    \  largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = lar",
  "    largest = 0\n    largestPrime = 0\n    for x in lst\n        if x == largestPrime\n\
    \            largestPrime += x\n        else\n            if largestPrime == 0\n\
    \                largestPrime = x\n            else\n                if largestPrime\
    \ > x\n                    largestPrime = x\n                end\n           \
    \ end\n        end\n    end\n    return largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest", "    largest\
    \ = 0\n    largestPrime = 0\n    for x in lst\n        if isPrime(x)\n       \
    \     if x > largest\n                largest = x\n                largestPrime\
    \ = x\n            else\n                if x > largestPrime\n               \
    \     largestPrime = x\n                end\n            end\n        end\n  \
    \  end\n    return largestPrime\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    \n    primes = Primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    largest = largest.digits[1]\n    \n    largest = largest.digits[2]\n\
    \    \n    largest = largest.digits[3]\n    \n    largest = largest.digits[4]\n\
    \    \n    largest = largest.digits[5]\n    \n    largest = largest.digits[6]\n\
    \    \n    largest = largest.digits[7]\n    \n    largest = largest.digits[8]\n\
    \    \n    largest = largest.digits[9]\n    \n    largest = largest.digits[10]\n\
    \    \n    largest = largest.digits[11]\n    \n    largest = largest.digits[12]\n\
    \    \n    largest = largest.digits[13]\n    \n    largest = largest.digits[14]\n\
    \    \n    largest = largest.digits[15]\n    \n    largest = largest.digits[16]\n\
    \    \n    largest = largest.digits[17]\n    \n    largest = largest.digits[18]\n\
    \    \n    largest = largest.digits[19]\n    \n    largest = largest.digits[20]\n\
    \    \n    largest = largest.digits[21]\n    \n    largest = largest.digits[22]\n\
    \    \n    largest = largest.digits[23]\n    \n    largest = largest.digits[24]\n\
    \    \n    largest = largest.digits[25]\n    \n    largest = largest.digits[26]\n\
    \    \n    largest = largest.digits[27]\n    \n    largest = largest.digits[28]\n\
    \    \n    largest = largest.digits[29]\n    \n    largest = largest.digits[30]\n\
    \    \n    largest = largest.digits[31]\n    \n    largest = largest.digits[32]\n\
    \    \n    largest = largest.digits[33]\n    \n    largest = largest.digits[34]\n\
    \    \n    largest = largest.digits[35]\n    \n    largest = largest.digits[36]\n\
    \    \n", "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for n in lst\n        if n <= largest\n        \
    \    sum += n\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of a number", "    \n\
    \    primes = primes(length(lst))\n    \n    largest = 0\n    \n    for p in primes\n\
    \        if lst.contains(p)\n            largest = largest+p\n        end\n  \
    \  end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000))\n", "    \n    primes\
    \ = primes(length(lst))\n    \n    largest = 0\n    \n    for p in primes\n  \
    \      if lst .contains p\n            largest = p\n            break\n      \
    \  end\n    end\n    \n    sum = 0\n    for p in primes\n        if largest ==\
    \ p\n            sum += lst .index(p)\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, ", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = 0\n    for p in primes\n        if p\
    \ > largest\n            largest = p\n        end\n    end\n    sum = 0\n    for\
    \ p in primes\n        if p > largest\n            sum += lst[p]\n        end\n\
    \    end\n    return sum\nend\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work.\
    \ `primes(length(lst))` returns `primes(length(lst))` which is not an array.\n\
    <|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing out.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = 0\n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    sum = 0\n    for p in primes\n        if p ==\
    \ largest\n            sum += lst[p]\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the number of prime numbers less than or equal\
    \ to the length of the vector.", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n  \
    \          largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += lst[p]\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.(lst)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n", "    \n    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    sum = 0\n    for x in lst\n        if x == largest\n      \
    \      sum += largest\n        else\n            largest = primes[end]\n     \
    \       sum += largest\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3", "    primes = primes(length(lst))\n    largest =\
    \ primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n   \
    \ largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.ceil()\n    largest = largest.floor()\n\
    \    largest = largest.ceil()\n    largest = largest.abs()\n    largest = lar",
  "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n    largestPrimeDigits\
    \ = digits[largestPrime]\n    largestPrimeDigitSum = sum(largestPrimeDigits)\n\
    \    \n    largestPrimeDigitSum = largestPrimeDigitSum + largestPrimeDigitSum\n\
    \    \n    return largestPrimeDigitSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = 0\n    for p in primes\n        if p > largest\n            largest\
    \ = p\n        end\n    end\n    sum = 0\n    for p in primes\n        if p ==\
    \ largest\n            sum += lst[p]\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2,\
    \ 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.(lst)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n", "    primes = primes(length(lst))\n    largest = 0\n  \
    \  for p in primes\n        if lst .contains p\n            largest = largest+p\n\
    \        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns the sum of its digits.", "    \n    primes = primes(length(lst))\n \
    \   largest = primes[end]\n    sum = 0\n    for el in lst\n        if el == largest\n\
    \            sum += el\n        else\n            break\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.", "    \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n\
    \    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3 = 0\n\
    \    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6 = 0\n\
    \    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9 = 0\n\
    \    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12 =\
    \ 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    \n    largest = 0\n    largestPrime = 0\n\
    \    largestPrimeIndex = 0\n    largestPrimeIndex2 = 0\n    largestPrimeIndex3\
    \ = 0\n    largestPrimeIndex4 = 0\n    largestPrimeIndex5 = 0\n    largestPrimeIndex6\
    \ = 0\n    largestPrimeIndex7 = 0\n    largestPrimeIndex8 = 0\n    largestPrimeIndex9\
    \ = 0\n    largestPrimeIndex10 = 0\n    largestPrimeIndex11 = 0\n    largestPrimeIndex12\
    \ = 0\n    largestPrimeIndex13 = 0\n    largestPrimeIndex14 = 0\n    largestPrimeIndex15\
    \ = 0\n    largestPrimeIndex16 = 0\n    largestPrimeIndex17 = 0\n    largestPrimeIndex18\
    \ = 0\n    largestPrimeIndex19 = 0\n    largestPrimeIndex20 = 0\n    largestPrimeIndex21\
    \ = 0\n    largestPrimeIndex22 = 0\n    largestPrimeIndex23 = 0\n    largestPrimeIndex24\
    \ = 0\n    largestPrimeIndex25 = 0\n    largestPrimeIndex26 = 0\n    largestPrimeIndex27\
    \ = 0\n    largestPrimeIndex28 = 0\n    largestPrimeIndex29 = 0\n    largestPrimeIndex30\
    \ = 0\n    largestPrimeIndex31 = 0\n    largestPrimeIndex32 = 0\n    largestPrimeIndex33\
    \ = 0\n    largestPrimeIndex34 = 0\n    largestPrimeIndex35 = 0\n    largestPrimeIndex36\
    \ = 0\n    largestPrimeIndex37 = 0\n    largestPrimeIndex38 = 0\n    largestPrimeIndex39\
    \ = 0\n    largestPrimeIndex40 = 0\n    largestPrimeIndex41 = 0\n    largestPrimeIndex42\
    \ = 0\n    largestPrimeIndex43 = 0\n    largestPrimeIndex44 = 0\n    largestPrimeIndex45\
    \ = 0\n    largestPrimeIndex46 = 0\n    largestPrimeIndex47 = 0\n    largestPrimeIndex48\
    \ = 0\n    largestPrimeIndex49 = 0\n    largestPrimeIndex50 = 0\n    largestPrimeIndex51\
    \ = 0\n    largestPrimeIndex52 = 0\n    largestPrimeIndex53 = 0\n    largestPrimeIndex54\
    \ = 0\n    largestPrimeIndex55 = 0\n    largestPri", "    \n    primes = primes(lst)\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p < largest\n            sum += p\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of all prime numbers less than a given number.", "    \n   \
    \ primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n    sum\
    \ = 0\n    \n    for x in lst\n        if x % largest == 0\n            sum +=\
    \ largest\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the numbers.", "  \
    \  largest = Int64(0)\n    largestPrime = Int64(0)\n    for x in lst\n       \
    \ if isPrime(x)\n            if x > largest\n                largest = x\n   \
    \             largestPrime = x\n            else\n                largestPrime\
    \ += x\n        end\n    end\n    return largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of prime\
    \ numbers less than a given number.", "    largest = 0\n    largestPrime = 0\n\
    \    largestPrimeIndex = 0\n    for index in 1:length(lst)\n        if lst[index]\
    \ == largestPrime\n            largestPrimeIndex += 1\n        elseif lst[index]\
    \ > largestPrime\n            largestPrime = lst[index]\n            largestPrimeIndex\
    \ = index\n        end\n    end\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n\
    \    largestPrimeIndex += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex\
    \ += 1\n    largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n   \
    \ largestPrime = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime\
    \ = largestPrimeIndex\n    largestPrimeIndex += 1\n    largestPrime = largestPri",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for x in lst\n        if x % largest == 0\n          \
    \  sum += x\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000, 10000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of prime numbers less than a given number.", "    \n\
    \    primes = primes(length(lst))\n    \n    largest = 0\n    largestPrime = 0\n\
    \    \n    for prime in primes\n        if prime > largestPrime\n            largestPrime\
    \ = prime\n            largest = lst[prime]\n        elseif prime == largestPrime\n\
    \            largest += lst[prime]\n        end\n    end\n    \n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a vector of integers and returns the number of prime numbers less than or equal\
    \ to the length of the vector.", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    sum = 0\n    for i in lst\n        if i==largest\n      \
    \      sum += i\n        else\n            largest = primes[end]\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.0>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.0>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.0>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.0>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.0>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector.", "    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    largestSumDigit = 0\n   \
    \ largestSumDigit2 = 0\n    largestSumDigit3 = 0\n    largestSumDigit4 = 0\n \
    \   largestSumDigit5 = 0\n    largestSumDigit6 = 0\n    largestSumDigit7 = 0\n\
    \    largestSumDigit8 = 0\n    largestSumDigit9 = 0\n    largestSumDigit10 = 0\n\
    \    largestSumDigit11 = 0\n    largestSumDigit12 = 0\n    largestSumDigit13 =\
    \ 0\n    largestSumDigit14 = 0\n    largestSumDigit15 = 0\n    largestSumDigit16\
    \ = 0\n    largestSumDigit17 = 0\n    largestSumDigit18 = 0\n    largestSumDigit19\
    \ = 0\n    largestSumDigit20 = 0\n    largestSumDigit21 = 0\n    largestSumDigit22\
    \ = 0\n    largestSumDigit23 = 0\n    largestSumDigit24 = 0\n    largestSumDigit25\
    \ = 0\n    largestSumDigit26 = 0\n    largestSumDigit27 = 0\n    largestSumDigit28\
    \ = 0\n    largestSumDigit29 = 0\n    largestSumDigit30 = 0\n    largestSumDigit31\
    \ = 0\n    largestSumDigit32 = 0\n    largestSumDigit33 = 0\n    largestSumDigit34\
    \ = 0\n    largestSumDigit35 = 0\n    largestSumDigit36 = 0\n    largestSumDigit37\
    \ = 0\n    largestSumDigit38 = 0\n    largestSumDigit39 = 0\n    largestSumDigit40\
    \ = 0\n    largestSumDigit41 = 0\n    largestSumDigit42 = 0\n    largestSumDigit43\
    \ = 0\n    largestSumDigit44 = 0\n    largestSumDigit45 = 0\n    largestSumDigit46\
    \ = 0\n    largestSumDigit47 = 0\n    largestSumDigit48 = 0\n    largestSumDigit49\
    \ = 0\n    largestSumDigit50 = 0\n    largestSumDigit51 = 0\n    largestSumDigit52\
    \ = 0\n    largestSumDigit53 = 0\n    largestSumDigit54 = 0\n    largestSumDigit55\
    \ = 0\n    largestSumDigit56 = 0\n    largestSumDigit57 = 0\n    largestSumDigit58\
    \ = 0\n    largestSumDigit59 = 0\n    largestSumDigit60 = 0\n    largestSumDigit61\
    \ = 0\n    largestSumDigit", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for x in lst\n        if x % largest == 0\n    \
    \        sum += largest\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\nskjkasdkd([2, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32,\
    \ 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([1, 0,\
    \ 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.3>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the number of prime numbers less than or equal to the length of the\
    \ vector.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = lar", "    largest\
    \ = 0\n    largestPrime = 0\n    for x in lst\n        if isPrime(x)\n       \
    \     if x > largest\n                largest = x\n                largestPrime\
    \ = x\n            else\n                largestPrime += x\n        end\n    end\n\
    \    return largestPrime\nend", "    \n    largest = Int64(0)\n    largestPrime\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex2 = Int64(0)\n\
    \    largestPrimeIndex3 = Int64(0)\n    largestPrimeIndex4 = Int64(0)\n    largestPrimeIndex5\
    \ = Int64(0)\n    largestPrimeIndex6 = Int64(0)\n    largestPrimeIndex7 = Int64(0)\n\
    \    largestPrimeIndex8 = Int64(0)\n    largestPrimeIndex9 = Int64(0)\n    largestPrimeIndex10\
    \ = Int64(0)\n    largestPrimeIndex11 = Int64(0)\n    largestPrimeIndex12 = Int64(0)\n\
    \    largestPrimeIndex13 = Int64(0)\n    largestPrimeIndex14 = Int64(0)\n    largestPrimeIndex15\
    \ = Int64(0)\n    largestPrimeIndex16 = Int64(0)\n    largestPrimeIndex17 = Int64(0)\n\
    \    largestPrimeIndex18 = Int64(0)\n    largestPrimeIndex19 = Int64(0)\n    largestPrimeIndex20\
    \ = Int64(0)\n    largestPrimeIndex21 = Int64(0)\n    largestPrimeIndex22 = Int64(0)\n\
    \    largestPrimeIndex23 = Int64(0)\n    largestPrimeIndex24 = Int64(0)\n    largestPrimeIndex25\
    \ = Int64(0)\n    largestPrimeIndex26 = Int64(0)\n    largestPrimeIndex27 = Int64(0)\n\
    \    largestPrimeIndex28 = Int64(0)\n    largestPrimeIndex29 = Int64(0)\n    largestPrimeIndex30\
    \ = Int64(0)\n    largestPrimeIndex31 = Int64(0)\n    largestPrimeIndex32 = Int64(0)\n\
    \    largestPrimeIndex33 = Int64(0)\n    largestPrimeIndex34 = Int64(0)\n    largestPrimeIndex35\
    \ = Int64(0)\n    largestPrimeIndex36 = Int64(0)\n    largestPrimeIndex37 = Int64(0)\n\
    \    largestPrimeIndex38 = Int64(0)\n    largestPrimeIndex39 = Int64(0)\n    largestPrimeIndex40\
    \ = Int64(0)\n    largestPrimeIndex41 = Int64(0)\n    largestPrimeIndex42 = Int64(0)\n\
    \    ", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n \
    \   largest = largest.digit\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits\n    largest = largest[1]\n    largest = largest.digits\n\
    \    largest = largest[1]\n    largest = largest.digits\n    largest = largest[1]\n\
    \    largest = largest.digits", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n \
    \   largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = lar",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = lar", "    \n    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n\
    \            largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += lst[p]\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the numbers.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = 0\n    for p in primes\n        if p\
    \ > largest\n            largest = p\n        end\n    end\n    sum = 0\n    for\
    \ p in primes\n        if p == largest\n            sum += lst[p]\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  largest = Int.(max(lst))\n    largestPrime = Int.(largest)\n    largestPrimeIndex\
    \ = Int.(findfirst(x -> x == largestPrime, lst))\n    largestPrimeValue = Int.(lst[largestPrimeIndex])\n\
    \    largestPrimeValueSum = Int.(sum(largestPrimeValue))\n    return largestPrimeValueSum\n\
    end", "    \n    largest = findmax(lst)\n    \n    if largest == 0\n        return\
    \ largest\n    else\n        \n        largest = largest[1]\n        \n      \
    \  sum = 0\n        \n        for el in lst\n            if el == largest\n  \
    \              sum += largest\n            else\n                sum += el\n \
    \           end\n        end\n        \n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:100))\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of its\
    \ digits.", "    primes = primes(length(lst))\n    largest = primes[end]\n   \
    \ largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.abs()\n    largest = lar", "    \n    largest = Int64(0)\n\
    \    largestPrime = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    lar", "    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = lar", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestPrimeSum = 0\n    for x in lst\n        if x % largestPrime == 0\n\
    \            largestPrimeSum += x % largestPrime\n        end\n    end\n    return\
    \ largestPrimeSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2,\
    \ 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of prime factors of a given integer.", "    largest = findmax(lst)\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]\n\
    \    largest = largest[1]\n    largest = largest[1]\n    largest = largest[1]",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for\
    \ p in primes\n        if p > largest\n            largest = p\n        end\n\
    \    end\n    for p in primes\n        if p > largest\n            sum += lst[p]\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = lar", "    largest = findmax(lst)\n\
    \    sum = 0\n    for x in lst\n        if x == largest\n            sum += x\n\
    \        end\n    end\n    return sum\nend", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    sum = 0\n    for x in lst\n        if x % largest\
    \ == 0\n            sum += largest\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the number of integers that are divisible by all numbers in the\
    \ vector.", "    \n    primes = primes(length(lst))\n    \n    largest = 0\n \
    \   \n    for p in primes\n        if lst .contains p\n            largest = largest+p\n\
    \        end\n    end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the digits of its largest\
    \ prime factor.", "    \n    largest = minimum(lst)\n    largestPrime = primes[largest]\n\
    \    largestPrimeSum = 0\n    for el in lst\n        if el == largest\n      \
    \      continue\n        if el == largestPrime\n            largestPrimeSum +=\
    \ el\n            continue\n        if el % largestPrime == 0\n            largestPrimeSum\
    \ += el\n        end\n    end\n    return largestPrimeSum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
    \ 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    \n    primes = Primes(lst)\n    largest\
    \ = primes[end]\n    sum = 0\n    for p in primes\n        if p > largest\n  \
    \          largest = p\n        end\n    end\n    for p in primes\n        if\
    \ p > largest\n            sum += p\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([3, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.4>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([3,\
    \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 3, 1,\
    \ 32, ", "    largest = 0\n    largestPrime = 0\n    for i in lst\n        if\
    \ i%2 == 0\n            largestPrime = i\n        else\n            if i%3 ==\
    \ 0\n                largestPrime = i\n            else\n                if i%5\
    \ == 0\n                    largestPrime = i\n                else\n         \
    \           if i%7 == 0\n                        largestPrime = i\n          \
    \          else\n                        if i%11 == 0\n                      \
    \      largestPrime = i\n                        else\n                      \
    \      if i%13 == 0\n                                largestPrime = i\n      \
    \                      else\n                                if i%17 == 0\n  \
    \                                  largestPrime = i\n                        \
    \        else\n                                    if i%19 == 0\n            \
    \                            largestPrime = i\n                              \
    \      else\n                                        if i%23 == 0\n          \
    \                                  largestPrime = i\n                        \
    \                else\n                                            if i%29 ==\
    \ 0\n                                                largestPrime = i\n      \
    \                                      else\n                                \
    \                if i%31 == 0\n                                              \
    \      largestPrime = i\n                                                else\n\
    \                                                    largestPrime = largestPrime\
    \ + 1\n            end\n        end\n    end\n    largestPrime = largestPrime\
    \ + 1\n    largest = largestPrime + largest\n    return largest\nend\n</code>\n\
    <|/ a tags=julia,primes |>\n<| c |>\nThis does not work. `skjkasdkd([2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97])` returns `10` instead of `15`.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out. Now it works.\n<|/ c |>\n<| a tags=julia,primes\
    \ |>\nI wrote a package for Julia that does this for you:\nhttps://github.com/JuliaLang/julia-primes\n\
    <code>\njulia> using JuliaPrimes", "    primes = primes(length(lst))\n    largest\
    \ = primes[end]\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = lar", "    largest = Int64(0)\n    largest = Int64(lst[1])\n\
    \    for i in 2:length(lst)\n        if lst[i] > largest\n            largest\
    \ = lst[i]\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.digits[1]\n\
    \    largest = largest.digits[2]\n    largest = largest.digits[3]\n    largest\
    \ = largest.digits[4]\n    largest = largest.digits[5]\n    largest = largest.digits[6]\n\
    \    largest = largest.digits[7]\n    largest = largest.digits[8]\n    largest\
    \ = largest.digits[9]\n    largest = largest.digits[10]\n    largest = largest.digits[11]\n\
    \    largest = largest.digits[12]\n    largest = largest.digits[13]\n    largest\
    \ = largest.digits[14]\n    largest = largest.digits[15]\n    largest = largest.digits[16]\n\
    \    largest = largest.digits[17]\n    largest = largest.digits[18]\n    largest\
    \ = largest.digits[19]\n    largest = largest.digits[20]\n    largest = largest.digits[21]\n\
    \    largest = largest.digits[22]\n    largest = largest.digits[23]\n    largest\
    \ = largest.digits[24]\n    largest = largest.digits[25]\n    largest = largest.digits[26]\n\
    \    largest = largest.digits[27]\n    largest = largest.digits[28]\n    largest\
    \ = largest.digits[29]\n    largest = largest.digits[30]\n    largest = largest.digits[31]\n\
    \    largest = largest.digits[32]\n    largest = largest.digits[33]\n    largest\
    \ = largest.digits[34]\n    largest = largest.digits[35]\n    largest = largest.digits[36]\n\
    \    largest = largest.digits[37]\n    largest = largest.digits[38]\n    largest\
    \ = largest.digits[39]\n    largest = largest.digits[40]\n    largest = largest.digits[41]\n\
    \    largest = largest.digits[42]\n    largest = largest", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceil()\n\
    \    largest = largest.floor()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = lar",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for\
    \ el in lst\n        if el == largest\n            sum += el\n        else\n \
    \           largest = el\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    \n\
    \    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest", "    \n    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    largestPrimeDigits = digits[largestPrime]\n    largestPrimeDigitSum\
    \ = sum(largestPrimeDigits)\n    \n    largestPrimeDigitSum\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    for x in lst\n        if x == largestPrime\n            largestPrime\
    \ = 0\n            largestSum = 0\n        else\n            if largestPrime ==\
    \ 0\n                largestPrime = x\n                largestSum = x\n      \
    \      else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                end\n            end\n\
    \        end\n    end\n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32,\
    \ 324, 4, 3]) == 10\n@assert skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2,\
    \ 1, 2, 4, 2, 5, 1]) == 25\n@assert skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109,\
    \ 163, 23, 2323, 32, 30, 1, 9, 3]) == 13\n@assert skjkasdkd([0, 724, 32, 71, 99,\
    \ 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n@assert skjkasdkd([0, 81, 12, 3, 1, 21])\
    \ == 3\n@assert skjkasdkd([0, 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\nProblem 4\n\
    Write a function that returns the number of prime numbers less than a given integer\
    \ $n$. \nThe function should take in a single integer $n$ and return a number.",
  "    \n    primes = primes(length(lst))\n    \n    largest = primes[end]\n    \n\
    \    sum = 0\n    \n    for el in lst\n        if el == largest\n            sum\
    \ += el\n        else\n            largest = primes[end]\n            sum += el\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4,\
    \ 3])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2,\
    \ 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([1,\
    \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83,\
    \ 0, 5, 6])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    \n    largest = Int64(0)\n\
    \    largestPrime = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex\
    \ = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex = Int64(0)\n\
    \    lar", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = lar", "    primes = primes(length(lst))\n    largest = 0\n    for\
    \ p in primes\n        if lst.last() == p\n            largest = lst.last()\n\
    \            break\n        end\n    end\n    return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([2,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = lar", " \
    \   \n    primes = primes(length(lst))\n    \n    largest = 0\n    largestPrime\
    \ = 0\n    \n    for p in primes\n        if lst .contains p\n            largestPrime\
    \ = p\n            largest = lst .index(p)\n        end\n    end\n    \n    sum\
    \ = 0\n    for p in primes\n        if lst .contains p\n            sum += lst\
    \ .index(p)\n        end\n    end\n    \n    return sum + largestPrime\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([3, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector\
    \ of integers and returns the number of prime numbers less than or equal to the\
    \ length of the vector.", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for x in lst\n        if x % largest == 0\n            sum +=\
    \ largest\n            largest = primes[end]\n        else\n            largest\
    \ = primes[end]\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of prime numbers less than a given number. \nThe function\
    \ should take one argument, an integer $n$, and return an integer. \nThe function\
    \ should return $n$ if $n$ is prime.", "    primes = primes(length(lst))\n   \
    \ largest = primes[end]\n    sum = 0\n    for elt in lst\n        if elt > largest\n\
    \            largest = elt\n        end\n    end\n    for elt in lst\n       \
    \ if elt == largest\n            sum += elt\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7,\
    \ 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 3\nThe sum of the primes below 10\
    \ is 2 + 3 + 5 + 7 = 17.", "    \n    largest = Int64(0)\n    largestPrime = Int64(0)\n\
    \    largestPrimeIndex = Int64(0)\n    largestPrimeValue = Int64(0)\n    largestPrimeValueIndex\
    \ = Int64(0)\n    largestPrimeValueSum = Int64(0)\n    largestPrimeValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValue = Int64(0)\n    largestPrimeValueSumValueIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSum = Int64(0)\n    largestPrimeValueSumValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValue = Int64(0)\n    largestPrimeValueSumValueSumValueIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSum = Int64(0)\n    largestPrimeValueSumValueSumValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValue = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSum = Int64(0)\n  \
    \  largestPrimeValueSumValueSumValueSumValueSumIndex = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValue\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueIndex = Int64(0)\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSum = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValue =\
    \ Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSum\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValue\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValueSum\
    \ = Int64(0)\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0)\n", "    \n    primes = primes(length(lst))\n    \n    largest =\
    \ 0\n    for p in primes\n        if lst.contains(p)\n            largest = largest+p\n\
    \        end\n    end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of all the digits in a given number.", "    \n    primes\
    \ = Primes(lst)\n    \n    largest = primes[end]\n    \n    sum = 0\n    \n  \
    \  for i in primes\n        if i > largest\n            largest = i\n        end\n\
    \    end\n    \n    for i in primes\n        if i == largest\n            sum\
    \ += i\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest * 10\n\
    \    largest = largest.digits\n    largest = sum(largest)\n    return largest\n\
    end\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5,\
    \ 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ sum of the digits of an integer.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n\
    \        if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2", "    \n    primes = primes(length(lst))\n    \n\
    \    largest = 0\n    \n    for p in primes\n        if lst .contains p\n    \
    \        largest = p\n            break\n        end\n    end\n    \n    sum =\
    \ 0\n    \n    for p in primes\n        if largest == p\n            sum += lst\
    \ .index(p)\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the numbers.", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.abs()\n    largest = lar",
  "    primes = primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceil()\n    largest = largest.floor()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = largest.ceil()\n    largest = largest.ceil()\n    largest = largest.ceil()\n\
    \    largest = lar", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.(lst)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n    largest =\
    \ largest.(primes)\n    largest = largest.(primes)\n    largest = largest.(primes)\n\
    \    largest = largest.(primes)\n    largest = largest.(primes)\n", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    primes = primes(length(lst))\n\
    \    largest = 0\n    for p in primes\n        if lst .contains p\n          \
    \  largest = largest+p\n        end\n    end\n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    largest\
    \ = 0\n    largestPrime = 0\n    for i in lst\n        if i%2==0\n           \
    \ largestPrime = i\n        else\n            if largestPrime>i\n            \
    \    largestPrime = i\n            end\n        end\n    end\n    largestPrime\
    \ = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPrime+largestPrime\n    largestPrime = largestPrime+largestPrime\n\
    \    largestPrime = largestPri", "    largest = minimum(lst)\n    largestPrime\
    \ = primes[largest]\n    largestPrimeDigits = digits[largestPrime]\n    largestPrimeSum\
    \ = sum(largestPrimeDigits)\n    return largestPrimeSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds the largest prime factor\
    \ of a number.", "    \n    primes = primes(length(lst))\n    \n    largest =\
    \ primes[end]\n    \n    sum = 0\n    \n    for n in lst\n        if n <= largest\n\
    \            sum += n\n        end\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.3>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.3>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.3>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = primes[end]\n    \n    largest = largest * 10 + sum(lst[end-1:end])\n    \n\
    \    return largest\nend", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for elt in lst\n        if elt > largest\n            largest\
    \ = elt\n        end\n    end\n    for elt in lst\n        if elt == largest\n\
    \            sum += elt\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181,\
    \ 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    largest = minimum(lst)\n    largestPrime = findPrime(largest)\n\
    \    sum = 0\n    for i in lst\n        if i==largest\n            continue\n\
    \        if i==largestPrime\n            sum += largestPrime\n        else\n \
    \           sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n@time\
    \ skjkasdkd(rand(1:10000,1000));\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n\
    <code language=julia-1.5>\n@time skjkasdkd(rand(1:10000,1000));\n</cell>\n<code\
    \ language=julia-1.5>\n@time skjkasdkd(rand(1:10000", "    \n    largest = Int64(0);\n\
    \    largestPrime = Int64(0);\n    largestPrimeIndex = Int64(0);\n    largestPrimeValue\
    \ = Int64(0);\n    largestPrimeValueIndex = Int64(0);\n    largestPrimeValueSum\
    \ = Int64(0);\n    largestPrimeValueSumIndex = Int64(0);\n    largestPrimeValueSumValue\
    \ = Int64(0);\n    largestPrimeValueSumValueIndex = Int64(0);\n    largestPrimeValueSumValueSum\
    \ = Int64(0);\n    largestPrimeValueSumValueSumIndex = Int64(0);\n    largestPrimeValueSumValueSumValue\
    \ = Int64(0);\n    largestPrimeValueSumValueSumValueIndex = Int64(0);\n    largestPrimeValueSumValueSumValueSum\
    \ = Int64(0);\n    largestPrimeValueSumValueSumValueSumIndex = Int64(0);\n   \
    \ largestPrimeValueSumValueSumValueSumValue = Int64(0);\n    largestPrimeValueSumValueSumValueSumValueIndex\
    \ = Int64(0);\n    largestPrimeValueSumValueSumValueSumValueSum = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumIndex = Int64(0);\n    largestPrimeValueSumValueSumValueSumValueSumValue\
    \ = Int64(0);\n    largestPrimeValueSumValueSumValueSumValueSumValueIndex = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSum = Int64(0);\n    largestPrimeValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0);\n    largestPrimeValueSumValueSumValueSumValueSumValueSumValue =\
    \ Int64(0);\n    largestPrimeValueSumValueSumValueSumValueSumValueSumIndex = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSum = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumIndex = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValue = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumIndex = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValueSum = Int64(0);\n\
    \    largestPrimeValueSumValueSumValueSumValueSumValueSumValueSumValueSumIndex\
    \ = Int64(0);\n    ", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = largest.ceiling()\n    largest\
    \ = largest.ceiling()\n    largest = largest.ceiling()\n    largest = largest.ceiling()\n\
    \    largest = largest.ceiling()\n    largest = lar", "    \n    largest = 0\n\
    \    largestPrime = 0\n    largestSum = 0\n    \n    for x in lst\n        if\
    \ x == largestPrime\n            largestPrime = largestPrime + 1\n           \
    \ largestSum = largestSum + x\n        else\n            if largestPrime == 0\n\
    \                largestPrime = x\n                largestSum = x\n          \
    \  else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                else\n            \
    \        largestPrime = largestPrime + 1\n                    largestSum = largestSum\
    \ + x\n                end\n            end\n        end\n    end\n    \n    return\
    \ largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest\
    \ = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n    largest = Int64(0)\n\
    \    largest = Int64", "    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = lar", "    \n    largest = Int64(0)\n\
    \    largestPrime = Int64(0)\n    largestPrimeIndex = Int64(0)\n    largestPrimeIndex2\
    \ = Int64(0)\n    largestPrimeIndex3 = Int64(0)\n    largestPrimeIndex4 = Int64(0)\n\
    \    largestPrimeIndex5 = Int64(0)\n    largestPrimeIndex6 = Int64(0)\n    largestPrimeIndex7\
    \ = Int64(0)\n    largestPrimeIndex8 = Int64(0)\n    largestPrimeIndex9 = Int64(0)\n\
    \    largestPrimeIndex10 = Int64(0)\n    largestPrimeIndex11 = Int64(0)\n    largestPrimeIndex12\
    \ = Int64(0)\n    largestPrimeIndex13 = Int64(0)\n    largestPrimeIndex14 = Int64(0)\n\
    \    largestPrimeIndex15 = Int64(0)\n    largestPrimeIndex16 = Int64(0)\n    largestPrimeIndex17\
    \ = Int64(0)\n    largestPrimeIndex18 = Int64(0)\n    largestPrimeIndex19 = Int64(0)\n\
    \    largestPrimeIndex20 = Int64(0)\n    largestPrimeIndex21 = Int64(0)\n    largestPrimeIndex22\
    \ = Int64(0)\n    largestPrimeIndex23 = Int64(0)\n    largestPrimeIndex24 = Int64(0)\n\
    \    largestPrimeIndex25 = Int64(0)\n    largestPrimeIndex26 = Int64(0)\n    largestPrimeIndex27\
    \ = Int64(0)\n    largestPrimeIndex28 = Int64(0)\n    largestPrimeIndex29 = Int64(0)\n\
    \    largestPrimeIndex30 = Int64(0)\n    largestPrimeIndex31 = Int64(0)\n    largestPrimeIndex32\
    \ = Int64(0)\n    largestPrimeIndex33 = Int64(0)\n    largestPrimeIndex34 = Int64(0)\n\
    \    largestPrimeIndex35 = Int64(0)\n    largestPrimeIndex36 = Int64(0)\n    largestPrimeIndex37\
    \ = Int64(0)\n    largestPrimeIndex38 = Int64(0)\n    largestPrimeIndex39 = Int64(0)\n\
    \    largestPrimeIndex40 = Int64(0)\n    largestPrimeIndex41 = Int64(0)\n    largestPrimeIndex42\
    \ = Int64(0)\n    ", "    \n    largest = 0\n    largestPrime = 0\n    largestSum\
    \ = 0\n    largestSumDigit = 0\n    largestSumDigit2 = 0\n    largestSumDigit3\
    \ = 0\n    largestSumDigit4 = 0\n    largestSumDigit5 = 0\n    largestSumDigit6\
    \ = 0\n    largestSumDigit7 = 0\n    largestSumDigit8 = 0\n    largestSumDigit9\
    \ = 0\n    largestSumDigit10 = 0\n    largestSumDigit11 = 0\n    largestSumDigit12\
    \ = 0\n    largestSumDigit13 = 0\n    largestSumDigit14 = 0\n    largestSumDigit15\
    \ = 0\n    largestSumDigit16 = 0\n    largestSumDigit17 = 0\n    largestSumDigit18\
    \ = 0\n    largestSumDigit19 = 0\n    largestSumDigit20 = 0\n    largestSumDigit21\
    \ = 0\n    largestSumDigit22 = 0\n    largestSumDigit23 = 0\n    largestSumDigit24\
    \ = 0\n    largestSumDigit25 = 0\n    largestSumDigit26 = 0\n    largestSumDigit27\
    \ = 0\n    largestSumDigit28 = 0\n    largestSumDigit29 = 0\n    largestSumDigit30\
    \ = 0\n    largestSumDigit31 = 0\n    largestSumDigit32 = 0\n    largestSumDigit33\
    \ = 0\n    largestSumDigit34 = 0\n    largestSumDigit35 = 0\n    largestSumDigit36\
    \ = 0\n    largestSumDigit37 = 0\n    largestSumDigit38 = 0\n    largestSumDigit39\
    \ = 0\n    largestSumDigit40 = 0\n    largestSumDigit41 = 0\n    largestSumDigit42\
    \ = 0\n    largestSumDigit43 = 0\n    largestSumDigit44 = 0\n    largestSumDigit45\
    \ = 0\n    largestSumDigit46 = 0\n    largestSumDigit47 = 0\n    largestSumDigit48\
    \ = 0\n    largestSumDigit49 = 0\n    largestSumDigit50 = 0\n    largestSumDigit51\
    \ = 0\n    largestSumDigit52 = 0\n    largestSumDigit53 = 0\n    largestSumDigit54\
    \ = 0\n    largestSumDigit55 = 0\n    largestSumDigit56 = 0\n    largestSumDigit57\
    \ = 0\n    largestSumDigit58 = 0\n    largestSumDigit59 = 0\n    largestSumDigit60\
    \ = 0\n    largestSumDigit61 = 0\n    largestSumDigit", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = lar", "    primes = primes(length(lst))\n\
    \    largest = primes[end]\n    largest = largest.(lst)\n    largest = largest.max\n\
    \    largest = largest.digits\n    largest = sum(largest)\n    return largest\n\
    end", "    \n    primes = primes(length(lst))\n    \n    largest = 0\n    \n \
    \   for p in primes\n        if lst .contains p\n            largest = largest+p\n\
    \        end\n    end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n\
    </cell>\n<code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n\
    <code language=julia-1.4>\nskjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\n\
    skjkasdkd([2,3,5,7,11,13,17,19])\n</cell>\n<code language=julia-1.4>\nskjkasdkd([2,",
  "    \n    primes = primes(length(lst))\n    largest = primes[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[end]\n    largest\
    \ = largest.digits[end]\n    largest = largest.digits[end]\n    largest = largest.digits[end]\n\
    \    largest = largest.digits[end]\n    largest = largest.digits[", "    \n  \
    \  largest = minimum(lst)\n    largestPrime = primes[largest]\n    sum = 0\n \
    \   for el in lst\n        if el == largest\n            sum += largestPrime\n\
    \        else\n            sum += el\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5,\
    \ 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163,\
    \ 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0,\
    \ 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 4\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the numbers.", "    \n   \
    \ primes = primes(length(lst))\n    \n    largest = 0\n    largestPrime = 0\n\
    \    largestSum = 0\n    \n    for prime in primes\n        \n        sum = 0\n\
    \        \n        for i = 1:length(lst)\n            \n            if lst[i]\
    \ % prime == 0\n                sum += lst[i]\n            end\n            \n\
    \        end\n        \n        if sum > largestSum\n            largestSum =\
    \ sum\n            largestPrime = prime\n            largest = largestSum\n  \
    \      end\n    end\n    \n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:100000));\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the numbers."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
