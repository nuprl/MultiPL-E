name: HumanEval_94_skjkasdkd
language: jl
prompt: "\"\"\"You are given a vector of integers.\n    You need to find the largest\
  \ prime value and return the sum of its digits.\n\n    Examples:\n    >>> skjkasdkd([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n    10\n\
  \    >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n\
  \    25\n    >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3])\n    13\n    >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6])\n    11\n    >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n    3\n    >>>\
  \ skjkasdkd([0, 8, 1, 2, 1, 7])\n    7\n    \"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = skjkasdkd;\n\t@test(candidate([0,\
  \ 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]) == 10)\n\
  \t@test(candidate([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) ==\
  \ 25)\n\t@test(candidate([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32,\
  \ 30, 1, 9, 3]) == 13)\n\t@test(candidate([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
  \ 83, 0, 5, 6]) == 11)\n\t@test(candidate([0, 81, 12, 3, 1, 21]) == 3)\n\t@test(candidate([0,\
  \ 8, 1, 2, 1, 7]) == 7)\n\t@test(candidate([8191]) == 19)\n\t@test(candidate([8191,\
  \ 123456, 127, 7]) == 19)\n\t@test(candidate([127, 97, 8192]) == 10)\nend\n"
completions: ["    primes = primes(length(lst))\n    largest = primes[end]\n    sum\
    \ = 0\n    for x in lst\n        if x % largest == 0\n            sum += largest\n\
    \        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for sharing your code. Could you please explain what is the purpose\
    \ of using \"end\" in the for loop?\n<|/ c |>\n<| c |>\n`end` ends the for loop.\
    \ `end` can be omitted when there is only one statement in the loop. `end` can\
    \ also be omitted when there is only one statement in the loop and it is followed\
    \ by a semicolon. `end` can also be omitted when there is only one statement in\
    \ the loop and it is followed by a semicolon and an `end` keyword.\n<|/ c |>\n\
    <| c |>\nThank you for the explanation. Could you please explain what is the purpose\
    \ of using \"end\" in the for loop?\n<|/ c |>\n<| c |>\n`end` ends the for loop.\
    \ `end` can be omitted when there is only one statement in the loop. `end` can\
    \ also be omitted when there is only one statement in the loop and it is followed\
    \ by a semicolon. `end` can also be omitted when there is only one statement in\
    \ the loop and it is followed by a semicolon and an `end` keyword.\n<|/ c |>\n\
    <| c |>\nThank you for the explanation. Could you please explain what is the purpose\
    \ of using \"end\" in the for loop?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  \
    \  \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ x in lst\n        if x == largestPrime\n            largestPrime = largestPrime\
    \ + 1\n            largestSum = largestSum + x\n        else\n            if largestPrime\
    \ == 0\n                largestPrime = x\n                largestSum = x\n   \
    \         else\n                if largestPrime > x\n                    largestPrime\
    \ = x\n                    largestSum = x\n                end\n            end\n\
    \        end\n    end\n    \n    return largestSum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2", "    \n    primes = primes(length(lst))\n    \n\
    \    largest = primes[end]\n    \n    sum = 0\n    \n    for el in lst\n     \
    \   if el == largest\n            sum += el\n        else\n            largest\
    \ = el\n        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise: Find the largest prime factor of a number", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = largest * largest\n\
    \    largest = largest * largest\n    largest = largest * largest\n    largest\
    \ = largest * largest\n    largest = largest * largest\n    largest = largest\
    \ * largest\n    largest = largest * largest\n    largest = lar", "    primes\
    \ = primes(length(lst))\n    largest = primes[end]\n    sum = 0\n    for p in\
    \ primes\n        if p > largest\n            largest = p\n        end\n    end\n\
    \    for p in primes\n        if p < largest\n            sum += lst[p]\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n@test\
    \ skjkasdkd([2, 3, 1, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\
    \ == 10\n@test skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2,\
    \ 5, 1]) == 25\n@test skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323,\
    \ 32, 30, 1, 9, 3]) == 13\n@test skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91,\
    \ 83, 0, 5, 6]) == 11\n@test skjkasdkd([0, 81, 12, 3, 1, 21]) == 3\n@test skjkasdkd([0,\
    \ 8, 1, 2, 1, 7]) == 7\n</cell>\n<text>\nProblem 3\nThe Fibonacci sequence is\
    \ defined by the formula:", "    \n    largest = 0\n    largestPrime = 0\n   \
    \ largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n    largestSumPrime3\
    \ = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n    largestSumPrime6\
    \ = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n    largestSumPrime9\
    \ = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 = 0\n    largestSumPrime12\
    \ = 0\n    largestSumPrime13 = 0\n    largestSumPrime14 = 0\n    largestSumPrime15\
    \ = 0\n    largestSumPrime16 = 0\n    largestSumPrime17 = 0\n    largestSumPrime18\
    \ = 0\n    largestSumPrime19 = 0\n    largestSumPrime20 = 0\n    largestSumPrime21\
    \ = 0\n    largestSumPrime22 = 0\n    largestSumPrime23 = 0\n    largestSumPrime24\
    \ = 0\n    largestSumPrime25 = 0\n    largestSumPrime26 = 0\n    largestSumPrime27\
    \ = 0\n    largestSumPrime28 = 0\n    largestSumPrime29 = 0\n    largestSumPrime30\
    \ = 0\n    largestSumPrime31 = 0\n    largestSumPrime32 = 0\n    largestSumPrime33\
    \ = 0\n    largestSumPrime34 = 0\n    largestSumPrime35 = 0\n    largestSumPrime36\
    \ = 0\n    largestSumPrime37 = 0\n    largestSumPrime38 = 0\n    largestSumPrime39\
    \ = 0\n    largestSumPrime40 = 0\n    largestSumPrime41 = 0\n    largestSumPrime42\
    \ = 0\n    largestSumPrime43 = 0\n    largestSumPrime44 = 0\n    largestSumPrime45\
    \ = 0\n    largestSumPrime46 = 0\n    largestSumPrime47 = 0\n    largestSumPrime48\
    \ = 0\n    largestSumPrime49 = 0\n    largestSumPrime50 = 0\n    largestSumPrime51\
    \ = 0\n    largestSumPrime52 = 0\n    largestSumPrime53 = 0\n    largestSumPrime54\
    \ = 0\n    largestSumPrime55", "    primes = primes(length(lst))\n    largest\
    \ = 0\n    for p in primes\n        if lst.contains(p)\n            largest =\
    \ largest+p\n        end\n    end\n    return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = primes[end]\n    \n    sum = 0\n    \n    for p in primes\n\
    \        if p > largest\n            largest = p\n        end\n    end\n    \n\
    \    for p in primes\n        if p > largest\n            sum += lst[p]\n    \
    \    end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])\
    \ == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97]) == 10\n@test skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 10\n@test skjkasdkd([2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, ", "    \n    primes = primes(lst)\n    \n    largest = primes[end]\n\
    \    \n    sum = 0\n    \n    for p in primes\n        if p > largest\n      \
    \      largest = p\n        end\n    end\n    \n    for p in primes\n        if\
    \ p < largest\n            sum += p - largest\n        end\n    end\n    \n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a vector of integers and returns the number of integers that are divisible\
    \ by 3.", "    \n    primes = primes(length(lst))\n    largest = primes[end]\n\
    \    sum = 0\n    for n in lst\n        if n % largest == 0\n            sum +=\
    \ largest\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time skjkasdkd(rand(1:10000))\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of an integer.", "    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    for x in lst\n        if x == largestPrime\n  \
    \          largestPrime = largestPrime + 1\n        else\n            if largestPrime\
    \ > largest\n                largest = largestPrime\n                largestSum\
    \ = largestPrime\n            largestPrime = 1\n        end\n    end\n    return\
    \ largestSum\nend\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 3, 2, 1,\
    \ 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2,\
    \ 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 3, 1, 32, 5107,\
    \ 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nskjkasdkd([0, 81, 12, 3, 1, 21])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 8, 1, 2, 1, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of prime numbers less than a given integer $n$. \nFor example,\
    \ for $n=10$, the function should return $5$.", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumPrime = 0\n    largestSumPrime2 = 0\n\
    \    largestSumPrime3 = 0\n    largestSumPrime4 = 0\n    largestSumPrime5 = 0\n\
    \    largestSumPrime6 = 0\n    largestSumPrime7 = 0\n    largestSumPrime8 = 0\n\
    \    largestSumPrime9 = 0\n    largestSumPrime10 = 0\n    largestSumPrime11 =\
    \ 0\n    largestSumPrime12 = 0\n    largestSumPrime13 = 0\n    largestSumPrime14\
    \ = 0\n    largestSumPrime15 = 0\n    largestSumPrime16 = 0\n    largestSumPrime17\
    \ = 0\n    largestSumPrime18 = 0\n    largestSumPrime19 = 0\n    largestSumPrime20\
    \ = 0\n    largestSumPrime21 = 0\n    largestSumPrime22 = 0\n    largestSumPrime23\
    \ = 0\n    largestSumPrime24 = 0\n    largestSumPrime25 = 0\n    largestSumPrime26\
    \ = 0\n    largestSumPrime27 = 0\n    largestSumPrime28 = 0\n    largestSumPrime29\
    \ = 0\n    largestSumPrime30 = 0\n    largestSumPrime31 = 0\n    largestSumPrime32\
    \ = 0\n    largestSumPrime33 = 0\n    largestSumPrime34 = 0\n    largestSumPrime35\
    \ = 0\n    largestSumPrime36 = 0\n    largestSumPrime37 = 0\n    largestSumPrime38\
    \ = 0\n    largestSumPrime39 = 0\n    largestSumPrime40 = 0\n    largestSumPrime41\
    \ = 0\n    largestSumPrime42 = 0\n    largestSumPrime43 = 0\n    largestSumPrime44\
    \ = 0\n    largestSumPrime45 = 0\n    largestSumPrime46 = 0\n    largestSumPrime47\
    \ = 0\n    largestSumPrime48 = 0\n    largestSumPrime49 = 0\n    largestSumPrime50\
    \ = 0\n    largestSumPrime51 = 0\n    largestSumPrime52 = 0\n    largestSumPrime53\
    \ = 0\n    largestSumPrime54 = 0\n    largestSumPrime55", "    largest = 0\n \
    \   largestPrime = 0\n    largestSum = 0\n    for x in lst\n        if x == largestPrime\n\
    \            largestPrime = largestPrime + 1\n            largestSum = largestSum\
    \ + largestPrime\n        else\n            if largestPrime > largest\n      \
    \          largestPrime = largest\n                largestSum = largestPrime\n\
    \            largestPrime = 1\n            largest = largestPrime\n          \
    \  largestSum = largestPrime\n        end\n    end\n    return largestSum\nend\n\
    </cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000, 10000))\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of integers and returns\
    \ the sum of the digits of all the prime numbers less than or equal to the given\
    \ vector.", "    primes = primes(length(lst))\n    largest = primes[end]\n   \
    \ largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.floor()\n\
    \    largest = largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.floor()\n    largest =\
    \ largest.round()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.floor()\n    largest = largest.round()\n    largest = largest.abs()\n\
    \    largest = lar", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = 0\n    \n    for p in primes\n        if lst .contains p\n            largest\
    \ = largest+p\n        end\n    end\n    \n    return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nskjkasdkd([2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of its digits.", "    \n    largest = 0\n    largestPrime\
    \ = 0\n    largestSum = 0\n    largestSumDigit = 0\n    largestSumDigitDigit =\
    \ 0\n    largestSumDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigit = 0\n\
    \    largestSumDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = 0\n\
    \    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = 0\n    largestSumDigitDigitDigitDigitDigit", "    \n    primes = primes(length(lst))\n\
    \    \n    largest = 0\n    largestPrime = 0\n    largestPrimeIndex = 0\n    \n\
    \    for prime in primes\n        if prime > largest\n            largestPrime\
    \ = prime\n            largestPrimeIndex = prime\n        end\n    end\n    \n\
    \    for index in 1:length(lst)\n        if lst[index] == largestPrimeIndex\n\
    \            largestPrimeIndex += 1\n        end\n    end\n    \n    sum = 0\n\
    \    for index in 1:length(lst)\n        if lst[index] == largestPrimeIndex\n\
    \            sum += Int(lst[index])\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time skjkasdkd(rand(1:10000));\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime numbers\
    \ less than a given number. \nThe function should take a single integer as an\
    \ argument and return the number of prime numbers less than that number.", " \
    \   \n    largest = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for\
    \ el in lst\n        if el == largestPrime\n            largestPrime = 0\n   \
    \         largestSum = 0\n        elseif el == largest\n            largestPrime\
    \ = 0\n            largestSum = 0\n        elseif el == largestPrime\n       \
    \     largestPrime = 0\n            largestSum = 0\n        elseif el > largestPrime\n\
    \            largestPrime = el\n            largestSum = 0\n        elseif el\
    \ == largestPrime\n            largestPrime = 0\n            largestSum = 0\n\
    \        elseif el > largestPrime\n            largestPrime = el\n           \
    \ largestSum = 0\n        else\n            largestPrime = 0\n            largestSum\
    \ = 0\n        end\n    end\n    \n    return largestSum\nend", "    primes =\
    \ primes(length(lst))\n    largest = primes[end]\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = largest.ceiling()\n    largest = largest.abs()\n    largest = largest.ceiling()\n\
    \    largest = largest.abs()\n    largest = largest.ceiling()\n    largest = largest.abs()\n\
    \    largest = lar", "    \n    primes = primes(length(lst))\n    \n    largest\
    \ = 0\n    largestPrime = 0\n    largestSum = 0\n    \n    for i in primes\n \
    \       \n        if lst.contains(i)\n            \n            sum = 0\n    \
    \        \n            for j in lst\n                \n                if j ==\
    \ i\n                    \n                    sum += j\n                \n  \
    \              else\n                    \n                    break\n       \
    \         \n            \n            if sum > largestSum\n                \n\
    \                largestSum = sum\n                largestPrime = i\n        \
    \        largest = largestSum\n            \n            elseif sum == largestSum\n\
    \                \n                largestPrime = i\n                largest =\
    \ largestSum\n            \n            end\n            \n        end\n     \
    \   \n    end\n    \n    return largestPrime\nend\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,\
    \ 4, 3])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([1, 0, 1, 8, 2, 4597,\
    \ 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n</cell>\n<code language=julia-1.5>\n\
    skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n\
    </cell>\n<code language=julia-1.5>\nskjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5,\
    \ 91, 83, 0, 5, 6])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 81, 12,\
    \ 3, 1, 21])\n</cell>\n<code language=julia-1.5>\nskjkasdkd([0, 8, 1, 2, 1, 7])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the digits\
    \ of an integer."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
