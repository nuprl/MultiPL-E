name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two vectors.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    \n    common = Set()\n    for x in l1\n        push!(common, x)\n\
    \    end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ a in l1\n        for b in l2\n            if a == b\n                common\
    \ = Set([a])\n            else\n                common = Set([a] ++ common)\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el1 in l1\n        for el2 in l2\n            if el1 == el2\n \
    \               common = Set([el1, el2])\n            end\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    \n    for elt in l1 \n        push!(common, elt) \n   \
    \ end\n    \n    for elt in l2 \n        push!(common, elt) \n    end\n    \n\
    \    return sort(common)\nend", "    \n    common = Set()\n    \n    for el in\
    \ l1\n        push!(common, el)\n    end\n    \n    for el in l2\n        push!(common,\
    \ el)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in two vectors.", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<text>\nExercise: Write a function that returns the common\
    \ elements for two vectors of strings. \nHint: Use a set and push!", "    \n \
    \   common = Set()\n    \n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n            else\n              \
    \  common = Set([a] ++ common)\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for elt\
    \ in l1 \n        if elt in l2 \n            common = Set([elt])\n        end\n\
    \    end\n    return common\nend", "    \n    common = Set()\n    \n    for elt\
    \ in l1\n        if elt in l2\n            common = common+[elt]\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el1 in l1\n        for el2 in l2\n            if el1 == el2\n          \
    \      common = Set([el1])\n            else\n                common = Set([el1])\
    \ \u222A common\n            end\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el in l1 do \n        common = Set([el] + common)\n    end\n    \n    for\
    \ el in l2 do \n        common = Set([el] + common)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n     \
    \   common = Set([x] ++ common)\n    end\n    return Set([x for x in common if\
    \ x != 0])\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1 do \n        common = Set([x] ++ common)\n    end\n    for x\
    \ in l2 do \n        common = Set([x] ++ common)\n    end\n    common\nend", " \
    \   \n    common = Set()\n    \n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = union(common,\
    \ el)\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = union(common,\
    \ el)\n        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n   \
    \ end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el1 in l1\n        for el2 in l2\n            if el1 == el2\n         \
    \       common = Set([el1])\n            else\n                common = Set([el1])\
    \ \u222A common\n            end\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n\
    \            if el1 == el2\n                common = Set([el1])\n            \
    \    break\n            end\n        end\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el] + common)\n\
    \    end\n    \n    for el in l2\n        common = Set([el] + common)\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    \n    common\nend", "    \n\
    \    common = Set()\n    \n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n            else\n              \
    \  common = Set([a] ++ common)\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1 do \n        common = Set([x] + common)\n\
    \    end\n    for x in l2 do \n        common = Set([x] + common)\n    end\n \
    \   return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    for el in l1\n        common = Set([el] + common)\n    end\n  \
    \  for el in l2\n        common = Set([el] + common)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        else\n            common = union(common, el)\n        end\n\
    \    end\n    \n    for el in l2\n        if !contains(common, el)\n         \
    \   common = Set([el])\n        else\n            common = union(common, el)\n\
    \        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for elt in l1\n        if elt in l2\n     \
    \       common = Set([elt])\n        end\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n    \
    \        if el1 == el2\n                common = Set([el1, el2])\n           \
    \ else\n                break\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el in l1 do \n        if !contains(common, el) \n            common = Set([el])\n\
    \        end\n    end\n    \n    for el in l2 do \n        if !contains(common,\
    \ el) \n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for elt in l1 \n        if elt in l2 \n            common = union(common,\
    \ elt)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for el in l1 \u222A l2\n        if !has(common, el)\n         \
    \   common = Set([el])\n        else\n            common = common \u222A Set([el])\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for x in l1\n        common = Set([x] ++ common)\n    end\n    \n \
    \   for x in l2\n        common = Set([x] ++ common)\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    return common\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nI like your solution, however I believe it can be made more efficient\
    \ by using a set instead of a list to store the common elements. I believe this\
    \ would improve the performance of the `intersect` function by O(1).\n<|/ c |>\n\
    <| c |>\nYes, I believe that would improve the performance of the `intersect`\
    \ function by O(1).\n<|/ c |>\n<| a tags=julia,set-theory,performance |>\nI believe\
    \ that using Sets is more efficient than using lists.\n<code>", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    common\nend", "    \n    common = Set()\n\
    \    for elt in l1 \u222A l2\n        if !has(common, elt)\n            common\
    \ = Set([elt])\n        else\n            common = common \u222A Set([elt])\n\
    \        end\n    end\n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for a in l1\n        for b in l2\n        \
    \    if a == b\n                common.add(a)\n            end\n        end\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2]) == [2, 3]\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of times a\
    \ value appears in a vector. Test it on some examples. What do you notice about\
    \ it?", "    \n    common = Set()\n    \n    for a in l1\n        for b in l2\n\
    \            if a == b\n                common = Set([a])\n                break\n\
    \            else\n                common = Set([a] ++ common)\n        end\n\
    \    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    for el in l1\n        common = Set([el]) & common\n\
    \    end\n    for el in l2\n        common = Set([el]) & common\n    end\n   \
    \ return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common =\
    \ Set()\n    \n    for el in l1\n        common = union(common, Set(el))\n   \
    \ end\n    \n    for el in l2\n        common = union(common, Set(el))\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        if x in l2\n            common = Set([x])\n\
    \        else\n            common = Set([x] + common)\n        end\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for x in l1 do\
    \ \n        if x in l2 \n            common = common.add(x)\n        end\n   \
    \ end\n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    for x in l1 do \n        common = Set([x] + common)\n \
    \   end\n    for x in l2 do \n        common = Set([x] + common)\n    end\n  \
    \  return common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times each element appears in two vectors.", "    \n    common = Set()\n   \
    \ \n    for el in l1\n        common = Set([el]) & common\n    end\n    \n   \
    \ for el in l2\n        common = Set([el]) & common\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for x in l1 do \n       \
    \ push!(common, x)\n    end\n    \n    for x in l2 do \n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times each element appears in\
    \ two vectors.", "    \n    common = Set()\n    \n    for el in l1\n        if\
    \ !contains(common, el)\n            common = Set([el])\n        end\n    end\n\
    \    \n    for el in l2\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    return common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n   \
    \     common = Set([x] ++ common)\n    end\n    \n    for x in l2\n        common\
    \ = Set([x] ++ common)\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for el1 in l1\n        for el2 in l2\n            if el1\
    \ == el2\n                common = Set([el1])\n                break\n       \
    \ end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1 \u222A l2\n        if !common.isdisjoint(Set([el]))\n\
    \            common = common \u222A Set([el])\n        end\n    end\n    \n  \
    \  return common\nend", "    \n    common = Set()\n    \n    for el in l1 \n \
    \       if !contains(common, el)\n            common = Set([el])\n        end\n\
    \    end\n    \n    for el in l2 \n        if !contains(common, el)\n        \
    \    common = Set([el])\n        end\n    end\n    \n    return common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\
    \ do \n        if x \u2209 l2 \n            common += x \n        end\n    end\n\
    \    \n    for x in l2 do \n        if x \u2209 l1 \n            common += x \n\
    \        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1 \n        common = Set([el] +\
    \ common)\n    end\n    \n    for el in l2\n        common = Set([el] + common)\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el in l1\n        if !contains(common, el)\n            common = Set([el])\n\
    \        end\n    end\n    \n    for el in l2\n        if !contains(common, el)\n\
    \            common = Set([el])\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of unique elements in a vector. Test\
    \ it on some vectors.", "    \n    common = Set()\n    \n    for el in l1 do \n\
    \        common = union(common, Set(el))\n    end\n    \n    for el in l2 do \n\
    \        common = union(common, Set(el))\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for elt in l1 \n        if !contains(common,\
    \ elt) \n            common = Set([elt])\n        end\n    end\n    \n    for\
    \ elt in l2 \n        if !contains(common, elt) \n            common = Set([elt])\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        if !contains(common, x)\n            common = Set([x])\n\
    \        else\n            common = Set([x] ++ common)\n        end\n    end\n\
    \    for x in l2\n        if !contains(common, x)\n            common = Set([x])\n\
    \        else\n            common = Set([x] ++ common)\n        end\n    end\n\
    \    return common\nend", "    \n    common = Set()\n    \n    for i in l1\n \
    \       common.add(i)\n    end\n    \n    for i in l2\n        common.add(i)\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the number of unique elements. \nWrite a function\
    \ that takes a vector and returns the number of unique elements that appear in\
    \ both vectors.\nWrite a function that takes a vector and returns the number of\
    \ unique elements that appear in both vectors.\nWrite a function that takes a\
    \ vector and returns the number of unique elements that appear in both vectors.\n\
    Write a function that takes a vector and returns the number of unique elements\
    \ that appear in both vectors.\nWrite a function that takes a vector and returns\
    \ the number of unique elements that appear in both vectors.\nWrite a function\
    \ that takes a vector and returns the number of unique elements that appear in\
    \ both vectors.\nWrite a function that takes a vector and returns the number of\
    \ unique elements that appear in both vectors.\nWrite a function that takes a\
    \ vector and returns the number of unique elements that appear in both vectors.\n\
    Write a function that takes a vector and returns the number of unique elements\
    \ that appear in both vectors.\nWrite a function that takes a vector and returns\
    \ the number of unique elements that appear in both vectors.\nWrite a function\
    \ that takes a vector and returns the number of unique elements that appear in\
    \ both vectors.\nWrite a function that takes a vector and returns the number of\
    \ unique elements that appear in both vectors.\nWrite a function that takes a\
    \ vector and returns the number of unique elements that appear in both vectors.\n\
    Write a function that takes a vector and returns the number of unique elements\
    \ that appear in both vectors.\nWrite a function that takes a vector and returns\
    \ the number of unique elements that appear in both vectors.\nWrite a function\
    \ that takes a vector and returns the number of unique elements that appear in\
    \ both vectors.\nWrite a function that takes a vector and returns the number of\
    \ unique elements that appear in both vectors.\nWrite a function that takes a\
    \ vector and returns the number of unique elements that appear in both vectors.\n\
    Write a function that takes a vector and returns the number of unique elements\
    \ that appear in both vectors.\nWrite a function that takes a vector and returns\
    \ the number of unique elements that appear in both vectors.\nWrite a function\
    \ that takes a vector and returns the number of unique elements that appear in\
    \ both vectors.\nWrite a function that takes a vector and returns the number of\
    \ unique elements that appear in both vectors.\nWrite a function that takes a\
    \ vector and returns the number of unique elements that appear in both vectors.\n\
    Write a function that takes a vector and returns the number of unique elements\
    \ that appear in both vectors.\nWrite a function that takes a vector and returns\
    \ the number of unique elements that appear in both vectors.\nWrite a function\
    \ that takes a vector and returns the number of unique elements that appear in\
    \ both vectors.\nWrite a function that takes a vector and returns the number of\
    \ unique ", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a value appears in a vector.", "    \n    common = Set()\n    \n  \
    \  for el in l1\n        common = Set([el]) | common\n    end\n    \n    for el\
    \ in l2\n        common = Set([el]) | common\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ common = Set()\n    for el in l1\n        if !contains(common, el)\n       \
    \     common = Set([el])\n        else\n            common = union(common, Set([el]))\n\
    \        end\n    end\n    for el in l2\n        if !contains(common, el)\n  \
    \          common = Set([el])\n        else\n            common = union(common,\
    \ Set([el]))\n        end\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    common\nend", " \
    \   \n    common = Set()\n    \n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    for el\
    \ in l2\n        if !contains(common, el)\n            common = Set([el])\n  \
    \      end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1 do \n        if x \u2209 l2 then \n            common = Set([x])\
    \ \n        else \n            common = Set([x] + common)\n        end\n    end\n\
    \    for x in l2 do \n        if x \u2209 common then \n            common = Set([x])\
    \ \n        else \n            common = Set([x] + common)\n        end\n    end\n\
    \    return common\nend", "    \n    common = Set()\n    for el in l1 do \n  \
    \      common = common+Set(el)\n    end\n    for el in l2 do \n        common\
    \ = common+Set(el)\n    end\n    common = Set([el for el in common if el in l1])\n\
    \    common = Set([el for el in common if el in l2])\n    common = Set([el for\
    \ el in common if el in l1])\n    common = Set([el for el in common if el in l2])\n\
    \    common = Set([el for el in common if el in l1])\n    common = Set([el for\
    \ el in common if el in l2])\n    common = Set([el for el in common if el in l1])\n\
    \    common = Set([el for el in common if el in l2])\n    common = Set([el for\
    \ el in common if el in l1])\n    common = Set([el for el in common if el in l2])\n\
    \    common = Set([el for el in common if el in l1])\n    common = Set([el for\
    \ el in common if el in l2])\n    common = Set([el for el in common if el in l1])\n\
    \    common = Set([el for el in common if el in l2])\n    common = Set([el for\
    \ el in common if el in l1])\n    common = Set([el for el in common if el in l2])\n\
    \    common = Set([el for el in common if el in l1])\n    common = Set([el for\
    \ el in common if el in l2])\n    common = Set([el for el in common if el in l1])\n\
    \    common = Set([el for el in common if el in l2])\n    common = Set([el for\
    \ el in common if el in l1])\n    common = Set([el for el in common if el in l2])\n\
    \    common = Set([el for el in common if el in l1])\n    common = Set([el for\
    \ el in common if el in l2])\n    common = Set([el for el in common if el in l1])\n\
    \    common = Set([el for el in common if el in l2])\n    common = Set([el for\
    \ el in common if el in l1])\n    common = Set([el for el in common if el in l2])\n\
    \    common = Set([el for el in common if el in l1])\n    common = Set", "   \
    \ \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n     \
    \       if el1 == el2\n                common = Set([el1])\n            else\n\
    \                common = Set([el1]) \u222A common\n            end\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for elt in l1 \n        if elt in l2 \n            common = union(common, elt)\n\
    \        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for i in l1 do \n        if !contains(common,\
    \ i)\n            common = Set([i])\n        end\n    end\n    \n    for i in\
    \ l2 do \n        if !contains(common, i)\n            common = Set([i])\n   \
    \     end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for x in l1\n        push!(common, x)\n    end\n    \n    for x in\
    \ l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for x in l1\n   \
    \     push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n\
    \    for x in l2 do \n        common.add(x)\n    end\n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return collect(common)\nend", "    \n    common = Set()\n    for el in l1\
    \ \u222A l2\n        if !has(common, el)\n            common = Set([el])\n   \
    \     else\n            common = common \u222A Set([el])\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for elt in l1 \n        if elt in l2 \n \
    \           common = common.append(elt) \n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1 do \n        common\
    \ = Set([x] ++ common)\n    end\n    for x in l2 do \n        common = Set([x]\
    \ ++ common)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n   \
    \         if el1 == el2\n                common = Set([el1, el2])\n          \
    \  else\n                break\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        if x in common\n   \
    \         continue\n        for y in l2\n            if y in common\n        \
    \        continue\n            if x == y\n                common = Set([x])\n\
    \                break\n        end\n    end\n    \n    return common\nend", " \
    \   \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n  \
    \  end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        if !haskey(common,\
    \ x)\n            common[x] = true\n        end\n    end\n    \n    for x in l2\n\
    \        if !haskey(common, x)\n            common[x] = true\n        end\n  \
    \  end\n    \n    return collect(keys(common))\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n\
    \    end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    return\
    \ Set([x for x in common if x != 0])\nend", "    \n    common = Set()\n    \n\
    \    for el in l1\n        if !contains(common, el)\n            common = Set([el])\n\
    \        else\n            common = union(common, Set([el]))\n        end\n  \
    \  end\n    \n    for el in l2\n        if !contains(common, el)\n           \
    \ common = Set([el])\n        else\n            common = union(common, Set([el]))\n\
    \        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for el1 in l1\n\
    \        for el2 in l2\n            if el1 == el2\n                common = Set([el1])\n\
    \            else\n                common = Set([el1]) \u222A common\n       \
    \     end\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2]) == [2, 3]\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of times each\
    \ element appears in two vectors.", "    \n    common = Set()\n    \n    for el\
    \ in l1 \u222A l2\n        if !contains(common, el)\n            common = Set([el])\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of unique elements in the vector.", "    \n    common = Set()\n \
    \   \n    for el in l1\n        common = Set([el]) & common\n    end\n    \n \
    \   for el in l2\n        common = Set([el]) & common\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1 \u222A l2\n       \
    \ if !common.issubset(Set(x))\n            common = Set([x])\n        end\n  \
    \  end\n    return common\nend", "    \n    common = Set()\n    \n    for el in\
    \ l1 \n        push!(common, el)\n    end\n    \n    for el in l2 \n        push!(common,\
    \ el)\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of times a value\
    \ appears in a vector.", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for a in l1\n        for b in l2\n            if a == b\n         \
    \       common.add(a)\n            end\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for x in l1\n        push!(common,\
    \ x)\n    end\n    \n    for x in l2\n        push!(common, x)\n    end\n    \n\
    \    return collect(common)\nend", "    \n    common = Set()\n    \n    for elt\
    \ in l1 do \n        if !contains(common, elt) \n            common = Set([elt])\n\
    \        end\n    end\n    \n    for elt in l2 do \n        if !contains(common,\
    \ elt) \n            common = Set([elt])\n        end\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    \n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for el in l1\n        if\
    \ !contains(common, el)\n            common = Set([el])\n        end\n    end\n\
    \    \n    for el in l2\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    return common\nend", "    \n  \
    \  common = Set()\n    \n    for el in l1\n        if !contains(common, el)\n\
    \            common = Set([el])\n        else\n            common = union(common,\
    \ el)\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = union(common,\
    \ el)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for elt in l1\n        if elt in l2\n            common =\
    \ Set([elt])\n        end\n    end\n    \n    return common\nend", "    \n   \
    \ common = Set()\n    \n    for el in l1\n        common = Set([el]) | common\n\
    \    end\n    \n    for el in l2\n        common = Set([el]) | common\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for\
    \ x in l2\n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9,\
    \ 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2,\
    \ 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        common = Set([x] ++ common)\n  \
    \  end\n    for x in l2\n        common = Set([x] ++ common)\n    end\n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for el in l1 \u222A l2\n\
    \        if !contains(common, el)\n            common = Set([el])\n        else\n\
    \            common = common \u222A Set([el])\n        end\n    end\n    \n  \
    \  return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    for x in l1 do \n        push!(common, x)\n    end\n    for x in\
    \ l2 do \n        push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of unique elements in a vector. \n\
    The function should accept a vector as an argument and return the number of unique\
    \ elements in the vector.", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    return collect(common)\nend", "    \n    common = Set()\n   \
    \ \n    for el1 in l1\n        for el2 in l2\n            if el1 == el2\n    \
    \            common = Set([el1, el2])\n            end\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    common\n\
    end", "    \n    common = Set()\n    \n    for el in l1 \u222A l2\n        if\
    \ !has(common, el)\n            common = Set([el])\n        else\n           \
    \ common = common \u222A Set([el])\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.3>", "    \n    common = Set()\n    for x in l1\n\
    \        push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n\
    \    end\n    \n    return sort(common)\nend", "    \n    common = Set()\n   \
    \ \n    for el in l1\n        common = union(common, Set(el))\n    end\n    \n\
    \    for el in l2\n        common = union(common, Set(el))\n    end\n    \n  \
    \  return common\nend", "    \n    common = Set()\n    \n    for x in l1\n   \
    \     push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    \n    for el in l1\n        if !contains(common, el)\n            common\
    \ = Set([el])\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        end\n    end\n    \n    return\
    \ common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        if x in l2\n \
    \           common.add(x)\n        end\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1 \u222A l2\n        if !common.issubset(Set([x]))\n            common =\
    \ Set([x]) \u222A common\n        end\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    \n    for el in l1 \u222A l2\n        if !has(common, el)\n   \
    \         common = Set([el])\n        else\n            common = common \u222A\
    \ Set([el])\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return collect(common)\nend", " \
    \   \n    common = Set()\n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n                break\n         \
    \   elseif common == Set()\n                common = Set([a])\n            elseif\
    \ common == Set()\n                common = Set([a])\n            elseif common\
    \ == Set()\n                common = Set([a])\n            elseif common == Set()\n\
    \                common = Set([a])\n            elseif common == Set()\n     \
    \           common = Set([a])\n            elseif common == Set()\n          \
    \      common = Set([a])\n            elseif common == Set()\n               \
    \ common = Set([a])\n            elseif common == Set()\n                common\
    \ = Set([a])\n            elseif common == Set()\n                common = Set([a])\n\
    \            elseif common == Set()\n                common = Set([a])\n     \
    \       elseif common == Set()\n                common = Set([a])\n          \
    \  elseif common == Set()\n                common = Set([a])\n            elseif\
    \ common == Set()\n                common = Set([a])\n            elseif common\
    \ == Set()\n                common = Set([a])\n            elseif common == Set()\n\
    \                common = Set([a])\n            elseif common == Set()\n     \
    \           common = Set([a])\n            elseif common == Set()\n          \
    \      common = Set([a])\n            elseif common == Set()\n               \
    \ common = Set([a])\n            elseif common == Set()\n                common\
    \ = Set([a])\n            elseif common == Set()\n                common = Set([a])\n\
    \            elseif common == Set()\n                common = Set([a])\n     \
    \       elseif common == Set()\n                common = Set([a])\n          \
    \  elseif common == Set()\n                common = Set([a])\n            elseif\
    \ common == Set()\n                common = Set([a])\n            elseif common\
    \ == Set()\n                common = Set([a])\n            elseif common == Set()\n\
    \                common = Set([a])\n            elseif common == Set()\n     \
    \           common = Set([a])\n            elseif common == Set()\n          \
    \      common = Set([a])\n            elseif common == Set()\n               \
    \ common = Set([a])\n            elseif common == Set()\n                common\
    \ = Set([a])\n            else", "    \n    common = Set()\n    \n    for el in\
    \ l1 \n        if !contains(common, el)\n            common = Set([el])\n    \
    \    else\n            common = Set([el]) | common\n        end\n    end\n   \
    \ \n    for el in l2\n        if !contains(common, el)\n            common = Set([el])\n\
    \        else\n            common = Set([el]) | common\n        end\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    \n    for elt in\
    \ l1 \n        push!(common, elt) \n    end\n    \n    for elt in l2 \n      \
    \  push!(common, elt) \n    end\n    \n    return sort(common)\nend", "    \n\
    \    common = Set()\n    for el in l1 \u222A l2\n        common = common \u222A\
    \ Set([el])\n    end\n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el]) |\
    \ common\n    end\n    \n    for el in l2\n        common = Set([el]) | common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el in l1\n        common = Set([el]) | common\n    end\n    \n    for el\
    \ in l2\n        common = Set([el]) | common\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for a in l1\n        for b in l2\n\
    \            if a == b\n                common = Set([a])\n            else\n\
    \                common = Set([a] ++ common)\n        end\n    end\n    \n   \
    \ return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common =\
    \ Set()\n    \n    for elt in l1\n        if elt in l2\n            common = Set([elt])\n\
    \        else\n            common = Set([elt] ++ common)\n        end\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for a in l1\n \
    \       for b in l2\n            if a == b\n                common.add(a)\n  \
    \          end\n        end\n    end\n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n    \n  \
    \  for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end", "    \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n\
    \            if el1 == el2\n                common = Set([el1])\n            \
    \    break\n            else\n                common = Set([el1]) \u222A common\n\
    \        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2,\
    \ 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n\
    </cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n\
    <code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time\
    \ common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5,\
    \ 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2,\
    \ 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n\
    </cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n\
    <code language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5>\n\
    @time common([5, 3, 2, 8], [3, 2])\n</cell>\n<code language=julia-1.5", "    \n\
    \    common = Set()\n    \n    for el in l1\n        push!(common, el)\n    end\n\
    \    \n    for el in l2\n        push!(common, el)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    \n    for el in l1 \n        push!(common,\
    \ el)\n    end\n    \n    for el in l2\n        push!(common, el)\n    end\n \
    \   \n    common\nend", "    \n    common = Set()\n    \n    for el in l1\n  \
    \      if !contains(common, el)\n            common = Set([el])\n        else\n\
    \            common = union(common, el)\n        end\n    end\n    \n    for el\
    \ in l2\n        if !contains(common, el)\n            common = Set([el])\n  \
    \      else\n            common = union(common, el)\n        end\n    end\n  \
    \  \n    return common\nend", "    \n    common = Set()\n    \n    for elt in\
    \ l1 \n        if !contains(common, elt) \n            common = Set([elt])\n \
    \       end\n    end\n    \n    for elt in l2 \n        if !contains(common, elt)\
    \ \n            common = Set([elt])\n        end\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for x in l1\n        if x in l2\n \
    \           common.add(x)\n        end\n    end\n    \n    return common\nend",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el]) &\
    \ common\n    end\n    \n    for el in l2\n        common = Set([el]) & common\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for a in l1\n        for b in l2\n            if a == b\n                common.add(a)\n\
    \            end\n        end\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for el in l1\n\
    \        if !contains(common, el)\n            common = Set([el])\n        end\n\
    \    end\n    \n    for el in l2\n        if !contains(common, el)\n         \
    \   common = Set([el])\n        end\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    common = Set()\n    \n    for x in l1\n\
    \        if x \u2209 common\n            common = Set([x])\n        else\n   \
    \         common = Set([x] \u222A common)\n        end\n    end\n    \n    for\
    \ x in l2\n        if x \u2209 common\n            common = Set([x])\n       \
    \ else\n            common = Set([x] \u222A common)\n        end\n    end\n  \
    \  \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n    common\
    \ = Set()\n    for elt in l1\n        if elt in l2\n            common = union(common,\
    \ elt)\n        end\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for i in l1\n        common.add(i)\n    end\n\
    \    \n    for i in l2\n        common.add(i)\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    \n    for i in l1\n        push!(common,\
    \ i)\n    end\n    \n    for i in l2\n        push!(common, i)\n    end\n    \n\
    \    return collect(common)\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    common = Set()\n    \n    for el in l1 \u222A l2\n        common += Set(el)\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return sort(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = union(common,\
    \ el)\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = union(common,\
    \ el)\n        end\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n\
    \        push!(common, x)\n    end\n    \n    return sort(common)\nend", "   \
    \ \n    common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</code>\n<|/ a tags=julia,set |>\n<| a tags=julia,set\
    \ |>\nThe answer by is correct, but I thought I'd add my own answer since I didn't\
    \ see it before.\n<code>\njulia> using Sets", "    \n    common = Set()\n    \n\
    \    for el in l1\n        common = common + Set([el])\n    end\n    \n    for\
    \ el in l2\n        common = common + Set([el])\n    end\n    \n    return common\n\
    end", "    \n    common = Set()\n    for x in l1 \u222A l2\n        if x \u2209\
    \ common\n            common = Set([x])\n        else\n            common = common\
    \ \u222A Set([x])\n        end\n    end\n    return common\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a value appears\
    \ in a vector. For example, common([1, 2, 3, 1, 2, 3], 2) returns 3.", "    \n\
    \    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n        \
    \    if el1 == el2\n                common = Set([el1])\n                break\n\
    \            else\n                common = Set([el1]) \u222A common\n       \
    \ end\n    end\n    \n    return common\nend", "    \n    common = Set()\n   \
    \ for el in l1\n        common = Set([el]) | common\n    end\n    for el in l2\n\
    \        common = Set([el]) | common\n    end\n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1\n        common.add(x)\n    end\n    for\
    \ x in l2\n        common.add(x)\n    end\n    common\nend", "    \n    common\
    \ = Set()\n    \n    for i in l1\n        common.add(i)\n    end\n    \n    for\
    \ i in l2\n        common.add(i)\n    end\n    \n    common\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    common = Set()\n    \n    for el in l1\n  \
    \      common = Set([el] + common)\n    end\n    \n    for el in l2\n        common\
    \ = Set([el] + common)\n    end\n    \n    return common\nend", "    \n    common\
    \ = Set()\n    \n    for el in l1 \n        common = Set([el] + common)\n    end\n\
    \    \n    for el in l2 \n        common = Set([el] + common)\n    end\n    \n\
    \    return common\nend", "    \n    common = Set()\n    \n    for el in l1 do\
    \ \n        if !contains(common, el) then \n            common = Set([el])\n \
    \       else \n            common = Set([el] ++ common)\n        end\n    end\n\
    \    \n    for el in l2 do \n        if !contains(common, el) then \n        \
    \    common = Set([el])\n        else \n            common = Set([el] ++ common)\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>\n\
    @time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n</cell>\n<code\
    \ language=julia-1.5>\n@time common([5, 3, 2, 8], [3, 2])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the common elements for two vectors sorted in\
    \ ascending order.", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend", "    \n    common = Set()\n    \n    for x in\
    \ l1\n        push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    \n    return collect(common)\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for i in l1\n\
    \        if !contains(common, i)\n            common = Set([i])\n        end\n\
    \    end\n    \n    for i in l2\n        if !contains(common, i)\n           \
    \ common = Set([i])\n        end\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for el in l1\
    \ do \n        common = common+Set(el)\n    end\n    \n    for el in l2 do \n\
    \        common = common+Set(el)\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for el1 in l1\n\
    \        for el2 in l2\n            if el1 == el2\n                common = common+[el1]\n\
    \            end\n        end\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    \n    for a in l1\n\
    \        for b in l2\n            if a == b\n                common = Set([a])\n\
    \                break\n            elseif common == Set()\n                common\
    \ = Set([a, b])\n            end\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    common\nend", "    \n    common = Set()\n    for x in\
    \ l1 do \n        common = common | Set(l2)\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for x in l1\n        push!(common, x)\n    end\n    \n    for x in l2\n   \
    \     push!(common, x)\n    end\n    \n    common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        common = Set([x] + common)\n    end\n    for x in l2\n\
    \        common = Set([x] + common)\n    end\n    return common\nend", "    \n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in l1 do \n        common.add(x)\n   \
    \ end\n    for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set()\n    for x in l1 do \n     \
    \   common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in l1 do \n        common.add(x)\n   \
    \ end\n    for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set()\n    for x in l1 do \n     \
    \   common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n    for\
    \ x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n\
    \    end\n    common = Set()\n    for x in l1 do \n        common.add(x)\n   \
    \ end\n    for x in l2 do \n        common.add(x)\n    end\n    common = Set()\n\
    \    for x in l1 do \n        common.add(x)\n    end\n    for x in l2 do \n  \
    \      common.add(x)\n    end\n    common = Set()\n    for x in l1 do \n     \
    \   common.add(x)\n    end\n    for x in l2 do \n        common.add(x)\n    end\n\
    \    common = Set()\n    for x in l1 do \n        common.add(x)\n    end\n   \
    \ for x in l2 do \n        common.add(x)\n", "    \n    common = Set()\n    for\
    \ x in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el1 in l1\n        for el2 in l2\n    \
    \        if el1 == el2\n                common = Set([el1])\n                break\n\
    \            end\n        end\n    end\n    \n    return common\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    common = Set()\n    for x in l1\n     \
    \   push!(common, x)\n    end\n    for x in l2\n        push!(common, x)\n   \
    \ end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    common = Set()\n    \n    for el in l1\n        common = Set([el]) |\
    \ common\n    end\n    \n    for el in l2\n        common = Set([el]) | common\n\
    \    end\n    \n    return Set([el for el in common if el in l1])\nend", "   \
    \ \n    common = Set()\n    \n    for el in l1\n        if !contains(common, el)\n\
    \            common = Set([el])\n        end\n    end\n    \n    for el in l2\n\
    \        if !contains(common, el)\n            common = Set([el])\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for elt in l1 do \n        if elt in l2 \n            common = Set([elt, common])\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    \n    for el in l1\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    \n    for el in l2\n        if !contains(common,\
    \ el)\n            common = Set([el])\n        else\n            common = Set([el]\
    \ ++ common)\n        end\n    end\n    \n    return common\nend", "    \n   \
    \ common = Set()\n    \n    for a in l1\n        for b in l2\n            if a\
    \ == b\n                common.add(a)\n            end\n        end\n    end\n\
    \    \n    return common\nend", "    \n    common = Set()\n    for el in l1 \u222A\
    \ l2\n        common = common \u222A Set([el])\n    end\n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2]) == [2, 3]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of unique\
    \ elements in a vector. \nFor example, common([5, 3, 2, 8], [3, 2]) should return\
    \ 2."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
