name: HumanEval_58_common
language: jl
prompt: "\"\"\"Return sorted unique common elements for two vectors.\n    >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5,\
  \ 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\nfunction common(l1::Vector{Int64},\
  \ l2::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = common;\n\t@test(candidate([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653])\n\t@test(candidate([5,\
  \ 3, 2, 8], [3, 2]) == [2, 3])\n\t@test(candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
  \ 3, 4])\n\t@test(candidate([4, 3, 2, 8], Vector{Int64}([])) == Vector{Int64}([]))\n\
  end\n"
completions: ["    \n    common = Set()\n    for x in l1\n        push!(common, x)\n\
    \    end\n    for x in l2\n        push!(common, x)\n    end\n    common\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n    for\
    \ a in l1\n        for b in l2\n            if a == b\n                common\
    \ = Set([a])\n            else\n                common = Set([a] ++ common)\n\
    \        end\n    end\n    \n    return common\nend", "    \n    common = Set()\n\
    \    \n    for el1 in l1\n        for el2 in l2\n            if el1 == el2\n \
    \               common = Set([el1, el2])\n            end\n        end\n    end\n\
    \    \n    return common\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  common = Set()\n    \n    for elt in l1 \n        push!(common, elt) \n   \
    \ end\n    \n    for elt in l2 \n        push!(common, elt) \n    end\n    \n\
    \    return sort(common)\nend", "    \n    common = Set()\n    \n    for el in\
    \ l1\n        push!(common, el)\n    end\n    \n    for el in l2\n        push!(common,\
    \ el)\n    end\n    \n    return collect(common)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        push!(common, x)\n    end\n    for x in l2\n        push!(common,\
    \ x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   common = Set()\n    \n    for x in l1\n        push!(common, x)\n    end\n\
    \    \n    for x in l2\n        push!(common, x)\n    end\n    \n    return sort(common)\n\
    end\n</cell>\n<code language=julia-1.5>\n@test common([1, 4, 3, 34, 653, 2, 5],\
    \ [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n@test common([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in two vectors.", "    \n    common = Set()\n\
    \    for x in l1\n        push!(common, x)\n    end\n    for x in l2\n       \
    \ push!(common, x)\n    end\n    common\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    return collect(common)\n\
    end", "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n \
    \   end\n    for x in l2\n        push!(common, x)\n    end\n    \n    return\
    \ collect(common)\nend", "    \n    common = Set()\n    \n    for x in l1\n  \
    \      push!(common, x)\n    end\n    \n    for x in l2\n        push!(common,\
    \ x)\n    end\n    \n    return common\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    common = Set()\n    for x in l1\n        push!(common, x)\n    end\n\
    \    for x in l2\n        push!(common, x)\n    end\n    \n    common\nend\n</cell>\n\
    <code language=julia-1.5>\n@time common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
    \ 9, 653, 121])\n</cell>\n<code language=julia-1.5>\n@time common([5, 3, 2, 8],\
    \ [3, 2])\n</cell>\n<text>\nExercise: Write a function that returns the common\
    \ elements for two vectors of strings. \nHint: Use a set and push!", "    \n \
    \   common = Set()\n    \n    for a in l1\n        for b in l2\n            if\
    \ a == b\n                common = Set([a])\n            else\n              \
    \  common = Set([a] ++ common)\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for elt\
    \ in l1 \n        if elt in l2 \n            common = Set([elt])\n        end\n\
    \    end\n    return common\nend", "    \n    common = Set()\n    \n    for elt\
    \ in l1\n        if elt in l2\n            common = common+[elt]\n        end\n\
    \    end\n    \n    return common\nend", "    \n    common = Set()\n    \n   \
    \ for el1 in l1\n        for el2 in l2\n            if el1 == el2\n          \
    \      common = Set([el1])\n            else\n                common = Set([el1])\
    \ \u222A common\n            end\n        end\n    end\n    \n    return common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    \n  \
    \  for el in l1 do \n        common = Set([el] + common)\n    end\n    \n    for\
    \ el in l2 do \n        common = Set([el] + common)\n    end\n    \n    return\
    \ common\nend", "    \n    common = Set()\n    for x in l1\n        push!(common,\
    \ x)\n    end\n    for x in l2\n        push!(common, x)\n    end\n    common\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    common = Set()\n    for x\
    \ in l1\n        common = Set([x] ++ common)\n    end\n    for x in l2\n     \
    \   common = Set([x] ++ common)\n    end\n    return Set([x for x in common if\
    \ x != 0])\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
