language: jl
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpig6gbyv1.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpig6gbyv1.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpig6gbyv1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpig6gbyv1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpig6gbyv1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpig6gbyv1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpig6gbyv1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpig6gbyv1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpig6gbyv1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpig6gbyv1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpig6gbyv1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i, j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbi6yjxi8.jl:23\nin expression starting at\
    \ /tmp/tmpbi6yjxi8.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_position(i,\
    \ 1) - car_position(j, 1)) > car_speed\n                    collisions += 1\n\
    \                end\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp207umliv.jl:25\nin expression starting at\
    \ /tmp/tmp207umliv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3wwgded.jl:23\nin expression starting at\
    \ /tmp/tmpx3wwgded.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3uay6gb9.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp3uay6gb9.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3uay6gb9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3uay6gb9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3uay6gb9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3uay6gb9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3uay6gb9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3uay6gb9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3uay6gb9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3uay6gb9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3uay6gb9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3uay6gb9.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp3uay6gb9.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3uay6gb9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3uay6gb9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3uay6gb9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3uay6gb9.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3uay6gb9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3uay6gb9.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3uay6gb9.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3uay6gb9.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp3uay6gb9.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp3uay6gb9.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise\nWrite a function called car_race_collisions that takes\
    \ as input a vector of n cars, and outputs the number of cars that collide with\
    \ each other.  It should use the car_race_collision function you defined earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6tw8vqu2.jl:23\nin expression starting at\
    \ /tmp/tmp6tw8vqu2.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4e29pmv7.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp4e29pmv7.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e29pmv7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e29pmv7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4e29pmv7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e29pmv7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e29pmv7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4e29pmv7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e29pmv7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e29pmv7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4e29pmv7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcy5mv4fx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcy5mv4fx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmphax6d.jl:23\nin expression starting at\
    \ /tmp/tmpdmphax6d.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3wwgded.jl:23\nin expression starting at\
    \ /tmp/tmpx3wwgded.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnte1txxf.jl:23\nin expression starting at\
    \ /tmp/tmpnte1txxf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcy5mv4fx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcy5mv4fx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide::Int64 = 0\n\
    \    for j in 1:n\n        for i in 1:n\n            if i != j\n             \
    \   collide = collide + 1\n    return collide\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx87uuniz.jl:20\nin expression starting at\
    \ /tmp/tmpx87uuniz.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_check(i,j)\
    \ returns true if the cars at indices i and j collide.\n    car_race_collision_check(i,j)\
    \ returns false if the cars at indices i and j do not collide.\n    car_race_collision_check(i,j)\
    \ returns false if the cars at indices i and j do not collide.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpb3h9w0us.jl:23\nin expression starting at /tmp/tmpb3h9w0us.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1idg7dp8.jl:23\nin expression starting at\
    \ /tmp/tmp1idg7dp8.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide::Int64 = 0\n\
    \    for i = 1:n\n        for j = 1:n\n            if i != j\n               \
    \ if car_collision(i - 1, j) == car_collision(i, j - 1)\n                    collide\
    \ += 1\n                end\n            end\n        end\n    end\n    return\
    \ collide\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5w05zbkn.jl:25\nin expression starting at\
    \ /tmp/tmp5w05zbkn.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbgel716.jl:23\nin expression starting at\
    \ /tmp/tmpcbgel716.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavu8hbfl.jl:23\nin expression starting at\
    \ /tmp/tmpavu8hbfl.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe9q55e4.jl:23\nin expression starting at\
    \ /tmp/tmpfe9q55e4.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3wwgded.jl:23\nin expression starting at\
    \ /tmp/tmpx3wwgded.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mlhfto0.jl:23\nin expression starting at\
    \ /tmp/tmp1mlhfto0.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg61xn0bz.jl:23\nin expression starting at\
    \ /tmp/tmpg61xn0bz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg61xn0bz.jl:23\nin expression starting at\
    \ /tmp/tmpg61xn0bz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_helper(i,\
    \ j) returns true if the cars at indices i and j collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if cars at indices i and j are the same car.\n    car_race_collision_helper(i,\
    \ j) returns false if cars at indices i and j are the same car.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_n_iksrs.jl:23\nin expression starting at /tmp/tmp_n_iksrs.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j, i)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74k4m6c1.jl:23\nin expression starting at\
    \ /tmp/tmp74k4m6c1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if car_collision(i)\
    \ == car_collision(j)\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp09d3txn8.jl:25\nin expression starting at\
    \ /tmp/tmp09d3txn8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmphax6d.jl:23\nin expression starting at\
    \ /tmp/tmpdmphax6d.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_7k6wr5.jl:23\nin expression starting at\
    \ /tmp/tmpw_7k6wr5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i - 1, j - 1) ||\
    \ car_collision(i, j - 1)\n                collisions += 1\n            end\n\
    \        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3r13tnjj.jl:23\nin expression starting at\
    \ /tmp/tmp3r13tnjj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) == car_collision(j)\n\
    \                collide += 1\n            end\n        end\n    end\n    return\
    \ collide\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqkh11h4.jl:23\nin expression starting at\
    \ /tmp/tmpcqkh11h4.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbgel716.jl:23\nin expression starting at\
    \ /tmp/tmpcbgel716.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(@car_position(i),\
    \ @car_position(j))\n                collisions += 1\n            end\n      \
    \  end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @car_position not defined\nStacktrace:\n\
    \ [1] top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmp26v292nv.jl:1\nin\
    \ expression starting at /tmp/tmp26v292nv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j, i)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidthc0d3.jl:23\nin expression starting at\
    \ /tmp/tmpidthc0d3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j, i)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise: Write a function called car_collision that takes two integers i and\
    \ j as arguments and returns true if the cars at indices i and j collide, false\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5s02gmf3.jl:23\nin expression starting at\
    \ /tmp/tmp5s02gmf3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmphax6d.jl:23\nin expression starting at\
    \ /tmp/tmpdmphax6d.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx77l5ra.jl:23\nin expression starting at\
    \ /tmp/tmpcx77l5ra.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_helper(i,\
    \ j) returns true if the cars at indices i and j collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n    car_race_collision\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g_sig5n.jl:23\nin expression starting at\
    \ /tmp/tmp8g_sig5n.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide in a race.  (Hint: You might want to use the car_race_collision\
    \ function you defined earlier.)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwq5j0ag.jl:23\nin expression starting at\
    \ /tmp/tmpkwq5j0ag.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\n@time car_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of cars that\
    \ collide with each other in a race car race.  Your function should take in two\
    \ parameters: the total number of cars in the race and the number of cars already\
    \ in the race.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswc7k75i.jl:23\nin expression starting at\
    \ /tmp/tmpswc7k75i.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_4n1sjt.jl:23\nin expression starting at\
    \ /tmp/tmp8_4n1sjt.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_distance(i,j))\
    \ < car_distance(i,j+1)\n                    collisions += 1\n               \
    \ end\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5gikxog.jl:25\nin expression starting at\
    \ /tmp/tmp_5gikxog.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collides += 1\n            end\n        end\n    end\n\
    \    return collides\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmph29pa7qg.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmph29pa7qg.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph29pa7qg.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph29pa7qg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph29pa7qg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph29pa7qg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph29pa7qg.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph29pa7qg.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph29pa7qg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph29pa7qg.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph29pa7qg.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph29pa7qg.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph29pa7qg.jl:27\ntest set:\
    \ Error During Test at /tmp/tmph29pa7qg.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmph29pa7qg.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collide = collide + 1\n            end\n        end\n\
    \    end\n    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpvc8n7_yo.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpvc8n7_yo.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpvc8n7_yo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvc8n7_yo.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvc8n7_yo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvc8n7_yo.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpvc8n7_yo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvc8n7_yo.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvc8n7_yo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvc8n7_yo.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpvc8n7_yo.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvc8n7_yo.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvc8n7_yo.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpvc8n7_yo.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpvc8n7_yo.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbgel716.jl:23\nin expression starting at\
    \ /tmp/tmpcbgel716.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwl5d_7lu.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpwl5d_7lu.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw13xcoz.jl:23\nin expression starting at\
    \ /tmp/tmphw13xcoz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9f7syz3.jl:23\nin expression starting at\
    \ /tmp/tmpg9f7syz3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j, i)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74k4m6c1.jl:23\nin expression starting at\
    \ /tmp/tmp74k4m6c1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwl5d_7lu.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpwl5d_7lu.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcy5mv4fx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcy5mv4fx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f3dw7z6.jl:23\nin expression starting at\
    \ /tmp/tmp1f3dw7z6.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3symwzy.jl:23\nin expression starting at\
    \ /tmp/tmpa3symwzy.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise: Write a function called car_collision that takes two cars as inputs\
    \ and returns true if the two cars collide, false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2xypcva.jl:23\nin expression starting at\
    \ /tmp/tmpw2xypcva.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide::Int64 = 0\n\
    \    for i = 1:n\n        for j = 1:n\n            if i != j\n               \
    \ if abs(car_position(i, j) - car_position(j, i)) < car_speed\n              \
    \      collide += 1\n                end\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps21b7mdk.jl:25\nin expression starting at\
    \ /tmp/tmps21b7mdk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_7k6wr5.jl:23\nin expression starting at\
    \ /tmp/tmpw_7k6wr5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1idg7dp8.jl:23\nin expression starting at\
    \ /tmp/tmp1idg7dp8.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouk9w1f6.jl:23\nin expression starting at\
    \ /tmp/tmpouk9w1f6.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ \n                collisions += 1\n            end\n        end\n    end\n \
    \   return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplyvf29df.jl:23\nin expression starting at\
    \ /tmp/tmplyvf29df.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_helper(i,\
    \ j) returns true if the cars at indices i and j collide.\n    car_race_collision_helper(i,\
    \ j) returns false if the cars at indices i and j do not collide.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpx2jfip11.jl:23\nin expression starting at /tmp/tmpx2jfip11.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that determines whether two cars collide\
    \ in any way (including in opposite directions).\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3ywymc4.jl:23\nin expression starting at\
    \ /tmp/tmpd3ywymc4.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ \n                collisions += 1\n            end\n        end\n    end\n \
    \   return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplyvf29df.jl:23\nin expression starting at\
    \ /tmp/tmplyvf29df.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mpxnvzo.jl:23\nin expression starting at\
    \ /tmp/tmp0mpxnvzo.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_distance(i,\
    \ j)) < car_distance(i, j)\n                    collisions += 1\n            \
    \    end\n            end\n        end\n    end\n    return collisions\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxa__tre.jl:25\nin expression starting at\
    \ /tmp/tmpaxa__tre.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\n@time car_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ colliding with each other in a race car game.\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ge3x92p.jl:23\nin expression starting at\
    \ /tmp/tmp9ge3x92p.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmphax6d.jl:23\nin expression starting at\
    \ /tmp/tmpdmphax6d.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ then \n                collisions += 1\n            end\n        end\n    end\n\
    \    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp7w950y42.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp7w950y42.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7w950y42.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7w950y42.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w950y42.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7w950y42.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7w950y42.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7w950y42.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w950y42.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7w950y42.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7w950y42.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7w950y42.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7w950y42.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp7w950y42.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp7w950y42.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(j) && car_collision(i)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a8qf_z1.jl:23\nin expression starting at\
    \ /tmp/tmp3a8qf_z1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of cars that collide with each\
    \ other in a race.  (The function should take two arguments: the number of cars\
    \ to test and the number of cars to test against.)\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wdich6z.jl:23\nin expression starting at\
    \ /tmp/tmp6wdich6z.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbgel716.jl:23\nin expression starting at\
    \ /tmp/tmpcbgel716.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwl5d_7lu.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpwl5d_7lu.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavu8hbfl.jl:23\nin expression starting at\
    \ /tmp/tmpavu8hbfl.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatq7ulvz.jl:23\nin expression starting at\
    \ /tmp/tmpatq7ulvz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0vx6x16.jl:23\nin expression starting at\
    \ /tmp/tmpp0vx6x16.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3wwgded.jl:23\nin expression starting at\
    \ /tmp/tmpx3wwgded.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the time it takes\
    \ to drive n cars through a race car crash scenario.\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp763nzx.jl:23\nin expression starting at\
    \ /tmp/tmpkp763nzx.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0vx6x16.jl:23\nin expression starting at\
    \ /tmp/tmpp0vx6x16.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpig6gbyv1.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpig6gbyv1.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpig6gbyv1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpig6gbyv1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpig6gbyv1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpig6gbyv1.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpig6gbyv1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpig6gbyv1.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpig6gbyv1.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpig6gbyv1.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpig6gbyv1.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpig6gbyv1.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4e29pmv7.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp4e29pmv7.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e29pmv7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e29pmv7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4e29pmv7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e29pmv7.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e29pmv7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4e29pmv7.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4e29pmv7.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4e29pmv7.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp4e29pmv7.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp4e29pmv7.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0si4xu3q.jl:23\nin expression starting at\
    \ /tmp/tmp0si4xu3q.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide += 1\n            end\n        end\n    end\n    return\
    \ collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hv7y5_7.jl:23\nin expression starting at\
    \ /tmp/tmp1hv7y5_7.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4udkcqw.jl:23\nin expression starting at\
    \ /tmp/tmpr4udkcqw.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4udkcqw.jl:23\nin expression starting at\
    \ /tmp/tmpr4udkcqw.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn9eskbp.jl:23\nin expression starting at\
    \ /tmp/tmpkn9eskbp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collides = collides + 1\n            end\n        end\n\
    \    end\n    return collides\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp5al4x2xa.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp5al4x2xa.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5al4x2xa.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5al4x2xa.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5al4x2xa.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5al4x2xa.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5al4x2xa.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5al4x2xa.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5al4x2xa.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5al4x2xa.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5al4x2xa.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5al4x2xa.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5al4x2xa.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp5al4x2xa.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp5al4x2xa.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates the number of cars\
    \ that collide in a race.  It should take in two parameters: the speed of the\
    \ cars and the distance between them.  It should return an integer that is the\
    \ number of cars that collide in a race.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jj9bh89.jl:23\nin expression starting at\
    \ /tmp/tmp4jj9bh89.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i - 1, j - 1) ||\
    \ car_collision(i, j - 1)\n                collisions += 1\n            end\n\
    \        end\n    end\n    return collisions\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoifo0vqc.jl:23\nin expression starting at\
    \ /tmp/tmpoifo0vqc.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.0>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of cars that\
    \ collide with each other in a race.  (The function should take two integer arguments:\
    \ the number of cars in the first set and the number of cars in the second set.)\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7f00v2ix.jl:23\nin expression starting at\
    \ /tmp/tmp7f00v2ix.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6nq2gfjy.jl:23\nin expression starting at\
    \ /tmp/tmp6nq2gfjy.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_speed(i,\
    \ j)) < car_speed(i, j+1)\n                    collisions += 1\n             \
    \   end\n            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_lzpgh0.jl:25\nin expression starting at\
    \ /tmp/tmpn_lzpgh0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_position(i,\
    \ 1) - car_position(j, 1)) < car_speed\n                    collisions += 1\n\
    \                end\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5jrpzdt.jl:25\nin expression starting at\
    \ /tmp/tmpe5jrpzdt.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_x_position(i)\
    \ - car_x_position(j)) < car_width + car_length\n                    if car_y_position(i)\
    \ > car_y_position(j)\n                        collisions += 1\n             \
    \       else\n                        collisions += 1\n                end\n \
    \           end\n        end\n    end\n    return collisions\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumnk_84a.jl:28\nin expression starting at\
    \ /tmp/tmpumnk_84a.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpw5jx7vhc.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpw5jx7vhc.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jx7vhc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jx7vhc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw5jx7vhc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jx7vhc.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jx7vhc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw5jx7vhc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jx7vhc.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jx7vhc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw5jx7vhc.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpw9ou33xz.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpw9ou33xz.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9ou33xz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9ou33xz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw9ou33xz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9ou33xz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9ou33xz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw9ou33xz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9ou33xz.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9ou33xz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw9ou33xz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i,j)\n        \
    \        collides += 1\n            end\n        end\n    end\n    return collides\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd2ruddb.jl:23\nin expression starting at\
    \ /tmp/tmptd2ruddb.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collide += 1\n            end\n        end\n    end\n\
    \    return collide\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpuvq2xz1o.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpuvq2xz1o.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpuvq2xz1o.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvq2xz1o.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvq2xz1o.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuvq2xz1o.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpuvq2xz1o.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvq2xz1o.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvq2xz1o.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuvq2xz1o.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpuvq2xz1o.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvq2xz1o.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvq2xz1o.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpuvq2xz1o.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpuvq2xz1o.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3wwgded.jl:23\nin expression starting at\
    \ /tmp/tmpx3wwgded.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrd50du5.jl:23\nin expression starting at\
    \ /tmp/tmpgrd50du5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_speed(i,\
    \ j)) > car_speed(i, j + 1) \n                    collisions += 1\n          \
    \      end\n            end\n        end\n    end\n    return collisions\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdadmbbux.jl:25\nin expression starting at\
    \ /tmp/tmpdadmbbux.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if abs(car_distance(i,\
    \ j)) < car_distance(i, j+1)\n                    collisions += 1\n          \
    \      end\n            end\n        end\n    end\n    return collisions\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbb2muyd2.jl:25\nin expression starting at\
    \ /tmp/tmpbb2muyd2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions = collisions + 1\n            end\n    \
    \    end\n    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\n\
    candidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp0a53_lx3.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp0a53_lx3.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0a53_lx3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0a53_lx3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0a53_lx3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0a53_lx3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0a53_lx3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0a53_lx3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0a53_lx3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0a53_lx3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0a53_lx3.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0a53_lx3.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0a53_lx3.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp0a53_lx3.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp0a53_lx3.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collides = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\n\
    \                collides += 1\n            end\n        end\n    end\n    return\
    \ collides\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpw5jx7vhc.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpw5jx7vhc.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jx7vhc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jx7vhc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw5jx7vhc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jx7vhc.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jx7vhc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw5jx7vhc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5jx7vhc.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5jx7vhc.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw5jx7vhc.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw5jx7vhc.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw13xcoz.jl:23\nin expression starting at\
    \ /tmp/tmphw13xcoz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6nq2gfjy.jl:23\nin expression starting at\
    \ /tmp/tmp6nq2gfjy.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\n\"\"\"\n    car_race_collision_helper(i,\
    \ j) returns true if the cars at indices i and j collide.\n    car_race_collision_helper(i,\
    \ j) returns false otherwise.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpxlqyn1yh.jl:23\nin expression starting at /tmp/tmpxlqyn1yh.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatq7ulvz.jl:23\nin expression starting at\
    \ /tmp/tmpatq7ulvz.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) then\n  \
    \              collisions = collisions + 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp246y8q_1.jl:23\nin expression starting at\
    \ /tmp/tmp246y8q_1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if car_collision(i\
    \ - 1, j) == car_collision(i, j - 1)\n                    collisions += 1\n  \
    \              end\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\ncar_race_collision(10)\n</cell>\n<text>\n\
    Exercise: Write a function that calculates the number of cars that collide in\
    \ a given number of iterations.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzho70ik9.jl:25\nin expression starting at\
    \ /tmp/tmpzho70ik9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_check(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpwl5d_7lu.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpwl5d_7lu.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_check not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_check not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwl5d_7lu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwl5d_7lu.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpwl5d_7lu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_check not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpwl5d_7lu.jl:16\n\
    \   [2] macro expansion\n  "
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcy5mv4fx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcy5mv4fx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collide += 1\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu83rrj9.jl:23\nin expression starting at\
    \ /tmp/tmpyu83rrj9.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1idg7dp8.jl:23\nin expression starting at\
    \ /tmp/tmp1idg7dp8.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhvdt2zj.jl:23\nin expression starting at\
    \ /tmp/tmpmhvdt2zj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collide += 1\n            end\n        end\n    end\n    return collide\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu83rrj9.jl:23\nin expression starting at\
    \ /tmp/tmpyu83rrj9.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j\n                if car_collision(i)\
    \ == car_collision(j)\n                    collisions += 1\n                end\n\
    \            end\n        end\n    end\n    return collisions\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklldqesh.jl:25\nin expression starting at\
    \ /tmp/tmpklldqesh.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.4>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that outputs the number of cars that\
    \ collide with each other in a race.  (The function should take two arguments,\
    \ n and m, where n is the number of cars in the first race and m is the number\
    \ of cars in the second race.)\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uafy_ni.jl:23\nin expression starting at\
    \ /tmp/tmp0uafy_ni.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = 1:n\n            if i != j && car_collision(i - 1,\
    \ j) && car_collision(i, j - 1)\n                collide += 1\n            end\n\
    \        end\n    end\n    return collide\nend\n</cell>\n<code language=julia-1.0>\n\
    car_race_collision(10)\n</cell>\n<text>\nExercise: Write a function called car_race_collisions\
    \ that takes a vector of n cars and outputs the number of collisions.\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcxe6i4c.jl:23\nin expression starting at\
    \ /tmp/tmpdcxe6i4c.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) \n      \
    \          collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3wwgded.jl:23\nin expression starting at\
    \ /tmp/tmpx3wwgded.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j)\n       \
    \         collisions += 1\n            end\n        end\n    end\n    return collisions\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_b1y4t1.jl:23\nin expression starting at\
    \ /tmp/tmpi_b1y4t1.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i,j) \n       \
    \         collide = collide + 1\n            end\n        end\n    end\n    return\
    \ collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01xx4ah3.jl:23\nin expression starting at\
    \ /tmp/tmp01xx4ah3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collide = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collide = collide + 1\n            end\n        end\n    end\n\
    \    return collide\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx77l5ra.jl:23\nin expression starting at\
    \ /tmp/tmpcx77l5ra.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ \n                collisions += 1\n            end\n        end\n    end\n \
    \   return collisions\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrzdp085.jl:23\nin expression starting at\
    \ /tmp/tmpsrzdp085.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkjdxoml.jl:1\nin expression starting at /tmp/tmpwkjdxoml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_test(i,j)\
    \ == true\n                collisions += 1\n            end\n        end\n   \
    \ end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpcy5mv4fx.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpcy5mv4fx.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_test not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_test not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcy5mv4fx.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcy5mv4fx.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpcy5mv4fx.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_test not defined\n \
    \ Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpcy5mv4fx.jl:16\n\
    \   [2] macro expansion\n     @"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpw9ou33xz.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmpw9ou33xz.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_collision not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9ou33xz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9ou33xz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw9ou33xz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9ou33xz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9ou33xz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw9ou33xz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9ou33xz.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9ou33xz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpw9ou33xz.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_collision not defined\n  Stacktrace:\n\
    \   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmpw9ou33xz.jl:16\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_race_collision_helper(i,\
    \ j) == true\n                collisions += 1\n            end\n        end\n\
    \    end\n    return collisions\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp533gm5vp.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp533gm5vp.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  UndefVarError: car_race_collision_helper not\
    \ defined\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp533gm5vp.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp533gm5vp.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp533gm5vp.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(8) == 64\n  UndefVarError: car_race_collision_helper not defined\n\
    \  Stacktrace:\n   [1] car_race_collision(n::Int64)\n     @ Main /tmp/tmp533gm5vp.jl:16\n\
    \   [2] macro expansio"
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i, j) == true\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r255goj.jl:23\nin expression starting at\
    \ /tmp/tmp7r255goj.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    collisions = 0\n    for\
    \ i = 1:n\n        for j = i+1:n\n            if car_collision(i) && car_collision(j)\n\
    \                collisions += 1\n            end\n        end\n    end\n    return\
    \ collisions\nend\n</cell>\n<code language=julia-1.3>\ncar_race_collision(10)\n\
    </cell>\n<text>\nExercise: Write a function that determines whether two cars collide\
    \ given their positions.\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuajc7pzt.jl:23\nin expression starting at\
    \ /tmp/tmpuajc7pzt.jl:23\n"
  stdout: ''
