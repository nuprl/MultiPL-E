language: jl
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4osmcfrg.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4osmcfrg.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error During Test at
    /tmp/tmp4osmcfrg.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpde9wboy0.jl:22\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpde9wboy0.jl:22 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error During Test at
    /tmp/tmpde9wboy0.jl:23\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:25\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaadk1tw.jl:19\nin expression starting at\
    \ /tmp/tmpsaadk1tw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaadk1tw.jl:19\nin expression starting at\
    \ /tmp/tmpsaadk1tw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pnf240k.jl:23\nin expression starting at\
    \ /tmp/tmp9pnf240k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factors_count[i] = factors[i]\n    end\n    return factors_count\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0qxy9n4.jl:19\nin expression starting at\
    \ /tmp/tmpp0qxy9n4.jl:19\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,factor)\
    \ in enumerate(factors)\n        factors_count[i] = factor_count[factor]\n   \
    \ end\n    factors_count\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpalklffjm.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpalklffjm.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpalklffjm.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpalklffjm.jl:23\ntest set: Error During Test at
    /tmp/tmpalklffjm.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpalklffjm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpalklffjm.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpalklffjm.jl:23\ntest set: Error
    During Test at /tmp/tmpalklffjm.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpalklffjm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpalklffjm.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpalklffjm.jl:23\ntest set: Error
    During Test at /tmp/tmpalklffjm.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpalklffjm.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpg35nhtfc.jl:27\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpg35nhtfc.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpg35nhtfc.jl:26\ntest set: Error During Test at
    /tmp/tmpg35nhtfc.jl:28\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35nhtfc.jl:28 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35nhtfc.jl:26\ntest set: Error
    During Test at /tmp/tmpg35nhtfc.jl:29\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35nhtfc.jl:29 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35nhtfc.jl:26\ntest set: Error
    During Test at /tmp/tmpg35nhtfc.jl:30\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factor\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7krmi2yi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7krmi2yi.jl:1\n\
    in expression starting at /tmp/tmp7krmi2yi.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpg35nhtfc.jl:27\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpg35nhtfc.jl:27 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpg35nhtfc.jl:26\ntest set: Error During Test at
    /tmp/tmpg35nhtfc.jl:28\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35nhtfc.jl:28 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35nhtfc.jl:26\ntest set: Error
    During Test at /tmp/tmpg35nhtfc.jl:29\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg35nhtfc.jl:29 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg35nhtfc.jl:26\ntest set: Error
    During Test at /tmp/tmpg35nhtfc.jl:30\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpg35nhtfc.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors.*ones(length(factors))\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2ogc2_7k.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp2ogc2_7k.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp2ogc2_7k.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp2ogc2_7k.jl:23\ntest set: Error During Test at
    /tmp/tmp2ogc2_7k.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp2ogc2_7k.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ogc2_7k.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ogc2_7k.jl:23\ntest set: Error
    During Test at /tmp/tmp2ogc2_7k.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp2ogc2_7k.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ogc2_7k.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ogc2_7k.jl:23\ntest set: Error
    During Test at /tmp/tmp2ogc2_7k.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp2ogc2_7k.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp4e_pub.jl:23\nin expression starting at\
    \ /tmp/tmpmp4e_pub.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpqo0qnx.jl:18\nin expression starting at\
    \ /tmp/tmpnpqo0qnx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = Vector{Int64}()\n    for factor in factorization\n\
    \        push!(factors, factor)\n    end\n    return factors\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd2unfyd.jl:19\nin expression starting at\
    \ /tmp/tmppd2unfyd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaobvtp6b.jl:17\nin expression starting at\
    \ /tmp/tmpaobvtp6b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pnf240k.jl:23\nin expression starting at\
    \ /tmp/tmp9pnf240k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = Vector{Int64}()\n    for factor in factorization\n\
    \        push!(factors, factor)\n    end\n    return factors\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\nfactorize(25)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns all prime factors of given integer in the order\
    \ from smallest to largest.\n    Input number should be equal to the product of\
    \ all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n  \
    \  [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxx4mdm_.jl:19\nin expression starting at\
    \ /tmp/tmpmxx4mdm_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36censk6.jl:18\nin expression starting at\
    \ /tmp/tmp36censk6.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppancpy2y.jl:18\nin expression starting at\
    \ /tmp/tmppancpy2y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,f) in\
    \ enumerate(factors)\n        factors_count[i] = factor_count[f]\n    end\n  \
    \  factors_count = sort(factors_count)\n    factors_count = factors_count[end:-1:1]\n\
    \    return factors_count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqku_ooy.jl:21\nin expression starting at\
    \ /tmp/tmpcqku_ooy.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1c6_iuw.jl:20\nin expression starting at\
    \ /tmp/tmpc1c6_iuw.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5yr7jh9.jl:69\nin expression starting at\
    \ /tmp/tmpo5yr7jh9.jl:69\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpde9wboy0.jl:22\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpde9wboy0.jl:22 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error During Test at
    /tmp/tmpde9wboy0.jl:23\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:25\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = zeros(Int, length(factors))\n    for factor in\
    \ factors\n        factor_counts[factor] += 1\n    end\n    factor_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpjkt_eb.jl:19\nin expression starting at\
    \ /tmp/tmpnpjkt_eb.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65da1pmp.jl:21\nin expression starting at\
    \ /tmp/tmp65da1pmp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2lptd6k.jl:17\nin expression starting at\
    \ /tmp/tmpr2lptd6k.jl:17\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = Vector{Int64}()\n    for factor in factorization\n\
    \        push!(factors, factor)\n    end\n    return factors\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.4>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.4>\nfactorize(25)\n</cell>\n<code language=julia-1.4>\n\
    factorize(70)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\n\
    For example, if the input vector is [4, 6, 2, 3], the function should return 50.\n\
    The input vector can be assumed to be non-empty.\nThe input vector will contain\
    \ only integers.\nThe input vector will be non-empty.\nThe input vector will contain\
    \ only integers.\nThe input vector will contain only integers.\nThe input vector\
    \ will contain only integers.\nThe input vector will contain only integers.\n\
    The input vector will contain only integers.\nThe input vector will contain only\
    \ integers.\nThe input vector will contain only integers.\nThe input vector will\
    \ contain only integers.\nThe input vector will contain only integers.\nThe input\
    \ vector will contain only integers.\nThe input vector will contain only integers.\n\
    The input vector will contain only integers.\nThe input vector will contain only\
    \ integers.\nThe input vector will contain only integers.\nThe input vector will\
    \ contain only integers.\nThe input vector will contain only integers.\nThe input\
    \ vector will contain only integers.\nThe input vector will contain only integers.\n\
    The input vector will contain only integers.\nThe input vector will contain only\
    \ integers.\nThe input vector will contain only integers.\nThe input vector will\
    \ contain only integers.\nThe input vector will contain only integers.\nThe input\
    \ vector will contain only integers.\nThe input vector will contain only integers.\n\
    The input vector will contain only integers.\nThe input vector will contain only\
    \ integers.\nThe input vector will contain only integers.\nThe input vector will\
    \ contain only integers.\nThe input vector will contain only integers.\nThe input\
    \ vector will contain only integers.\nThe input vector will contain only integers.\n\
    The input vector will contain only integers.\nThe input vector will contain only\
    \ integers.\nThe input vector will contain only \nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghr9z5li.jl:23\nin expression starting at\
    \ /tmp/tmpghr9z5li.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cjrin0a.jl:19\nin expression starting at\
    \ /tmp/tmp6cjrin0a.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9qr019s.jl:17\nin expression starting at\
    \ /tmp/tmpi9qr019s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2lptd6k.jl:17\nin expression starting at\
    \ /tmp/tmpr2lptd6k.jl:17\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors.*ones(length(factors))\n    return factors\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn81u7gdf.jl:19\nin expression starting at\
    \ /tmp/tmpn81u7gdf.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmp8v118j9_.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp8v118j9_.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp8v118j9_.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp8v118j9_.jl:23\ntest set: Error During Test at
    /tmp/tmp8v118j9_.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp8v118j9_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8v118j9_.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8v118j9_.jl:23\ntest set: Error
    During Test at /tmp/tmp8v118j9_.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp8v118j9_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8v118j9_.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8v118j9_.jl:23\ntest set: Error
    During Test at /tmp/tmp8v118j9_.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp8v118j9_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9cak229.jl:22\nin expression starting at\
    \ /tmp/tmpb9cak229.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_v4h5cz.jl:22\nin expression starting at\
    \ /tmp/tmpw_v4h5cz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpqo0qnx.jl:18\nin expression starting at\
    \ /tmp/tmpnpqo0qnx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_v4h5cz.jl:22\nin expression starting at\
    \ /tmp/tmpw_v4h5cz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4918knd.jl:22\nin expression starting at\
    \ /tmp/tmpo4918knd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[2])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by=x->x[3])\n    factor_counts = reverse(factor_counts)\n    factor_counts =\
    \ unique(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[4])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[5])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by=x->x[6])\n    factor_counts = reverse(factor_counts)\n    factor_counts =\
    \ unique(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[7])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[8])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by=x->x[9])\n    factor_counts = reverse(factor_counts)\n    factor_counts =\
    \ unique(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[10])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[11])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by=x->x[12])\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = unique(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[13])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[14])\n    factor_counts = reverse(factor_counts)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl9ov6ts0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl9ov6ts0.jl:1\n\
    in expression starting at /tmp/tmpl9ov6ts0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factors_count[i] = length(factors(i))\n    end\n    factors_count = factors_count\
    \ ./ sum(factors_count)\n    factors_count = sort(factors_count)\n    factors\
    \ = factors ./ factors_count\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mhhyuet.jl:22\nin expression starting at\
    \ /tmp/tmp0mhhyuet.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cjrin0a.jl:19\nin expression starting at\
    \ /tmp/tmp6cjrin0a.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4wa9odvv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4wa9odvv.jl:1\n\
    in expression starting at /tmp/tmp4wa9odvv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors.*ones(length(factors))\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65fj1aey.jl:19\nin expression starting at\
    \ /tmp/tmp65fj1aey.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factorization[factorization\
    \ .!= 1]\n    factorization = factorization[factorization .!= n]\n    factorization\
    \ = factorization[factorization .!= 0]\n    factorization = factor\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7krmi2yi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7krmi2yi.jl:1\n\
    in expression starting at /tmp/tmp7krmi2yi.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\n\
    Problem 2\nWrite a function that returns all prime factors of given integer in\
    \ the order from smallest to largest.\n    Input number should be equal to the\
    \ product of all factors\n    >>> prime_factorize(8)\n    [2, 2, 2]\n    >>> prime_factorize(25)\n\
    \    [5, 5]\n    >>> prime_factorize(70)\n    [2, 5, 7]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylp9_2mh.jl:22\nin expression starting at\
    \ /tmp/tmpylp9_2mh.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort!(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41ip52tv.jl:71\nin expression starting at\
    \ /tmp/tmp41ip52tv.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpde9wboy0.jl:22\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpde9wboy0.jl:22 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error During Test at
    /tmp/tmpde9wboy0.jl:23\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:25\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaadk1tw.jl:19\nin expression starting at\
    \ /tmp/tmpsaadk1tw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = Vector{Int64}()\n    for factor in factorization\n\
    \        push!(factors, factor)\n    end\n    return factors\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd2unfyd.jl:19\nin expression starting at\
    \ /tmp/tmppd2unfyd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpqo0qnx.jl:18\nin expression starting at\
    \ /tmp/tmpnpqo0qnx.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4osmcfrg.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4osmcfrg.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error During Test at
    /tmp/tmp4osmcfrg.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpde9wboy0.jl:22\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpde9wboy0.jl:22 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error During Test at
    /tmp/tmpde9wboy0.jl:23\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:25\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2lptd6k.jl:17\nin expression starting at\
    \ /tmp/tmpr2lptd6k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_v4h5cz.jl:22\nin expression starting at\
    \ /tmp/tmpw_v4h5cz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaadk1tw.jl:19\nin expression starting at\
    \ /tmp/tmpsaadk1tw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    sorted_factor_counts\
    \ = sort(collect(factor_counts))\n    sorted_factor_counts = reverse(sorted_factor_counts)\n\
    \    factors = collect(sorted_factor_counts)\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbyobi1t7.jl:22\nin expression starting at\
    \ /tmp/tmpbyobi1t7.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[factors != 1]\n    return factors\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp838yqw0m.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp838yqw0m.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp838yqw0m.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp838yqw0m.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp838yqw0m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp838yqw0m.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp838yqw0m.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp838yqw0m.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp838yqw0m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp838yqw0m.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp838yqw0m.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp838yqw0m.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp838yqw0m.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp838yqw0m.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp838yqw0m.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = factor_count[i] + factors[i]\n    end\n    factor_count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3anpkk0.jl:19\nin expression starting at\
    \ /tmp/tmpo3anpkk0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppancpy2y.jl:18\nin expression starting at\
    \ /tmp/tmppancpy2y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaadk1tw.jl:19\nin expression starting at\
    \ /tmp/tmpsaadk1tw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9qr019s.jl:17\nin expression starting at\
    \ /tmp/tmpi9qr019s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,f) in\
    \ enumerate(factors)\n        factors_count[i] = factors[f]\n    end\n    return\
    \ factors_count\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxiao9eeq.jl:19\nin expression starting at\
    \ /tmp/tmpxiao9eeq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_2vz74d.jl:18\nin expression starting at\
    \ /tmp/tmph_2vz74d.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4osmcfrg.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4osmcfrg.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error During Test at
    /tmp/tmp4osmcfrg.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = factorization[factorization .!= 0]\n    return factorization\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5cibqcg.jl:18\nin expression starting at\
    \ /tmp/tmps5cibqcg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpde9wboy0.jl:22\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpde9wboy0.jl:22 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error During Test at
    /tmp/tmpde9wboy0.jl:23\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:23 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:24\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpde9wboy0.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpde9wboy0.jl:21\ntest set: Error
    During Test at /tmp/tmpde9wboy0.jl:25\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpde9wboy0.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_2vz74d.jl:18\nin expression starting at\
    \ /tmp/tmph_2vz74d.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39dkzfxb.jl:23\nin expression starting at\
    \ /tmp/tmp39dkzfxb.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,factor)\
    \ in enumerate(factors)\n        factors_count[i] = factors[factor]\n    end\n\
    \    return factors_count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9bxjxyf.jl:19\nin expression starting at\
    \ /tmp/tmpi9bxjxyf.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmiwmlsn9.jl:23\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:23 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error During Test at
    /tmp/tmpmiwmlsn9.jl:24\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:24 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:25\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmiwmlsn9.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmiwmlsn9.jl:22\ntest set: Error
    During Test at /tmp/tmpmiwmlsn9.jl:26\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmpmiwmlsn9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsaadk1tw.jl:19\nin expression starting at\
    \ /tmp/tmpsaadk1tw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = sort(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl35k01ey.jl:18\nin expression starting at\
    \ /tmp/tmpl35k01ey.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factors_count[i] = count(factors[i])\n    end\n    factors_count\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2r5kr8xc.jl:19\nin expression starting at\
    \ /tmp/tmp2r5kr8xc.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1bemtw3.jl:69\nin expression starting at\
    \ /tmp/tmpg1bemtw3.jl:69\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpm92y6ok3.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpm92y6ok3.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpm92y6ok3.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm92y6ok3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm92y6ok3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm92y6ok3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpm92y6ok3.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm92y6ok3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm92y6ok3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm92y6ok3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpm92y6ok3.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm92y6ok3.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm92y6ok3.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpm92y6ok3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpm92y6ok3.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_2vz74d.jl:18\nin expression starting at\
    \ /tmp/tmph_2vz74d.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factors_count[i] = factors[i]\n    end\n    factors_count = sort(factors_count)\n\
    \    return factors_count\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6a_aceyf.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp6a_aceyf.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6a_aceyf.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6a_aceyf.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6a_aceyf.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6a_aceyf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6a_aceyf.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6a_aceyf.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6a_aceyf.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6a_aceyf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6a_aceyf.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6a_aceyf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6a_aceyf.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp6a_aceyf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp6a_aceyf.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cjrin0a.jl:19\nin expression starting at\
    \ /tmp/tmp6cjrin0a.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_v4h5cz.jl:22\nin expression starting at\
    \ /tmp/tmpw_v4h5cz.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = []\n    for factor in factorization\n        if\
    \ factor == 1\n            factors\n        else\n            push!(factors, factor)\n\
    \        end\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r9j_759.jl:23\nin expression starting at\
    \ /tmp/tmp6r9j_759.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppancpy2y.jl:18\nin expression starting at\
    \ /tmp/tmppancpy2y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps34iriyz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps34iriyz.jl:1\n\
    in expression starting at /tmp/tmps34iriyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[2])\n    factor_counts =\
    \ reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by = x -> x[3])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by = x -> x[4])\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = unique(factor_counts)\n    factor_counts = sort(factor_counts, by = x -> x[5])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[6])\n    factor_counts =\
    \ reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by = x -> x[7])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by = x -> x[8])\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = unique(factor_counts)\n    factor_counts = sort(factor_counts, by = x -> x[9])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[10])\n    factor_counts =\
    \ reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by = x -> x[11])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = unique(factor_counts)\n    factor_counts = sort(factor_counts,\
    \ by = x -> x[12])\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = unique(factor_counts)\n    factor_counts = sort(factor_counts, by = x -> x[13])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = unique(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[14])\n    factor_counts =\
    \ reverse(factor_counts)\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplrwu_qjy.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplrwu_qjy.jl:1\n\
    in expression starting at /tmp/tmplrwu_qjy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4osmcfrg.jl:24\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4osmcfrg.jl:24 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error During Test at
    /tmp/tmp4osmcfrg.jl:25\n  Test threw exception\n  Expression: candidate(4) ==
    [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:25 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:26\n  Test threw exception\n  Expression: candidate(8)
    == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4osmcfrg.jl:26 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4osmcfrg.jl:23\ntest set: Error
    During Test at /tmp/tmp4osmcfrg.jl:27\n  Test threw exception\n  Expression: candidate(57)
    == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(n::Int64)\n     @
    Main /tmp/tmp4osmcfrg.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/'
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps__hen7e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps__hen7e.jl:1\n\
    in expression starting at /tmp/tmps__hen7e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg83prjv4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg83prjv4.jl:1\n\
    in expression starting at /tmp/tmpg83prjv4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym7d1mg_.jl:18\nin expression starting at\
    \ /tmp/tmpym7d1mg_.jl:18\n"
  stdout: ''
