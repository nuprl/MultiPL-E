language: jl
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        return sum(map(x\
    \ -> x * x, lst[1 : (end - 1)]))\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the product of the numbers in a given vector. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp565yna2c.jl:23\nin expression starting at\
    \ /tmp/tmp565yna2c.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns the product of the numbers\
    \ in the vector. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrjfx4z_.jl:29\nin expression starting at\
    \ /tmp/tmpjrjfx4z_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn91zjtq.jl:25\nin expression starting at\
    \ /tmp/tmprn91zjtq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i * i\n\
    \            else\n                sum += i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfl3umnl.jl:30\nin expression starting at\
    \ /tmp/tmpgfl3umnl.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qa9jhn_.jl:29\nin expression starting at\
    \ /tmp/tmp0qa9jhn_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhctk6i7.jl:25\nin expression starting at\
    \ /tmp/tmprhctk6i7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum \n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qrp78fu.jl:29\nin expression starting at\
    \ /tmp/tmp_qrp78fu.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if typeof(i) == Int\n                sum += i\n\
    \            elseif typeof(i) == Float64\n                sum += i * i\n     \
    \       else\n                throw(ArgumentError(\"Input vector must be of integer\
    \ or float type\"))\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite \nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6ddybg9.jl:32\nin expression starting at\
    \ /tmp/tmpm6ddybg9.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if i > 0\n            sum += i * i\n        else\n            sum\
    \ += i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewf7vagk.jl:1\nin expression starting at /tmp/tmpewf7vagk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhctk6i7.jl:25\nin expression starting at\
    \ /tmp/tmprhctk6i7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_0vqbil.jl:1\nin expression starting at /tmp/tmpo_0vqbil.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      end\n        end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbla2p6_d.jl:29\nin expression starting at\
    \ /tmp/tmpbla2p6_d.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    sum_of_squares(lst)\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsu1my0fk.jl:27\nin expression starting at\
    \ /tmp/tmpsu1my0fk.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe33f0w5.jl:29\nin expression starting at\
    \ /tmp/tmpwe33f0w5.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i\n         \
    \   else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the product of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplt07wtfz.jl:30\nin expression starting at\
    \ /tmp/tmplt07wtfz.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of the numbers in a vector. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8i3s0oo7.jl:25\nin expression starting at\
    \ /tmp/tmp8i3s0oo7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ofuricl.jl:29\nin expression starting at\
    \ /tmp/tmp4ofuricl.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mds_wkv.jl:29\nin expression starting at\
    \ /tmp/tmp7mds_wkv.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers in the list\
    \ that are odd. Ignore numbers that are negative or not integers.\nFor example,\
    \ given [3, -2, 7, 4], the function should return 50.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2b6kwmt.jl:28\nin expression starting at\
    \ /tmp/tmpw2b6kwmt.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 != 0\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6jg08ai.jl:28\nin expression starting at\
    \ /tmp/tmpp6jg08ai.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the input vector\
    \ that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaaonva_k.jl:25\nin expression starting at\
    \ /tmp/tmpaaonva_k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      end\n    end\n    return sum * sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx43ze4iv.jl:25\nin expression starting at\
    \ /tmp/tmpx43ze4iv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wsvc945.jl:25\nin expression starting at\
    \ /tmp/tmp6wsvc945.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhctk6i7.jl:25\nin expression starting at\
    \ /tmp/tmprhctk6i7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the squares of the numbers in the input vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6vloaq5.jl:29\nin expression starting at\
    \ /tmp/tmpw6vloaq5.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector\nthat are divisible by 7. Ignore\
    \ numbers that are not integers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmt4sh6xb.jl:30\nin expression starting at\
    \ /tmp/tmpmt4sh6xb.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpvsjgw1.jl:25\nin expression starting at\
    \ /tmp/tmpcpvsjgw1.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i > 0\n                sum += i * i \n\
    \            else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjpbwt3m.jl:29\nin expression starting at\
    \ /tmp/tmpvjpbwt3m.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_psoq4z.jl:25\nin expression starting at\
    \ /tmp/tmpv_psoq4z.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        return sum(map(x\
    \ -> x*x, lst[1 : (end-1)]))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in a given vector. \nIf the\
    \ vector is empty, return 1.\nIf the vector has one element, return that element.\n\
    If the vector has more than one element, return the product of the elements in\
    \ the vector.\nIgnore numbers that are negative or not integers.\nFor example,\
    \ the product of the vector [1,2,3] is 6. \nThe product of the vector [-1,2,3]\
    \ is -1. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ewj40aw.jl:23\nin expression starting at\
    \ /tmp/tmp_ewj40aw.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i*i\
    \ \n            else \n                sum += i \n        return sum \nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0fo4asr.jl:28\nin expression starting at\
    \ /tmp/tmpv0fo4asr.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int64)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the squares of the\
    \ numbers in a vector.\nThe input vector is assumed to be non-empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg2z6z_j.jl:26\nin expression starting at\
    \ /tmp/tmprg2z6z_j.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of numbers and returns\
    \ the product of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n\
    \    6\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    27\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqk9yw6_.jl:26\nin expression starting at\
    \ /tmp/tmphqk9yw6_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfm14yblp.jl:30\nin expression starting at\
    \ /tmp/tmpfm14yblp.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpof0p86y6.jl:27\nin expression starting at\
    \ /tmp/tmpof0p86y6.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the sum of the squares of the numbers in the input vector that are even.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tqzcd2f.jl:28\nin expression starting at\
    \ /tmp/tmp4tqzcd2f.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmn4c6ky.jl:25\nin expression starting at\
    \ /tmp/tmpjmn4c6ky.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_anscnfl.jl:26\nin expression starting at\
    \ /tmp/tmp_anscnfl.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if typeof(i) == Int\n                sum +=\
    \ i\n            else\n                sum += i * i\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that returns the sum of the\
    \ squares of the numbers in the vector that are odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf5eldrd.jl:29\nin expression starting at\
    \ /tmp/tmpuf5eldrd.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ number\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1_h2sl0.jl:26\nin expression starting at\
    \ /tmp/tmph1_h2sl0.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx919pjpx.jl:25\nin expression starting at\
    \ /tmp/tmpx919pjpx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn91zjtq.jl:25\nin expression starting at\
    \ /tmp/tmprn91zjtq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_0vqbil.jl:1\nin expression starting at /tmp/tmpo_0vqbil.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the sum\
    \ of the squares of the numbers in the vector that are odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60jb_89b.jl:28\nin expression starting at\
    \ /tmp/tmp60jb_89b.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25160pmu.jl:28\nin expression starting at\
    \ /tmp/tmp25160pmu.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i > 0\n                sum += i * i \n\
    \            else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_zg23s6.jl:29\nin expression starting at\
    \ /tmp/tmp3_zg23s6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      end\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector that are odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1dq0ecl.jl:29\nin expression starting at\
    \ /tmp/tmpw1dq0ecl.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        return sum(lst[i\
    \ : i + 2]) \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore number\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnl37cle.jl:22\nin expression starting at\
    \ /tmp/tmpgnl37cle.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mds_wkv.jl:29\nin expression starting at\
    \ /tmp/tmp7mds_wkv.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wsvc945.jl:25\nin expression starting at\
    \ /tmp/tmp6wsvc945.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0\n            sum += i\n  \
    \      else\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_p5hew8k.jl:27\nin expression starting at\
    \ /tmp/tmp_p5hew8k.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if i > 0\n            sum += i * i\n        else\n            sum\
    \ += i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewf7vagk.jl:1\nin expression starting at /tmp/tmpewf7vagk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhctk6i7.jl:25\nin expression starting at\
    \ /tmp/tmprhctk6i7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n\
    \        else\n            sum += i\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplawjf4bd.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplawjf4bd.jl:1\n\
    in expression starting at /tmp/tmplawjf4bd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a list of numbers and returns the product of all the numbers\
    \ in the list. \nIf any of the numbers in the list is negative, return 0.\nIf\
    \ all the numbers in the list are 0, return 1.\nIf the list has only one number,\
    \ return that number.\nIf the list has more than one number, raise a TypeError\
    \ exception.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2558bka.jl:25\nin expression starting at\
    \ /tmp/tmpi2558bka.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjlmo9on.jl:29\nin expression starting at\
    \ /tmp/tmpzjlmo9on.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the product of all the numbers in a given vector.\n\
    If the vector is empty, return 1.\nIf the vector has one element, return that\
    \ element.\nIf the vector has more than one element, return the product of the\
    \ elements in the vector.\nIf the vector has more than two elements, raise an\
    \ error.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9i3g_khh.jl:29\nin expression starting at\
    \ /tmp/tmp9i3g_khh.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqdqwzwp.jl:28\nin expression starting at\
    \ /tmp/tmpxqdqwzwp.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx919pjpx.jl:25\nin expression starting at\
    \ /tmp/tmpx919pjpx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda0zvdcf.jl:29\nin expression starting at\
    \ /tmp/tmpda0zvdcf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum \n  \
    \  end\nend\n</cell>\n<text>\nExercise: Write a function that returns the product\
    \ of the numbers in a vector. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnw88mkj_.jl:29\nin expression starting at\
    \ /tmp/tmpnw88mkj_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp73almtem.jl:25\nin expression starting at\
    \ /tmp/tmp73almtem.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i \n\
    \            else \n                continue \n        end \n        return sum\
    \ \n    end \nend \n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29u00m48.jl:30\nin expression starting at\
    \ /tmp/tmp29u00m48.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplggl4ud8.jl:29\nin expression starting at\
    \ /tmp/tmplggl4ud8.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dym_qmr.jl:26\nin expression starting at\
    \ /tmp/tmp8dym_qmr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, given [4, 3,\
    \ -2, 1], return 25.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ex7h_y5.jl:27\nin expression starting at\
    \ /tmp/tmp0ex7h_y5.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7h3ky6vm.jl:26\nin expression starting at\
    \ /tmp/tmp7h3ky6vm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgkarzc8.jl:25\nin expression starting at\
    \ /tmp/tmpsgkarzc8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in a given vector. \nIgnore numbers that are negative or not integers.\n\
    If the input vector is empty, return 1.\nIf the input vector is empty, return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9jthk9q.jl:27\nin expression starting at\
    \ /tmp/tmpu9jthk9q.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcdzc1box.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpcdzc1box.jl:31\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcdzc1box.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdzc1box.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdzc1box.jl:34\n  Expression: candidate([-1.0, -2.0, 8.0])\
    \ == 0\n   Evaluated: -1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdzc1box.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdzc1box.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdzc1box.jl:35\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdzc1box.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdzc1box.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpcdzc1box.jl:36\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 0 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcdzc1box.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcdzc1box.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfr83ruu.jl:25\nin expression starting at\
    \ /tmp/tmptfr83ruu.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ numbers in the input vector\nthat are less than or equal to 100. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdl_4jy2.jl:26\nin expression starting at\
    \ /tmp/tmprdl_4jy2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore number\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_ivu7js.jl:29\nin expression starting at\
    \ /tmp/tmpk_ivu7js.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqtj3jvc2.jl:25\nin expression starting at\
    \ /tmp/tmpqtj3jvc2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0\n            sum += i*i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the input vector\n\
    that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ sum_squares_odd([1, 3, 2, 0])\n    10\n    >>> sum_squares_odd([-1, -2, 0])\n\
    \    0\n    >>> sum_squares_odd([9, -2])\n    81\n    >>> sum_squares_odd([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpat0in9hp.jl:25\nin expression starting at\
    \ /tmp/tmpat0in9hp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpow1gmup5.jl:25\nin expression starting at\
    \ /tmp/tmpow1gmup5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a vector of numbers and returns the product of\
    \ the numbers in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\nFor example, given [4, 6, -2, 3], return 24.\nAssume that the\
    \ input vector is non-empty and contains only numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5of97jaa.jl:29\nin expression starting at\
    \ /tmp/tmp5of97jaa.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1edspx05.jl:25\nin expression starting at\
    \ /tmp/tmp1edspx05.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7h3ky6vm.jl:26\nin expression starting at\
    \ /tmp/tmp7h3ky6vm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers in the list that\
    \ are odd. Ignore numbers that are negative or not integers.\nFor example, given\
    \ [4, 6, -2, 3], your function should return 50.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk645fhtw.jl:30\nin expression starting at\
    \ /tmp/tmpk645fhtw.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1ck7wq3.jl:27\nin expression starting at\
    \ /tmp/tmpq1ck7wq3.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2: Write a function that returns the product\
    \ of all the numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2pqs20nv.jl:28\nin expression starting at\
    \ /tmp/tmp2pqs20nv.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wsvc945.jl:25\nin expression starting at\
    \ /tmp/tmp6wsvc945.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0qy7txf.jl:29\nin expression starting at\
    \ /tmp/tmpt0qy7txf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn91zjtq.jl:25\nin expression starting at\
    \ /tmp/tmprn91zjtq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpvp5xnh5o.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpvp5xnh5o.jl:33\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 41 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvp5xnh5o.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp5xnh5o.jl:31\ntest set: Error\
    \ During Test at /tmp/tmpvp5xnh5o.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([0.1, 0.2, 0.3]) == 0\n  InexactError: Int64(0.14)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n     @ ./number.jl:7\
    \ [inlined]\n   [3] double_the_difference(lst::Vector{Float64})\n     @ Main /tmp/tmpvp5xnh5o.jl:25\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpvp5xnh5o.jl:34 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpvp5xnh5o.jl:31\ntest set:\
    \ Test Failed at /tmp/tmpvp5xnh5o.jl:35\n  Expression: candidate([-10.0, -20.0,\
    \ -30.0]) == 0\n   Evaluated: -60 == 0\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvp5xnh5o.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp5xnh5o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvp5xnh5o.jl:36\n  Expression: candidate([-1.0, -2.0, 8.0])\
    \ == 0\n   Evaluated: 61 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvp5xnh5o.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvp5xnh5"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14ww63gm.jl:26\nin expression starting at\
    \ /tmp/tmp14ww63gm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx919pjpx.jl:25\nin expression starting at\
    \ /tmp/tmpx919pjpx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of a list of numbers. If the list is empty,\
    \ return 1.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__05ch1q.jl:25\nin expression starting at\
    \ /tmp/tmp__05ch1q.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else \n                sum -= i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of the\
    \ numbers in a given vector. \nIf the vector is empty, return 1.\nIf the vector\
    \ has only one element, return that element.\nIf the vector has two or more elements,\
    \ return the product of the two first elements. \nIf the vector has more than\
    \ two elements, raise a TypeError exception.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yhv7ef4.jl:29\nin expression starting at\
    \ /tmp/tmp7yhv7ef4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          else \n                sum += 0\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3c8rwpi.jl:29\nin expression starting at\
    \ /tmp/tmpf3c8rwpi.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpitwxaang.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpitwxaang.jl:1\n\
    in expression starting at /tmp/tmpitwxaang.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25160pmu.jl:28\nin expression starting at\
    \ /tmp/tmp25160pmu.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygw6dolz.jl:28\nin expression starting at\
    \ /tmp/tmpygw6dolz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        elseif isa(i, Float64)\n            sum += i * i\n        else\n\
    \            throw(ArgumentError(\"Input must be a list of integers or floats\"\
    ))\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc5h20s4a.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5h20s4a.jl:1\n\
    in expression starting at /tmp/tmpc5h20s4a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the input vector\n\
    that are even.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzasf40h.jl:25\nin expression starting at\
    \ /tmp/tmpyzasf40h.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if typeof(i) == Int\n                sum += i\n\
    \            elseif typeof(i) == Float64\n                sum += i * i\n     \
    \       else\n                throw(ArgumentError(\"Input vector must be a list\
    \ of integers or floats.\"))\n        end\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 9\nWrite a function that returns the product of a list\
    \ of numbers. If the list is empty, return 1.\nIf the list has one element, return\
    \ that element.\nIf the list has two elements, return the first element multiplied\
    \ by the second element.\nIf the list has three or more elements, return the first\
    \ two elements multiplied by the third\nelement, and so on.\nWrite a function\
    \ that returns the product of a list of numbers. If the list is empty, return\
    \ 1.\nIf the list has one element, return that element.\nIf the list has two elements,\
    \ return the first element multiplied by the second element.\nIf the list has\
    \ three or more elements, return the first two elements multiplied by the third\n\
    element, and so on.\nWrite a function that returns the product of a list of numbers.\
    \ If the list is empty, return 1.\nIf the list has one element, return that element.\n\
    If the list has two elements, return the first element multiplied by the second\
    \ element.\nIf the list has three or more elements, return the first two elements\
    \ multiplied by the third\nelement, and so on.\nWrite a function that returns\
    \ the product of a list of numbers. If the list is empty, return 1.\nIf the list\
    \ has one element, return that element.\nIf the list has two elements, return\
    \ the first element multiplied by the second element.\nIf the list has three or\
    \ more elements, return the first two elements multiplied by the third\nelement,\
    \ and so on.\nWrite a function that returns the product of a list of numbers.\
    \ If the list is empty, return 1.\nIf the list has one element, return that element.\n\
    If the list has two elements, return the first element multiplied by the second\
    \ element.\nIf the list has three or more elements, return the first two elements\
    \ multiplied by the third\nelement, and so on.\nWrite a function that returns\
    \ the product of a list of numbers. If the list is empty, return 1.\nIf the list\
    \ has one element, return that element.\nIf the list has two elements, return\
    \ the first element multiplied by the second element.\nIf the list has three or\
    \ more elements, return the first two elements multiplied by the third\nelement,\
    \ and so on.\nWrite a function that returns the product of a list of numbers.\
    \ If the list is empty, return 1.\nIf the list has one element, return that element.\n\
    If the list has two elements, return the first element multiplied by the second\
    \ element.\nIf the list has three or more elements, return the first two elements\
    \ multiplied by the third\nelement, and so on.\nWrite a function that returns\
    \ the product of a list of numbers. If the list is empty, return 1.\nIf the list\
    \ has one element, \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpztrolexj.jl:32\nin expression starting at\
    \ /tmp/tmpztrolexj.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          end\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedfd5xzw.jl:29\nin expression starting at\
    \ /tmp/tmpedfd5xzw.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ product of the numbers in a vector. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckwpdv8s.jl:30\nin expression starting at\
    \ /tmp/tmpckwpdv8s.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                continue\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnts2t6s.jl:30\nin expression starting at\
    \ /tmp/tmpdnts2t6s.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if type(i) == Int\n                sum += i\n\
    \            elseif type(i) == Float64\n                sum += i * i\n       \
    \     else\n                throw(ArgumentError(\"Input must be a list of integers\
    \ or floats\"))\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6yz6w9b.jl:32\nin expression starting at\
    \ /tmp/tmpy6yz6w9b.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of a given vector of numbers. \nThe function should ignore numbers that are\
    \ negative or not integers.\nThe function should return 0 if the input vector\
    \ is empty.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjr9m5zlv.jl:28\nin expression starting at\
    \ /tmp/tmpjr9m5zlv.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum += 0\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7l7y0s26.jl:26\nin expression starting at\
    \ /tmp/tmp7l7y0s26.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx919pjpx.jl:25\nin expression starting at\
    \ /tmp/tmpx919pjpx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i) \n                sum += i\
    \ \n            else \n                sum += i * i \n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that returns the sum\
    \ of the squares of the numbers in the input vector\nthat are divisible by 3.\
    \ The input vector can be empty.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzijl0mc0.jl:29\nin expression starting at\
    \ /tmp/tmpzijl0mc0.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i)\n                sum += i *\
    \ i\n            else \n                sum += i\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, given [4, 9,\
    \ 2, -7, 3], your function should return 50.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6t1u0f5.jl:29\nin expression starting at\
    \ /tmp/tmpn6t1u0f5.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhctk6i7.jl:25\nin expression starting at\
    \ /tmp/tmprhctk6i7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a list of numbers and returns\
    \ the product of the numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6lv78z9.jl:26\nin expression starting at\
    \ /tmp/tmpt6lv78z9.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n\
    \        else\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y22j6s0.jl:27\nin expression starting at\
    \ /tmp/tmp5y22j6s0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    end\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n        end\n\
    \    end\n    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6n6jqja.jl:31\nin expression starting at\
    \ /tmp/tmph6n6jqja.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in a vector. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wilk_mt.jl:28\nin expression starting at\
    \ /tmp/tmp7wilk_mt.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmn8yngp6.jl:29\nin expression starting at\
    \ /tmp/tmpmn8yngp6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_466w376.jl:29\nin expression starting at\
    \ /tmp/tmp_466w376.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_anscnfl.jl:26\nin expression starting at\
    \ /tmp/tmp_anscnfl.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if typeof(i) == Int\n                sum +=\
    \ i\n            else\n                sum += i*i\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4rc15f7.jl:30\nin expression starting at\
    \ /tmp/tmpa4rc15f7.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i * i\n\
    \            else\n                sum += i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in the input vector\nthat are divisible by\
    \ 7. Ignore numbers that are negative or not integers.\nFor example, sum([1, 2,\
    \ 4, 7, 8, 9]) should return 52.\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector\nthat are divisible by 7 and are\
    \ greater than 10. Ignore numbers that are negative or\nnot integers.\nFor example,\
    \ sum([1, 2, 4, 7, 8, 9]) should return 104.\nWrite a function that returns the\
    \ sum of the squares of the numbers in the input vector\nthat are divisible by\
    \ 7 and are greater than 10. Ignore numbers that are negative or\nnot integers.\
    \ If the input vector is empty, return 0.\nFor example, sum([1, 2, 4, 7, 8, 9])\
    \ should return 104.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu54z94p8.jl:30\nin expression starting at\
    \ /tmp/tmpu54z94p8.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhctk6i7.jl:25\nin expression starting at\
    \ /tmp/tmprhctk6i7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4v6nx4g.jl:30\nin expression starting at\
    \ /tmp/tmpl4v6nx4g.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise: Write a\
    \ function that returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdhgymkf.jl:25\nin expression starting at\
    \ /tmp/tmpzdhgymkf.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8qouji5.jl:25\nin expression starting at\
    \ /tmp/tmpa8qouji5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i .% 2 == 1 \n                sum += i\
    \ \n            else \n                continue \n        end \n        return\
    \ sum \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps66v13ja.jl:30\nin expression starting at\
    \ /tmp/tmps66v13ja.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9khjyu_.jl:25\nin expression starting at\
    \ /tmp/tmps9khjyu_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i * i\n\
    \            else\n                sum += i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp539kk8zn.jl:30\nin expression starting at\
    \ /tmp/tmp539kk8zn.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mds_wkv.jl:29\nin expression starting at\
    \ /tmp/tmp7mds_wkv.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the numbers in the input vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwfe75rm.jl:29\nin expression starting at\
    \ /tmp/tmpjwfe75rm.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso0epvhz.jl:30\nin expression starting at\
    \ /tmp/tmpso0epvhz.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbha9cqt0.jl:28\nin expression starting at\
    \ /tmp/tmpbha9cqt0.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i\n  \
    \          end\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a vector of numbers and returns the\
    \ product of all the numbers in the vector. Ignore numbers that are negative or\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8499zbu.jl:29\nin expression starting at\
    \ /tmp/tmpi8499zbu.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppu90_y9_.jl:28\nin expression starting at\
    \ /tmp/tmppu90_y9_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            end\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppb396659.jl:29\nin expression starting at\
    \ /tmp/tmppb396659.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        elseif isa(i, Float64)\n            sum += i * i\n        else\n\
    \            throw(ArgumentError(\"Input must be a list of integers or floats\"\
    ))\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    Given a vector of numbers, return the sum of squares of the numbers\n   \
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr83355e.jl:28\nin expression starting at\
    \ /tmp/tmpsr83355e.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if i > 0\n                sum += i * i\n     \
    \       else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7r6ahljl.jl:30\nin expression starting at\
    \ /tmp/tmp7r6ahljl.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x*x\n\
    \        else\n            sum += x\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a \nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk62xkphd.jl:26\nin expression starting at\
    \ /tmp/tmpk62xkphd.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for\
    \ x in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_mtfmny.jl:29\nin expression starting at\
    \ /tmp/tmpq_mtfmny.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\
    \ \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdj15myzq.jl:28\nin expression starting at\
    \ /tmp/tmpdj15myzq.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      end\n    end\n    return sum * sum\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3vmnnh9.jl:25\nin expression starting at\
    \ /tmp/tmpj3vmnnh9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in the input vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82zze4ph.jl:27\nin expression starting at\
    \ /tmp/tmp82zze4ph.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise: Write a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5kpn99r.jl:30\nin expression starting at\
    \ /tmp/tmpk5kpn99r.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i * i\
    \ \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\
    \"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptf9vk2ib.jl:27\nin expression starting at\
    \ /tmp/tmptf9vk2ib.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposr2v8sc.jl:26\nin expression starting at\
    \ /tmp/tmposr2v8sc.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmn4c6ky.jl:25\nin expression starting at\
    \ /tmp/tmpjmn4c6ky.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i*i \n\
    \            else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmagv_yf.jl:29\nin expression starting at\
    \ /tmp/tmpsmagv_yf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqdqwzwp.jl:28\nin expression starting at\
    \ /tmp/tmpxqdqwzwp.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum \n  \
    \  end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the product of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ni93glt.jl:29\nin expression starting at\
    \ /tmp/tmp8ni93glt.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3: Write a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqg8ash4.jl:30\nin expression starting at\
    \ /tmp/tmplqg8ash4.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum -= x\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_h6mjxy.jl:26\nin expression starting at\
    \ /tmp/tmpq_h6mjxy.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if i > 0\n                sum += i * i\n  \
    \          else\n                sum += i\n        end\n        return sum\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1mqrojat.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1mqrojat.jl:1\n\
    in expression starting at /tmp/tmp1mqrojat.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if typeof(i) == Int\n                sum += i\n\
    \            else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of numbers and returns the product of all the numbers in the vector. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_6ygwwx.jl:30\nin expression starting at\
    \ /tmp/tmpp_6ygwwx.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product of\
    \ the numbers in a vector. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3ovxf33.jl:30\nin expression starting at\
    \ /tmp/tmpl3ovxf33.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6ofm1w0.jl:29\nin expression starting at\
    \ /tmp/tmpg6ofm1w0.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if isodd(n)\n                sum += n\n      \
    \      end\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nFor\
    \ example, given [4, 6, -2, 3], return 25.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bwkqxr0.jl:29\nin expression starting at\
    \ /tmp/tmp1bwkqxr0.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in the input vector\nthat are divisible\
    \ by 7. Ignore numbers that are not integers.\n    \n    >>> sum_of_squares_divisible_by_7([1,\
    \ 3, 2, 0])\n    49\n    >>> sum_of_squares_divisible_by_7([-1, -2, 0])\n    0\n\
    \    >>> sum_of_squares_divisible_by_7([9, -2])\n    81\n    >>> sum_of_squares_divisible_by_7([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiff_2b64.jl:28\nin expression starting at\
    \ /tmp/tmpiff_2b64.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if typeof(i) == Int\n                sum += i\n\
    \            elseif typeof(i) == Float64\n                sum += i*i\n       \
    \     else\n                throw(ArgumentError(\"Input must be a list of numbers\
    \ or integers\"))\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of a list of numbers. If\
    \ the list is empty, return 1.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jcj2tvr.jl:32\nin expression starting at\
    \ /tmp/tmp3jcj2tvr.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isinteger(i)\n                sum += i *\
    \ i\n            else \n                sum += i\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ a given vector of numbers. \nThe input vector is assumed to be non-empty.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbl_101ik.jl:29\nin expression starting at\
    \ /tmp/tmpbl_101ik.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph4cei6as.jl:29\nin expression starting at\
    \ /tmp/tmph4cei6as.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxq7soxj.jl:30\nin expression starting at\
    \ /tmp/tmptxq7soxj.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the product of all the numbers in the vector. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyjmw7_w.jl:28\nin expression starting at\
    \ /tmp/tmppyjmw7_w.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i*i\
    \ \n            else \n                sum += i \n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that returns the sum of the\
    \ squares of the numbers in the input vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nFor example, given [3, -2, 5, 9], the function\
    \ should return 50.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7j_viyoi.jl:29\nin expression starting at\
    \ /tmp/tmp7j_viyoi.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvt_7ls_.jl:28\nin expression starting at\
    \ /tmp/tmppvt_7ls_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7bbrakh.jl:25\nin expression starting at\
    \ /tmp/tmpi7bbrakh.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if isodd(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbea0_if.jl:29\nin expression starting at\
    \ /tmp/tmpgbea0_if.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i*i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ product of the numbers in the input vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9v9k1tr.jl:30\nin expression starting at\
    \ /tmp/tmpl9v9k1tr.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int \n                sum\
    \ += i*i \n            else \n                sum += i*i \n        end \n    \
    \    return sum \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdunk6auf.jl:30\nin expression starting at\
    \ /tmp/tmpdunk6auf.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\
    \ \nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6oqaw9hg.jl:28\nin expression starting at\
    \ /tmp/tmp6oqaw9hg.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i*i \n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n\
    \    Given a vector of numbers, return the sum of squares of the numbers\n   \
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89u0vsm_.jl:27\nin expression starting at\
    \ /tmp/tmp89u0vsm_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isinteger(i)\n            sum += i\n        else\n         \
    \   sum += i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvo2e82e4.jl:29\nin expression starting at\
    \ /tmp/tmpvo2e82e4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if i mod 2 != 0 \n                sum += i\
    \ \n            else \n                sum += i*i \n        return sum \n    end\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that returns the sum of the\
    \ squares of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"2\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb6qlj0cw.jl:22\nin expression starting at /tmp/tmpb6qlj0cw.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nFor example, if\
    \ the input vector is [1, 3, 2, 0], then the output should be 17.\nIf the input\
    \ vector is [-1, -2, 0], then the output should be 0.\nIf the input vector is\
    \ [9, -2], then the output should be 81.\nIf the input vector is [0], then the\
    \ output should be 0.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqq9is47.jl:28\nin expression starting at\
    \ /tmp/tmpiqq9is47.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if typeof(i) == Int\n                sum += i\n\
    \            else\n                sum += i*i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a vector\
    \ of numbers and returns the product of all the numbers in the vector. Ignore\
    \ numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\n\
    candidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvc9wutl0.jl:30\nin expression starting at\
    \ /tmp/tmpvc9wutl0.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector that are odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3g7fxmfw.jl:30\nin expression starting at\
    \ /tmp/tmp3g7fxmfw.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector\nthat are even. Ignore numbers that\
    \ are negative or not integers.\nThe function should take in a vector of numbers\
    \ and return a number.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzfzejjl.jl:27\nin expression starting at\
    \ /tmp/tmpyzfzejjl.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isodd(i)\n                sum += i\n      \
    \      else\n                sum -= i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns the product of\
    \ the numbers in the input vector\nthat are even. Ignore numbers that are negative\
    \ or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5czx1y9.jl:30\nin expression starting at\
    \ /tmp/tmpy5czx1y9.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        return sum(map(x\
    \ -> x*x, lst[1 : (end-1)]))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnz2w2hv.jl:23\nin expression starting at\
    \ /tmp/tmpcnz2w2hv.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in\
    \ lst\n        if x % 2 != 0\n            sum += x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6jg08ai.jl:28\nin expression starting at\
    \ /tmp/tmpp6jg08ai.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3arstee6.jl:25\nin expression starting at\
    \ /tmp/tmp3arstee6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for\
    \ i in lst\n        if isodd(i)\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5uouim7.jl:29\nin expression starting at\
    \ /tmp/tmpq5uouim7.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpda0zvdcf.jl:29\nin expression starting at\
    \ /tmp/tmpda0zvdcf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0,\
    \ 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0,\
    \ -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7s06zcf6.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp7s06zcf6.jl:31\n  Expression: candidate([5.0,\
    \ 4.0]) == 25\n   Evaluated: 5 == 25\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7s06zcf6.jl:31 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s06zcf6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7s06zcf6.jl:35\n  Expression: candidate([0.2, 3.0, 5.0]) ==\
    \ 34\n   Evaluated: 8 == 34\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s06zcf6.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s06zcf6.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7s06zcf6.jl:36\n  Expression: candidate([-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n   Evaluated: 25 == 165\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7s06zcf6.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7s06zcf6.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i * i \n            else \n                sum += i \n        return sum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7cstwsu.jl:29\nin expression starting at\
    \ /tmp/tmpz7cstwsu.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n >= 0\n                sum += n * n\n    \
    \        else\n                sum += n\n        end\n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 3: Write a function that takes a vector\
    \ of numbers and returns the product of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6oaix5cw.jl:30\nin expression starting at\
    \ /tmp/tmp6oaix5cw.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isa(i, Int64)\n            sum +=\
    \ i\n        else\n            sum += i*i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx44f9hkt.jl:27\nin expression starting at\
    \ /tmp/tmpx44f9hkt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ vector and returns the sum of the squares of the numbers in the vector that\
    \ are odd.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ilfae84.jl:28\nin expression starting at\
    \ /tmp/tmp4ilfae84.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for n in lst\n            if n > 0\n                sum += n * n\n     \
    \       else\n                sum += n\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, if the input\
    \ vector is [1, 3, 2, 0], the output should be 22.\nusing Test\n\n@testset begin\n\
    \ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([])) ==\
    \ 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7t40d6m_.jl:30\nin expression starting at\
    \ /tmp/tmp7t40d6m_.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i\n  \
    \          else\n                sum += i*i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 2: Write a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3edyvz12.jl:30\nin expression starting at\
    \ /tmp/tmp3edyvz12.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlzbmcga.jl:28\nin expression starting at\
    \ /tmp/tmpnlzbmcga.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in the input vector that are odd.\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l98v33h.jl:29\nin expression starting at\
    \ /tmp/tmp6l98v33h.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n  \
    \      else\n            sum += x^2\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\nTest your function on the following\
    \ vectors:\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5bc6d1x.jl:27\nin expression starting at\
    \ /tmp/tmp_5bc6d1x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isodd(i) \n                sum += i*i \n\
    \            else \n                sum += i \n        return sum \nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that returns the sum of the squares of the\
    \ numbers in the input vector\nthat are divisible by 7. Ignore numbers that are\
    \ not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr81of83y.jl:28\nin expression starting at\
    \ /tmp/tmpr81of83y.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n   \
    \     for i in lst\n            if isinteger(i)\n                sum += i * i\n\
    \            else\n                sum += i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfl3umnl.jl:30\nin expression starting at\
    \ /tmp/tmpgfl3umnl.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    else\n        return sum(lst[i]\
    \ for i in lst if i%2 == 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgapn2xr5.jl:23\nin expression starting at\
    \ /tmp/tmpgapn2xr5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst\n            if typeof(i) == Int64 \n                sum\
    \ += i \n            else \n                sum += i * i \n        return sum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
    \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
    \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
    \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppinakfay.jl:29\nin expression starting at\
    \ /tmp/tmppinakfay.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if isinteger(i) \n                sum += i\
    \ * i \n            else \n                sum += i \n        return sum \n  \
    \  end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwvn7c7q.jl:29\nin expression starting at\
    \ /tmp/tmpzwvn7c7q.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list\
    \ of numbers and returns the product of all the numbers in the list that are not\
    \ negative.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpviqyt98q.jl:28\nin expression starting at\
    \ /tmp/tmpviqyt98q.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the\
    \ numbers\n    in the vector that are odd. Ignore numbers that are negative or\
    \ not integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n \
    \   >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum +=\
    \ i\n        else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the input vector that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [3, -2, 6, -9, 4, 1, -9] the function should return -36. Note\
    \ that 1 is not included in the product because it is not odd.\nIf the input vector\
    \ is empty, return 1.\nusing Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\
    \t@test(candidate(Vector{Float64}([])) == 0)\n\t@test(candidate([5.0, 4.0]) ==\
    \ 25)\n\t@test(candidate([0.1, 0.2, 0.3]) == 0)\n\t@test(candidate([-10.0, -20.0,\
    \ -30.0]) == 0)\n\t@test(candidate([-1.0, -2.0, 8.0]) == 0)\n\t@test(candidate([0.2,\
    \ 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0,\
    \ 5.0, 7.0, 9.0]) == 165)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8_cag7u.jl:26\nin expression starting at\
    \ /tmp/tmpv8_cag7u.jl:26\n"
  stdout: ''
