name: HumanEval_4_mean_absolute_deviation
language: jl
prompt: "\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\n\
  \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
  \ absolute difference between each\n    element and a centerpoint (mean in this\
  \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
  \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
  \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
completions: ["    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Weights\nTo calculate Mean Absolute Deviation with weights, we\
    \ first need to calculate the weights. We do this by calculating the mean of each\
    \ column and then dividing by the number of elements in the column. Finally, we\
    \ multiply this by the absolute difference between the elements and the mean.",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\nThe mean\
    \ absolute deviation function above is called mean absolute deviation because\
    \ it takes the absolute value of the difference between each element and the mean.",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far from mean a dataset is. It can be used for outlier\
    \ detection.", "    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far each point is from the mean.\nIt is a measure\
    \ of how far each point is from the mean.\nIt is a measure of how far each point\
    \ is from the mean.\nIt is a measure of how far each point is from the mean.\n\
    It is a measure of how far each point is from the mean.\nIt is a measure of how\
    \ far each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each point is from the mean.\nIt is a measure of how far\
    \ each point is from the mean.\nIt is a measure of how far each point is from\
    \ the mean.\nIt is a measure of how far each point is from the mean.\nIt is a\
    \ measure of how far each ", "    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nNow let's implement the Mean Absolute\
    \ Deviation function using Julia's built-in functionality.", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of how\
    \ far a dataset is from its mean.", "    sum = 0.0\n    for x in numbers\n   \
    \     sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n    for\
    \ n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a measure\
    \ of how far each point is from the mean of the dataset. \nIt is a good measure\
    \ of outliers and is often used in machine learning to determine how far a point\
    \ is from the mean.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    The mean absolute deviation function above is very simple, yet it gives us an\
    \ idea of how we can use Julia to calculate statistical metrics. We will now implement\
    \ a function that calculates the mean absolute deviation for a vector of numbers:",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>", "    sum =\
    \ 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels",
  "    sum::Float64 = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend", "    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far from mean\
    \ a dataset is. It is a good measure for comparing datasets because it is an average\
    \ of the absolute difference between each element and the mean.", "    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(numbers))\n  \
    \  end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats", "    sum::Float64 = 0.0\n    for i in numbers\n     \
    \   sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nNow let's implement the Mean Absolute\
    \ Deviation function using Julia's built-in functions. We will use the following\
    \ inputs:", "    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is quite simple, but we can make it more efficient\
    \ by calculating the mean only once and using it for all the numbers:", "    sum\
    \ = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a measure of how\
    \ far away each data point is from the mean.\nThe higher the MAD, the more spread\
    \ out the data points are.\nThe MAD is calculated using the mean of the absolute\
    \ value of the deviations from the mean.", "    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation - Part 2\n\
    The second part of the Mean Absolute Deviation calculation is the Mean Absolute\
    \ Deviation Prior to each data point. \nThe Mean Absolute Deviation Prior to each\
    \ data point is calculated using the following formula:\nMAD_Prior = MAD - |x\
    \ - x_mean|\nWhere MAD is the Mean Absolute Deviation calculated for the entire\
    \ dataset, and |x - x_mean| is the absolute difference between the current data\
    \ point and the mean of the entire dataset.", "    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    </cell>\n<text>\nMean Absolute Deviation is a measure of how far each point is\
    \ from the mean.\nIt is a good measure of outliers and is often used in statistical\
    \ applications.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x -\
    \ mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    The mean absolute deviation function above is called mean_absolute_deviation.\
    \ Now let's test the function by comparing it to our previous mean function.",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend", "    \n    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\n$$\n\\text{MAD} = \\frac{\\sum{i=1}^{n}(x_i\
    \ - \\bar{x})}{n}\n$$\nwhere $\\bar{x}$ is the mean of the given set of numbers:\n\
    $$\n\\bar{x} = \\frac{1}{n}\\sum{i=1}^{n}x_i\n$$\nThe mean absolute deviation\
    \ function can be implemented using the Mean Absolute Deviation function defined\
    \ above:", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nNow let's calculate the mean absolute deviation for a vector\
    \ of numbers that is sorted in ascending order:", "    sum = 0.0\n    for x in\
    \ numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of variability in data\
    \ sets. It is calculated as the average of the absolute difference between each\
    \ element and a centerpoint (mean in this case).", "    sum = 0.0\n    for x in\
    \ numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\nMean Absolute Deviation Error\nThe\
    \ Mean Absolute Deviation Error is defined as:\nMADE = average | x - x_mean |\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be interpreted as the average distance between each element and the\ncenterpoint\
    \ (mean).", "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far away a point is from the mean.\nIt is a measure\
    \ of how far away a point is from the mean of the dataset.\nIt is a good measure\
    \ of how far a point is from the mean of the dataset.\nIt is a good measure of\
    \ how far a point is from the mean of the dataset.\nIt is a good measure of how\
    \ far a point is from the mean of the dataset.\nIt is a good measure of how far\
    \ a point is from the mean of the dataset.\nIt is a good measure of how far a\
    \ point is from the mean of the dataset.\nIt is a good measure of how far a point\
    \ is from the mean of the dataset.\nIt is a good measure of how far a point is\
    \ from the mean of the dataset.\nIt is a good measure of how far a point is from\
    \ the mean of the dataset.\nIt is a good measure of how far a point is from the\
    \ mean of the dataset.\nIt is a good measure of how far a point is from the mean\
    \ of the dataset.\nIt is a good measure of how far a point is from the mean of\
    \ the dataset.\nIt is a good measure of how far a point is from the mean of the\
    \ dataset.\nIt is a good measure of how far a point is from the mean of the dataset.\n\
    It is a good measure of how far a point is from the mean of the dataset.\nIt is\
    \ a good measure of how far a point is from the mean of the dataset.\nIt is a\
    \ good measure of how far a point is from the mean of the dataset.\nIt is a good\
    \ measure of how far a point is from the mean of the dataset.\nIt is a good measure\
    \ of how far a point is from the mean of the dataset.\nIt is a good measure of\
    \ how far a point is from the mean of the dataset.\nIt is a good measure of how\
    \ far a point is from the mean of the dataset.\nIt is a good measure of how far\
    \ a point is from the mean of the dataset.\nIt is a good measure of how far a\
    \ point is from the mean of the dataset.\nIt is a good measure of how far a point\
    \ is from the mean of the dataset.\nIt is a good measure of how far a point is\
    \ from the mean of the dataset.\nIt is a good measure of how far a point is from\
    \ the mean of the dataset.\nIt is a good measure of how far a point is from the\
    \ mean of the dataset.\nIt is a good measure of how far a point is from the mean\
    \ of the dataset.\nIt is a good measure of how far a point is from the mean of\
    \ the dataset.\nIt is a good measure of how far a point is from the mean of the\
    \ dataset.\nIt is a good measure of how far a point is ", "    sum = 0.0\n   \
    \ for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum /\
    \ length(numbers)\nend\n</cell>\n<text>\nThe function above is called mean_absolute_deviation.\
    \ Let's try it out on some random numbers:", "    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean(i))\n    end\n    return sum / length(numbers)\n\
    end", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far from a mean a data point is. It is a good\
    \ measure for continuous data, and can be used as a measure of how far from a\
    \ mean a data point is. It is also a good measure for categorical data, where\
    \ it can give a sense of how far from a mean a data point is.", "    sum_of_squares\
    \ = 0.0\n    for n in numbers\n        sum_of_squares += (n - mean(n))^2\n   \
    \ return sqrt(sum_of_squares/length(numbers))\nend", "    sum = 0.0\n    for x\
    \ in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far each point\
    \ is from the mean.\nIt is a good measure to compare how far points are from each\
    \ other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\nIt is a good measure to compare how far points are from each other.\n\
    It is a good measure to compare how far points are from each other.\nIt is a good\
    \ measure to compare how far points are from each other.\nIt is a good measure\
    \ to compare how far points are from each other.\nIt is a good measure to compare\
    \ how far points are from each other.\nIt is a good measure to compare how far\
    \ points are from each other.\nIt is a good measure to compare how far points\
    \ are from each other.\nIt is a good measure to compare how far points are from\
    \ each other.\n", "    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares\
    \ += n * n\n    \n    return sqrt(sum_of_squares / length(numbers))\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Function", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nThe second part of the\
    \ Mean Absolute Deviation calculation is the Mean Absolute Deviation Prior to\
    \ each data point.\nThe Mean Absolute Deviation Prior to each data point is calculated\
    \ as the mean of the absolute difference between each element and the mean of\
    \ the entire dataset.\nThe Mean Absolute Deviation Prior to each data point is\
    \ calculated as the mean of the absolute difference between each element and the\
    \ mean of the entire dataset.\nThe Mean Absolute Deviation Prior to each data\
    \ point is calculated as the mean of the absolute difference between each element\
    \ and the mean of the entire dataset.\nThe Mean Absolute Deviation Prior to each\
    \ data point is calculated as the mean of the absolute difference between each\
    \ element and the mean of the entire dataset.\nThe Mean Absolute Deviation Prior\
    \ to each data point is calculated as the mean of the absolute difference between\
    \ each element and the mean of the entire dataset.\nThe Mean Absolute Deviation\
    \ Prior to each data point is calculated as the mean of the absolute difference\
    \ between each element and the mean of the entire dataset.\nThe Mean Absolute\
    \ Deviation Prior to each data point is calculated as the mean of the absolute\
    \ difference between each element and the mean of the entire dataset.\nThe Mean\
    \ Absolute Deviation Prior to each data point is calculated as the mean of the\
    \ absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated as the mean\
    \ of the absolute difference between each element and the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to ", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n  \
    \  for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is calculated as the average\
    \ of the absolute difference between each element and the mean of the dataset:",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function", "    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation - Part 2\nNow let's use our new function mean_absolute_deviation\
    \ to calculate the mean absolute deviation for a set of numbers.", "    sum =\
    \ 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with weights\nThe\
    \ mean absolute deviation function above is great for calculating mean absolute\
    \ deviation\nfor a single input number. However, it can be very inaccurate for\
    \ calculating mean absolute deviation\nfor multiple input numbers. To overcome\
    \ this problem, we can use weights to calculate mean absolute deviation\nfor multiple\
    \ input numbers. Weights are a vector of numbers that sum to one. Weights are\
    \ used to\nweight each input number differently in the calculation of mean absolute\
    \ deviation. For example, if we have\nthree input numbers and one weight vector\
    \ [1.0, 0.5, 1.0], then the mean absolute deviation will be\ncalculated as follows:",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation Function", "    \n    sum_of_squares = 0.0\n    for x\
    \ in numbers\n        sum_of_squares += pow(x-mean(numbers), 2)\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Exercise\nWrite a function that\
    \ calculates the mean absolute deviation of a given vector of numbers. \nThe function\
    \ should take one parameter - a vector of numbers - and return the mean absolute\
    \ deviation of this vector.\nThe function should return the mean absolute deviation\
    \ as Float64.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function\nThe function above calculates the mean absolute deviation\
    \ of a set of numbers. \nThe mean absolute deviation is the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nThe function above is called mean_absolute_deviation. \nIt takes\
    \ a vector of numbers as an argument and returns the mean absolute deviation of\
    \ this vector.", "    sum = 0.0\n    for n in numbers\n        sum += abs(n -\
    \ mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation - Part 2\nNow let's calculate the mean absolute deviation\
    \ for a set of numbers. We will use the same set of numbers as before, but this\
    \ time we will use our new function mean_absolute_deviation_2 to calculate the\
    \ mean absolute deviation.", "    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a good metric to evaluate a model's performance.",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with Weights\nThe\
    \ mean absolute deviation function above is great for calculating mean absolute\
    \ deviation\nfor a single number. However, if we want to calculate mean absolute\
    \ deviation for a vector of\nnumbers, we must weight each element by the corresponding\
    \ weight. For example, if we have\na vector of weights:\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\nthen we must weight each element by the corresponding weight:\n \
    \   MAD = average | x - x_mean | \n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0,\
    \ 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n\
    \    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0,\
    \ 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n\
    \    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0,\
    \ 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n\
    \    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights\
    \ = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0,\
    \ 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0,\
    \ 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, 4.0]\n    weights = [1.0, 2.0, 3.0, ",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels",
  "    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow(number - mean(numbers), 2)\n    return math.sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend\n</cell>\n<text>\nMean Absolute Deviation with StatsModels",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe function\
    \ above calculates the mean absolute deviation of a given set of numbers. Let's\
    \ try it out on a few examples:", "    sum = 0.0\n    for n in numbers\n     \
    \   sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<text>\nMean Absolute Deviation Function\nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a set of numbers. \nThe mean\
    \ absolute deviation is calculated as:\nMAD = average | x - x_mean |\nwhere x\
    \ is the set of numbers, and x_mean is the mean of the set of numbers.\nThe mean\
    \ absolute deviation function can be used in a variety of ways. Here are some\
    \ examples:", "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nNow let's implement the second part of the Mean Absolute\
    \ Deviation algorithm. \nThis algorithm will calculate the MAD between each element\
    \ and each element in the dataset. \nThe MAD will be calculated for each element\
    \ in the dataset and will be averaged over all elements in the dataset.", "  \
    \  sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats", "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend", "    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation - Part 2\n\
    Now let's implement the Mean Absolute Deviation function using the Julia language\
    \ (which has many more capabilities than this).", "    sum = 0.0\n    for x in\
    \ numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end", "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels", "    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far each point is from the\
    \ mean.\nIt is a good measure of outliers, as points further from the mean are\
    \ likely to be outliers.\nThe mean is calculated using the mean of each column\
    \ in the dataset.\nThe standard deviation is calculated using the standard deviation\
    \ of each column in the dataset.\nThe mean absolute deviation is calculated using\
    \ the mean absolute deviation of each column in the dataset.", "    sum_of_squared_deviations\
    \ = 0.0\n    for number in numbers\n        sum_of_squared_deviations += math.pow((number\
    \ - mean(numbers)), 2)\n    end\n    return math.sqrt(sum_of_squared_deviations)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a good measure of how far\
    \ each point is from the mean.", "    sum = 0.0\n    for x in numbers\n      \
    \  sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nThe mean absolute deviation is a good measure of how far away a point\
    \ is from the mean.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation - Part 2\nNow let's implement Mean Absolute Deviation\
    \ using Julia code. We'll start by defining a function which calculates the mean\
    \ of a vector:", "    sum = 0.0\n    for x in numbers\n        sum += abs(x -\
    \ mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation with StatsModels", "    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nThe mean absolute deviation\
    \ function above is very similar to the mean function,\nexcept that it takes the\
    \ absolute value of the deviation before taking the mean.\nThis makes the function\
    \ more robust to outliers, since it can handle negative numbers\nand zeros better.",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers. \nThe mean absolute deviation is the average\
    \ absolute difference between each element and a centerpoint (mean in this case):\n\
    MAD = average | x - x_mean |\nThe mean absolute deviation function can be used\
    \ in a variety of ways. \nFor example, we can calculate the mean absolute deviation\
    \ of a set of numbers by passing a vector of numbers to the function:", "    sum\
    \ = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation - Part\
    \ 2\nNow let's implement the Mean Absolute Deviation function using Julia code.\
    \ We'll start by defining a function which calculates the mean of a given vector\
    \ of numbers:", "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a good measure of how far from mean the data is deviating from\
    \ its mean.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats", "    sum = 0.0\n    for x in numbers\n        sum +=\
    \ abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation Function", "    \n    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\nExercise: Write a function that calculates\
    \ the median absolute deviation of a given vector of input numbers.", "    sum\
    \ = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a good\
    \ metric to evaluate how well a model performs. In our case, we want to compare\
    \ the performance of our model with the baseline model that always predicts the\
    \ mean of the dataset.", "    sum = 0.0\n    for n in numbers\n        sum +=\
    \ abs(n - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a good metric for evaluating outliers in our\
    \ dataset. Let's try it out on our dataset.", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n  \
    \  for i in numbers\n        sum += abs(i - mean(i))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a measure of how\
    \ far each point is from the mean.\nIt is a good measure of outliers and is often\
    \ used in statistical applications.\nIt is a good measure of how far each point\
    \ is from the mean.\nIt is a good measure of how far each point is from the mean.\n\
    It is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure ", "    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a good metric to evaluate a model's\
    \ performance. \nIt measures the average distance between each point and the mean\
    \ of the dataset. \nIt is a good way to evaluate a model's performance when you\
    \ have an unbiased dataset. \nIt is a good metric to evaluate a model's performance\
    \ when you have an unbiased dataset.", "    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<text>\nMean Absolute Deviation is a measure of how far a sample deviates\
    \ from the mean.\nThe higher the value, the more deviation from the mean.\nThe\
    \ mean is calculated using the mean of the dataset.\nThe standard deviation is\
    \ a measure of how spread out a distribution of values is.\nThe lower the value,\
    \ the more spread out the distribution is.\nThe standard deviation is the square\
    \ root of the mean of the squared deviations.\nThe mean of the dataset is calculated\
    \ using the mean of the dataset.\nThe standard deviation is a measure of how spread\
    \ out a distribution of values is.\nThe lower the value, the more spread out the\
    \ distribution is.\nThe standard deviation is the square root of the mean of the\
    \ squared deviations.\nThe mean of the dataset is calculated using the mean of\
    \ the dataset.\nThe standard deviation is a measure of how spread out a distribution\
    \ of values is.\nThe lower the value, the more spread out the distribution is.\n\
    The standard deviation is the square root of the mean of the squared deviations.\n\
    The mean of the dataset is calculated using the mean of the dataset.\nThe standard\
    \ deviation is a measure of how spread out a distribution of values is.\nThe lower\
    \ the value, the more spread out the distribution is.\nThe standard deviation\
    \ is the square root of the mean of the squared deviations.\nThe mean of the dataset\
    \ is calculated using the mean of the dataset.\nThe standard deviation is a measure\
    \ of how spread out a distribution of values is.\nThe lower the value, the more\
    \ spread out the distribution is.\nThe standard deviation is the square root of\
    \ the mean of the squared deviations.\nThe mean of the dataset is calculated using\
    \ the mean of the dataset.\nThe standard deviation is a measure of how spread\
    \ out a distribution of values is.\nThe lower the value, the more spread out the\
    \ distribution is.\nThe standard deviation is the square root of the mean of the\
    \ squared deviations.\nThe mean of the dataset is calculated using the mean of\
    \ the dataset.\nThe standard deviation is a measure of how spread out a distribution\
    \ of values is.\nThe lower the value, the more spread out the distribution is.\n\
    The standard deviation is the square root of the mean of the squared deviations.\n\
    The mean of the dataset is calculated using the mean of the dataset.\nThe standard\
    \ deviation is a measure of how spread out a distribution of values is.\nThe lower\
    \ the value, the more spread out the distribution is.\nThe standard deviation\
    \ is the square root of the mean of the squared deviations.\nThe mean of the dataset\
    \ is calculated using the mean of the dataset.\nThe standard deviation is a measure\
    \ of how spread out a distribution of values is.\nThe ", "    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation Error\nThe Mean Absolute Deviation\
    \ Error is defined as the average absolute difference between each\nelement and\
    \ the mean of the dataset:\nMDE = average | x - x_mean |\nwhere x is the current\
    \ element and x_mean is the mean of the dataset:\nMDE = average | x - x_mean |\n\
    MDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x\
    \ - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE\
    \ = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x -\
    \ x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE =\
    \ average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean\
    \ |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average\
    \ | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\n\
    MDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x\
    \ - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE\
    \ = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x -\
    \ x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE =\
    \ average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean\
    \ |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average\
    \ | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x - x_mean |\n\
    MDE = average | x - x_mean |\nMDE = average | x - x_mean |\nMDE = average | x\
    \ - x_mean |\nMDE", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation with Stats", "    sum = 0.0\n    for x in numbers\n  \
    \      sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<text>\nMean Absolute Deviation Function", "    sum = 0.0\n    for n\
    \ in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nThe second part of the Mean Absolute Deviation calculation\
    \ is the mean of the absolute differences between each element and the mean of\
    \ the dataset:\nMAD = average | x - x_mean |\nThis can be calculated using the\
    \ function mean_absolute_deviation() defined above.", "    sum = 0.0\n    for\
    \ n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation - Part\
    \ 2\nThe second part of the Mean Absolute Deviation calculation is the Mean Absolute\
    \ Deviation squared. \nThis can be calculated using the following formula:\nMAD_SQ\
    \ = average | x - x_mean | ^ 2\nThe function below calculates this for us:", " \
    \   sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nThe mean absolute deviation function above is quite simple,\
    \ but we can make it more efficient by calculating the mean of the numbers before\
    \ we begin to calculate the deviations. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. To do this,\
    \ we first need to calculate the mean of the numbers. To do this, we first need\
    \ to calculate the mean of the numbers. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. To do this,\
    \ we first need to calculate the mean of the numbers. To do this, we first need\
    \ to calculate the mean of the numbers. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. To do this,\
    \ we first need to calculate the mean of the numbers. To do this, we first need\
    \ to calculate the mean of the numbers. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. To do this,\
    \ we first need to calculate the mean of the numbers. To do this, we first need\
    \ to calculate the mean of the numbers. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. To do this,\
    \ we first need to calculate the mean of the numbers. To do this, we first need\
    \ to calculate the mean of the numbers. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. To do this,\
    \ we first need to calculate the mean of the numbers. To do this, we first need\
    \ to calculate the mean of the numbers. To do this, we first need to calculate\
    \ the mean of the numbers. To do this, we first need to calculate the mean of\
    \ the numbers. To do this, we first need to calculate the mean of the numbers.\
    \ To do this, we first need to calculate the mean of the numbers. ", "    sum_of_squares\
    \ = 0.0\n    for number in numbers\n        sum_of_squares += (number - mean(number))^2\
    \ \n    end\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation is a good measure of how far away a dataset is from the\
    \ mean of the dataset. For example, if we have a dataset of numbers from 0 to\
    \ 10, the mean is 5, then MAD will be 5.", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far each element\
    \ deviates from the mean of the dataset. \nThe higher the MAD, the more deviant\
    \ each element from the mean.", "    sum = 0.0\n    for x in numbers\n       \
    \ sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>", "    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation with StatsModels", "    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end", "    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2.0\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far each point\
    \ is from the mean of the dataset. \nThe higher the MAD, the more spread out the\
    \ data is. \nThe MAD can be calculated using the Mean Absolute Deviation function\
    \ above.", "    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares\
    \ += pow((x - mean(x)), 2)\n    return sqrt(sum_of_squares / length(numbers))\n\
    end", "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels", "    sum = 0.0\n    for x in numbers\n        sum\
    \ += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a metric that measures how far each element\
    \ of the dataset is from the mean.\nThe mean is the average of all the numbers\
    \ in the dataset. \nThe MAD is the average of the absolute difference between\
    \ each element and the mean.\nThe MAD will be higher if the dataset is more spread\
    \ out.", "    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares\
    \ += (n - mean(n))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    @test mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error", "    sum_of_squares = 0.0\n    for number in numbers\n\
    \        sum_of_squares += (number - mean(numbers))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far each\
    \ point is from the mean.\nThe higher the value, the more distant the point is\
    \ from the mean.\nThe mean is calculated using the mean of the dataset.\nThe standard\
    \ deviation is calculated using the standard deviation of the dataset.\nThe mean\
    \ and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The mean and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The mean and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The mean and standard deviation are calculated using the mean and standard deviation\
    \ of the dataset.\nThe mean and standard deviation are calculated using the mean\
    \ and standard deviation of the dataset.\nThe mean and standard deviation are\
    \ calculated using the mean and standard deviation of the dataset.\nThe mean and\
    \ standard deviation are calculated using the mean and standard deviation of the\
    \ dataset.\nThe mean and standard deviation are calculated using the mean and\
    \ standard deviation of the dataset.\nThe mean and standard deviation are calculated\
    \ using the mean and standard deviation of the dataset.\nThe mean and standard\
    \ deviation are calculated using the mean and standard deviation of the dataset.\n\
    The ", "    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2 \n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with Weights", "    sum = 0.0\n\
    \    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation - Part 2\n\
    The second part of the Mean Absolute Deviation calculation is the variance of\
    \ the dataset. \nThe variance is the average of the squared deviations from the\
    \ mean:\n    Variance = average | x - x_mean |^2\n    Variance = average | x -\
    \ x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - ", "    sum = 0.0\n    for n\
    \ in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n  \
    \  for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far from mean a dataset is. It can be calculated using\
    \ the function mean_absolute_deviation. Let's try it out on a few numbers:", " \
    \   sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model has learned the data.", "    sum\
    \ = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\nMean Absolute Deviation Error\nThe\
    \ Mean Absolute Deviation Error is defined as the average of the absolute difference\
    \ between each element and the\nmean of the dataset:\nMEDE = average | x - x_mean\
    \ |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average\
    \ | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average |\
    \ x - x_mean |\nMEDE = average | x - x_mean |\nMEDE = average | x - x_mean |\n\
    MEDE = average | x - x_mean |", "    sum = 0.0\n    for x in numbers\n       \
    \ sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation with StatsModels", "    sum = 0.0\n    for x in\
    \ numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n  \
    \  for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a good metric\
    \ to evaluate how well a model has learned the data.", "    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far from mean\
    \ a dataset is. It is a good measure for comparing different datasets, since it\
    \ penalizes deviations from the mean.", "    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    </cell>\n<text>\nThe function above is very simple, but we can make it more efficient\
    \ by calculating the mean only once and using it for all the numbers. We will\
    \ store the mean in a variable called mean.", "    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    </cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n    for\
    \ n in numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats", "    sum = 0.0\n    for i in numbers\n        sum +=\
    \ abs(i - mean(i))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far each element deviates\
    \ from the mean.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation is a measure of how far each element of the dataset is\
    \ from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is from the mean.\nIt is a good measure of how far each element of the dataset\
    \ is ", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far from a mean a number is. It is a good measure\
    \ for measuring the variability of a set of numbers. It is also a good measure\
    \ of how far from a mean a distribution of numbers is. It is also a good measure\
    \ of how far from a mean a distribution of numbers is from its mean.", "    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation - Part\
    \ 2\nNow let's calculate the mean absolute deviation for a set of numbers. We'll\
    \ start by defining a function which calculates the mean of a vector:", "    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend", "    sum_of_squares = 0.0\n    for x in numbers\n\
    \        sum_of_squares += (x - mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nThe mean absolute deviation function above is very simple,\
    \ yet it gives us an idea of how it works. Let's try it out on some real data:",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation Function",
  "    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a good measure of how far a sample is from the mean of the dataset.\
    \ For example, a sample of $N$ numbers could be considered an outlier if its MAD\
    \ is greater than $3\\sigma$, where $\\sigma$ is the standard deviation of the\
    \ numbers in the sample.", "    sum = 0.0\n    for x in numbers\n        sum +=\
    \ abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nThe second part of the\
    \ Mean Absolute Deviation calculation is the standard deviation. \nThe standard\
    \ deviation is a measure of how spread out a distribution of data is. \nIt is\
    \ a measure of how far a data point is from the mean. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the variability of a set of numbers. \nThe standard deviation\
    \ is a measure of the ", "    sum_of_squares = 0.0\n    for x in numbers\n   \
    \     sum_of_squares += (x - mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\n\
    end", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a good metric for evaluating outliers. It is also a good way to\
    \ measure how spread out a distribution of values is. It is a good way to measure\
    \ how outliers are spread out. For example, if you have a list of numbers and\
    \ you know that they are all positive, you can use the mean absolute deviation\
    \ to measure how spread out the numbers are around the mean.", "    sum = 0.0\n\
    \    for i in numbers\n        sum += abs(i - mean)\n    end\n    return sum /\
    \ length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation Function", " \
    \   sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares += (n -\
    \ mean(n))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation with Stats", "    \n    sum = 0.0\n    for i in\
    \ numbers\n        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a measure of how far\
    \ from a mean a number is, as opposed to how far from a median a number is. It\
    \ is a measure of how far from a mean a number is, as opposed to how far from\
    \ a median a number is. It is a measure of how far from a mean a number is, as\
    \ opposed to how far from a median a number is. It is a measure of how far from\
    \ a mean a number is, as opposed to how far from a median a number is. It is a\
    \ measure of how far from a mean a number is, as opposed to how far from a median\
    \ a number is. It is a measure of how far from a mean a number is, as opposed\
    \ to how far from a median a number is. It is a measure of how far from a mean\
    \ a number is, as opposed to how far from a median a number is. It is a measure\
    \ of how far from a mean a number is, as opposed to how far from a median a number\
    \ is. It is a measure of how far from a mean a number is, as opposed to how far\
    \ from a median a number is. It is a measure of how far from a mean a number is,\
    \ as opposed to how far from a median a number is. It is a measure of how far\
    \ from a mean a number is, as opposed to how far from a median a number is. It\
    \ is a measure of how far from a mean a number is, as opposed to how far from\
    \ a median a number is. It is a measure of how far from a mean a number is, as\
    \ opposed to how far from a median a number is. It is a measure of how far from\
    \ a mean a number is, as opposed to how far from a median a number is. It is a\
    \ measure of how far from a mean a number is, as opposed to how far from a median\
    \ a number is. It is a measure of how far from a mean a number is, as opposed\
    \ to how far from a median a number is. It is a measure of how far from a mean\
    \ a number is, as opposed to how far from a median a number is. It is a measure\
    \ of how far from a mean a number is, as opposed to how far from a median a number\
    \ is. It is a measure of how far from a mean a number is, as opposed to how far\
    \ from a median a number is. It is a measure of how far from a mean a number is,\
    \ as opposed to how far from a median a number is. It is a measure ", "    sum\
    \ = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>", "    sum =\
    \ 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a measure\
    \ of how far from a mean a number is. It can be interpreted as a measure of how\
    \ far from a mean a number is, as opposed to standard deviation, which measures\
    \ how far from a mean a number is, as opposed to variance, which measures how\
    \ far from a mean a number is, as opposed to variance, which is simply the square\
    \ of the variance.", "    sum = 0.0\n    for n in numbers\n        sum += abs(n\
    \ - mean(n))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation is a measure of how far each point is from the mean.\n\
    It is a measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nIt is\
    \ a good measure of how far each point is from the mean ", "    sum = 0.0\n  \
    \  for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a good metric\
    \ for evaluating outliers in our dataset. Let's see how it works on our dataset.",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a data point is. It is calculated using\
    \ the mean of the absolute value of the difference between each data point and\
    \ the mean.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels", "    sum = 0.0\n    for n in numbers\n        sum\
    \ += abs(n - mean(numbers))\n    end\n    return sum / length(numbers)\nend",
  "    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares += (x-mean(x))^2\
    \ \n    return sqrt(sum_of_squares/length(numbers))\nend", "    sum = 0.0\n  \
    \  for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a measure\
    \ of how far from a mean a number is. It is a good measure of outliers and is\
    \ often used in machine learning to determine how far from a mean a data point\
    \ is. It is also a good way to measure the spread of data points. It is often\
    \ used in statistical models to determine how far from a mean a data point is.\
    \ It is also a good way to measure the spread of data points. It is often used\
    \ in statistical models to determine how far from a mean a data point is. It is\
    \ also a good way to measure the spread of data points. It is often used in machine\
    \ learning to determine how far from a mean a data point is. It is also a good\
    \ way to measure the spread of data points. It is often used in machine learning\
    \ to determine how far from a mean a data point is. It is also a good way to measure\
    \ the spread of data points. It is often used in machine learning to determine\
    \ how far from a mean a data point is. It is also a good way to measure the spread\
    \ of data points. It is often used in machine learning to determine how far from\
    \ a mean a data point is. It is also a good way to measure the spread of data\
    \ points. It is often used in machine learning to determine how far from a mean\
    \ a data point is. It is also a good way to measure the spread of data points.\
    \ It is often used in machine learning to determine how far from a mean a data\
    \ point is. It is also a good way to measure the spread of data points. It is\
    \ often used in machine learning to determine how far from a mean a data point\
    \ is. It is also a good way to measure the spread of data points. It is often\
    \ used in machine learning to determine how far from a mean a data point is. It\
    \ is also a good way to measure the spread of data points. It is often used in\
    \ machine learning to determine how far from a mean a data point is. It is also\
    \ a good way to measure the spread of data points. It is often used in machine\
    \ learning to determine how far from a mean a data point is. It is also a good\
    \ way to measure the spread of data points. It is often used in machine learning\
    \ to determine how far from a mean a data point is. It is also a good way to measure\
    \ the spread of data points. It is often used in machine learning to determine\
    \ how far from a mean a data point is. It is also a good way to measure the spread\
    \ of data points. It is often used in machine learning to determine how far from\
    \ a mean a data point is. It is also ", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a good metric to evaluate a model's\
    \ performance.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x -\
    \ mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very similar to the mean function we saw earlier.\
    \ Let's compare the two functions side-by-side.", "    sum = 0.0\n    for i in\
    \ numbers\n        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a good metric to evaluate how\
    \ well a model performs. In our case, we are trying to predict a continuous output\
    \ (a price) and the mean of the target variable is around $10$. Hence, we can\
    \ use Mean Absolute Deviation to measure the performance of the model.", "   \
    \ sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats", "    sum_of_squared_deviations = 0.0\n    for number in numbers\n\
    \        sum_of_squared_deviations += math.pow((number - mean(numbers)), 2)\n\
    \    end\n    return math.sqrt(sum_of_squared_deviations)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation with StatsModels", "    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum\
    \ = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation is a measure\
    \ of how far each point is from the mean.\nIt is a good measure of outliers and\
    \ is often used in machine learning to determine how far a point is from the mean.\n\
    The mean is often used as a centerpoint for calculating MAD.\nThe mean is also\
    \ known as the geometric mean.", "    sum = 0.0\n    for i in numbers\n      \
    \  sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n    for i in numbers\n\
    \        sum += abs(i - mean)\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<text>\nMean Absolute Deviation with Stats", "    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation Function", "    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nNow let's calculate the\
    \ MAD using the Julia package StatsBase.", "    sum_of_squares = 0.0\n    for\
    \ x in numbers\n        sum_of_squares += (x - mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\n\
    end", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend", "    sum = 0.0\n    for n in\
    \ numbers\n        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels", "    sum\
    \ = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return\
    \ sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation is a measure of variability in a set of numbers. It is\
    \ defined as the average of the absolute value of the difference between each\
    \ element and the mean of the set.", "    sum::Float64 = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nThe mean absolute deviation function above is very similar\
    \ to the mean function we saw earlier. Let's see how it compares to our previous\
    \ mean function:", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels", "    sum_of_squares = 0.0\n    for n in numbers\n\
    \        sum_of_squares += (n - mean(n))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nThe mean absolute deviation function above is very similar\
    \ to the mean function we saw earlier. Let's compare the two functions side-by-side.",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats", "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation is a measure of how far from the mean a dataset is. It\
    \ is a good measure of how far away a dataset is from its mean.", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a point is from its mean.", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation Function",
  "    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares += pow((x\
    \ - mean(x)), 2)\n    return sqrt(sum_of_squares / length(numbers))\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Error", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation Error\nThe Mean Absolute Deviation\
    \ Error is the mean of the absolute value of the deviations from the mean:\n \
    \   MEDE = average | x - x_mean |\n    >>> mean_absolute_error([1.0, 2.0, 3.0,\
    \ 4.0])\n    1.0\n    \"\"\"", "    sum_of_squared_deviations = 0.0\n    for number\
    \ in numbers\n        sum_of_squared_deviations += math.pow(number - mean(numbers),\
    \ 2)\n    end\n    return math.sqrt(sum_of_squared_deviations)\nend\n</cell>\n\
    <text>\nMean Absolute Deviation Function", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far from a mean\
    \ a number is. It is a good measure of outliers and is often used in machine learning\
    \ to determine how far a data point is from the mean.", "    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation Function", "    sum = 0.0\n    for\
    \ x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nThe second part of the\
    \ Mean Absolute Deviation calculation is the Mean Absolute Deviation Prior to\
    \ dividing by the number of observations.\nThe Mean Absolute Deviation Prior is\
    \ defined as:\nMAD_P = average | x - x_mean | / N\nwhere N is the number of observations.\n\
    The Mean Absolute Deviation Prior is calculated using the following formula:\n\
    MAD_P = average | x - x_mean | / N\nwhere N is the number of observations.\nThe\
    \ Mean Absolute Deviation Prior is calculated using the following formula:\nMAD_P\
    \ = average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following formula:\nMAD_P =\
    \ average | x - x_mean | / N\nwhere N is the number of observations.\nThe Mean\
    \ Absolute Deviation Prior is calculated using the following ", "    sum = 0.0\n\
    \    for x in numbers\n        sum += abs(x - mean(x))\n    end\n    return sum\
    \ / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation with Stats",
  "    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares += (x-mean(x))^2\n\
    \    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far a sample deviates from the mean of its values.\
    \ In other words, it measures how far a sample deviates from its mean.", "   \
    \ sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares += (x-mean(x))^2\
    \ \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n<text>\nMean\
    \ Absolute Deviation - Part 2\nNow let's calculate the mean absolute deviation\
    \ for a set of numbers. We'll do this by first calculating the mean of the numbers,\
    \ then calculating the MAD using the mean of the numbers and the mean.", "   \
    \ sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers.\
    \ We'll do this by first calculating the mean and then calculating the deviation\
    \ for each number.", "    sum = 0.0\n    for x in numbers\n        sum += abs(x\
    \ - mean(x))\n    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\n\
    Mean Absolute Deviation with Stats", "    sum = 0.0\n    for x in numbers\n  \
    \      sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0]) == 1.0\n</cell>\n<text>\nMean Absolute Deviation Error\nThe Mean\
    \ Absolute Deviation Error is defined as:\nMADE = average | x - x_mean |\nwhere\
    \ x is the actual value and x_mean is the mean of the dataset.\nThe MADE can be\
    \ calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual value and\
    \ x_mean is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average\
    \ | x - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual ", "    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n\
    </cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n</cell>\n<code\
    \ language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0])\n</cell>\n<code language=julia-1.3>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0,\
    \ 17.0])\n</cell>\n<code language=julia-", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    sum = 0.0\n    for x in numbers\n\
    \        sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\nMean Absolute Deviation Error", " \
    \   sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability (spread) in a set of numbers. It is defined as:",
  "    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a regression model. \nIt is a good idea to have\
    \ a metric to evaluate your model. \nWe will use Mean Absolute Deviation as our\
    \ metric to evaluate our model.", "    sum = 0.0\n    for x in numbers\n     \
    \   sum += abs(x - mean(x))\n    end\n    return sum / length(numbers)\nend\n\
    </cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
    </cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n\
    </cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n</cell>\n<code\
    \ language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0,\
    \ 17.0])\n</cell>\n<code language=julia-1.0", "    sum = 0.0\n    for n in numbers\n\
    \        sum += abs(n - mean(n))\n    end\n    return sum / length(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ mean absolute deviation for a vector of numbers and a vector of weights.\nThe\
    \ weights are a vector of weights for each element in the input vector. \nThe\
    \ function should return a vector of mean absolute deviations for each element\
    \ in the input vector.\nThe function should also accept a vector of weights as\
    \ an optional argument. \nIf the weights vector is omitted, the function should\
    \ assume a vector of ones as weights.\nThe function should return an error if\
    \ the weights vector is not the same length as the input vector."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
