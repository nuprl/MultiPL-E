name: HumanEval_84_solve
language: jl
prompt: "\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\
  \    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"110\"\
  \n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n        @N integer\n \
  \            Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
  \ of binary number\n    \"\"\"\nfunction solve(N::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
  \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
  )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
completions: ["    if N < 0\n        return \"0\"\n    if N == 0\n        return \"\
    0\"\n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    digits = solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</", "    if N ==\
    \ 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n    if digits[1]\
    \ == 0 \n        return \"0\"\n    \n    digits = digits[2:end]\n    \n    sum\
    \ = 0\n    for digit in digits\n        sum = sum + digit\n    \n    return string(digits,\
    \ sum)\nend", "    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    digits[N] = 0\n    \n    return join(digits, \"\
    \")\nend\n</cell>\n<text>\nExercise 3\nWrite a Julia function that takes a positive\
    \ integer N and returns the sum of its digits in binary. Your function should\
    \ take no arguments and return a string.", "    \n    if N < 0\n        error(\"\
    N must be positive\")\n    \n    if N < 10\n        return string(N)\n    \n \
    \   digits = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[i] = digits[i-1]\
    \ + N % 10\n        N = N / 10\n    end\n    \n    digits[end] = digits[end] +\
    \ N % 10\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.", "    \n    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    \n    if N == 0\n        return \"0\"\n    end\n    \n    digits\
    \ = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i]\
    \ = digits[i-1] * 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    \n    digits = zeros(Int, 10)\n    \n    for i = 1:N\n       \
    \ digits[N % 10] += 1\n        N /= 10\n    end\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]", "    if N == 0 \n        return \"\
    0\"\n    if N < 0 \n        return \"0\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    digits = digits + solve(digits)\n    \n    digits = digits +\
    \ solve(digits)\n    \n    digits = digits + solve(digits)\n    \n    digits =\
    \ digits + solve(digits)\n    \n    digits = digits + solve(digits)\n    \n  \
    \  digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(", "    if N < 0\n        error(\"N must be\
    \ positive\")\n    end\n    \n    digits = zeros(Int, N)\n    \n    for d in digits[2:end]\n\
    \        digits[d] = digits[d] + 1\n    end\n    \n    digits[end] = digits[end]\
    \ + 1\n    \n    digits = digits[2:end]\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</", "    \n    if\
    \ N < 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"0\"\
    , N)\n    \n    digits = string(\"0\", N)\n    \n    for i = 1:N\n        digits\
    \ = digits[2:end-2] + digits[2:end]\n    end\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n", "    if N < 0\n        return \"-1\"\n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    digits = digits(N)\n    \n    binary = \"\"\n  \
    \  for d in digits\n        binary += string(\"1\", d)\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(5) == \"1111\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(15) == \"11111\"\n@assert solve(20) ==\
    \ \"111111\"\n@assert solve(25) == \"1111111\"\n@assert solve(30) == \"11111110\"\
    \n@assert solve(35) == \"111111110\"\n@assert solve(40) == \"1111111101\"\n@assert\
    \ solve(45) == \"11111111010\"\n@assert solve(50) == \"111111110100\"\n@assert\
    \ solve(55) == \"1111111101010\"\n@assert solve(60) == \"11111111010100\"\n@assert\
    \ solve(65) == \"111111110101011\"\n@assert solve(70) == \"1111111101010011\"\n\
    @assert solve(75) == \"11111111010100110\"\n@assert solve(80) == \"1111111101010011001\"\
    \n@assert solve(85) == \"111111110101001100110\"\n@assert solve(90) == \"1111111101010011001101\"\
    \n@assert solve(95) == \"11111111010100110011010\"\n@assert solve(100) == \"111111110101001100110101\"\
    \n@assert solve(101) == \"1111111101010011001101010\"\n@assert solve(110) == \"\
    11111111010100110011010100\"\n@assert solve(111) == \"1111111101010011001101010001\"\
    \n@assert solve(1000) == \"111111110101001100110101000110\"\n@assert solve(1500)\
    \ == \"111111110101001100110101000110110\"\n@assert solve(2000) == \"111111110101001100110101000110110100\"\
    \n@assert solve(2500) == \"111111110101001100110101000110110100100\"\n@assert\
    \ solve(3000) == \"11111111010100110011010100011011010010010\"\n@assert solve(3500)\
    \ == \"1111111101010011001101010001101101001001010\"\n@assert solve(4000) == \"\
    11111111010100110011010100011011010010010100\"\n@assert solve(", "    if N ==\
    \ 0 \n        return \"0\"\n    if N < 0 \n        return \"0\"\n    if N < 10\
    \ \n        return string(\"0\", N)\n    \n    digits = string(\"0\", N)\n   \
    \ digits = digits[2:end]\n    \n    sum = 0\n    for digit in digits\n       \
    \ sum += digit\n    \n    return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.", "    \n    if N <\
    \ 0\n        error(\"N must be positive\")\n    \n    digits = zeros(Int, N)\n\
    \    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N\
    \ / 2\n    end\n    \n    digits[N] = digits[N-1] + N % 2\n    \n    return join(digits,\
    \ \"\")\nend", "    \n    if N == 0 \n        return \"0\"\n    \n    if N < 0\n\
    \        return \"-1\"\n    \n    if N < 10\n        return string(\"0\", N)\n\
    \    \n    digits = N % 10\n    \n    N = N / 10\n    \n    digits = digits +\
    \ N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n   \
    \ N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n\
    \    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digit", "  \
    \  if N < 0\n        error(\"N must be positive\")\n    end\n    if N == 0\n \
    \       return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5]\
    \ = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9]\
    \ = 1\n    \n    sum = 0\n    \n    for i in 1:N\n        digit = digits[i]\n\
    \        sum += digit\n    end\n    \n    return string(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\
    \n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) ==\
    \ \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7)\
    \ == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"\
    1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert\
    \ solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) ==\
    \ \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n\
    @assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"", "    \n    digits = digits(N)\n    \n    binary =\
    \ \"\"\n    \n    for digit in digits\n        binary = binary + digit\n    end\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nThe sum of the numbers from 1 to N is\
    \ given by\n$$\n\\sum{n=1}^N n\n$$\nThe first ten terms so far have no digits\
    \ in common. \nThe next ten terms have one digit, and so on. \nBy \"digit\" we\
    \ mean the base-ten number with that many leading zeros. \nThe same \"digit\"\
    \ appears twice with different base-ten values. \nFor example, with N=12 the terms\
    \ so far are \n$$\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \\text{and}\\, 10.\n$$\nThe\
    \ terms so far have 1, 2, 3, ... , 9, and 10 repeated. \nSince the 1's have no\
    \ common factors, 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55. \nThe only numbers\
    \ left are 5, 7, and 8. \nSo the sum of the numbers from 1 to N is: \n$$\n\\sum{n=1}^N\
    \ 5 + \\sum{n=1}^N 7 + \\sum{n=1}^N 8\n$$\nThe first ten terms so far have no\
    \ digits in common. \nThe next ten terms have one digit, and so on. \nBy \"digit\"\
    \ we mean the base-ten number with that many leading zeros. \nThe same \"digit\"\
    \ appears twice with different base-ten values. \nFor example, with N=12 the terms\
    \ so far are \n$$\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \\text{and}\\, 10.\n$$\nThe\
    \ terms so far have 1, 2, 3, ... , 9, and 10 repeated. \nSince the 1's have no\
    \ common factors, 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 55. \nThe only numbers\
    \ left are 5, 7, and 8. \nSo the sum of the numbers from 1 to N is: \n$$\n\\sum{n=1}^N\
    \ 5 + \\sum{n=1}^N 7 + \\sum{n=1}^N 8\n$$\nThe first ten terms so far have no\
    \ digits in common. \nThe next t", "    if N < 0\n        error(\"N must be positive\"\
    )\n    end\n    if N == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int,\
    \ N)\n    \n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    digits[N] = digits[N-1] * 2\n    \n    digits = digits[2:end]\n\
    \    \n    return join(digits, \"\")\nend", "    if N < 0\n        return \"0\"\
    \n    \n    if N < 10\n        return string(\"1\", N)\n    \n    digits = string(\"\
    0\", N)\n    \n    for i = 2 to N\n        digits = digits[1:] + string(\"0\"\
    , N - i)\n    end\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 9\nWrite a Julia function called digits that\
    \ takes a positive integer N and returns the total sum of its digits in binary.",
  "    if N == 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n    sum\
    \ = 0\n    for d in digits\n        sum += d\n    \n    return string(digits,\
    \ sum)\nend", "    if N < 0\n        error(\"N must be positive\")\n    end\n\
    \    \n    binary = \"\"\n    \n    for i = 1:N\n        binary = binary + string(i,\
    \ 2)\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"11000\"\n@assert solve(7) == \"110000\"\n@assert solve(8) == \"1100001\"\
    \n@assert solve(9) == \"1100010\"\n@assert solve(10) == \"11000100\"\n@assert\
    \ solve(11) == \"110001000\"\n@assert solve(12) == \"1100010000\"\n@assert solve(13)\
    \ == \"11000100000\"\n@assert solve(14) == \"110001000000\"\n@assert solve(15)\
    \ == \"1100010000000\"\n@assert solve(16) == \"11000100000000\"\n@assert solve(17)\
    \ == \"110001000000000\"\n@assert solve(18) == \"1100010000000000\"\n@assert solve(19)\
    \ == \"11000100000000000\"\n@assert solve(20) == \"110001000000000000\"\n@assert\
    \ solve(21) == \"1100010000000000000\"\n@assert solve(22) == \"11000100000000000000\"\
    \n@assert solve(23) == \"110001000000000000000\"\n@assert solve(24) == \"1100010000000000000000\"\
    \n@assert solve(25) == \"11000100000000000000000\"\n@assert solve(26) == \"110001000000000000000000\"\
    \n@assert solve(27) == \"1100010000000000000000000\"\n@assert solve(28) == \"\
    11000100000000000000000000\"\n@assert solve(29) == \"110001000000000000000000000\"\
    \n@assert solve(30) == \"1100010000000000000000000000\"\n@assert solve(31) ==\
    \ \"11000100000000000000000000000\"\n@assert solve(32) == \"110001000000000000000000000000\"\
    \n@assert solve(33) == \"1100010000000000000000000000000\"\n@assert solve(34)\
    \ == \"11000100000000000000000000000000\"\n@assert solve(35) == \"110001000000000000000000000000000\"\
    \n@assert solve(36) == \"1100010000000000000000000000000000\"\n@assert solve(37)\
    \ == \"11000100000000000000000000000000000\"\n@assert solve(38) == \"110001000000000000000000000000000000\"\
    \n@assert solve(39) == \"1100010000000000000000000000000000000\"\n@assert solve(40)\
    \ == \"11000100000000000000000000000000000000\"\n@assert solve(41) == \"110001000000000000000000000000000000000\"\
    \n@assert solve(42) == \"1100010000000000000000000000000000000000", "    \n  \
    \  binary = \"\"\n    \n    if N < 0\n        error(\"N must be positive\")\n\
    \    \n    if N == 0\n        binary = \"0\"\n    \n    if N < 10\n        binary\
    \ = \"0\"\n    \n    if N < 100\n        binary = \"1\" + binary\n    \n    if\
    \ N < 1000\n        binary = \"10\" + binary\n    \n    if N < 10000\n       \
    \ binary = \"100\" + binary\n    \n    if N < 100000\n        binary = \"1000\"\
    \ + binary\n    \n    if N < 1000000\n        binary = \"10000\" + binary\n  \
    \  \n    if N < 10000000\n        binary = \"100000\" + binary\n    \n    if N\
    \ < 100000000\n        binary = \"1000000\" + binary\n    \n    if N < 1000000000\n\
    \        binary = \"10000000\" + binary\n    \n    if N < 10000000000\n      \
    \  binary = \"100000000\" + binary\n    \n    if N < 100000000000\n        binary\
    \ = \"1000000000\" + binary\n    \n    if N < 1000000000000\n        binary =\
    \ \"10000000000\" + binary\n    \n    if N < 10000000000000\n        binary =\
    \ \"100000000000\" + binary\n    \n    if N < 100000000000000\n        binary\
    \ = \"1000000000000\" + binary\n    \n    if N < 1000000000000000\n        binary\
    \ = \"10000000000000\" + binary\n    \n    if N < 10000000000000000\n        binary\
    \ = \"100000000000000\" + binary\n    \n    if N < 100000000000000000\n      \
    \  binary = \"1000000000000000\" + binary\n    \n    if N < 1000000000000000000\n\
    \        binary = \"10000000000000000\" + binary\n    \n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1010\"\n@assert solve(5) == \"10111\"\n@assert solve(6) == \"11100\"\n\
    @assert solve(7) == \"11101\"\n@assert solve(8) == \"11110\"\n@assert solve(9)\
    \ == \"11111\"\n@assert solve(10) == \"111010\"\n@assert solve(11) == \"1110111\"\
    \n@assert solve(12) == \"1111010\"\n@assert solve(13) == \"11110110\"\n@assert\
    \ solve(14) == \"11111011\"\n@assert solve(15) == \"111111010\"\n@assert solve(16)\
    \ == \"1111110110\"\n@assert solve(17) == \"1111111011\"\n@assert solve(18) ==\
    \ \"11111111010\"\n@assert solve(19) == \"111111110110"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
