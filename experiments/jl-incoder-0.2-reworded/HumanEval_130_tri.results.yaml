language: jl
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a\
    \ function that returns the n-th Fibonacci number in the Fibonacci sequence. \n\
    \    For example, fib(3) = 1, fib(4) = 1, fib(5) = 2, fib(6) = 3, fib(7) = 5,\
    \ fib(8) = 8, \n    etc.\n    You have to write a function with two parameters:\
    \ n and fibonacci sequence. \n    You have to return an Int64 number.\n    Examples:\n\
    \    >>> fib(3)\n    1\n    >>> fib(4)\n    1\n    >>> fib(5)\n    2\n    >>>\
    \ fib(6)\n    3\n    >>> fib(7)\n    5\n    >>> fib(8)\n    8\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6s4_xxhl.jl:25\nin expression starting at\
    \ /tmp/tmp6s4_xxhl.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function for computing Fibonacci numbers.\
    \ \n    \n    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Returns:\n\
    \    \n    - `Vector{Int64}`\n    \n    Examples:\n    \n    >>> fib(3)\n    [1,\
    \ 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv_47ft2.jl:25\nin expression starting at\
    \ /tmp/tmpgv_47ft2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64\n    \n    Fibonacci\
    \ number for given number n\n    \n    Arguments:\n    \n    n - a positive integer\n\
    \    \n    Returns:\n    \n    Fibonacci number for given number n\n    \n   \
    \ Examples:\n    \n    >>> fib(3)\n    3\n    >>> fib(5)\n    5\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzae49x4e.jl:21\nin expression starting at\
    \ /tmp/tmpzae49x4e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1leo_jx.jl:25\nin expression starting at\
    \ /tmp/tmpz1leo_jx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdsljm09e.jl:21\nin expression starting at\
    \ /tmp/tmpdsljm09e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number $n$ and returns the $n$th Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhrnhgc6.jl:21\nin expression starting at\
    \ /tmp/tmpwhrnhgc6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    else\n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the Fibonacci sequence up to n.\nExamples:\n\
    >>> fibonacci(3)\n[1, 1, 2]\n>>> fibonacci(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55]\n>>> fibonacci(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\
    \ 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n\
    </text>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycngl5yz.jl:27\nin expression starting at\
    \ /tmp/tmpycngl5yz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the n-th number of the Fibonacci sequence.\nExamples:\n\
    >>> fib(3)\n8\n>>> fib(5)\n13\n>>> fib(7)\n21\n>>> fib(8)\n34\n>>> fib(10)\n55\n\
    >>> fib(11)\n89\n>>> fib(12)\n144\n>>> fib(13)\n233\n>>> fib(14)\n377\n>>> fib(15)\n\
    610\n>>> fib(16)\n987\n>>> fib(17)\n1597\n>>> fib(18)\n2584\n>>> fib(19)\n4181\n\
    >>> fib(20)\n6765\n>>> fib(21)\n10946\n>>> fib(22)\n17711\n>>> fib(23)\n28657\n\
    >>> fib(24)\n46368\n>>> fib(25)\n75025\n>>> fib(26)\n121393\n>>> fib(27)\n196418\n\
    >>> fib(28)\n317811\n>>> fib(29)\n514229\n>>> fib(30)\n832040\n>>> fib(31)\n1346269\n\
    >>> fib(32)\n2178309\n>>> fib(33)\n3524578\n>>> fib(34)\n5702887\n>>> fib(35)\n\
    9227465\n>>> fib(36)\n14930352\n>>> fib(37)\n24157817\n>>> fib(38)\n39088169\n\
    >>> fib(39)\n63245986\n>>> fib(40)\n102334155\n>>> fib(41)\n165580141\n>>> fib(42)\n\
    267914296\n>>> fib(43)\n433494437\n>>> fib(44)\n701408733\n>>> fib(45)\n1134903170\n\
    >>> fib(46)\n1836311903\n>>> fib(47)\n2971215073\n>>> fib(48)\n4807526976\n>>>\
    \ fib(49)\n7778742049\n>>> fib(50)\n12586269025\n>>> fib(51)\n20365011074\n>>>\
    \ fib(5\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pkyvu2c.jl:21\nin expression starting at\
    \ /tmp/tmp1pkyvu2c.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Calculates the nth number in the Fibonacci sequence.\
    \ \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if\
    \ n is even.\n    \n    Examples:\n    >>> fib(3)\n    8\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplw6b7973.jl:21\nin expression starting at\
    \ /tmp/tmplw6b7973.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmp9qejk.jl:25\nin expression starting at\
    \ /tmp/tmpbmp9qejk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the factorial of a given number. \nExamples:\n\
    factorial(3) = 3\nfactorial(5) = 5\nfactorial(10) = 50\nfactorial(13) = 859\n\
    Hint: use recursion.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4q4tesx.jl:21\nin expression starting at\
    \ /tmp/tmpi4q4tesx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0d_h4pic.jl:21\nin expression starting at\
    \ /tmp/tmp0d_h4pic.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwahvi23.jl:21\nin expression starting at\
    \ /tmp/tmpvwahvi23.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    if n == 1\n        return\
    \ Vector{Int64}(1)\n    if n % 2 == 0\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n   \
    \ fib(n::Int64)::Vector{Int64}\n    \n    Recursive Fibonacci function\n    \n\
    \    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Returns:\n \
    \   \n    - `Vector{Int64}`\n    \n    Examples:\n    \n    >>> fib(3)\n    [1,\
    \ 1, 2]\n    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8omx3o2j.jl:29\nin expression starting at\
    \ /tmp/tmp8omx3o2j.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n   \
    \     return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function which returns the nth number of the Fibonacci sequence.\
    \ \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if\
    \ n is even.\n    \n    Examples:\n    >>> fib(3)\n    8\n    >>> fib(4)\n   \
    \ 13\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6koc337.jl:21\nin expression starting at\
    \ /tmp/tmpz6koc337.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1icm5sdf.jl:21\nin expression starting at\
    \ /tmp/tmp1icm5sdf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1,\
    \ 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 1) + tri(n - 2)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj61efqcl.jl:29\nin expression starting at\
    \ /tmp/tmpj61efqcl.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers from 1 to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzl0b0reo.jl:25\nin expression starting at\
    \ /tmp/tmpzl0b0reo.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcx_e6xm.jl:21\nin expression starting at\
    \ /tmp/tmprcx_e6xm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive Fibonacci function.\n\
    \    \n    Arguments:\n    \n    - `n`: An integer greater than or equal to 0.\n\
    \    \n    Returns:\n    \n    - A vector containing the first n Fibonacci numbers.\n\
    \    \n    Examples:\n    \n    >>> fib(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_d8feco.jl:21\nin expression starting at\
    \ /tmp/tmp6_d8feco.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that calculates the n-th Fibonacci\
    \ number using memoization. \nThe function should take one argument, n, which\
    \ represents the number of Fibonacci numbers to return.\nThe function should return\
    \ an array of Fibonacci numbers, where each number in the array is the n-th Fibonacci\
    \ number.\nExamples:\n>>> fibonacci(5)\n[1, 1, 2, 3, 5]\n>>> fibonacci(10)\n[1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>> fibonacci(100)\n[1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n>>> fibonacci(1000)\n[1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp213_m25t.jl:21\nin expression starting at\
    \ /tmp/tmp213_m25t.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpybjcsqwu.jl:21\nin expression starting at\
    \ /tmp/tmpybjcsqwu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that calculates nth Fibonacci\
    \ number\n    \n    Arguments:\n    \n    - `n`: positive integer\n    \n    Returns:\n\
    \    \n    - `n`th Fibonacci number\n    \n    Examples:\n    \n    >>> fib(3)\n\
    \    8\n    >>> fib(4)\n    13\n    >>> fib(5)\n    21\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpji0nad4y.jl:21\nin expression starting at\
    \ /tmp/tmpji0nad4y.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mzw1j5c.jl:21\nin expression starting at\
    \ /tmp/tmp1mzw1j5c.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1,\
    \ 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the first n Fibonacci numbers. \nExamples:\n\
    >>> fib(5)\n[1, 1, 2, 3, 5]\n>>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\
    >>> fib(20)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,\
    \ 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n</text>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxdowufs.jl:29\nin expression starting at\
    \ /tmp/tmpsxdowufs.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n    \
    \    return Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in the Fibonacci sequence up to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3i950nx.jl:21\nin expression starting at\
    \ /tmp/tmpn3i950nx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        [1]\n    elseif n == 2\n        [1, 2]\n    elseif\
    \ n % 2 == 0\n        tri(n - 1) + tri(n - 2)\n    else\n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the Fibonacci sequence up to a number n. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1) + fibonacci(4)\n           = 2 + 1 + 3 = 5 \nWrite a function\
    \ that returns the Fibonacci sequence up to a number n. \nThe Fibonacci sequence\
    \ is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1) + fibonacci(4)\n           = 2 + 1 + 3 = 5 \nExercise 3\nWrite\
    \ a function that returns the Fibonacci sequence up to a number n. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1) + fibonacci(4)\n           = 2 + 1 + 3 = 5 \nExercise 4\nWrite\
    \ a function that returns the Fibonacci sequence up to a number n. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibon\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4l2we8mf.jl:29\nin expression starting at\
    \ /tmp/tmp4l2we8mf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the factorial of a given number. \nExamples:\n\
    >>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(0)\n1\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(-1)\n0\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n\
    >>> factorial(\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh7138y4.jl:21\nin expression starting at\
    \ /tmp/tmpfh7138y4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that calculates the n-th Fibonacci number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwh0o8cx4.jl:25\nin expression starting at\
    \ /tmp/tmpwh0o8cx4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first n numbers of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\n\
    fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\n\
    fibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\n\
    fibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\n\
    fibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\n\
    fibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\n\
    fibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\n\
    fibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\n\
    fibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\n\
    fibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\nfibonacci(49)\nfibonacci(50)\n\
    fibonacci(51)\nfibonac\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa488ab03.jl:25\nin expression starting at\
    \ /tmp/tmpa488ab03.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n       \
    \ return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number in\
    \ the Fibonacci sequence\n    \n    Arguments:\n    \n    - `n::Int64`: Integer\
    \ number for which Fibonacci sequence is desired\n    \n    Returns:\n    \n \
    \   - `n::Int64`: nth number in the Fibonacci sequence\n    \n    Examples:\n\
    \    \n    >>> fib(3)\n    8\n    \n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qc012v3.jl:29\nin expression starting at\
    \ /tmp/tmp1qc012v3.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of divisors of n that are less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_5jbuv5.jl:25\nin expression starting at\
    \ /tmp/tmpl_5jbuv5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2)\n    \n    Examples:\n    >>> fib(3)\n    8\n    >>> fib(10)\n\
    \    55\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxu837hxc.jl:21\nin expression starting at\
    \ /tmp/tmpxu837hxc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    \n    if n % 2 == 1\n \
    \       tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n -\
    \ 1)\n        return tri_1 + tri_2\n    else\n        tri_1 = tri(n - 1) + tri(n\
    \ - 2)\n        tri_2 = tri(n - 2) + tri(n - 1)\n        return tri_1 + tri_2\
    \ + tri(n - 3)\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtg5vibu.jl:32\nin expression starting at\
    \ /tmp/tmpdtg5vibu.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uyh70xh.jl:25\nin expression starting at\
    \ /tmp/tmp4uyh70xh.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41uyx0ow.jl:25\nin expression starting at\
    \ /tmp/tmp41uyx0ow.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of prime numbers less than or equal\
    \ to a given number.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28kwqb_i.jl:21\nin expression starting at\
    \ /tmp/tmp28kwqb_i.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Fibonacci sequence up to\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8u16lj5.jl:21\nin expression starting at\
    \ /tmp/tmpc8u16lj5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the n-th\
    \ Fibonacci number in the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3) = 3\nfibonacci(4)\
    \ = fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1\nfibonacci(5)\
    \ = fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1\
    \ + 1 + 1 + 2\nfibonacci(6) = fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2)\
    \ + fibonacci(1)\n           = 1 + 1 + 1 + 2 + 3\nfibonacci(7) = fibonacci(6)\
    \ + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n\
    \           = 1 + 1 + 1 + 2 + 3 + 4\nfibonacci(8) = fibonacci(7) + fibonacci(6)\
    \ + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n\
    \           = 1 + 1 + 1 + 2 + 3 + 4 + 5\nfibonacci(9) = fibonacci(8) + fibonacci(7)\
    \ + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = 1 + 1 + 1 + 2 + 3 + 4 + 5 + 6\nfibonacci(10) = fibonacci(9)\
    \ + fibonacci(8) + fibonac\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2iog9d1.jl:21\nin expression starting at\
    \ /tmp/tmpj2iog9d1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n   \
    \     return Vector{Int64}(1) \n    else if n % 2 == 0 \n        return tri(n-1)\
    \ + tri(n-2) \n    else \n        return tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\
    \ \nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxb8d5jv.jl:21\nin expression starting at\
    \ /tmp/tmptxb8d5jv.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    else\n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n\
    \ - 2) + tri(n - 1)\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n  \
    \      return tri_1 + tri_2 + tri_3\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that calculates the n-th Fibonacci number using recursion.\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkqh71c0.jl:21\nin expression starting at\
    \ /tmp/tmpwkqh71c0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Fibonacci sequence is defined by the recurrence:\n    fib(1) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1 = 2\n    fib(3)\
    \ = 3\n    fib(4) = 1 + 3 + 2 = 7\n    You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n    first n + 1 numbers of the Fibonacci\
    \ sequence.\n    Examples:\n    >>> fib(2)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6qauwlu.jl:21\nin expression starting at\
    \ /tmp/tmpl6qauwlu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtem_jkg.jl:25\nin expression starting at\
    \ /tmp/tmphtem_jkg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns the sum\
    \ of the squares of the first n positive integers. \nExamples:\n>>> sumsq(1)\n\
    1\n>>> sumsq(2)\n1\n>>> sumsq(3)\n9\n>>> sumsq(4)\n25\n>>> sumsq(5)\n125\n>>>\
    \ sumsq(10)\n3320\n>>> sumsq(100)\n3320\n>>> sumsq(1000)\n3320\n>>> sumsq(10000)\n\
    3320\n>>> sumsq(100000)\n3320\n>>> sumsq(1000000)\n3320\n>>> sumsq(10000000)\n\
    3320\n>>> sumsq(100000000)\n3320\n>>> sumsq(1000000000)\n3320\n>>> sumsq(10000000000)\n\
    3320\n>>> sumsq(100000000000)\n3320\n>>> sumsq(1000000000000)\n3320\n>>> sumsq(10000000000000)\n\
    3320\n>>> sumsq(100000000000000)\n3320\n>>> sumsq(1000000000000000)\n3320\n>>>\
    \ sumsq(10000000000000000)\n3320\n>>> sumsq(100000000000000000)\n3320\n>>> sumsq(1000000000000000000)\n\
    3320\n>>> sumsq(10000000000000000000)\n3320\n>>> sumsq(100000000000000000000)\n\
    3320\n>>> sumsq(1000000000000000000000)\n3320\n>>> sumsq(10000000000000000000000)\n\
    3320\n>>> sumsq(100000000000000000000000)\n3320\n>>> sumsq(1000000000000000000000000)\n\
    3320\n>>> sumsq(10000000000000000000000000)\n3320\n>>> sumsq(100000000000000000000000000)\n\
    3320\n>>> sumsq(1000000000000000000000000000)\n3320\n>>> sumsq(10000000000000000000000000000)\n\
    3320\n>>> sumsq(100000000000000000000000000000)\n3320\n>>> sumsq(1000000000000000000000000000000)\n\
    3320\n>>> sumsq(10000000000000000000000000000000)\n3320\n>>> sumsq(100000000000000000000000000000000)\n\
    3320\n>>> sumsq(1000000000000000000000000000000000)\n3320\n>>> sumsq(10000000000000000000000000000000000)\n\
    3320\n>>> sumsq(100000000000000000000000000\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32fxsmp3.jl:29\nin expression starting at\
    \ /tmp/tmp32fxsmp3.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined as:\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1\n\
    \    fib(3) = 1 + 2\n    fib(4) = 1 + 3\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n    For example, \n    fib(2)\
    \ = 1 + 1\n    fib(3) = 1 + 2\n    fib(4) = 1 + 3\n    fib(n) = 1 + 2 + 3 + 4\
    \ + 5 + 6 + 7 + 8 + 9 + 10\n    You are given a non-negative integer number n,\
    \ you have to a return a vector of the \n    first n Fibonacci numbers.\n    Examples:\n\
    \    >>> fib(2)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla7yp8dq.jl:21\nin expression starting at\
    \ /tmp/tmpla7yp8dq.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n    \
    \    tri_3 = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n    Recursive function that\
    \ returns the nth number of the Fibonacci sequence\n    \n    fib(0) = 0\n   \
    \ fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    \n    Examples:\n    >>> fib(3)\n\
    \    8\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7ahnrs_.jl:21\nin expression starting at\
    \ /tmp/tmpp7ahnrs_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    else\n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n  \
    \  Calculate the n-th Fibonacci number.\n    \n    Arguments:\n    \n    - `n::Int64`:\
    \ an integer.\n    \n    Returns:\n    \n    - `fib(n::Int64)::Vector{Int64}`:\
    \ a vector containing the n-th Fibonacci number.\n    \n    Examples:\n    \n\
    \    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wywk2q4.jl:29\nin expression starting at\
    \ /tmp/tmp0wywk2q4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n       \
    \ return Vector{Int64}(1)\n    elseif n % 2 == 0\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1)\n    else\n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70s8x7m7.jl:29\nin expression starting at\
    \ /tmp/tmp70s8x7m7.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        Vector{Int64}(1)\n    elseif n == 2\n        Vector{Int64}(3)\n\
    \    else\n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive function that returns\
    \ the nth number of the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    \n    Examples:\n\
    \    >>> fib(4)\n    8\n    >>> fib(5)\n    13\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc4bq3qt.jl:27\nin expression starting at\
    \ /tmp/tmppc4bq3qt.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n   \
    \     return Vector{Int64}(1) \n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_twsivsu.jl:21\nin expression starting at\
    \ /tmp/tmp_twsivsu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the nth Fibonacci number.\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwpjtc3ln.jl:21\nin expression starting at\
    \ /tmp/tmpwpjtc3ln.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function for calculating Fibonacci number\n\
    \    \n    Arguments:\n    \n    - `n` - a positive integer\n    \n    Returns:\n\
    \    \n    - a positive integer - Fibonacci number\n    \n    Examples:\n    \n\
    \    >>> fib(3)\n    3\n    \n    >>> fib(4)\n    5\n    \n    >>> fib(5)\n  \
    \  8\n    \n    >>> fib(6)\n    13\n    \n    >>> fib(7)\n    21\n    \n    >>>\
    \ fib(8)\n    34\n    \n    >>> fib(9)\n    55\n    \n    >>> fib(10)\n    89\n\
    \    \n    >>> fib(11)\n    144\n    \n    >>> fib(12)\n    233\n    \n    >>>\
    \ fib(13)\n    377\n    \n    >>> fib(14)\n    610\n    \n    >>> fib(15)\n  \
    \  987\n    \n    >>> fib(16)\n    1597\n    \n    >>> fib(17)\n    2584\n   \
    \ \n    >>> fib(18)\n    4181\n    \n    >>> fib(19)\n    6765\n    \n    >>>\
    \ fib(20)\n    10946\n    \n    >>> fib(21)\n    17711\n    \n    >>> fib(22)\n\
    \    28657\n    \n    >>> fib(23)\n    43980\n    \n    >>> fib(24)\n    87960\n\
    \    \n    >>> fib(25)\n    176411\n    \n    >>> fib(26)\n    352457\n    \n\
    \    >>> fib(27)\n    701441\n    \n    >>> fib(28)\n    1446695\n    \n    >>>\
    \ fib(29)\n    2339181\n    \n    >>> fib(30)\n    41282571\n    \n    >>> fib(31)\n\
    \    67558062\n    \n    >>> fib(32)\n    113046739\n    \n    >>> fib(33)\n \
    \   190842891\n    \n    >>> fib(34)\n    3080615211\n    \n    >>> fib(35)\n\
    \    63245986311\n    \n    >>> fib(36)\n    126940394\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsec_exi_.jl:21\nin expression starting at\
    \ /tmp/tmpsec_exi_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbebrh6m9.jl:25\nin expression starting at\
    \ /tmp/tmpbebrh6m9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrhg7fmn.jl:21\nin expression starting at\
    \ /tmp/tmpdrhg7fmn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Fibonacci sequence is defined by the recurrence:\n    fib(1) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1 = 2\n    fib(3)\
    \ = 3\n    fib(4) = 1 + 2 + 3 = 5\n    You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n    first n + 1 numbers of the Fibonacci\
    \ sequence.\n    Examples:\n    >>> fib(3)\n    [1, 2, 5]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u_37eo8.jl:21\nin expression starting at\
    \ /tmp/tmp4u_37eo8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Int64\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplpb664d9.jl:21\nin expression starting at\
    \ /tmp/tmplpb664d9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwt634nzm.jl:21\nin expression starting at\
    \ /tmp/tmpwt634nzm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n    \
    \    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2)\n        return tri_1 + tri_2\
    \ + tri_3\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Fibonacci sequence is a sequence of numbers, starting with 1, 1, 2,\
    \ 3, 5, 8, 13, ...\n    \n    You have to return the vector of the first n + 1\
    \ numbers of the Fibonacci sequence.\n    Examples:\n    >>> fib(3)\n    [1, 1,\
    \ 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkybnipqc.jl:21\nin expression starting at\
    \ /tmp/tmpkybnipqc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n  \
    \  \n    Recursive function that returns the nth number of the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    \n    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n\
    \    >>> fib(3)\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqq73ei8.jl:21\nin expression starting at\
    \ /tmp/tmpqqq73ei8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(3) == [1, 3, 2, 8]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the n-th number of the Fibonacci sequence.\nThe Fibonacci sequence\
    \ is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(2)\
    \ = 1\nfibonacci(3) = fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1\nfibonacci(4)\
    \ = fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1 + 2\nfibonacci(5)\
    \ = fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1\
    \ + 1 + 1 + 2 + 3\nfibonacci(6) = fibonacci(5) + fibonacci(4) + fibonacci(3) +\
    \ fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1 + 2 + 3 + 4\nfibonacci(7)\
    \ = fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = 1 + 1 + 1 + 2 + 3 + 4 + 5\nfibonacci(8) = fibonacci(7)\
    \ + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = 1 + 1 + 1 + 2 + 3 + 4 + 5 + 6\nfibonacci(9) = fibonacci(8)\
    \ + fibonacci(7) + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) +\
    \ fibonacci(2) + fibonacci\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzwr4cu2o.jl:21\nin expression starting at\
    \ /tmp/tmpzwr4cu2o.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        vec[1] = 1\n        return vec\n    end\n    if n\
    \ == 2 \n        vec[1] = 1\n        vec[2] = 1\n        return vec\n    end\n\
    \    if n % 2 == 0 \n        vec[1] = tri(n - 1) + tri(n - 2)\n        vec[2]\
    \ = tri(n - 2) + tri(n - 1)\n        return vec\n    end\n    vec[1] = tri(n -\
    \ 1) + tri(n - 2)\n    vec[2] = tri(n - 2) + tri(n - 1)\n    vec[3] = tri(n -\
    \ 3) + tri(n - 2) + tri(n - 1)\n    return vec\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ggnhvdz.jl:38\nin expression starting at\
    \ /tmp/tmp2ggnhvdz.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n    \
    \    return Vector{Int64}(1)\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Fibonacci sequence is a sequence\
    \ of numbers, where each number is the sum of the two preceding ones. \n    For\
    \ example, fib(3) = fib(2) + fib(1) = 1 + 1 = 2. \n    You are given a non-negative\
    \ integer number n, you have to return a vector of the \n    first n + 1 numbers\
    \ of the Fibonacci sequence.\n    Examples:\n    >>> fib(3)\n    [1, 1, 2]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxdr0wfu.jl:21\nin expression starting at\
    \ /tmp/tmpyxdr0wfu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n   \
    \     return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n numbers of the Fibonacci sequence. \n    You have to return them\
    \ as a vector. \n    You have to do it recursively. \n    You have to do it iteratively.\
    \ \n    You have to do it with while loop. \n    You have to do it with for loop.\
    \ \n    You have to do it with while and for loop. \n    You have to do it with\
    \ recursion. \n    You have to do it with tail recursion. \n    You have to do\
    \ it with memoization. \n    You have to do it with lazy evaluation. \n    You\
    \ have to do it with lazy evalution using closures. \n    You have to do it with\
    \ lazy evalution using closures and memoization. \n    You have to do it with\
    \ lazy evalution using closures and memoization.\n    You have to do it with lazy\
    \ evalution using closures and memoization.\n    You have to do it with lazy evalution\
    \ using closures and memoization.\n    You have to do it with lazy evalution using\
    \ closures and memoization.\n    You have to do it with lazy evalution using closures\
    \ and memoization.\n    You have to do it with lazy evalution using closures and\
    \ memoization.\n    You have to do it with lazy evalution using closures and memoization.\n\
    \    You have to do it with lazy evalution using closures and memoization.\n \
    \   You have to do it with lazy evalution using closures and memoization.\n  \
    \  You have to do it with lazy evalution using closures and memoization.\n   \
    \ You have to do it with lazy evalution using closures and memoization.\n    You\
    \ have to do it with lazy evalution using closures and memoization.\n    You have\
    \ to do it with lazy evalution using closures and memoization.\n    You have to\
    \ do it with lazy evalution using closures and memoization.\n    You have to do\
    \ it with lazy evalution using closures and memoization.\n    You have to do it\
    \ with lazy evalution using closures and memoization.\n    You have to do it with\
    \ lazy evalution using closures and memoization.\n    You have to do it with lazy\
    \ evalution using closures and memoization.\n    You have to do it with lazy evalution\
    \ using closures and memoization.\n    You have to do it with lazy evalution using\
    \ closures and memoization.\n    You have to do it with lazy evalution using closures\
    \ and memoization.\n    You have to do it with \nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wtf0ms9.jl:21\nin expression starting at\
    \ /tmp/tmp_wtf0ms9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 10\nWrite a function that takes as input a non-negative\
    \ integer n and returns the nth number of the Fibonacci sequence.\nExamples:\n\
    >>> fib(3)\n8\n>>> fib(4)\n13\n>>> fib(5)\n21\n>>> fib(6)\n34\n>>> fib(7)\n55\n\
    >>> fib(8)\n89\n>>> fib(9)\n144\n>>> fib(10)\n233\n>>> fib(11)\n377\n>>> fib(12)\n\
    610\n>>> fib(13)\n987\n>>> fib(14)\n1597\n>>> fib(15)\n2584\n>>> fib(16)\n4181\n\
    >>> fib(17)\n6765\n>>> fib(18)\n10946\n>>> fib(19)\n17711\n>>> fib(20)\n28657\n\
    >>> fib(21)\n46368\n>>> fib(22)\n75025\n>>> fib(23)\n121393\n>>> fib(24)\n196418\n\
    >>> fib(25)\n317811\n>>> fib(26)\n514229\n>>> fib(27)\n832040\n>>> fib(28)\n1346269\n\
    >>> fib(29)\n2178309\n>>> fib(30)\n3524578\n>>> fib(31)\n5702887\n>>> fib(32)\n\
    9227465\n>>> fib(33)\n14930352\n>>> fib(34)\n24157817\n>>> fib(35)\n39088169\n\
    >>> fib(36)\n63245986\n>>> fib(37)\n102334155\n>>> fib(38)\n165580141\n>>> fib(39)\n\
    267914296\n>>> fib(40)\n433494437\n>>> fib(41)\n701408733\n>>> fib(42)\n1134903170\n\
    >>> fib(43)\n1836311903\n>>> fib(44)\n2971215073\n>>> fib(45)\n4807526976\n>>>\
    \ fib(46)\n7778742049\n>>> fib(47)\n12586269025\n>>> fib(48)\n20365011074\n>>>\
    \ fib(49)\n32951280099\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jw6xd78.jl:21\nin expression starting at\
    \ /tmp/tmp_jw6xd78.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n % 2 == 0\n        return tri(n-1)\
    \ + tri(n-2)\n    else\n        return tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2vdjcvl.jl:27\nin expression starting at\
    \ /tmp/tmpp2vdjcvl.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the sum of the numbers from 1 to n.\nExamples:\n>>> sum(1:10)\n55\n\
    >>> sum(1:100)\n5500\n>>> sum(1:1000)\n550055\n>>> sum(1:10000)\n55005500\n>>>\
    \ sum(1:100000)\n5500550055\n>>> sum(1:1000000)\n550055005500\n>>> sum(1:10000000)\n\
    55005500550055\n>>> sum(1:100000000)\n5500550055005500\n>>> sum(1:1000000000)\n\
    550055005500550055\n>>> sum(1:10000000000)\n55005500550055005500\n>>> sum(1:100000000000)\n\
    5500550055005500550055\n>>> sum(1:1000000000000)\n550055005500550055005500\n>>>\
    \ sum(1:10000000000000)\n55005500550055005500550055\n>>> sum(1:100000000000000)\n\
    5500550055005500550055005500\n>>> sum(1:1000000000000000)\n550055005500550055005500550055\n\
    >>> sum(1:10000000000000000)\n55005500550055005500550055005500\n>>> sum(1:100000000000000000)\n\
    55005500550055005500550055005500\n>>> sum(1:100000000000000001)\n5500550055005500550055005500550055\n\
    >>> sum(1:100000000000000002)\n550055005500550055005500550055005500\n>>> sum(1:100000000000000003)\n\
    55005500550055005500550055005500550055\n>>> sum(1:100000000000000004)\n5500550055005500550055005500550055005500\n\
    >>> sum(1:100000000000000005)\n550055005500550055005500550055005500550055\n>>>\
    \ sum(1:10000000000\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67a9izec.jl:29\nin expression starting at\
    \ /tmp/tmp67a9izec.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    else if n == 1\n      \
    \  return Vector{Int64}(3)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th number of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence:\n    fib(1)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1 =\
    \ 2\n    fib(3) = fib(2)+fib(1)+fib(2)\n           = 2 + 1 + 2 = 5 \n    You are\
    \ given a non-negative integer number n, you have to a return a vector of the\
    \ \n    first n + 1 numbers of the Fibonacci sequence.\n    Examples:\n    >>>\
    \ fib(3)\n    [1, 2, 5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrab2u7w.jl:21\nin expression starting at\
    \ /tmp/tmpdrab2u7w.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8e2n8elp.jl:27\nin expression starting at\
    \ /tmp/tmp8e2n8elp.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tcjfu4k.jl:21\nin expression starting at\
    \ /tmp/tmp0tcjfu4k.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41uyx0ow.jl:25\nin expression starting at\
    \ /tmp/tmp41uyx0ow.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1,\
    \ 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n + 1) + tri(n -\
    \ 2)\n    end\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the sum of the numbers from 1 to n.\nExamples:\n>>> sum_of_numbers(1)\n1\n>>>\
    \ sum_of_numbers(2)\n2\n>>> sum_of_numbers(3)\n6\n>>> sum_of_numbers(4)\n10\n\
    >>> sum_of_numbers(5)\n15\n>>> sum_of_numbers(6)\n21\n>>> sum_of_numbers(7)\n\
    28\n>>> sum_of_numbers(8)\n33\n>>> sum_of_numbers(9)\n42\n>>> sum_of_numbers(10)\n\
    50\n>>> sum_of_numbers(11)\n57\n>>> sum_of_numbers(12)\n66\n>>> sum_of_numbers(13)\n\
    75\n>>> sum_of_numbers(14)\n84\n>>> sum_of_numbers(15)\n93\n>>> sum_of_numbers(16)\n\
    102\n>>> sum_of_numbers(17)\n108\n>>> sum_of_numbers(18)\n117\n>>> sum_of_numbers(19)\n\
    126\n>>> sum_of_numbers(20)\n134\n>>> sum_of_numbers(21)\n142\n>>> sum_of_numbers(22)\n\
    151\n>>> sum_of_numbers(23)\n160\n>>> sum_of_numbers(24)\n169\n>>> sum_of_numbers(25)\n\
    178\n>>> sum_of_numbers(26)\n187\n>>> sum_of_numbers(27)\n196\n>>> sum_of_numbers(28)\n\
    207\n>>> sum_of_numbers(29)\n216\n>>> sum_of_numbers(30)\n225\n>>> sum_of_numbers(31)\n\
    234\n>>> sum_of_numbers(32)\n243\n>>> sum_of_numbers(33)\n252\n>>> sum_of_numbers(34)\n\
    261\n>>> sum_of_numbers(35)\n270\n>>> sum_of_numbers(36)\n279\n>>> sum_of_numbers(37)\n\
    288\n>>> sum_of_numbers(38)\n297\n>>> sum_of_numbers(39)\n308\n>>> sum_of_numbers(40)\n\
    317\n>>> sum_of_numbers(41)\n326\n>>> sum_of_numbers(42)\n336\n>>> sum_of_numbers(43)\n\
    346\n>>> sum_of_numbers(44)\n356\n>>> sum_of_numbers(45)\n366\n>>> sum_of_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wk433rg.jl:29\nin expression starting at\
    \ /tmp/tmp6wk433rg.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Fibonacci sequence is defined\
    \ by the recurrence:\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is\
    \ even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n\
    \    fib(2) = 1 + 1 = 2\n    fib(3) = fib(2)+fib(1)+fib(2)\n           = 2 + 1\
    \ + 2 = 5 \n    You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n    first n + 1 numbers of the Fibonacci sequence.\n    Examples:\n\
    \    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvmvgdhd.jl:21\nin expression starting at\
    \ /tmp/tmpvvmvgdhd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns the nth number of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\n\
    fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor\
    \ example:\nfibonacci(3) = 3\nfibonacci(4) = 5 \nfibonacci(5) = 8 \nYou are given\
    \ an integer n. \nYou have to return the nth number of the Fibonacci sequence.\n\
    Examples:\nfibonacci(0) = 1\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3)\
    \ = 3\nfibonacci(4) = 5 \nfibonacci(5) = 8 \nfibonacci(6) = 13\nfibonacci(7) =\
    \ 21\nfibonacci(8) = 34\nfibonacci(9) = 55\nfibonacci(10) = 89\nfibonacci(11)\
    \ = 144\nfibonacci(12) = 233\nfibonacci(13) = 377\nfibonacci(14) = 610\nfibonacci(15)\
    \ = 987\nfibonacci(16) = 1597\nfibonacci(17) = 2584\nfibonacci(18) = 4181\nfibonacci(19)\
    \ = 6765\nfibonacci(20) = 10946\nfibonacci(21) = 17711\nfibonacci(22) = 28657\n\
    fibonacci(23) = 46368\nfibonacci(24) = 75025\nfibonacci(25) = 121393\nfibonacci(26)\
    \ = 196418\nfibonacci(27) = 317811\nfibonacci(28) = 514229\nfibonacci(29) = 832040\n\
    fibonacci(30) = 1346269\nfibonacci(31) = 2178309\n\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhpiu3c3.jl:21\nin expression starting at\
    \ /tmp/tmplhpiu3c3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n\
    \ - 2) + tri(n - 1)\n        return tri_1 + tri_2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwiynek0q.jl:21\nin expression starting at\
    \ /tmp/tmpwiynek0q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n-1) + tri(n-2)\n    else\n       \
    \ return tri(n-1) + tri(n-2) + tri(n-3)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4o7sjqi6.jl:29\nin expression starting at\
    \ /tmp/tmp4o7sjqi6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdccmfn4e.jl:21\nin expression starting at\
    \ /tmp/tmpdccmfn4e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the Fibonacci sequence up to\
    \ n.\nExamples:\n>>> fib(10)\n55\n>>> fib(20)\n6765\n>>> fib(30)\n6765\n>>> fib(40)\n\
    6765\n>>> fib(50)\n6765\n>>> fib(60)\n6765\n>>> fib(70)\n6765\n>>> fib(80)\n6765\n\
    >>> fib(90)\n6765\n>>> fib(100)\n6765\n>>> fib(200)\n6765\n>>> fib(300)\n6765\n\
    >>> fib(400)\n6765\n>>> fib(500)\n6765\n>>> fib(600)\n6765\n>>> fib(700)\n6765\n\
    >>> fib(800)\n6765\n>>> fib(900)\n6765\n>>> fib(1000)\n6765\n>>> fib(2000)\n6765\n\
    >>> fib(3000)\n6765\n>>> fib(4000)\n6765\n>>> fib(5000)\n6765\n>>> fib(6000)\n\
    6765\n>>> fib(7000)\n6765\n>>> fib(8000)\n6765\n>>> fib(9000)\n6765\n>>> fib(10000)\n\
    6765\n>>> fib(20000)\n6765\n>>> fib(30000)\n6765\n>>> fib(40000)\n6765\n>>> fib(50000)\n\
    6765\n>>> fib(60000)\n6765\n>>> fib(70000)\n6765\n>>> fib(80000)\n6765\n>>> fib(90000)\n\
    6765\n>>> fib(100000)\n6765\n>>> fib(200000)\n6765\n>>> fib(300000)\n6765\n>>>\
    \ fib(400000)\n6765\n>>> fib(500000)\n6765\n>>> fib(600000)\n6765\n>>> fib(700000)\n\
    6765\n>>> fib(800000)\n6765\n>>> fib(900000)\n6765\n>>> fib(1000000)\n6765\n>>>\
    \ fib(2000000)\n6765\n>>> fib(3000000)\n6765\n>>> fib(4000000)\n6765\n>>> fib(5000000)\n\
    6765\n>>> fib(6000000)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazi4hg24.jl:25\nin expression starting at\
    \ /tmp/tmpazi4hg24.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the n-th Fibonacci\
    \ number in the Fibonacci sequence. \nThe Fibonacci sequence is defined by the\
    \ recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\n\
    fibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\n\
    fibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\n\
    fibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\n\
    fibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\n\
    fibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\n\
    fibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\n\
    fibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\n\
    fibonacci(47)\nfibonacci(48)\nfibon\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf2lzjwh.jl:21\nin expression starting at\
    \ /tmp/tmppf2lzjwh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the n-th Fibonacci number in\
    \ the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence:\n\
    fibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\n\
    fibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\n\
    fibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\n\
    fibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\n\
    fibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\n\
    fibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\n\
    fibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\n\
    fibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\n\
    fibonacci(49)\nfibonacci(50)\nfibonacci\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_5zrnp4.jl:21\nin expression starting at\
    \ /tmp/tmpj_5zrnp4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2) \n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the nth Fibonacci number in the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n + 1), if n is odd.\nExamples:\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\nfibonacci(8)\nfibonacci(10)\n\
    fi\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8npyior7.jl:21\nin expression starting at\
    \ /tmp/tmp8npyior7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1)\n    elseif n == 2 \n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers from 1 to n that are divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8imxrbro.jl:29\nin expression starting at\
    \ /tmp/tmp8imxrbro.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}[1]\n    elseif n == 2 \n        Vector{Int64}[3,1]\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the\
    \ numbers from 1 to n.\nExamples:\n>>> sum_of_numbers(3)\n6\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(100)\n55555\n>>> sum_of_numbers(1000)\n5555557\n>>> sum_of_numbers(10000)\n\
    55555577\n>>> sum_of_numbers(100000)\n5555557780\n>>> sum_of_numbers(1000000)\n\
    5555557780684\n>>> sum_of_numbers(10000000)\n55555577806846765\n>>> sum_of_numbers(100000000)\n\
    555555778068467654321\n>>> sum_of_numbers(1000000000)\n555555778068467654321000000000000\n\
    >>> sum_of_numbers(10000000000)\n55555577806846765432100000000000000\n>>> sum_of_numbers(100000000000)\n\
    555555778068467654321000000000000000\n>>> sum_of_numbers(1000000000000)\n5555557780684676543210000000000000000\n\
    >>> sum_of_numbers(10000000000000)\n55555577806846765432100000000000000000\n>>>\
    \ sum_of_numbers(100000000000000)\n555555778068467654321000000000000000000\n>>>\
    \ sum_of_numbers(1000000000000000)\n5555557780684676543210000000000000000000\n\
    >>> sum_of_numbers(10000000000000000)\n55555577806846765432100000000000000000000\n\
    >>> sum_of_numbers(100000000000000000)\n555555778068467654321000000000000000000000\n\
    >>> sum_of_numbers(1000000000000000000)\n5555557780684676543210000000000000000000000\n\
    >>> sum_of_numbers(10000000000000000000)\n55555577806846765432100000000000000000000000\n\
    >>> sum_of_numbers(100000000000000000000)\n555555778068467654321000000000000000000000000\n\
    >>> sum_of_numbers(1000000000000000000000)\n55555577806\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohqlf048.jl:29\nin expression starting at\
    \ /tmp/tmpohqlf048.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci number\
    \ using the recurrence formula.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpks_268kn.jl:21\nin expression starting at\
    \ /tmp/tmpks_268kn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1,\
    \ 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n -\
    \ 2) + tri(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    fib(n::Int64)::Vector{Int64}\n    \n    Calculates Fibonacci sequence up\
    \ to n.\n    \n    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2) for n > 2\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) for n > 4\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n+1)\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n+1) +\
    \ fib(n-n+2)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5)\
    \ + fib(n-6) + ... + fib(n-n+1) + fib(n-n+2) + fib(n-n+3)\n    \n    fib(n) =\
    \ fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n+1)\
    \ + fib(n-n+2) + fib(n-n+3) + fib(n-n+4)\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n+1) + fib(n-n+2)\
    \ + fib(n-n+3) + fib(n-n+4) + fib(n-n+5)\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n+1) + fib(n-n+2)\
    \ + fib(n-n+3) + fib(n-n+4) + fib(n-n+5) + fib(n-n+6)\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n+1) +\
    \ fib(n-n+2) + fib(n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8y6rr47.jl:29\nin expression starting at\
    \ /tmp/tmp_8y6rr47.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4)\nend\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6n9a7xrn.jl:21\nin expression starting at\
    \ /tmp/tmp6n9a7xrn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggimv17m.jl:21\nin expression starting at\
    \ /tmp/tmpggimv17m.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2) + tri(n+1)\n    else \n        return tri(n-1) + tri(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbphhujry.jl:21\nin expression starting at\
    \ /tmp/tmpbphhujry.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1,\
    \ 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1y8qtmy.jl:29\nin expression starting at\
    \ /tmp/tmpf1y8qtmy.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n-1) + tri(n-2)\n    else\n        return tri(n-1) + tri(n-2) + tri(n-3)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ n-th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx5wsvnr.jl:21\nin expression starting at\
    \ /tmp/tmpmx5wsvnr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijwli8ud.jl:25\nin expression starting at\
    \ /tmp/tmpijwli8ud.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3),\
    \ if n is odd.\n    \n    Examples:\n    >>> fib(2)\n    3\n    >>> fib(3)\n \
    \   8\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjw5avfr.jl:21\nin expression starting at\
    \ /tmp/tmpkjw5avfr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    else if n == 1\n      \
    \  return Vector{Int64}(3)\n    else\n        tri_1 = tri(n - 1)\n        tri_2\
    \ = tri(n - 2)\n        tri_3 = tri(n + 1) + tri(n + 2)\n        return tri_1\
    \ + tri_2 + tri_3\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9k0mruu.jl:21\nin expression starting at\
    \ /tmp/tmpd9k0mruu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nExamples:\n>>> fib(3)\n[1, 1, 2]\n>>> fib(5)\n[1, 1, 2, 3, 5]\n>>>\
    \ fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxk6lom2a.jl:21\nin expression starting at\
    \ /tmp/tmpxk6lom2a.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence. \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1),\
    \ if n is odd.\n    \n    Examples:\n    >>> fib(3)\n    8\n    >>> fib(4)\n \
    \   13\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmncq1fdb.jl:21\nin expression starting at\
    \ /tmp/tmpmncq1fdb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        vec = [3]\n    else \n        vec = [tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplccz0uio.jl:25\nin expression starting at\
    \ /tmp/tmplccz0uio.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the nth term of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\n\
    fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\n\
    fibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\n\
    fibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\n\
    fibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\n\
    fibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\n\
    fibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\n\
    fibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\n\
    fibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\n\
    fibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\nfibonacci(49)\nfibonacci(50)\n\
    fibonacci(51)\nfibonac\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvirsttz.jl:25\nin expression starting at\
    \ /tmp/tmpmvirsttz.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpraknu860.jl:21\nin expression starting at\
    \ /tmp/tmpraknu860.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n   \
    \     return Vector{Int64}(1) \n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Calculates the nth number in the Fibonacci sequence.\n    \n    Arguments:\n\
    \    \n    - `n::Int64`: An integer number greater than or equal to 1.\n    \n\
    \    Returns:\n    \n    - A vector with the nth number in the Fibonacci sequence.\n\
    \    \n    Examples:\n    \n    >>> fib(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqiqh7tt.jl:21\nin expression starting at\
    \ /tmp/tmpnqiqh7tt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\ntri(3)\n</cell>\n<text>\nProblem 7: Fibonacci\
    \ number\nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1) =\
    \ 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nFor example:\nfibonacci(2) = 1\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1)\n           = 1 + 1 = 2\nfibonacci(4) = fibonacci(3) + fibonacci(2)\n\
    \           = 1 + 1 + 1 = 3\nYou are given a non-negative integer number n, you\
    \ have to a return a vector of the \nfirst n + 1 numbers of the Fibonacci sequence.\n\
    Examples:\n>>> fibonacci(3)\n[1, 1, 2]\n>>> fibonacci(4)\n[1, 1, 3, 2]\n>>> fibonacci(5)\n\
    [1, 1, 2, 3, 5, 8]\n>>> fibonacci(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwaeq78em.jl:21\nin expression starting at\
    \ /tmp/tmpwaeq78em.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n-3)\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    fib(n)\n    \n    Recursive\
    \ function that returns the nth number of the Fibonacci sequence\n    \n    Arguments:\n\
    \    n -- a positive integer\n    \n    Returns:\n    n th number of the Fibonacci\
    \ sequence\n    \n    Examples:\n    >>> fib(3)\n    3\n    >>> fib(5)\n    8\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp494ffvoi.jl:21\nin expression starting at\
    \ /tmp/tmp494ffvoi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    elseif n == 2 \n        return [1,\
    \ 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n + 1) + tri(n -\
    \ 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_j_55w_.jl:29\nin expression starting at\
    \ /tmp/tmpi_j_55w_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Recursive Fibonacci sequence\
    \ generation.\n    \n    Arguments:\n    \n    - `n`: an non-negative integer\
    \ number\n    \n    Returns:\n    \n    - a vector of the Fibonacci sequence starting\
    \ at `n`\n    \n    Examples:\n    \n    >>> fib(3)\n    [1, 1, 2]\n    \n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmtvlapw.jl:21\nin expression starting at\
    \ /tmp/tmpcmtvlapw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n == 2\n        return [1,\
    \ 1]\n    else\n        tri(n-1) + tri(n-2) + tri(n+1)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the n-th Fibonacci number in\
    \ the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence:\n\
    fibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\n\
    fibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\n\
    fibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\n\
    fibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\n\
    fibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\n\
    fibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\n\
    fibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\n\
    fibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\n\
    fibonacci(49)\nfibonacci(50)\nfibonac\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvyb8s0r.jl:21\nin expression starting at\
    \ /tmp/tmpxvyb8s0r.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        Vector{Int64}(1)\n    elseif n == 2\n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n numbers of the Fibonacci\
    \ sequence. \n    For example, fib(5) = [0, 1, 1, 2, 3, 5].\n    You have to return\
    \ a vector of the numbers. \n    Examples:\n    >>> fib(5)\n    [0, 1, 1, 2, 3,\
    \ 5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmz22wfdt.jl:29\nin expression starting at\
    \ /tmp/tmpmz22wfdt.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the nth number of the Fibonacci sequence. \nThe Fibonacci sequence is\
    \ defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3) + fibonacci(n - 4), if n is odd.\n\
    For example:\nfibonacci(2) = 1\nfibonacci(3) = fibonacci(2) + fibonacci(1)\n \
    \          = 1 + 1 = 2\nfibonacci(4) = fibonacci(3) + fibonacci(2) + fibonacci(1)\n\
    \           = 1 + 1 + 1 = 3\nfibonacci(5) = fibonacci(4) + fibonacci(3) + fibonacci(2)\
    \ + fibonacci(1)\n           = 1 + 1 + 1 + 2\nfibonacci(6) = fibonacci(5) + fibonacci(4)\
    \ + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1 + 2 + 1\n\
    fibonacci(7) = fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2)\
    \ + fibonacci(1)\n           = 1 + 1 + 1 + 2 + 1 + 1\nfibonacci(8) = fibonacci(7)\
    \ + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = 1 + 1 + 1 + 2 + 1 + 1 + 2\nfibonacci(9) = fibonacci(8)\
    \ + fibonacci(7) + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) +\
    \ fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1 + 2 + 1 + \nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt65z2sf5.jl:29\nin expression starting at\
    \ /tmp/tmpt65z2sf5.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function for calculating Fibonacci numbers.\
    \ \n    \n    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Returns:\n\
    \    \n    - `Vector{Int64}`\n    \n    Examples:\n    \n    >>> fib(3)\n    [1,\
    \ 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1s2jb8oy.jl:25\nin expression starting at\
    \ /tmp/tmp1s2jb8oy.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbmp9qejk.jl:25\nin expression starting at\
    \ /tmp/tmpbmp9qejk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the \n    integers\
    \ in the vector.\n    Examples:\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1,\
    \ 2, 3])^2\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsi0w0m7.jl:21\nin expression starting at\
    \ /tmp/tmpfsi0w0m7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n       \
    \ return Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxsmpok5.jl:29\nin expression starting at\
    \ /tmp/tmprxsmpok5.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the n-th number of the Fibonacci sequence up to n.\n\
    Examples:\n>>> fib(3)\n3\n>>> fib(10)\n55\n>>> fib(20)\n6765\n>>> fib(100)\n23316850\n\
    >>> fib(1000)\n23316850408832\n>>> fib(10000)\n2331685040883290677938288\n>>>\
    \ fib(100000)\n2331685040883290677938288987193\n>>> fib(1000000)\n233168504088329067793828898719310932\n\
    >>> fib(10000000)\n2331685040883290677938288987193109325432904\n>>> fib(100000000)\n\
    23316850408832906779382889871931093254329041767729\n>>> fib(1000000000)\n2331685040883290677938288987193109325432904176772937\n\
    >>> fib(10000000000)\n2331685040883290677938288987193109325432904176772937009\n\
    >>> fib(100000000000)\n233168504088329067793828898719310932543290417677293700904\n\
    >>> fib(1000000000000)\n23316850408832906779382889871931093254329041767729370090417\n\
    >>> fib(10000000000000)\n2331685040883290677938288987193109325432904176772937009041767\n\
    >>> fib(100000000000000)\n23316850408832906779382889871931093254329041767729370090417677\n\
    >>> fib(1000000000000000)\n2331685040883290677938288987193109325432904176772937009041767729\n\
    >>> fib(10000000000000000)\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1n1lf5jm.jl:21\nin expression starting at\
    \ /tmp/tmp1n1lf5jm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the n-th Fibonacci number in\
    \ the Fibonacci sequence. \n    For example, fib(3) = 1, fib(4) = 1, fib(5) =\
    \ 2, fib(6) = 3, fib(7) = 5, fib(8) = 8, \n    etc.\n    You have to return an\
    \ Int64 number.\n    Examples:\n    >>> fib(3)\n    1\n    >>> fib(4)\n    1\n\
    \    >>> fib(5)\n    2\n    >>> fib(6)\n    3\n    >>> fib(7)\n    5\n    >>>\
    \ fib(8)\n    8\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2x_d0ls.jl:21\nin expression starting at\
    \ /tmp/tmpy2x_d0ls.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9xiv_c6.jl:25\nin expression starting at\
    \ /tmp/tmpi9xiv_c6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\
    \ + tri(n - 7) + tri(n - 8)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8ud8_2c.jl:21\nin expression starting at\
    \ /tmp/tmpf8ud8_2c.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hlwuci1.jl:29\nin expression starting at\
    \ /tmp/tmp_hlwuci1.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Calculates the nth number\
    \ of the Fibonacci sequence. \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3),\
    \ if n is odd.\n    \n    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(3) = 2\n    fib(4) = 3\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5), if n is odd.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4q4se179.jl:25\nin expression starting at\
    \ /tmp/tmp4q4se179.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfvk9a5i5.jl:21\nin expression starting at\
    \ /tmp/tmpfvk9a5i5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n-1) + tri(n-2)\n    else\n       \
    \ return tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n<text>\n\
    Problem 9\nWrite a function that returns the sum of the numbers from 1 to n squared.\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi3d6t3m.jl:29\nin expression starting at\
    \ /tmp/tmpdi3d6t3m.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the n-th Fibonacci number in the Fibonacci sequence. \n\
    \    For example, fib(3) = 1, fib(5) = 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvae24rr.jl:25\nin expression starting at\
    \ /tmp/tmptvae24rr.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function which returns the nth number\
    \ of the Fibonacci sequence\n    \n    Arguments:\n    \n    - `n`: positive integer\n\
    \    \n    Output:\n    \n    - nth number of the Fibonacci sequence\n    \n \
    \   Examples:\n    \n    >>> fib(3)\n    8\n    >>> fib(5)\n    13\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xlqb36x.jl:21\nin expression starting at\
    \ /tmp/tmp6xlqb36x.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers from 1 to n.\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczq5e65a.jl:29\nin expression starting at\
    \ /tmp/tmpczq5e65a.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n-1) + tri(n-2)\n    else\n       \
    \ return tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3d1ripjp.jl:29\nin expression starting at\
    \ /tmp/tmp3d1ripjp.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcdo6bgt.jl:21\nin expression starting at\
    \ /tmp/tmprcdo6bgt.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4ieiegz.jl:21\nin expression starting at\
    \ /tmp/tmpz4ieiegz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    else\n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3)\n        return tri_1 + tri_2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0l962v5.jl:29\nin expression starting at\
    \ /tmp/tmpo0l962v5.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers from\
    \ 1 to n that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkqwzj50.jl:21\nin expression starting at\
    \ /tmp/tmpvkqwzj50.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2_r0s63.jl:21\nin expression starting at\
    \ /tmp/tmpv2_r0s63.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that takes a number n and returns the sum of all numbers from 1 to\
    \ n squared.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzat8170m.jl:25\nin expression starting at\
    \ /tmp/tmpzat8170m.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n    \
    \    tri_3 = tri(n - 1) + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2\
    \ + tri_3\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Recursive Fibonacci function.\n    \n    Arguments:\n    \n    - `n`:\
    \ non-negative integer\n    \n    Returns:\n    \n    - `Vector{Int64}` - Fibonacci\
    \ sequence up to `n`\n    \n    Examples:\n    \n    >>> fib(3)\n    [1, 1, 2]\n\
    \    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jdrg8t7.jl:21\nin expression starting at\
    \ /tmp/tmp3jdrg8t7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n   \
    \     return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgra0hoe3.jl:21\nin expression starting at\
    \ /tmp/tmpgra0hoe3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2emaa96d.jl:21\nin expression starting at\
    \ /tmp/tmp2emaa96d.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnebpi6u.jl:21\nin expression starting at\
    \ /tmp/tmptnebpi6u.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n    \
    \    return Vector{Int64}(1)\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n numbers\
    \ of the Fibonacci sequence. \nExamples:\n>>> fibonacci(10)\n[1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55]\n>>> fibonacci(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597]\n>>> fibonacci(1000)\n[1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711,\
    \ 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\
    \ 3524578, 5702887, 9227465]\n>>> fibonacci(10000)\n[1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657,\
    \ 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578,\
    \ 5702887, 9227465]\n>>> fibonacci(100000)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\n>>> fibonacci(1000000)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,\
    \ 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40g26dgd.jl:21\nin expression starting at\
    \ /tmp/tmp40g26dgd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    fib(n)\n    \n\
    \    Recursive function that returns the nth number of the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    \n\
    \    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(5)\n\
    \    8\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuahb9t9g.jl:29\nin expression starting at\
    \ /tmp/tmpuahb9t9g.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the n-th Fibonacci number using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov04budh.jl:21\nin expression starting at\
    \ /tmp/tmpov04budh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)::Int64\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfrkzzz0.jl:25\nin expression starting at\
    \ /tmp/tmpxfrkzzz0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n + 2)\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    fib(n)\n    \n    Recursive\
    \ function to calculate nth number in the Fibonacci sequence\n    \n    Arguments:\n\
    \    n -- an integer\n    \n    Returns:\n    n th number in the Fibonacci sequence\n\
    \    \n    Examples:\n    \n    >>> fib(10)\n    55\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdh7q0wev.jl:21\nin expression starting at\
    \ /tmp/tmpdh7q0wev.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    fib(n)\n    \n    Recursive function which returns the nth number of\
    \ the Fibonacci sequence\n    \n    Arguments:\n    \n    - `n::Int64`: number\
    \ of the Fibonacci sequence to return\n    \n    Returns:\n    \n    - `n::Int64`:\
    \ nth number of the Fibonacci sequence\n    \n    Examples:\n    \n    >>> fib(3)\n\
    \    8\n    >>> fib(4)\n    13\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpav4kykld.jl:29\nin expression starting at\
    \ /tmp/tmpav4kykld.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    else\n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5byiglq.jl:27\nin expression starting at\
    \ /tmp/tmps5byiglq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n == 2\n        return [1,\
    \ 1]\n    else\n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4)\n        return tri_1 + tri_2 + tri_3\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppudeatex.jl:21\nin expression starting at\
    \ /tmp/tmppudeatex.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\n\
    end\n</code>\n<|/ a tags=fibonacci,julia |>\n<| a tags=fibonacci,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpusi988bx.jl:21\nin expression starting at\
    \ /tmp/tmpusi988bx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <text>\nProblem 9\nWrite a function that returns the n-th number of the Fibonacci\
    \ sequence. \n    For example, fib(3) = fib(2) + fib(1).\n    You are given an\
    \ integer n.\n    Examples:\n    >>> fib(3)\n    8\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3uuocdv.jl:21\nin expression starting at\
    \ /tmp/tmpi3uuocdv.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    if n == 1\n        return\
    \ Vector{Int64}(3)\n    if n % 2 == 0\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    Fibonacci sequence is defined by\
    \ the recurrence:\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\
    \    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n\
    \    fib(2) = 1 + 1 = 2\n    fib(3) = fib(2)+fib(1)+fib(2)\n           = 2 + 1\
    \ + 2 = 5 \n    You are given a non-negative integer number n, you have to a return\
    \ a vector of the \n    first n numbers of the Fibonacci sequence.\n    Examples:\n\
    \    >>> fib(2)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8ga3nk6.jl:29\nin expression starting at\
    \ /tmp/tmph8ga3nk6.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtpdhqpk.jl:21\nin expression starting at\
    \ /tmp/tmpbtpdhqpk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th number of the Fibonacci\
    \ sequence.\nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2) + fibonacci(1)\
    \ + fibonacci(4)\n           = 2 + 1 + 3 = 5 \nYou are given a non-negative integer\
    \ number n, you have to a return a vector of the \nn-th numbers of the Fibonacci\
    \ sequence.\nExamples:\n>>> fibonacci(3)\n[1, 1, 5]\n>>> fibonacci(4)\n[1, 1,\
    \ 5, 5]\n>>> fibonacci(10)\n[1, 1, 5, 8, 13, 21, 34, 55]\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6wg5stb.jl:21\nin expression starting at\
    \ /tmp/tmpz6wg5stb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn16aytk.jl:21\nin expression starting at\
    \ /tmp/tmpfn16aytk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3),\
    \ if n is odd.\n    \n    Examples:\n    >>> fib(3)\n    8\n    >>> fib(5)\n \
    \   34\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0f3dpo0.jl:21\nin expression starting at\
    \ /tmp/tmpa0f3dpo0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mzbn7zu.jl:21\nin expression starting at\
    \ /tmp/tmp4mzbn7zu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    else if n % 2 == 0\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n numbers of the Fibonacci sequence.\n\
    Examples:\n>>> fib(3)\n[1, 1, 2]\n>>> fib(5)\n[1, 1, 2, 3, 5]\n>>> fib(10)\n[1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbldi49mp.jl:21\nin expression starting at\
    \ /tmp/tmpbldi49mp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1)\n    elseif n == 2 \n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of divisors of a given\
    \ number. \nExamples:\n>>> num_divisors(3)\n1\n>>> num_divisors(10)\n2\n>>> num_divisors(15)\n\
    3\n>>> num_divisors(100)\n5\n>>> num_divisors(1000)\n6\n>>> num_divisors(10000)\n\
    7\n>>> num_divisors(100000)\n8\n>>> num_divisors(1000000)\n9\n>>> num_divisors(10000000)\n\
    10\n>>> num_divisors(100000000)\n11\n>>> num_divisors(1000000000)\n12\n>>> num_divisors(10000000000)\n\
    13\n>>> num_divisors(100000000000)\n14\n>>> num_divisors(1000000000000)\n15\n\
    >>> num_divisors(10000000000000)\n16\n>>> num_divisors(100000000000000)\n17\n\
    >>> num_divisors(1000000000000000)\n18\n>>> num_divisors(10000000000000000)\n\
    19\n>>> num_divisors(100000000000000000)\n20\n>>> num_divisors(1000000000000000000)\n\
    21\n>>> num_divisors(10000000000000000000)\n22\n>>> num_divisors(100000000000000000000)\n\
    23\n>>> num_divisors(1000000000000000000000)\n24\n>>> num_divisors(10000000000000000000000)\n\
    25\n>>> num_divisors(100000000000000000000000)\n26\n>>> num_divisors(1000000000000000000000000)\n\
    27\n>>> num_divisors(10000000000000000000000000)\n28\n>>> num_divisors(100000000000000000000000000)\n\
    29\n>>> num_divisors(1000000000000000000000000000)\n30\n>>> num_divisors(10000000000000000000000000000)\n\
    31\n>>> num_divisors(100000000000000000000000000000)\n32\n>>> num_divisors(1000000000000000000000000000000)\n\
    33\n>>> num_divisors(10000000000000000000000000000000)\n34\n>>> num_divisors(100000000000000000000000000000000)\n\
    35\n>>> num_divisors(1000000000000000000000000000000000)\n36\n>>> num_divisors(10000000000000000000000000000000000)\n\
    37\n>>> num_divisors(100000000000000000000000000000000000)\n38\n>>> num_divisors(1000000000000000000000000000000000000)\n\
    39\n>>> num_divisors(10000000000000000000000000000000000000)\n40\n>>> num_divisors(100000000000000000000000000000000000000)\n\
    41\n>>> num_divisors(100\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vz8j88j.jl:29\nin expression starting at\
    \ /tmp/tmp5vz8j88j.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) + 1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n \
    \   fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nf2naq2.jl:25\nin expression starting at\
    \ /tmp/tmp_nf2naq2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Fibonacci sequence is defined\
    \ by the recurrence:\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is\
    \ even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n\
    \    fib(2) = 1 + 1 = 2\n    fib(3) = 3\n    fib(4) = 1 + 2 + 3 = 5\n    You are\
    \ given a non-negative integer number n, you have to a return a vector of the\
    \ \n    first n numbers of the Fibonacci sequence.\n    Examples:\n    >>> fib(3)\n\
    \    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvscd4xib.jl:25\nin expression starting at\
    \ /tmp/tmpvscd4xib.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tcjfu4k.jl:21\nin expression starting at\
    \ /tmp/tmp0tcjfu4k.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number in\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is odd.\n    \n    Examples:\n    >>> fib(0)\n   \
    \ 0\n    >>> fib(1)\n    1\n    >>> fib(5)\n    8\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8zi8f1l.jl:21\nin expression starting at\
    \ /tmp/tmpa8zi8f1l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nProblem 4\nWrite a\
    \ function that returns the first n numbers of the Fibonacci sequence. \n    For\
    \ example, fib(3) = 1, 1, 2, 3. \n    You are given a non-negative integer number\
    \ n, you have to a return a vector of the \n    first n + 1 numbers of the Fibonacci\
    \ sequence.\n    Examples:\n    >>> fib(3)\n    [1, 1, 2, 3]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6q23mm9l.jl:25\nin expression starting at\
    \ /tmp/tmp6q23mm9l.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n\
    \    Recursive function that returns the nth number of the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    \n\
    \    Examples:\n    >>> fib(3)\n    8\n    >>> fib(5)\n    34\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4z490j4.jl:29\nin expression starting at\
    \ /tmp/tmpy4z490j4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n    \
    \    return Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Fibonacci sequence is defined by the recurrence:\n    fib(1) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1 = 2\n    fib(3)\
    \ = fib(2) + fib(1) = 3\n    You are given a non-negative integer number n, you\
    \ have to a return a vector of the \n    first n + 1 numbers of the Fibonacci\
    \ sequence.\n    Examples:\n    >>> fib(2)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgv3i3at.jl:21\nin expression starting at\
    \ /tmp/tmpqgv3i3at.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n + 2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnyls1cd.jl:21\nin expression starting at\
    \ /tmp/tmpcnyls1cd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nProblem 9\nWrite\
    \ a function that returns the sum of the numbers from 1 to n.\nExamples:\n>>>\
    \ sum(1:10)\n55\n>>> sum(1:100)\n5050\n>>> sum(1:1000)\n55555\n>>> sum(1:10000)\n\
    555555050\n>>> sum(1:100000)\n5555550505555050\n>>> sum(1:1000000)\nn\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphl480uzp.jl:21\nin expression starting at\
    \ /tmp/tmphl480uzp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n    \
    \    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2)\n        return tri_1 + tri_2\
    \ + tri_3\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Recursive Fibonacci function.\n    \n    Arguments:\n    \n    n -\
    \ an integer\n    \n    Returns:\n    \n    Vector of Fibonacci numbers, starting\
    \ from nth number.\n    \n    Examples:\n    \n    >>> fib(3)\n    [1, 1, 2]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx_vq8ie.jl:21\nin expression starting at\
    \ /tmp/tmpkx_vq8ie.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6jr4f6q.jl:21\nin expression starting at\
    \ /tmp/tmpc6jr4f6q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n  \
    \  \n    Recursive function that calculates Fibonacci sequence up to n.\n    \n\
    \    Arguments:\n    \n    - `n` - an integer greater than 0\n    \n    Returns:\n\
    \    \n    - a vector with the Fibonacci sequence up to n\n    \n    Examples:\n\
    \    \n    >>> fib(3)\n    [1, 1, 2]\n    \n    >>> fib(10)\n    [1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55]\n    \n    >>> fib(0)\n    [1]\n    \n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_uvfagtr.jl:21\nin expression starting at\
    \ /tmp/tmp_uvfagtr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <code language=julia-1.0>\ntri(10)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the first n Fibonacci numbers. \nExamples:\n>>> fibonacci(3)\n\
    [1, 1, 2]\n>>> fibonacci(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>> fibonacci(100)\n\
    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040,\
    \ 1346269, 2178309, 3524578, 5702887, 9227465]\n>>> fibonacci(1000)\n[1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765,\
    \ 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n>>> fibonacci(10000)\n[1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n>>> fibonacci(100000)\n[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n>>> fibonacci(1000000)\n[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, \nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3n705ww.jl:21\nin expression starting at\
    \ /tmp/tmpk3n705ww.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Compute nth number in the Fibonacci sequence\n \
    \   \n    Arguments:\n    n -- an integer\n    \n    Returns:\n    n th number\
    \ in the Fibonacci sequence\n    \n    Examples:\n    \n    >>> fib(10)\n    55\n\
    \    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuo8p0rs.jl:21\nin expression starting at\
    \ /tmp/tmpnuo8p0rs.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes as input a non-negative integer n and returns\
    \ the nth number of the Fibonacci sequence.\nExamples:\n>>> fib(3)\n8\n>>> fib(4)\n\
    13\n>>> fib(5)\n21\n>>> fib(6)\n34\n>>> fib(7)\n55\n>>> fib(8)\n89\n>>> fib(9)\n\
    144\n>>> fib(10)\n233\n>>> fib(11)\n377\n>>> fib(12)\n610\n>>> fib(13)\n987\n\
    >>> fib(14)\n1597\n>>> fib(15)\n2584\n>>> fib(16)\n4181\n>>> fib(17)\n6765\n>>>\
    \ fib(18)\n10946\n>>> fib(19)\n17711\n>>> fib(20)\n28657\n>>> fib(21)\n46368\n\
    >>> fib(22)\n75025\n>>> fib(23)\n121393\n>>> fib(24)\n196418\n>>> fib(25)\n317811\n\
    >>> fib(26)\n514229\n>>> fib(27)\n832040\n>>> fib(28)\n1346269\n>>> fib(29)\n\
    2178309\n>>> fib(30)\n3524578\n>>> fib(31)\n5702887\n>>> fib(32)\n9497558\n>>>\
    \ fib(33)\n14930352\n>>> fib(34)\n24157817\n>>> fib(35)\n39088169\n>>> fib(36)\n\
    63245986\n>>> fib(37)\n102334155\n>>> fib(38)\n165580141\n>>> fib(39)\n267914296\n\
    >>> fib(40)\n433494437\n>>> fib(41)\n701408733\n>>> fib(42)\n1134903170\n>>> fib(43)\n\
    1836311903\n>>> fib(44)\n2971215073\n>>> fib(45)\n4807526976\n>>> fib(46)\n7778742049\n\
    >>> fib(47)\n12586269025\n>>> fib(48)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrmpnz9a.jl:21\nin expression starting at\
    \ /tmp/tmpcrmpnz9a.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1)\n    else if n == 2 \n        Vector{Int64}(3)\n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the squares of the\
    \ first n positive integers. \nExamples:\n>>> sumsq(10)\n55\n>>> sumsq(100)\n\
    1250\n>>> sumsq(1000)\n12500\n>>> sumsq(10000)\n12500500\n>>> sumsq(100000)\n\
    12500500500\n>>> sumsq(1000000)\n12500500500500500\n>>> sumsq(10000000)\n12500500500500500500500\n\
    >>> sumsq(100000000)\n12500500500500500500500500500\n>>> sumsq(1000000000)\n12500500500500500500500500500500500\n\
    >>> sumsq(10000000000)\n12500500500500500500500500500500500500500\n>>> sumsq(100000000000)\n\
    12500500500500500500500500500500500500500500\n>>> sumsq(1000000000000)\n12500500500500500500500500500500500500500500500500\n\
    >>> sumsq(10000000000000)\n12500500500500500500500500500500500500500500500500500\n\
    >>> sumsq(100000000000000)\n12500500500500500500500500500500500500500500500500500500500\n\
    >>> sumsq(1000000000000000)\n12500500500500500500500500500500500500500500500500500500500500\n\
    >>> sumsq(10000000000000000)\n12500500500500500500500500500500500500500500500500500500500500500\n\
    >>> sumsq(100000000000000000)\n12500500500500500500500500500500500500500500500500500500500500500500\n\
    >>> sumsq(1000000000000000000)\n12500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500500\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5i9p4vcc.jl:21\nin expression starting at\
    \ /tmp/tmp5i9p4vcc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Fibonacci sequence up to\
    \ n.\nExamples:\n>>> fib(3)\n[1, 1, 2]\n>>> fib(5)\n[1, 1, 2, 3, 5, 8]\n>>> fib(10)\n\
    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzy4ovey.jl:21\nin expression starting at\
    \ /tmp/tmptzy4ovey.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the n-th Fibonacci\
    \ number in the Fibonacci sequence. \nThe Fibonacci sequence is defined by the\
    \ recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n + 1), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\n\
    fibonacci(6)\nfibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\nfibonacci(11)\n\
    fibonacci(12)\nfibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\nfibonacci(17)\n\
    fibonacci(18)\nfibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\nfibonacci(23)\n\
    fibonacci(24)\nfibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\nfibonacci(29)\n\
    fibonacci(30)\nfibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\nfibonacci(35)\n\
    fibonacci(36)\nfibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\nfibonacci(41)\n\
    fibonacci(42)\nfibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\nfibonacci(47)\n\
    fibonacci(48)\nfibonacci(49)\nfibonacci(50)\nfibonacci(51)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijiw7zeb.jl:21\nin expression starting at\
    \ /tmp/tmpijiw7zeb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive function that\
    \ returns the nth number of the Fibonacci sequence. \n    \n    fib(0) = 0\n \
    \   fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    \n    Examples:\n\
    \    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(5)\n    8\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfzu6coq.jl:21\nin expression starting at\
    \ /tmp/tmpdfzu6coq.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n Fibonacci numbers.\
    \ \nExamples:\n>>> fibonacci(3)\n[1, 1, 2]\n>>> fibonacci(10)\n[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55]\n>>> fibonacci(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\n</text>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5x_cq260.jl:21\nin expression starting at\
    \ /tmp/tmp5x_cq260.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive implementation of Fibonacci\
    \ sequence\n    \n    Arguments:\n    \n    - `n` - a non-negative integer\n \
    \   \n    Returns:\n    \n    - `n` - a non-negative integer \n    \n    Examples:\n\
    \    \n    >>> fib(2)\n    3\n    >>> fib(3)\n    6\n    >>> fib(4)\n    10\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx549dvil.jl:21\nin expression starting at\
    \ /tmp/tmpx549dvil.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mzbn7zu.jl:21\nin expression starting at\
    \ /tmp/tmp4mzbn7zu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the Fibonacci sequence up to a given number. \nExamples:\n\
    >>> fib(5)\n[1, 1, 2, 3, 5]\n>>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\
    >>> fib(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ 1597]\n</text>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnoqaz8w.jl:25\nin expression starting at\
    \ /tmp/tmpjnoqaz8w.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 2]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Fibonacci number at nth position\n    \n    Arguments:\n    \n    -\
    \ `n`: position at which Fibonacci number should be calculated\n    \n    Output:\n\
    \    \n    - Fibonacci number at nth position\n    \n    Examples:\n    \n   \
    \ >>> fib(3)\n    8\n    >>> fib(4)\n    13\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbc_9uw2m.jl:21\nin expression starting at\
    \ /tmp/tmpbc_9uw2m.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the numbers from 1 to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5uym0or.jl:21\nin expression starting at\
    \ /tmp/tmpz5uym0or.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the n-th number of the Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3) + fibonacci(n - 4), if n is odd.\n\
    For example:\nfibonacci(2) = 2\nfibonacci(3) = fibonacci(2) + fibonacci(1)\n \
    \          = 2 + 1 = 3\nfibonacci(4) = fibonacci(3) + fibonacci(2) + fibonacci(1)\n\
    \           = 3 + 2 + 1 = 5\nfibonacci(5) = fibonacci(4) + fibonacci(3) + fibonacci(2)\
    \ + fibonacci(1)\n           = 5 + 3 + 2 + 1 = 8\nYou are given a non-negative\
    \ integer number n, you have to a return a vector of the \nn-th numbers of the\
    \ Fibonacci sequence.\nExamples:\n>>> fibonacci(3)\n[1, 1, 2]\n>>> fibonacci(10)\n\
    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx96leztb.jl:21\nin expression starting at\
    \ /tmp/tmpx96leztb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Fibonacci sequence is defined by the recurrence:\n    fib(1) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1 = 2\n    fib(3)\
    \ = fib(2)+fib(1)+fib(2)\n           = 2 + 1 + 2 = 5 \n    You are given a non-negative\
    \ integer number n, you have to a return a vector of the \n    first n + 1 numbers\
    \ of the Fibonacci sequence.\n    Examples:\n    >>> fib(2)\n    [1, 1, 2]\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy47rg_r0.jl:25\nin expression starting at\
    \ /tmp/tmpy47rg_r0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive function for\
    \ Fibonacci sequence\n    \n    Arguments:\n    \n    - `n` - an integer\n   \
    \ \n    Returns:\n    \n    - a vector with the first `n` Fibonacci numbers\n\
    \    \n    Examples:\n    \n    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpern0lgi4.jl:21\nin expression starting at\
    \ /tmp/tmpern0lgi4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyjz1zxe.jl:21\nin expression starting at\
    \ /tmp/tmpnyjz1zxe.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinhm6mo8.jl:21\nin expression starting at\
    \ /tmp/tmpinhm6mo8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive function that calculates\
    \ nth Fibonacci number\n    \n    Arguments:\n    \n    n - the number for which\
    \ Fibonacci number has to be calculated\n    \n    Returns:\n    \n    Fibonacci\
    \ number for n\n    \n    Examples:\n    \n    >>> fib(3)\n    8\n    >>> fib(5)\n\
    \    13\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc3bq1h3.jl:21\nin expression starting at\
    \ /tmp/tmpcc3bq1h3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci number\
    \ using recursion.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn16aytk.jl:21\nin expression starting at\
    \ /tmp/tmpfn16aytk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n - 3)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n\
    \    end\nend\n</cell>\n<text>\nProblem 9\nWrite a function that returns the first\
    \ n Fibonacci numbers. \nThe Fibonacci numbers are defined by the recurrence:\n\
    fibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3) + fibonacci(n - 4), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1) + fibonacci(4)\n           = 1 + 1 + 1 + 3 = 6\nfibonacci(4)\
    \ = fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1 + 2 + 3 = 6\nfibonacci(5)\
    \ = fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1\
    \ + 3 + 5 + 3 = 12\nfibonacci(6) = fibonacci(5) + fibonacci(4) + fibonacci(3)\
    \ + fibonacci(2) + fibonacci(1)\n           = 1 + 5 + 8 + 3 = 20\nfibonacci(7)\
    \ = fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = 1 + 8 + 13 + 3 = 27\nfibonacci(8) = fibonacci(7)\
    \ + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = 1 + 13 + 21 + 3 = 42\nfibonacci(9) = fibonacci(8)\
    \ + fibonacci(7) + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) +\
    \ fibonacci(2) + fibonacci(1)\n           = 1 + 21 + 34\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ql31gfb.jl:29\nin expression starting at\
    \ /tmp/tmp3ql31gfb.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + \nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdd7uemrj.jl:21\nin expression starting at\
    \ /tmp/tmpdd7uemrj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the first n numbers of the Fibonacci sequence\
    \ in reverse order.\nExamples:\n>>> fib(3)\n[1, 1, 2]\n>>> fib(5)\n[1, 1, 2, 3,\
    \ 5]\n>>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3innn7p3.jl:21\nin expression starting at\
    \ /tmp/tmp3innn7p3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the first n Fibonacci numbers. \nExamples:\n>>> fibonacci(3)\n[1, 1,\
    \ 2]\n>>> fibonacci(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpih6itgph.jl:25\nin expression starting at\
    \ /tmp/tmpih6itgph.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n numbers of the Fibonacci\
    \ sequence. \n    Your function should take one argument, n, which represents\
    \ the number of numbers to return.\n    Examples:\n    >>> fib(3)\n    [1, 1,\
    \ 2]\n    >>> fib(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wrnisjv.jl:21\nin expression starting at\
    \ /tmp/tmp7wrnisjv.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}([3])\n    else \n        tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)::Int64\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstxpptpz.jl:25\nin expression starting at\
    \ /tmp/tmpstxpptpz.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nProblem 7\nWrite a Julia function which takes an integer\
    \ n and returns the nth Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9l2mjna.jl:21\nin expression starting at\
    \ /tmp/tmpy9l2mjna.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function which returns the nth number of the Fibonacci sequence\n\
    \    \n    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Returns:\n\
    \    \n    - `n` th number of the Fibonacci sequence\n    \n    Examples:\n  \
    \  \n    >>> fib(3)\n    8\n    \n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphq7jswqs.jl:25\nin expression starting at\
    \ /tmp/tmphq7jswqs.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    else if n == 1\n      \
    \  return Vector{Int64}(3)\n    else\n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function which returns the nth number of the Fibonacci sequence\n\
    \    \n    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Output:\n\
    \    \n    - `n` th number of the Fibonacci sequence\n    \n    Examples:\n  \
    \  \n    >>> fib(3)\n    8\n    >>> fib(10)\n    55\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi56hsux9.jl:21\nin expression starting at\
    \ /tmp/tmpi56hsux9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the first n numbers of the Fibonacci\
    \ sequence.\nExamples:\n>>> fib(3)\n8\n>>> fib(5)\n13\n>>> fib(10)\n6765\n>>>\
    \ fib(100)\n23316800\n>>> fib(1000)\n233168055\n>>> fib(10000)\n2331680556765\n\
    >>> fib(100000)\n233168055676569\n>>> fib(1000000)\n23316805567656987\n>>> fib(10000000)\n\
    23316805567656987654\n>>> fib(100000000)\n23316805567656987654321\n>>> fib(1000000000)\n\
    233168055676569876543216\n>>> fib(10000000000)\n23316805567656987654321680\n>>>\
    \ fib(100000000000)\n23316805567656987654321680555\n>>> fib(1000000000000)\n23316805567656987654321680555676\n\
    >>> fib(10000000000000)\n233168055676569876543216805556765\n>>> fib(100000000000000)\n\
    23316805567656987654321680555676569\n>>> fib(1000000000000000)\n2331680556765698765432168055567656987\n\
    >>> fib(10000000000000000)\n2331680556765698765432168055567656987654\n>>> fib(100000000000000000)\n\
    233168055676569876543216805556765698765432\n>>> fib(1000000000000000000)\n23316805567656987654321680555676569876543216\n\
    >>> fib(10000000000000000000)\n2331680556765698765432168055567656987654321680\n\
    >>> fib(100000000000000000000)\n2331680556765698765432168055567656987654321680555\n\
    >>> fib(1000000000000000000000)\n233168055\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperevjv77.jl:21\nin expression starting at\
    \ /tmp/tmperevjv77.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n-1) + tri(n-2) + tri(n+1) + [1]\n    else \n        return tri(n-1) + tri(n-2)\
    \ + tri(n+1) + [1]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpij4k5u4y.jl:21\nin expression starting at\
    \ /tmp/tmpij4k5u4y.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the first n numbers of the Fibonacci sequence.\n\
    Examples:\n>>> fib(5)\n8\n>>> fib(10)\n55\n>>> fib(20)\n233168\n>>> fib(30)\n\
    233168\n>>> fib(40)\n233168\n>>> fib(50)\n233168\n>>> fib(60)\n233168\n>>> fib(70)\n\
    233168\n>>> fib(80)\n233168\n>>> fib(90)\n233168\n>>> fib(100)\n233168\n>>> fib(110)\n\
    233168\n>>> fib(120)\n233168\n>>> fib(130)\n233168\n>>> fib(140)\n233168\n>>>\
    \ fib(150)\n233168\n>>> fib(160)\n233168\n>>> fib(170)\n233168\n>>> fib(180)\n\
    233168\n>>> fib(190)\n233168\n>>> fib(200)\n233168\n>>> fib(210)\n233168\n>>>\
    \ fib(220)\n233168\n>>> fib(230)\n233168\n>>> fib(240)\n233168\n>>> fib(250)\n\
    233168\n>>> fib(260)\n233168\n>>> fib(270)\n233168\n>>> fib(280)\n233168\n>>>\
    \ fib(290)\n233168\n>>> fib(300)\n233168\n>>> fib(310)\n233168\n>>> fib(320)\n\
    233168\n>>> fib(330)\n233168\n>>> fib(340)\n233168\n>>> fib(350)\n233168\n>>>\
    \ fib(360)\n233168\n>>> fib(370)\n233168\n>>> fib(380)\n233168\n>>> fib(390)\n\
    233168\n>>> fib(400)\n233168\n>>> fib(410)\n233168\n>>> fib(420)\n233168\n>>>\
    \ fib(430)\n233168\n>>> fib(440)\n233168\n>>> fib(450)\n233168\n>>> fib(460)\n\
    233168\n>>> fib(470)\n233168\n>>> fib(480)\n233168\n>>> fib(490)\n233168\n>>>\
    \ fib(500)\n233168\n>>> fib(510)\n233\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehhzd23r.jl:25\nin expression starting at\
    \ /tmp/tmpehhzd23r.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in the Fibonacci sequence up to\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgy46ng6.jl:25\nin expression starting at\
    \ /tmp/tmptgy46ng6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence\n    \n    Arguments:\n    \n    - `n`: positive integer\n\
    \    \n    Returns:\n    \n    - `n` th number of the Fibonacci sequence\n   \
    \ \n    Examples:\n    \n    >>> fib(3)\n    8\n    >>> fib(5)\n    13\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkk4zid6b.jl:21\nin expression starting at\
    \ /tmp/tmpkk4zid6b.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperttngdu.jl:21\nin expression starting at\
    \ /tmp/tmperttngdu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the first n Fibonacci numbers. \nExamples:\n>>> fibonacci(3)\n8\n>>>\
    \ fibonacci(10)\n55\n>>> fibonacci(100)\n233168\n>>> fibonacci(1000)\n233168\n\
    >>> fibonacci(10000)\n233168\n>>> fibonacci(100000)\n233168\n>>> fibonacci(1000000)\n\
    233168\n>>> fibonacci(10000000)\n233168\n>>> fibonacci(100000000)\n233168\n>>>\
    \ fibonacci(1000000000)\n233168\n>>> fibonacci(10000000000)\n233168\n>>> fibonacci(100000000000)\n\
    233168\n>>> fibonacci(1000000000000)\n233168\n>>> fibonacci(10000000000000)\n\
    233168\n>>> fibonacci(100000000000000)\n233168\n>>> fibonacci(1000000000000000)\n\
    233168\n>>> fibonacci(10000000000000000)\n233168\n>>> fibonacci(100000000000000000)\n\
    233168\n>>> fibonacci(1000000000000000000)\n233168\n>>> fibonacci(10000000000000000000)\n\
    233168\n>>> fibonacci(100000000000000000000)\n233168\n>>> fibonacci(1000000000000000000000)\n\
    233168\n>>> fibonacci(10000000000000000000000)\n233168\n>>> fibonacci(100000000000000000000000)\n\
    233168\n>>> fibonacci(1000000000000000000000000)\n233168\n>>> fibonacci(10000000000000000000000000)\n\
    233168\n>>> fibonacci(100000000000000000000000000)\n233168\n>>> fibonacci(1000000000000000000000000000)\n\
    233168\n>>> fibonacci(10000000000000000000000000000)\n233168\n>>> fibonacci(100000000000000000000000000000)\n\
    233168\n>>> fibonacci(1000000000000000000000000000000)\n233168\n>>> fibonacci(10000000000000000000000000000000)\n\
    233168\n>>> fibonacci(1000000000000000000\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cjtfwuj.jl:29\nin expression starting at\
    \ /tmp/tmp0cjtfwuj.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a vector of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        Vector{1}\n    else\n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the first n Fibonacci numbers. \nExamples:\n>>> fib(3)\n[1, 1, 2]\n\
    >>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>> fib(20)\n[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n</text>\nusing Test\n\n@testset begin\n\
    \ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4)\
    \ == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qr0zymo.jl:25\nin expression starting at\
    \ /tmp/tmp3qr0zymo.jl:25\n"
  stdout: ''
