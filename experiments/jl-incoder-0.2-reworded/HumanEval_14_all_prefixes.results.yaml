language: jl
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\");\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not a letter. For example, for the string\
    \ \"abc\" the function should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hjieig_.jl:13\nin expression starting at\
    \ /tmp/tmp5hjieig_.jl:13\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    \n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = 1:length(string)\n        prefixes +=\
    \ string[(i+1):end]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrvfz1c4.jl:15\nin expression starting at\
    \ /tmp/tmpcrvfz1c4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + prefixes(string)\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end:])\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf5pbkxoe.jl:8\nin expression\
    \ starting at /tmp/tmpf5pbkxoe.jl:8\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    return prefix_list\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4yo4x1i7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp4yo4x1i7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = []\n    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa1mf_jny.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa1mf_jny.jl:1\n\
    in expression starting at /tmp/tmpa1mf_jny.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ \n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, if the input string is \"abracadabra\", the longest prefix that\
    \ is a substring of the input string is \"abracadabra\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh9qmkpc.jl:15\nin expression starting at\
    \ /tmp/tmpfh9qmkpc.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + [string]\n    prefix_vector\
    \ = prefix_vector + all_prefixes(string[1:end-1]) \n    \n    return prefix_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp1m5imdab.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp1m5imdab.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{String},\
    \ Bs::Vector{String})\n     @ Base ./arraymath.jl:45\n   [4] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp1m5imdab.jl:8\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp1m5imdab.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp1m5imdab.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1m5imdab.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(0),), b\
    \ has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169\
    \ [inlined]\n   [3] +(A::Vector{String}, Bs::Vector{String})\n     @ Base ./arraymath.jl:45\n\
    \   [4] all_prefixes(string::String)\n     @ Main /tmp/tmp1m5imdab.jl:8\n   [5]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp1m5imdab.jl:19 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp1m5imdab.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1m5imdab.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./ind"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmqyhdpd.jl:10\nin expression starting at\
    \ /tmp/tmpxmqyhdpd.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_count(string::String)::Int64\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprs4wi244.jl:13\nin expression starting at\
    \ /tmp/tmprs4wi244.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        push!(prefixes,\
    \ prefix)\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zhie68a.jl:15\nin expression starting at\
    \ /tmp/tmp7zhie68a.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacbba\")\n</\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpez8trgla.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpez8trgla.jl:8\n\
    in expression starting at /tmp/tmpez8trgla.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmptdlpwbeu.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmptdlpwbeu.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmptdlpwbeu.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmptdlpwbeu.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdlpwbeu.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdlpwbeu.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptdlpwbeu.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmptdlpwbeu.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmptdlpwbeu.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptdlpwbeu.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptdlpwbeu.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\
    \ For example, for the string \"abc\" the longest prefix is \"abc\".\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpega0ergo.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpega0ergo.jl:8\n\
    in expression starting at /tmp/tmpega0ergo.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6xsc_73.jl:13\nin expression starting at\
    \ /tmp/tmpv6xsc_73.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfih2tnq3.jl:13\nin expression starting at\
    \ /tmp/tmpfih2tnq3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5y9zqul9.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5y9zqul9.jl:1\n\
    in expression starting at /tmp/tmp5y9zqul9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_array =\
    \ Vector{String}()\n    prefix_array = [string]\n    for prefix in prefix_array\n\
    \        prefix_array = prefix_array + prefixes_of(prefix)\n    end\n    prefix_array\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lptd6hi.jl:13\nin expression starting at\
    \ /tmp/tmp7lptd6hi.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpeje1bbdo.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpeje1bbdo.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpeje1bbdo.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeje1bbdo.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeje1bbdo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeje1bbdo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpeje1bbdo.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeje1bbdo.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeje1bbdo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeje1bbdo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpeje1bbdo.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeje1bbdo.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeje1b"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i+1::] for i in 1:length(string)]\n \
    \   return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp401vqpfk.jl:8\nin expression starting at /tmp/tmp401vqpfk.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = 1:length(string)\n        prefixes +=\
    \ string[i-1:i]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"\
    ab\") returns [\"a\", \"ab\"]. Assume that all_prefixes is implemented correctly.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwo1gycpb.jl:15\nin expression starting at\
    \ /tmp/tmpwo1gycpb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome.\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8n1gbq1.jl:13\nin expression starting at\
    \ /tmp/tmpb8n1gbq1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7dh6ub4.jl:13\nin expression starting at\
    \ /tmp/tmpq7dh6ub4.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmqyhdpd.jl:10\nin expression starting at\
    \ /tmp/tmpxmqyhdpd.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe4wfd31j.jl:12\nin expression starting at\
    \ /tmp/tmpe4wfd31j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcefgj\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcefgjl\"\
    )\n</cell>\n<code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0p9j0dwn.jl:12\nin expression starting at\
    \ /tmp/tmp0p9j0dwn.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l47ngui.jl:14\nin expression starting at\
    \ /tmp/tmp5l47ngui.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_vector\
    \ = prefix_vector + [prefix]\n    end\n    prefix_vector\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each character\
    \ appears in the string. \nFor example, for the string \"abc\", the function should\
    \ return [('a', 1), ('b', 1), ('c', 1), ('a', 2), ('b', 2), ('c', 2)]. \nThe function\
    \ should ignore non-alphabetic characters and return a list of tuples.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mrruwdw.jl:12\nin expression starting at\
    \ /tmp/tmp9mrruwdw.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzb1rxq83.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb1rxq83.jl:1\n\
    in expression starting at /tmp/tmpzb1rxq83.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + string.substring(1)\n\
    \    for i = 2:length(string)\n        prefix_vector = prefix_vector + string.substring(i)\n\
    \    end\n    return prefix_vector\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    prefix_vector_to_string(prefix_vector::Vector{String})\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8y7roy4.jl:13\nin expression starting at\
    \ /tmp/tmpl8y7roy4.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_counts(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfkyzpzou.jl:13\nin expression starting at\
    \ /tmp/tmpfkyzpzou.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbbacacbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    ab\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk2kmswg.jl:13\nin expression starting at\
    \ /tmp/tmphk2kmswg.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hjqh7rj.jl:12\nin expression starting at\
    \ /tmp/tmp5hjqh7rj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl3gkbs_w.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gkbs_w.jl:1\n\
    in expression starting at /tmp/tmpl3gkbs_w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_length(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbq47659.jl:13\nin expression starting at\
    \ /tmp/tmpkbq47659.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpguj16tk5.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpguj16tk5.jl:1\n\
    in expression starting at /tmp/tmpguj16tk5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, if the input string is\
    \ \"abc\", the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpva7wn4uh.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpva7wn4uh.jl:8\n\
    in expression starting at /tmp/tmpva7wn4uh.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjxcr1jcm.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpjxcr1jcm.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3od3vxx.jl:12\nin expression starting at\
    \ /tmp/tmpa3od3vxx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\
    \ For example, for the string \"abc\" the longest prefix is \"abc\".\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq1gmxnn.jl:13\nin expression starting at\
    \ /tmp/tmptq1gmxnn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_array\
    \ = Vector{String}()\n    prefix_array = [string]\n    \n    for prefix in prefix_array\n\
    \        prefix_array = prefix_array + prefix\n    end\n    \n    return prefix_array\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmphoaua3dw.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmphoaua3dw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  MethodError: no method\
    \ matching +(::Vector{String}, ::String)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmphoaua3dw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphoaua3dw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphoaua3dw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmphoaua3dw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  MethodError: no method matching +(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmphoaua3dw.jl:11\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphoaua3dw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    \n    return prefix_vector\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfih2tnq3.jl:13\nin expression starting at\
    \ /tmp/tmpfih2tnq3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the original string. For example, all_prefixes(\"abc\"\
    ) returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"ab\") returns [\"a\", \"\
    ab\"]. Assume that all_prefixes is defined above as all_prefixes.\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1zeusr4.jl:13\nin expression starting at\
    \ /tmp/tmpz1zeusr4.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjxcr1jcm.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpjxcr1jcm.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are lowercase letters\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are digits\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are punctuation\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are whitespace\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are alphanumeric\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all uppercase letters\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all lowercase letters\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all punctuation\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all whitespace\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all alphanumeric\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all uppercase letters and all lowercase letters\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all digits and all punctuation\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all whitespace and all\
    \ alphanumeric\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all uppercase letters, lowercase letters,\
    \ digits, punctuation, whitespace, and alphanumeric\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all uppercase\
    \ letters, lowercase letters, digits, punctuation, whitespace, and alphanumeric\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all uppercase letters, lowercase letters, digits, punctuation,\
    \ whitespace, and alphanumeric\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all uppercase letters, lowercase\
    \ letters, digits, punctuation, whitespace, and alphanumeric\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all uppercase letters, lowercase letters, digits, punctuation, whitespace,\
    \ and alphanumeric\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all uppercase letters, lowercase letters,\
    \ digits, punctuation, whitespace, and alphanumeric\nWrite a function that takes\
    \ a string and returns the number of \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6y6oaso.jl:12\nin expression starting at\
    \ /tmp/tmpa6y6oaso.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfih2tnq3.jl:13\nin expression starting at\
    \ /tmp/tmpfih2tnq3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9agn_7v.jl:13\nin expression starting at\
    \ /tmp/tmpu9agn_7v.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmprzmj_l.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmprzmj_l.jl:1\n\
    in expression starting at /tmp/tmpmprzmj_l.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end])\n\
    \    prefix_vector = prefix_vector + all_prefixes(string[end+1:end-1])\n    prefix_vector\
    \ = prefix_vector + all_prefixes(string[end-1:end])\n    \n    return prefix_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ []\n    for prefix in string.split(\"\")\n        prefix_list += prefix\n  \
    \  end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n   \
    \ prefix_counts(string::String)::Dict{String, Int}\n    \n    Count how many times\
    \ each prefix appears in the input string\n    \n    >>> prefix_counts(\"abcabc\"\
    )\n    {\"a\": 3, \"ab\": 1, \"abc\": 2, \"b\": 2, \"bc\": 1, \"c\": 1}\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu93vyfil.jl:12\nin expression starting at\
    \ /tmp/tmpu93vyfil.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-1] + prefix_list[i-2]\n    end\n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmps9oawep1.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps9oawep1.jl:8\n\
    in expression starting at /tmp/tmps9oawep1.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, \ncount_chars(\"abcabc\"\
    ) should return [a => 3, b => 2, c => 3]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprg0qay98.jl:13\nin expression starting at\
    \ /tmp/tmprg0qay98.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the string. For\
    \ example, for the string \"abcabc\", the longest prefix is \"abc\".\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz15poefp.jl:15\nin expression starting at\
    \ /tmp/tmpz15poefp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyz_vzx8u.jl:15\nin expression starting at\
    \ /tmp/tmpyz_vzx8u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Assume\
    \ that all_prefixes is defined above as all_prefixes.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykyn5q4s.jl:12\nin expression starting at\
    \ /tmp/tmpykyn5q4s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7pipjrqq.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pipjrqq.jl:1\n\
    in expression starting at /tmp/tmp7pipjrqq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfih2tnq3.jl:13\nin expression starting at\
    \ /tmp/tmpfih2tnq3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abe\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abf\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abi\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abj\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abk\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abl\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abn\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abo\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abp\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abq\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abr\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abs\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abt\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abu\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abv\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abw\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abx\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aby\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abz\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefix\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54ahka0u.jl:13\nin expression starting at\
    \ /tmp/tmp54ahka0u.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxi90_qv6.jl:12\nin expression starting at\
    \ /tmp/tmpxi90_qv6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_vector\
    \ = prefix_vector + [prefix]\n    end\n    prefix_vector\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgcluvbc1.jl:12\nin expression starting at\
    \ /tmp/tmpgcluvbc1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo8awdf3l.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo8awdf3l.jl:1\n\
    in expression starting at /tmp/tmpo8awdf3l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfih2tnq3.jl:13\nin expression starting at\
    \ /tmp/tmpfih2tnq3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_vector\
    \ = prefix_vector + [prefix]\n    end\n    prefix_vector\nend\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhy5pq4m.jl:12\nin expression starting at\
    \ /tmp/tmplhy5pq4m.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + prefixes(string)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse)\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4jkiya4t.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4jkiya4t.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: prefixes\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp4jkiya4t.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jkiya4t.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jkiya4t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4jkiya4t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: prefixes not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp4jkiya4t.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jkiya4t.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jkiya4t.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4jkiya4t.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: prefixes not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp4jkiya4t.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4jkiya4t.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4jkiya4t.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzrhxw6m.jl:13\nin expression starting at\
    \ /tmp/tmpnzrhxw6m.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-1] + prefix_list[i-2]\n    end\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a palindrome. For example, all_prefixes(\"abba\"\
    ) should return \"ab\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpah98gno4.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpah98gno4.jl:8\n\
    in expression starting at /tmp/tmpah98gno4.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwarlaenq.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwarlaenq.jl:8\n\
    in expression starting at /tmp/tmpwarlaenq.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7pipjrqq.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pipjrqq.jl:1\n\
    in expression starting at /tmp/tmp7pipjrqq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6x6hhz3z.jl:12\nin expression starting at\
    \ /tmp/tmp6x6hhz3z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl3gkbs_w.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gkbs_w.jl:1\n\
    in expression starting at /tmp/tmpl3gkbs_w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string]\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, for the input string \"abc\"\
    , the longest prefix is \"abc\". For the string \"abcabc\", the longest prefix\
    \ is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2y7s12f.jl:11\nin expression starting at\
    \ /tmp/tmp_2y7s12f.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1]) \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefutpu7e.jl:12\nin expression starting at\
    \ /tmp/tmpefutpu7e.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string)\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest prefix\
    \ of a given string.\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprh2g370g.jl:10\nin expression starting at\
    \ /tmp/tmprh2g370g.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjxcr1jcm.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpjxcr1jcm.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykd7_krl.jl:12\nin expression starting at\
    \ /tmp/tmpykd7_krl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqx16_3n.jl:13\nin expression starting at\
    \ /tmp/tmpwqx16_3n.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time \nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5en667c.jl:13\nin expression starting at\
    \ /tmp/tmpi5en667c.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string]\n    for prefix\
    \ in prefix_list\n        prefix_list = prefix_list ++ all_prefixes(prefix) \n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cn2oyeo.jl:13\nin expression starting at\
    \ /tmp/tmp4cn2oyeo.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    \n    for i = 4 to length(string)\n        prefix_list[i]\
    \ = string[i - 4..i]\n    end\n    \n    return prefix_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv0k9yrqd.jl:12 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv0k9yrqd.jl:12\n\
    in expression starting at /tmp/tmpv0k9yrqd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7pipjrqq.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7pipjrqq.jl:1\n\
    in expression starting at /tmp/tmp7pipjrqq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxi90_qv6.jl:12\nin expression starting at\
    \ /tmp/tmpxi90_qv6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_vector\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkps1lcjw.jl:10\nin expression starting at\
    \ /tmp/tmpkps1lcjw.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefixes_of_strings(string::String)::Vector{String}\n\
    \    \n    Return vector of all prefixes of input string\n    \n    >>> prefixes_of_strings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqd5u4s0.jl:13\nin expression starting at\
    \ /tmp/tmpiqd5u4s0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpeao1kkf_.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpeao1kkf_.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpeao1kkf_.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeao1kkf_.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeao1kkf_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpeao1kkf_.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpeao1kkf_.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeao1kkf_.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeao1kkf_.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpeao1kkf_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpeao1kkf_.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeao1kkf_.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeao1k"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ []\n    for prefix in string.split(\"\")\n        prefix_list += prefix\n  \
    \  end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string that are uppercase\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are digits. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are punctuation.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are alphanumeric.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all uppercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all lowercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all digits.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all alphanumeric.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ uppercase letters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all lowercase letters.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all digits.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all spaces.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all digits.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all uppercase letters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ lowercase letters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all digits.\nWrite \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn71zvd5_.jl:12\nin expression starting at\
    \ /tmp/tmpn71zvd5_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgpwx1it0.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgpwx1it0.jl:1\n\
    in expression starting at /tmp/tmpgpwx1it0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the longest\
    \ prefix of a given string. For example, for the string \"abc\" the longest prefix\
    \ is \"a\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplts0jhl3.jl:15\nin expression starting at\
    \ /tmp/tmplts0jhl3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_array\
    \ = Array{String}(length(string))\n    prefix_array[:] = \"\"\n    prefix_array[1]\
    \ = string[1]\n    prefix_array[2] = string[2]\n    prefix_array[3] = string[3]\n\
    \    prefix_array[4] = string[4]\n    prefix_array[5] = string[5]\n    prefix_array[6]\
    \ = string[6]\n    prefix_array[7] = string[7]\n    prefix_array[8] = string[8]\n\
    \    prefix_array[9] = string[9]\n    prefix_array[10] = string[10]\n    prefix_array[11]\
    \ = string[11]\n    prefix_array[12] = string[12]\n    prefix_array[13] = string[13]\n\
    \    prefix_array[14] = string[14]\n    prefix_array[15] = string[15]\n    prefix_array[16]\
    \ = string[16]\n    prefix_array[17] = string[17]\n    prefix_array[18] = string[18]\n\
    \    prefix_array[19] = string[19]\n    prefix_array[20] = string[20]\n    prefix_array[21]\
    \ = string[21]\n    prefix_array[22] = string[22]\n    prefix_array[23] = string[23]\n\
    \    prefix_array[24] = string[24]\n    prefix_array[25] = string[25]\n    prefix_array[26]\
    \ = string[26]\n    prefix_array[27] = string[27]\n    prefix_array[28] = string[28]\n\
    \    prefix_array[29] = string[29]\n    prefix_array[30] = string[30]\n    prefix_array[31]\
    \ = string[31]\n    prefix_array[32] = string[32]\n    prefix_array[33] = string[33]\n\
    \    prefix_array[34] = string[34]\n    prefix_array[35] = string[35]\n    prefix_array[36]\
    \ = string[36]\n    prefix_array[37] = string[37]\n    prefix_array[38] = string[38]\n\
    \    prefix_array[39] = string[39]\n    prefix_array[40] = string[40]\n    prefix_array[41]\
    \ = string[41]\n    prefix_array[42] = string[42]\n    prefix_array[43] = string[43]\n\
    \    prefix_array[44] = string[44]\n    prefix_array[45] = string[45]\n    prefix_array[46]\
    \ = string[46]\n    prefix_array[47] = string[47]\n    prefix_array[48] = string[48]\n\
    \    prefix_array[49] = string[49]\n    prefix_array[50] = string[50]\n    prefix_array[51]\
    \ = string[51]\n    prefix_array[52] = string[52]\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg9u2uy4f.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg9u2uy4f.jl:1\n\
    in expression starting at /tmp/tmpg9u2uy4f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[1:end-1])\n    return prefix_list\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ []\n    for c in string\n        prefix_list.append(string[1:end-1] + c)\n \
    \   end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string is the concatenation of the\
    \ first character of the string with the first character of the next string. For\
    \ example, [\"a\", \"b\", \"c\"] -> [\"aa\", \"ab\", \"ac\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcoxwol69.jl:12\nin expression starting at\
    \ /tmp/tmpcoxwol69.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe19ig33y.jl:13\nin expression starting at\
    \ /tmp/tmpe19ig33y.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that appears in the string. For example, if the input\
    \ is \"abc\", the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15168qa6.jl:10\nin expression starting at\
    \ /tmp/tmp15168qa6.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, if the input is \"abcde\"\
    , the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibkz6bme.jl:13\nin expression starting at\
    \ /tmp/tmpibkz6bme.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_vector\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a\
    \ second function that takes a string and returns the shortest prefix that is\
    \ a substring of the input string. For example, all_prefixes(\"abc\") returns\
    \ [\"a\", \"ab\", \"abc\"]. Write a third function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a fourth function that takes a\
    \ string and returns the shortest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a\
    \ fifth function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abc\") returns [\"\
    a\", \"ab\", \"abc\"]. Write a sixth function that takes a string and returns\
    \ the shortest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a seventh function that takes a\
    \ string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a\
    \ eighth function that takes a string and returns the shortest prefix that is\
    \ a substring of the input string. For example, all_prefixes(\"abc\") returns\
    \ [\"a\", \"ab\", \"abc\"]. Write a ninth function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a tenth function that takes a string\
    \ and returns the shortest prefix that is a substring of the input string. For\
    \ example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a eleventh\
    \ function that takes a string and returns the longest prefix that is a substring\
    \ of the input string. For example, all_prefixes(\"abc\") returns [\"a\", \"ab\"\
    , \"abc\"]. Write a twelfth function that takes a string and returns the shortest\
    \ prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a thirteenth function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpceemhd0l.jl:11\nin expression starting at\
    \ /tmp/tmpceemhd0l.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjb3fqvw.jl:1\nin expression starting at /tmp/tmphjb3fqvw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes_of_strings(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7s9a4nl5.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7s9a4nl5.jl:8\n\
    in expression starting at /tmp/tmp7s9a4nl5.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are uppercase\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrno7j_r.jl:12\nin expression starting at\
    \ /tmp/tmpjrno7j_r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4yo4x1i7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp4yo4x1i7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4yo4x1i7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp4yo4x1i7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap6zkjkz.jl:12\nin expression starting at\
    \ /tmp/tmpap6zkjkz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacacabbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacacabbbbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbbbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbba\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuck84ve3.jl:13\nin expression starting at\
    \ /tmp/tmpuck84ve3.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + string.split(\"\")\n    prefix_list\
    \ = prefix_list + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\
    \")\n    prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4kxiybku.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4kxiybku.jl:1\n\
    in expression starting at /tmp/tmp4kxiybku.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not in\
    \ the alphabet (including spaces). For example, if the input string is \"abc def\"\
    \ then your function should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqwfbgd8.jl:12\nin expression starting at\
    \ /tmp/tmpqqwfbgd8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl3gkbs_w.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gkbs_w.jl:1\n\
    in expression starting at /tmp/tmpl3gkbs_w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5zz3ywx.jl:13\nin expression starting at\
    \ /tmp/tmpn5zz3ywx.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    \n    for i = 4 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the longest prefix of a given string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzjgc80lr.jl:12 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzjgc80lr.jl:12\n\
    in expression starting at /tmp/tmpzjgc80lr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzb1rxq83.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzb1rxq83.jl:1\n\
    in expression starting at /tmp/tmpzb1rxq83.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbbcd\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbcdef\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbbcdefg\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefgh\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghi\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbbcdefghij\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbcdefghijk\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbbcdefghijkl\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklm\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr9g0j_w.jl:12\nin expression starting at\
    \ /tmp/tmpyr9g0j_w.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = 1:length(string)\n        prefixes +=\
    \ string[1:i]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the input \"abc\" the\
    \ function should return \"a\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdix63a6.jl:15\nin expression starting at\
    \ /tmp/tmpsdix63a6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl3gkbs_w.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl3gkbs_w.jl:1\n\
    in expression starting at /tmp/tmpl3gkbs_w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89vcd_pj.jl:10\nin expression starting at\
    \ /tmp/tmp89vcd_pj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgpwx1it0.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgpwx1it0.jl:1\n\
    in expression starting at /tmp/tmpgpwx1it0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = length(prefixes) downto 1 do\n       \
    \ prefixes[i] = string[(i-1):end]\n    end\n    \n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpo0ho8gzc.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo0ho8gzc.jl:9\n\
    in expression starting at /tmp/tmpo0ho8gzc.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + prefixes(string)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse)\n    prefix_list = prefix_list + prefixes(string.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.chars.reverse.chars)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawmh59i5.jl:27\nin expression starting at\
    \ /tmp/tmpawmh59i5.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1]) \n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66f_j6dj.jl:11\nin expression starting at\
    \ /tmp/tmp66f_j6dj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7on1ee5z.jl:13\nin expression starting at\
    \ /tmp/tmp7on1ee5z.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, if the input string is \"abcde\", the longest prefix that is a\
    \ substring of the input string is \"abc\".\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9uu3s22p.jl:10\nin expression starting at\
    \ /tmp/tmp9uu3s22p.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_array =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_array\
    \ << prefix\n    end\n    return prefix_array\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpupg8_f4f.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpupg8_f4f.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpupg8_f4f.jl:7\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpupg8_f4f.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpupg8_f4f.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpupg8_f4f.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpupg8_f4f.jl:7\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpupg8_f4f.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpupg8_f4f.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpupg8_f4f.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpupg8_f4f.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpupg8_f4f.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpupg8_f4f.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp2mebn4vj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp2mebn4vj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmp2mebn4vj.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp2mebn4vj.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2mebn4vj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2mebn4vj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2mebn4vj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmp2mebn4vj.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp2mebn4vj.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2mebn4vj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2mebn4vj.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefixes_from_longest(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprl4nddhe.jl:13\nin expression starting at\
    \ /tmp/tmprl4nddhe.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbkwx2hjk.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbkwx2hjk.jl:1\n\
    in expression starting at /tmp/tmpbkwx2hjk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_vector + string\n    prefix_vector = prefix_vector + string\n    prefix_vector\
    \ = prefix_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpguj16tk5.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpguj16tk5.jl:1\n\
    in expression starting at /tmp/tmpguj16tk5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ \n    end\n    prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpnvfl8lxr.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpnvfl8lxr.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpnvfl8lxr.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpnvfl8lxr.jl:8\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnvfl8lxr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnvfl8lxr.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnvfl8lxr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpnvfl8lxr.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpnvfl8lxr.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnvfl8lxr.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnvfl8lxr.jl:16\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp29uzh505.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp29uzh505.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp29uzh505.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp29uzh505.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp29uzh505.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp29uzh505.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp29uzh505.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp29uzh505.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp29uzh505.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp29uzh505.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp29uzh505.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp29uzh505.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp29uzh505.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, if the input string is\
    \ \"abc\", the longest prefix is \"abc\". If the input string is \"abcabc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxkxpegk.jl:13\nin expression starting at\
    \ /tmp/tmptxkxpegk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list = [prefix_list; prefixes(s)]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbw2c43i0.jl:12\nin expression starting at\
    \ /tmp/tmpbw2c43i0.jl:12\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\
    \ \nFor example, if the input string is \"abc\", the function should return {\"\
    a\" => 1, \"b\" => 1, \"c\" => 2}.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8d317qj.jl:12\nin expression starting at\
    \ /tmp/tmph8d317qj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        push!(prefixes,\
    \ prefix)\n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpf6zcmhvk.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpf6zcmhvk.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpf6zcmhvk.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6zcmhvk.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6zcmhvk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf6zcmhvk.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpf6zcmhvk.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6zcmhvk.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6zcmhvk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf6zcmhvk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpf6zcmhvk.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6zcmhvk.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6zcmhvk.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = []\n    for c in string\n        prefix_list.append(c)\n    end\n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp90epvr_2.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp90epvr_2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  type Array has no field append\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp90epvr_2.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp90epvr_2.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp90epvr_2.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp90epvr_2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type Array has no field append\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp90epvr_2.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp90epvr_2.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp90epvr_2.jl:17\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    \n    return prefix_list\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4q93qxu.jl:12\nin expression starting at\
    \ /tmp/tmpm4q93qxu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = 1:length(string)\n        prefixes +=\
    \ string[(i+1):end]\n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpyk4qa6nz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpyk4qa6nz.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching +(::Vector{String}, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(::Array,\
    \ !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpyk4qa6nz.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyk4qa6nz.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyk4qa6nz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyk4qa6nz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ +(::Vector{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpyk4qa6nz.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyk4qa6nz.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-le"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    \n    for i = 4 to length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    \n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzxxd8hkz.jl:12 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzxxd8hkz.jl:12\n\
    in expression starting at /tmp/tmpzxxd8hkz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacab\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdpxv_g73.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdpxv_g73.jl:8\n\
    in expression starting at /tmp/tmpdpxv_g73.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return [\"abc\"].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fii9jz4.jl:13\nin expression starting at\
    \ /tmp/tmp2fii9jz4.jl:13\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpeje1bbdo.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpeje1bbdo.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpeje1bbdo.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeje1bbdo.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeje1bbdo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeje1bbdo.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpeje1bbdo.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeje1bbdo.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeje1bbdo.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpeje1bbdo.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpeje1bbdo.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeje1bbdo.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeje1b"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    \n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvk4bmgig.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpvk4bmgig.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpvk4bmgig.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvk4bmgig.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvk4bmgig.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvk4bmgig.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpvk4bmgig.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvk4bmgig.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvk4bmgig.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvk4bmgig.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpvk4bmgig.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvk4bmgig.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvk4bm"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjxcr1jcm.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpjxcr1jcm.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpjxcr1jcm.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpjxcr1jcm.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjxcr1jcm.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjxcr1jcm.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = 1:length(string)\n        prefixes +=\
    \ string[(i+1):end]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"ab\") == [\"ab\"]\n</cell>\n<code language=julia-1.5>\n@test\
    \ all_prefixes(\"aba\") == [\"ab\", \"aba\"]\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_amuzyu.jl:15\nin expression starting at\
    \ /tmp/tmpy_amuzyu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfg0hpzvm.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfg0hpzvm.jl:1\n\
    in expression starting at /tmp/tmpfg0hpzvm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a vector of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeo9mfhvj.jl:12\nin expression starting at\
    \ /tmp/tmpeo9mfhvj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_cb8zety.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_cb8zety.jl:1\n\
    in expression starting at /tmp/tmp_cb8zety.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0l3u14s.jl:12\nin expression starting at\
    \ /tmp/tmpj0l3u14s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string that are uppercase\
    \ letters. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are lowercase letters. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are digits. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are alphanumeric. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are punctuation. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are whitespace. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are non-alphanumeric. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv46i_sbf.jl:12\nin expression starting at\
    \ /tmp/tmpv46i_sbf.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpynm22w12.jl:9\nin expression\
    \ starting at /tmp/tmpynm22w12.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"abca\") returns [\"\
    a\", \"ab\", \"abc\", \"abca\"].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9shziszb.jl:16\nin expression starting at\
    \ /tmp/tmp9shziszb.jl:16\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ \n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp6r4s2a75.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp6r4s2a75.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmp6r4s2a75.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp6r4s2a75.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6r4s2a75.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6r4s2a75.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6r4s2a75.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmp6r4s2a75.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp6r4s2a75.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6r4s2a75.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6r4s2a75.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ with all occurrences of \"a\" replaced by \"e\"\ne.g. \"abca\" -> \"ebeca\"\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpna6bdsmj.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpna6bdsmj.jl:8\n\
    in expression starting at /tmp/tmpna6bdsmj.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are lowercase letters.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are digits. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are spaces.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are punctuation.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are alphanumeric.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all uppercase letters.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are all lowercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all uppercase letters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ lowercase letters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all digits.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all spaces.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all punctuation.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all alphanumeric.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all uppercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all lowercase letters.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all digits.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all spaces.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string \nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jjvrcm_.jl:12\nin expression starting at\
    \ /tmp/tmp0jjvrcm_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxot9bxvd.jl:12\nin expression starting at\
    \ /tmp/tmpxot9bxvd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, if the input string is\
    \ \"abcde\", the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7xmy5ab.jl:13\nin expression starting at\
    \ /tmp/tmpx7xmy5ab.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    for i = 4:3:length(string)\n        prefix_list[i] = string[i - 2] + string[i\
    \ - 1]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"\n    prefixes_of_strings(string::String)::Vector{String}\n    \n    Find all\
    \ prefixes of string\n    \n    string::String\n    \n    Return a vector of all\
    \ prefixes of string\n    \n    >>> prefixes_of_strings(\"abc\")\n    [\"a\",\
    \ \"ab\", \"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6wr0qjd.jl:14\nin expression starting at\
    \ /tmp/tmpu6wr0qjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)::Int64\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2kznxdn.jl:13\nin expression starting at\
    \ /tmp/tmpi2kznxdn.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    return prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnoc1vxv.jl:13\nin expression starting at\
    \ /tmp/tmpnnoc1vxv.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are uppercase\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80h30l3r.jl:12\nin expression starting at\
    \ /tmp/tmp80h30l3r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpp4hq85w1.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpp4hq85w1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpp4hq85w1.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp4hq85w1.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp4hq85w1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpp4hq85w1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpp4hq85w1.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp4hq85w1.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp4hq85w1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpp4hq85w1.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpp4hq85w1.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp4hq85w1.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp4hq8"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_j8cl04x.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_j8cl04x.jl:1\n\
    in expression starting at /tmp/tmp_j8cl04x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        push!(prefixes,\
    \ prefix)\n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpf6zcmhvk.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpf6zcmhvk.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpf6zcmhvk.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6zcmhvk.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6zcmhvk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf6zcmhvk.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpf6zcmhvk.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6zcmhvk.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6zcmhvk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpf6zcmhvk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpf6zcmhvk.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf6zcmhvk.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf6zcmhvk.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the original\
    \ string. For example, for the input string \"abcabc\", the longest prefix that\
    \ is a substring would be \"abc\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5k5rsg4_.jl:12\nin expression starting at\
    \ /tmp/tmp5k5rsg4_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    \n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp6o41qyfn.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6o41qyfn.jl:10\n\
    in expression starting at /tmp/tmp6o41qyfn.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpanewmyke.jl:13\nin expression starting at\
    \ /tmp/tmpanewmyke.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    prefix_list = prefix_list + all_prefixes(string[2:end])\
    \ + [string[2:end]]\n    prefix_list = prefix_list + all_prefixes(string[3:end])\
    \ + [string[3:end]]\n    prefix_list = prefix_list + all_prefixes(string[4:end])\
    \ + [string[4:end]]\n    prefix_list = prefix_list + all_prefixes(string[5:end])\
    \ + [string[5:end]]\n    prefix_list = prefix_list + all_prefixes(string[6:end])\
    \ + [string[6:end]]\n    prefix_list = prefix_list + all_prefixes(string[7:end])\
    \ + [string[7:end]]\n    prefix_list = prefix_list + all_prefixes(string[8:end])\
    \ + [string[8:end]]\n    prefix_list = prefix_list + all_prefixes(string[9:end])\
    \ + [string[9:end]]\n    prefix_list = prefix_list + all_prefixes(string[10:end])\
    \ + [string[10:end]]\n    prefix_list = prefix_list + all_prefixes(string[11:end])\
    \ + [string[11:end]]\n    prefix_list = prefix_list + all_prefixes(string[12:end])\
    \ + [string[12:end]]\n    prefix_list = prefix_list + all_prefixes(string[13:end])\
    \ + [string[13:end]]\n    prefix_list = prefix_list + all_prefixes(string[14:end])\
    \ + [string[14:end]]\n    prefix_list = prefix_list + all_prefixes(string[15:end])\
    \ + [string[15:end]]\n    prefix_list = prefix_list + all_prefixes(string[16:end])\
    \ + [string[16:end]]\n    prefix_list = prefix_list + all_prefixes(string[17:end])\
    \ + [string[17:end]]\n    prefix_list = prefix_list + all_prefixes(string[18:end])\
    \ + [string[18:end]]\n    prefix_list = prefix_list + all_prefixes(string[19:end])\
    \ + [string[19:end]]\n    prefix_list = prefix_list + all_prefixes(string[20:end])\
    \ + [string[20:end]]\n    prefix_list = prefix_list + all_prefixes(string[21:end])\
    \ + [string[21:end]]\n    prefix_list = prefix_list + all_prefixes(string[22:end])\
    \ + [string[22:end]]\n    prefix_list = prefix_list + all_prefixes(string[23:end])\
    \ + [string[23:end]]\n    prefix_list = prefix_list + all_prefixes(string[24:end])\
    \ + [string[24:\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ugzz_uv.jl:32\nin expression starting at\
    \ /tmp/tmp7ugzz_uv.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4b1km8op.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4b1km8op.jl:10\n\
    in expression starting at /tmp/tmp4b1km8op.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaq1bb8g4.jl:13\nin expression starting at\
    \ /tmp/tmpaq1bb8g4.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykd7_krl.jl:12\nin expression starting at\
    \ /tmp/tmpykd7_krl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbccc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccde\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbcccdefg\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdefgg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdefggg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggg\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefggggg\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggggg\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbcccdefggggggg\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdefgggggggg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdefggggggggg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggggggggg\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggggggg\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuopt79lb.jl:12\nin expression starting at\
    \ /tmp/tmpuopt79lb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvk4bmgig.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpvk4bmgig.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpvk4bmgig.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvk4bmgig.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvk4bmgig.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvk4bmgig.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpvk4bmgig.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvk4bmgig.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvk4bmgig.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpvk4bmgig.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpvk4bmgig.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvk4bmgig.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvk4bm"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqc22o_5s.jl:13\nin expression starting at\
    \ /tmp/tmpqc22o_5s.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        push!(prefixes, string[1:end-c])\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1q4werya.jl:15\nin expression starting at\
    \ /tmp/tmp1q4werya.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string,prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpe9f697gj.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpe9f697gj.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpe9f697gj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9f697gj.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9f697gj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpe9f697gj.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpe9f697gj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9f697gj.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9f697gj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpe9f697gj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpe9f697gj.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe9f697gj.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe9f697gj.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    \n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp61nnot2u.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp61nnot2u.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmp61nnot2u.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp61nnot2u.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp61nnot2u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp61nnot2u.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmp61nnot2u.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp61nnot2u.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp61nnot2u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp61nnot2u.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp61nnot2u.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp61nnot2u.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp61nnot2u.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: -1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_vector\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string as input and returns a string with all the characters in lower case.\
    \ \nFor example, \nall_lowercase(\"abc\") returns \"abc\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9x4fv6bi.jl:12\nin expression starting at\
    \ /tmp/tmp9x4fv6bi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector.append(string[1:end-1])\
    \ \n    prefix_vector = prefix_vector.append(string[2:end])\n    prefix_vector\
    \ = prefix_vector.append(string[3:end])\n    prefix_vector = prefix_vector.append(string[4:end])\n\
    \    prefix_vector = prefix_vector.append(string[5:end])\n    prefix_vector =\
    \ prefix_vector.append(string[6:end])\n    prefix_vector = prefix_vector.append(string[7:end])\n\
    \    prefix_vector = prefix_vector.append(string[8:end])\n    prefix_vector =\
    \ prefix_vector.append(string[9:end])\n    prefix_vector = prefix_vector.append(string[10:end])\n\
    \    prefix_vector = prefix_vector.append(string[11:end])\n    prefix_vector =\
    \ prefix_vector.append(string[12:end])\n    prefix_vector = prefix_vector.append(string[13:end])\n\
    \    prefix_vector = prefix_vector.append(string[14:end])\n    prefix_vector =\
    \ prefix_vector.append(string[15:end])\n    prefix_vector = prefix_vector.append(string[16:end])\n\
    \    prefix_vector = prefix_vector.append(string[17:end])\n    prefix_vector =\
    \ prefix_vector.append(string[18:end])\n    prefix_vector = prefix_vector.append(string[19:end])\n\
    \    prefix_vector = prefix_vector.append(string[20:end])\n    prefix_vector =\
    \ prefix_vector.append(string[21:end])\n    prefix_vector = prefix_vector.append(string[22:end])\n\
    \    prefix_vector = prefix_vector.append(string[23:end])\n    prefix_vector =\
    \ prefix_vector.append(string[24:end])\n    prefix_vector = prefix_vector.append(string[25:end])\n\
    \    prefix_vector = prefix_vector.append(string[26:end])\n    prefix_vector =\
    \ prefix_vector.append(string[27:end])\n    prefix_vector = prefix_vector.append(string[28:end])\n\
    \    prefix_vector = prefix_vector.append(string[29:end])\n    prefix_vector =\
    \ prefix_vector.append(string[31:end])\n    prefix_vector = prefix_vector.append(string[32:end])\n\
    \    prefix_vector = prefix_vector.append(string[33:end])\n    prefix_vector =\
    \ prefix_vector.append(string[34:end])\n    prefix_vector = prefix_vector.append(string[35:end])\n\
    \    prefix_vector = prefix_vector.append(string[36:end])\n    prefix_vector =\
    \ prefix_vector.append(string[37:end])\n    prefix_vector = prefix_vector.append(string[38:end])\n\
    \    prefix_vector = prefix_vector.append(string[39\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopb37v4y.jl:1\nin expression starting at /tmp/tmpopb37v4y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4vxf7fs.jl:12\nin expression starting at\
    \ /tmp/tmpb4vxf7fs.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ \n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp6r4s2a75.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp6r4s2a75.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmp6r4s2a75.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp6r4s2a75.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6r4s2a75.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6r4s2a75.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6r4s2a75.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmp6r4s2a75.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp6r4s2a75.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6r4s2a75.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6r4s2a75.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpennhay30.jl:13\nin expression starting at\
    \ /tmp/tmpennhay30.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3spkrza8.jl:12\nin expression starting at\
    \ /tmp/tmp3spkrza8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykd7_krl.jl:12\nin expression starting at\
    \ /tmp/tmpykd7_krl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpfo8x9g52.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpfo8x9g52.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfo8x9g52.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpfo8x9g52.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo8x9g52.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo8x9g52.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp4yo4x1i7.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp4yo4x1i7.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x1i7.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp4yo4x1i7.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp4yo4x1i7.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4yo4x1i7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4yo4x"
