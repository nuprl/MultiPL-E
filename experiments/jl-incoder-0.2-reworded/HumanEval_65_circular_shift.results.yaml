language: jl
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits, \"\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wie387q.jl:20\nin expression starting at\
    \ /tmp/tmp9wie387q.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc79nrxzg.jl:16\nin expression starting at\
    \ /tmp/tmpc79nrxzg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        digits = join(digits, \"\")\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a |>\nHere's a solution that doesn't use\
    \ any packages:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs8men4z.jl:20\nin expression starting at\
    \ /tmp/tmpcs8men4z.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits(x) returns a list of\
    \ digits of the integer x, starting from the rightmost digit.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zxw7afu.jl:17\nin expression starting at\
    \ /tmp/tmp1zxw7afu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + reverse(x[shift+1:])\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8hn8dj4.jl:12\nin expression starting at\
    \ /tmp/tmph8hn8dj4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfazl6n5l.jl:17\nin expression starting at\
    \ /tmp/tmpfazl6n5l.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttjc7gi3.jl:15\nin expression starting at\
    \ /tmp/tmpttjc7gi3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits_test.jl and looks like this:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1hsnynu.jl:17\nin expression starting at\
    \ /tmp/tmpc1hsnynu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits_test.jl and looks like this:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1hsnynu.jl:17\nin expression starting at\
    \ /tmp/tmpc1hsnynu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nWrite a function that returns the number of digits in\
    \ an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digit\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1rp70co.jl:17\nin expression starting at\
    \ /tmp/tmpj1rp70co.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lqbpudw.jl:17\nin expression starting at\
    \ /tmp/tmp_lqbpudw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:length(x)+shift]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkdxieco.jl:15\nin expression starting at\
    \ /tmp/tmpjkdxieco.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttjc7gi3.jl:15\nin expression starting at\
    \ /tmp/tmpttjc7gi3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbv1zj3k_.jl:15\nin expression starting at\
    \ /tmp/tmpbv1zj3k_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) returns 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5okodzb.jl:17\nin expression starting at\
    \ /tmp/tmpb5okodzb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9_sv7vn.jl:17\nin expression starting at\
    \ /tmp/tmpy9_sv7vn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfoanepsr.jl:12\nin expression starting at\
    \ /tmp/tmpfoanepsr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise: Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n    and return the result as a string.\n    If shift > number\
    \ of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\
    \n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph56xpplz.jl:17\nin expression starting at\
    \ /tmp/tmph56xpplz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[:\
    \ shift]\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary number\
    \ to a decimal number. For example,\n    bin2dec(0b1010101) returns 10.\n    bin2dec(0b101010)\
    \ returns 5.\n    bin2dec(0b111111) returns 3.\n    bin2dec(0b1111) returns 3.\n\
    \    bin2dec(0b11) returns 1.\n    bin2dec(0b) returns 0.\n    bin2dec() returns\
    \ 0.\n    bin2dec(0) returns 0.\n    bin2dec(1) returns 1.\n    bin2dec(10) returns\
    \ 10.\n    bin2dec(100) returns 100.\n    bin2dec(1000) returns 1000.\n    bin2dec(10000)\
    \ returns 10000.\n    bin2dec(100000) returns 100000.\n    bin2dec(1000000) returns\
    \ 1000000.\n    bin2dec(100000000) returns 100000000.\n    bin2dec(1000000000000)\
    \ returns 1000000000000.\n    bin2dec(1000000000000000) returns 1000000000000000.\n\
    \    bin2dec(1000000000000000000) returns 1000000000000000000.\n    bin2dec(100000000000000000000)\
    \ returns 100000000000000000000.\n    bin2dec(10000000000000000000000) returns\
    \ 10000000000000000000000.\n    bin2dec(1000000000000000000000000) returns 1000000000000000000000000.\n\
    \    bin2dec(100000000000000000000000000) returns 100000000000000000000000000.\n\
    \    bin2dec(10000000000000000000000000000) returns 10000000000000000000000000000.\n\
    \    bin2dec(1000000000000000000000000000000) returns 1000000000000000000000000000000.\n\
    \    bin2dec(100000000000000000000000000000000) returns 100000000000000000000000000000000.\n\
    \    bin2dec(1000000000000000000000000000000000) returns 1000000000000000000000000000000000.\n\
    \    bin2dec(10000000000000000000000000000000000) returns 10000000000000000000000000000000000.\n\
    \    bin2dec(1000000000000000000000000000000000000) returns 1000000000000000000000000000000000000.\n\
    \    bin2dec(1000000000000000000000000000000000000000) returns 1000000000000000000000000000000000000000.\n\
    \    bin2dec(10000000000000000000000000000000000000000) returns 10000000000000000000000000000000000000000.\n\
    \    bin2dec(100000000000000000000000000000000000000000) returns 100000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf8gu9r4w.jl:14\n\
    in expression starting at /tmp/tmpf8gu9r4w.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7y945crq.jl:17\nin expression starting at\
    \ /tmp/tmp7y945crq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(digits, digits[shift:end])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first n digits\
    \ of a positive integer x. For example, first_n_digits(1234, 2) should return\
    \ \"12\".\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_m9c7tsa.jl:17\nin expression starting at\
    \ /tmp/tmp_m9c7tsa.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[shift+1:end]\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakf8o24n.jl:18\nin expression starting at\
    \ /tmp/tmpakf8o24n.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits.py:\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzjzonzu.jl:17\nin expression starting at\
    \ /tmp/tmpxzjzonzu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmiqc0_g8.jl:15\nin expression starting at\
    \ /tmp/tmpmiqc0_g8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift::Int64] = digits[-shift::Int64]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(123) is 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmzjly5d.jl:18\nin expression starting at\
    \ /tmp/tmplmzjly5d.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[shift+1:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphn3ohur.jl:19\nin expression starting at\
    \ /tmp/tmpphn3ohur.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsw5q51.jl:15\nin expression starting at\
    \ /tmp/tmpsrsw5q51.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 3)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 4)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 5)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 6)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 7)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 10)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 11)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 12)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 13)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 14)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 16)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 17)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 18)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 19)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 20)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 21)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 22)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 23)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 24)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 25)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 26)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29p2ja9y.jl:17\nin expression starting at\
    \ /tmp/tmp29p2ja9y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of digits in an integer.\
    \ For example, length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply1wjzb_.jl:17\nin expression starting at\
    \ /tmp/tmply1wjzb_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyzcxxmv.jl:18\nin expression starting at\
    \ /tmp/tmpkyzcxxmv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpini7en7u.jl:18\nin expression starting at\
    \ /tmp/tmpini7en7u.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        digits =\
    \ split(x, digits(x))\n        digits[shift] = digits[shift] % 10\n        digits\
    \ = join(digits)\n        return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn5m8emt.jl:12\nin expression starting at\
    \ /tmp/tmpzn5m8emt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = reverse(digits)\n\
    \        digits = digits[shift..end]\n        return join(digits)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0yej8w1.jl:20\nin expression starting at\
    \ /tmp/tmpz0yej8w1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_ayggoq.jl:13\nin expression\
    \ starting at /tmp/tmp8_ayggoq.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffm6rq2l.jl:12\nin expression starting at\
    \ /tmp/tmpffm6rq2l.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(reverse(x), -shift)\n  \
    \  else\n        return reverse(x[shift:end-1]) + circular_shift(reverse(x), -shift-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    circular_shift(x, shift)\n\
    \    circular_shift(x, shift, base)\n    \nCircular shift the digits of the integer\
    \ x, shift the digits right by shift\n    and return the result as a string.\n\
    \    If shift > number of digits, return digits reversed.\n    If base is given,\
    \ shift the digits in the given base.\n    >>> circular_shift(12, 1)\n    \"21\"\
    \n    >>> circular_shift(12, 2)\n    \"12\"\n    >>> circular_shift(12, 2, 10)\n\
    \    \"012\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cot7be_.jl:12\nin expression starting at\
    \ /tmp/tmp4cot7be_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a string to a vector of integers. If the string\
    \ contains non-digits, return an empty vector.\nFor example, given \"123\", the\
    \ function should return [1,2,3].\nWrite a function that converts a vector of\
    \ integers to a string.\nFor example, given [1,2,3], the function should return\
    \ \"123\".\nWrite a function that converts a vector of integers to a string and\
    \ returns the string as a vector.\nFor example, given [1,2,3], the function should\
    \ return [1,2,3].\nWrite a function that converts a vector of integers to a string\
    \ and returns the string as a vector.\nFor example, given [1,2,3], the function\
    \ should return \"123\".\nWrite a function that converts a vector of integers\
    \ to a string and returns the string as a vector.\nFor example, given [1,2,3],\
    \ the function should return \"123\".\nWrite a function that converts a vector\
    \ of integers to a string and returns the string as a vector.\nFor example, given\
    \ [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nFor example,\
    \ given [1,2,3], the function should return \"123\".\nWrite a function that converts\
    \ a vector of integers to a string and returns the string as a vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ga6to80.jl:17\nin expression starting at\
    \ /tmp/tmp5ga6to80.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xejhup_.jl:15\nin expression starting at\
    \ /tmp/tmp8xejhup_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer. For example, length(123) == 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlux90cr.jl:16\nin expression starting at\
    \ /tmp/tmpxlux90cr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewb_74rn.jl:19\nin expression starting at\
    \ /tmp/tmpewb_74rn.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        digits = digits[0 : length(x)-shift]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0201o1s.jl:20\nin expression starting at\
    \ /tmp/tmpx0201o1s.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7y945crq.jl:17\nin expression starting at\
    \ /tmp/tmp7y945crq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits)\n        return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju5gmzzu.jl:19\nin expression starting at\
    \ /tmp/tmpju5gmzzu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2z9eqcy.jl:17\nin expression starting at\
    \ /tmp/tmpi2z9eqcy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89ye2vnh.jl:16\nin expression starting at\
    \ /tmp/tmp89ye2vnh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits_test.jl and looks like this:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1hsnynu.jl:17\nin expression starting at\
    \ /tmp/tmpc1hsnynu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits() converts a number\
    \ to a list of digits in base 10. For example, digits(123456789) returns [1,2,3,4,5,6,7,8,9].\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49ut0wla.jl:17\nin expression starting at\
    \ /tmp/tmp49ut0wla.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<text>\nThe function digits(x::Int64)\
    \ returns a list of digits of x in reverse order. For example, digits(123456789)\
    \ returns [9, 3, 2, 1]. Note that the first element of the list is the most significant.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1se4e5f.jl:19\nin expression starting at\
    \ /tmp/tmpz1se4e5f.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise: Circular shift the digits of the integer x, shift\
    \ the digits right by shift\n    and return the result as a string.\n    If shift\
    \ > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n\
    \    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyodvp930.jl:17\nin expression starting at\
    \ /tmp/tmpyodvp930.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = split(x,\
    \ \"\")\n        digits[shift] = digits[shift].reverse()\n        return join(digits,\
    \ \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfw_nq7lh.jl:18\nin expression starting at\
    \ /tmp/tmpfw_nq7lh.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a string and returns the number of characters\
    \ in it.\n    >>> length(\"hello\")\n    5\n    >>> length(\"hello\")\n    5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq194crb5.jl:15\nin expression starting at\
    \ /tmp/tmpq194crb5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)::Array{Int64}\n\
    Return the digits of x in a number as a string in reverse order.\n    >>> digits(123)\n\
    \    \"321\"\n    >>> digits(123456789)\n    \"987654321\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5e2u4d27.jl:17\nin expression starting at\
    \ /tmp/tmp5e2u4d27.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nFor example, length(123) = 4.\nWrite a function that\
    \ returns the number of digits in an integer.\nFor example, length(123) = 4.\n\
    Write a function that returns the number of digits in an integer.\nFor example,\
    \ length(123) = 4.\nWrite a function that returns the number of digits in an integer.\n\
    For example, length(123) = 4.\nWrite a function that returns the number of digits\
    \ in an integer.\nFor example, length(123) = 4.\nWrite a function that returns\
    \ the number of digits in an integer.\nFor example, length(123) = 4.\nWrite a\
    \ function that returns the number of digits in an integer.\nFor example, length(123)\
    \ = 4.\nWrite a function that returns the number of digits in an integer.\nFor\
    \ example, length(123) = 4.\nWrite a function that returns the number of digits\
    \ in an integer.\nFor example, length(123) = 4.\nWrite a function that returns\
    \ the number of digits in an integer.\nFor example, length(123) = 4.\nWrite a\
    \ function that returns the number of digits in an integer.\nFor example, length(123)\
    \ = 4.\nWrite a function that returns the number of digits in an integer.\nFor\
    \ example, length(123) = 4.\nWrite a function that returns the number of digits\
    \ in an integer.\nFor example, length(123) = 4.\nWrite a function that returns\
    \ the number of digits in an integer.\nFor example, length(123) = 4.\nWrite a\
    \ function that returns the number of digits in an integer.\nFor example, length(123)\
    \ = 4.\nWrite a function that returns the number of digits in an integer.\nFor\
    \ example, length(123) = 4.\nWrite a function that returns the number of digits\
    \ in an integer.\nFor example, length(123) = 4.\nWrite a function that returns\
    \ the number of digits in an integer.\nFor example, length(123) = 4.\nWrite a\
    \ function that returns the number of digits in an integer.\nFor example, length(123)\
    \ = 4.\nWrite a function that returns the number of digits in an integer.\nFor\
    \ example, length(123) = 4.\nWrite a function that returns the number of digits\
    \ in an integer.\nFor example, length(123) = 4.\nWrite a function that returns\
    \ the number of digits in an integer.\nFor example, length(123) = 4.\nWrite a\
    \ function that returns the number of digits in an integer.\nFor example, length(123)\
    \ = 4.\nWrite a function that returns the number of digits in an integer.\nFor\
    \ example, length(123) = 4.\nWrite a function that returns the number of digits\
    \ in an integer.\nFor example, length(123) = 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3z2_jqc_.jl:18\nin expression starting at\
    \ /tmp/tmp3z2_jqc_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvozjd4s.jl:18\nin expression starting at\
    \ /tmp/tmptvozjd4s.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits, \"\")\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work for negative\
    \ numbers. E.g. `circular_shift(-12, 1)` returns `-22` instead of `-12`.\n<|/\
    \ c |>\n<| c |>\nI fixed the negative number issue. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nI added a version that works for negative numbers as well.\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a version that works for negative numbers as\
    \ well:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhr03m7p.jl:20\nin expression starting at\
    \ /tmp/tmpjhr03m7p.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. For example, a 32-bit integer has\
    \ 4 digits, a 64-bit integer has 8 digits, and so on.\nWrite a function that returns\
    \ the number of digits in an unsigned integer. For example, a 32-bit unsigned\
    \ integer has 4 digits, a 64-bit unsigned integer has 8 digits, and so on.\nWrite\
    \ a function that returns the number of digits in a floating point number. For\
    \ example, a 32-bit floating point number has 4 digits, a 64-bit floating point\
    \ number has 8 digits, and so on.\nWrite a function that returns the number of\
    \ digits in a string. For example, a 32-bit string has 4 digits, a 64-bit string\
    \ has 8 digits, and so on.\nWrite a function that returns the number of digits\
    \ in an array. For example, a 32-bit array has 4 digits, a 64-bit array has 8\
    \ digits, and so on.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1d5dlbl.jl:16\nin expression starting at\
    \ /tmp/tmpb1d5dlbl.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9_sv7vn.jl:17\nin expression starting at\
    \ /tmp/tmpy9_sv7vn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprw24rkws.jl:17\nin expression starting at\
    \ /tmp/tmprw24rkws.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezjbmuno.jl:19\nin expression starting at\
    \ /tmp/tmpezjbmuno.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype circular_shift(12, 1)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ circular_shift(12, 2)\n</cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12,\
    \ 3)\n</cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12, 4)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12, 5)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype circular_shift(12, 6)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype circular_shift(12, 7)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype circular_shift(12, 8)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ circular_shift(12, 9)\n</cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12,\
    \ 10)\n</cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12, 11)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12, 12)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype circular_shift(12, 13)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype circular_shift(12, 14)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype circular_shift(12, 15)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ circular_shift(12, 16)\n</cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12,\
    \ 17)\n</cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12, 18)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype circular_shift(12, 19)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype circular_shift(12, 20)\n</cell>\n<code\
    \ language=julia-1.4>\n@code_warntype circular_shift(12, 21)\n</cell>\n<code language=julia-1.4>\n\
    @code_warntype circular_shift(12, 22)\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ circular_shift(12, 23)\n</cell>\n<code language=julia-1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicvac0tj.jl:18\nin expression starting at\
    \ /tmp/tmpicvac0tj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = reverse(digits)\n\
    \        return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30qpr35_.jl:19\nin expression starting at\
    \ /tmp/tmp30qpr35_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer. Test it\
    \ on $10$ and $12$.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvhk4ceb.jl:15\nin expression starting at\
    \ /tmp/tmpgvhk4ceb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuorbemtu.jl:18\nin expression starting at\
    \ /tmp/tmpuorbemtu.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vbe1tuq.jl:20\nin expression starting at\
    \ /tmp/tmp1vbe1tuq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7ypz4to.jl:15\nin expression starting at\
    \ /tmp/tmpv7ypz4to.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = split(x, \"\")\n        digits[shift] = digits[shift][end-1]\n\
    \        digits[end] = digits[end][end-2]\n        join(digits, \"\")\nend\n</cell>\n\
    <text>\nThe function split() splits a string into a list of strings by a delimiter.\
    \ The delimiter can be any string that does not appear in the string. split()\
    \ returns a list of strings. split(x, \"\") splits the string x into a list of\
    \ strings separated by an empty string. split(x, \"|\") splits the string x into\
    \ a list of strings separated by \"|\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn200__xq.jl:20\nin expression starting at\
    \ /tmp/tmpn200__xq.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljly4y1r.jl:12\nin expression starting at\
    \ /tmp/tmpljly4y1r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n \
    \   digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqbw1c2g.jl:19\nin expression starting at\
    \ /tmp/tmpiqbw1c2g.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpini7en7u.jl:18\nin expression starting at\
    \ /tmp/tmpini7en7u.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        digits = join(digits, \"\")\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9m6dubi1.jl:20\nin expression starting at\
    \ /tmp/tmp9m6dubi1.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_qqk3pw.jl:16\nin expression starting at\
    \ /tmp/tmpk_qqk3pw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsw5q51.jl:15\nin expression starting at\
    \ /tmp/tmpsrsw5q51.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits[shift:], digits[0\
    \ : shift])\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz8edcoqz.jl:14\nin expression\
    \ starting at /tmp/tmpz8edcoqz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(digits, digits[end-1:end+shift-1:-1])\n\
    end\n</cell>\n<text>\nThe function digits() returns the digits of an integer,\
    \ as a string.\nThe function reverse() reverses the digits of a string.\nThe function\
    \ join() joins the elements of an array into a string.\nThe function length()\
    \ returns the length of a string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5cj5sxr.jl:17\nin expression starting at\
    \ /tmp/tmpt5cj5sxr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmiqc0_g8.jl:15\nin expression starting at\
    \ /tmp/tmpmiqc0_g8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9z20x_9j.jl:18\nin expression starting at\
    \ /tmp/tmp9z20x_9j.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprw24rkws.jl:17\nin expression starting at\
    \ /tmp/tmprw24rkws.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[shift+1:end]\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepr0zwfk.jl:18\nin expression starting at\
    \ /tmp/tmpepr0zwfk.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyzcxxmv.jl:18\nin expression starting at\
    \ /tmp/tmpkyzcxxmv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbeeqdu52.jl:17\nin expression starting at\
    \ /tmp/tmpbeeqdu52.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu17wuiyj.jl:19\nin expression starting at\
    \ /tmp/tmpu17wuiyj.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0 : shift]\
    \ + digits[shift : length(x)]\n        digits = reverse(digits)\n        return\
    \ join(digits)\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqutjxlh_.jl:20\nin expression starting at\
    \ /tmp/tmpqutjxlh_.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ \"\"\n    else\n        digits = split(x, \"\")\n        digits[shift] = digits[shift][end-1]\n\
    \        digits[end-1] = digits[end-1][end-2]\n        digits[end-2] = digits[end-2][end-3]\n\
    \        digits[end-3] = digits[end-3][end-4]\n        digits[end-4] = digits[end-4][end-5]\n\
    \        digits[end-5] = digits[end-5][end-6]\n        digits[end-6] = digits[end-6][end-7]\n\
    \        digits[end-7] = digits[end-7][end-8]\n        digits[end-8] = digits[end-8][end-9]\n\
    \        digits[end-9] = digits[end-9][end-10]\n        digits[end-10] = digits[end-10][end-11]\n\
    \        digits[end-11] = digits[end-11][end-12]\n        digits[end-12] = digits[end-12][end-13]\n\
    \        digits[end-13] = digits[end-13][end-14]\n        digits[end-14] = digits[end-14][end-15]\n\
    \        digits[end-15] = digits[end-15][end-16]\n        digits[end-16] = digits[end-16][end-17]\n\
    \        digits[end-17] = digits[end-17][end-18]\n        digits[end-18] = digits[end-18][end-19]\n\
    \        digits[end-19] = digits[end-19][end-20]\n        digits[end-20] = digits[end-20][end-21]\n\
    \        digits[end-21] = digits[end-21][end-22]\n        digits[end-22] = digits[end-22][end-23]\n\
    \        digits[end-23] = digits[end-23][end-24]\n        digits[end-24] = digits[end-24][end-25]\n\
    \        digits[end-25] = digits[end-25][end-26]\n        digits[end-26] = digits[end-26][end-27]\n\
    \        digits[end-27] = digits[end-27][end-28]\n        digits[end-28] = digits[end-28][end-29]\n\
    \        digits[end-29] = digits[end-29][end-30]\n        digits[end-30] = digits[end-30][end-31]\n\
    \        digit\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp4_g6dsfm.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4_g6dsfm.jl:1\n\
    in expression starting at /tmp/tmp4_g6dsfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. For example, length(123) ==\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqplo9ci.jl:17\nin expression starting at\
    \ /tmp/tmpuqplo9ci.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsw5q51.jl:15\nin expression starting at\
    \ /tmp/tmpsrsw5q51.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits() is defined in\
    \ the file digits_test.jl and looks like this:\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcih2rjg.jl:17\nin expression starting at\
    \ /tmp/tmpbcih2rjg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhga7mlt.jl:17\nin expression starting at\
    \ /tmp/tmpyhga7mlt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer. Test it\
    \ on $10$ and $12$.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnn1mprsu.jl:15\nin expression starting at\
    \ /tmp/tmpnn1mprsu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsqg7uvk.jl:17\nin expression starting at\
    \ /tmp/tmpcsqg7uvk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvtl1gvo.jl:15\nin expression starting at\
    \ /tmp/tmpxvtl1gvo.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    return join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits()\
    \ is defined in the file digit.jl. Let's take a look at its implementation:\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk51wp02z.jl:18\nin expression starting at\
    \ /tmp/tmpk51wp02z.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07zubf0t.jl:18\nin expression starting at\
    \ /tmp/tmp07zubf0t.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<text>\nCircular shift the digits of the\
    \ integer x, shift the digits right by shift and return the result as a string.\n\
    \    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12,\
    \ 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcf9t3bmv.jl:18\nin expression starting at\
    \ /tmp/tmpcf9t3bmv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpts7ii0_3.jl:17\nin expression starting at\
    \ /tmp/tmpts7ii0_3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(123) should return 3.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8s3uavv.jl:16\nin expression starting at\
    \ /tmp/tmpu8s3uavv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of words in the string.\nThe function should\
    \ ignore leading and trailing whitespace.\nThe function should ignore punctuation\
    \ and count the number of words.\nThe function should ignore numbers and special\
    \ characters (like !, $, %, &, etc.).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore leading and trailing whitespace.\n\
    The function should ignore punctuation and count the number of words.\nThe function\
    \ should ignore numbers and special characters (like !, $, %, &, etc.).\nThe function\
    \ should ignore case (uppercase and lowercase).\nThe function should ignore leading\
    \ and trailing whitespace.\nThe function should ignore punctuation and count the\
    \ number of words.\nThe function should ignore numbers and special characters\
    \ (like !, $, %, &, etc.).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore punctuation and count the number of words.\nThe function should ignore\
    \ numbers and special characters (like !, $, %, &, etc.).\nThe function should\
    \ ignore case (uppercase and lowercase).\nThe function should ignore leading and\
    \ trailing whitespace.\nThe function should ignore punctuation and count the number\
    \ of words.\nThe function should ignore numbers and special characters (like !,\
    \ $, %, &, etc.).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore punctuation and count the number of words.\nThe function should ignore\
    \ numbers and special characters (like !, $, %, &, etc.).\nThe function should\
    \ ignore case (uppercase and lowercase).\nThe function should ignore leading and\
    \ trailing whitespace.\nThe function should ignore punctuation and count the number\
    \ of words.\nThe function should ignore numbers and special characters (like !,\
    \ $, %, &, etc.).\nThe function should ignore case (uppercase and lowercase).\n\
    The function should ignore leading and trailing whitespace.\nThe function should\
    \ ignore punctuation and count the number of words.\nThe function should ignore\
    \ numbers and special characters (like !, $, %, &, etc.).\nThe function should\
    \ ignore case (uppercase and lowercase).\nThe function should ignore leading and\
    \ trailing whitespace.\nThe function should ignore punctuation and count the number\
    \ of words.\nThe function \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx8sr17dd.jl:16\nin expression starting at\
    \ /tmp/tmpx8sr17dd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[:\
    \ shift]\n    return join(digits)\nend\n</cell>\n<text>\nThe function digits()\
    \ is defined in the file digits_test.jl. This function returns a list of digits\
    \ of the integer x, starting with the first digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps77c9tmt.jl:14\n\
    in expression starting at /tmp/tmps77c9tmt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsw5q51.jl:15\nin expression starting at\
    \ /tmp/tmpsrsw5q51.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaligunhb.jl:19\nin expression starting at\
    \ /tmp/tmpaligunhb.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer. Test it on all of the\nintegers from 0 to 20.\nHint: use\
    \ length.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzrmdgcg.jl:12\nin expression starting at\
    \ /tmp/tmpxzrmdgcg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n   \
    \ digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptg7542te.jl:12\nin expression starting at\
    \ /tmp/tmptg7542te.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkmc8ue1.jl:17\nin expression starting at\
    \ /tmp/tmpjkmc8ue1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:]+digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp000pv5c7.jl:14\n\
    in expression starting at /tmp/tmp000pv5c7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(reverse(digits[shift:end-1]),\
    \ digits[end])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud0q7ql5.jl:16\nin expression starting at\
    \ /tmp/tmpud0q7ql5.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        return join(digits, \"\")\nend\n</cell>\n\
    <text>\nThe function digits(x::Int64) returns a list of digits of the integer\
    \ x, starting with the least significant digit.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrftlet3.jl:18\nin expression starting at\
    \ /tmp/tmphrftlet3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyzcxxmv.jl:18\nin expression starting at\
    \ /tmp/tmpkyzcxxmv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttjc7gi3.jl:15\nin expression starting at\
    \ /tmp/tmpttjc7gi3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift:]...)\n\
    end\n</cell>\n<text>\nThe function digits(x::Int64) returns a string containing\
    \ the digits of x, padded with zeros if necessary.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptl_stfxd.jl:14\nin expression\
    \ starting at /tmp/tmptl_stfxd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nFor example,\
    \ length(123) is 3.\nAssume that the integer does not contain any leading zero,\
    \ except the number 0.\nAssume that the integer does not contain any leading negative\
    \ sign.\nAssume that the integer does not contain any leading plus sign.\nAssume\
    \ that the integer does not contain any leading minus sign.\nAssume that the integer\
    \ does not contain any leading decimal point.\nAssume that the integer does not\
    \ contain any leading exponential sign.\nAssume that the integer does not contain\
    \ any leading infinity sign.\nAssume that the integer does not contain any leading\
    \ NaN sign.\nAssume that the integer does not contain any leading positive sign.\n\
    Assume that the integer does not contain any leading negative sign.\nAssume that\
    \ the integer does not contain any leading plus sign.\nAssume that the integer\
    \ does not contain any leading minus sign.\nAssume that the integer does not contain\
    \ any leading decimal point.\nAssume that the integer does not contain any leading\
    \ exponential sign.\nAssume that the integer does not contain any leading infinity\
    \ sign.\nAssume that the integer does not contain any leading NaN sign.\nAssume\
    \ that the integer does not contain any leading positive sign.\nAssume that the\
    \ integer does not contain any leading negative sign.\nAssume that the integer\
    \ does not contain any leading plus sign.\nAssume that the integer does not contain\
    \ any leading minus sign.\nAssume that the integer does not contain any leading\
    \ decimal point.\nAssume that the integer does not contain any leading exponential\
    \ sign.\nAssume that the integer does not contain any leading infinity sign.\n\
    Assume that the integer does not contain any leading NaN sign.\nAssume that the\
    \ integer does not contain any leading positive sign.\nAssume that the integer\
    \ does not contain any leading negative sign.\nAssume that the integer does not\
    \ contain any leading plus sign.\nAssume that the integer does not contain any\
    \ leading minus sign.\nAssume that the integer does not contain any leading decimal\
    \ point.\nAssume that the integer does not contain any leading exponential sign.\n\
    Assume that the integer does not contain any leading infinity sign.\nAssume that\
    \ the integer does not contain any leading NaN sign.\nAssume that the integer\
    \ does not contain any leading positive sign.\nAssume that the integer does not\
    \ contain any leading negative sign.\nAssume that the integer does not contain\
    \ any leading plus sign.\nAssume that the integer does not contain any leading\
    \ minus sign.\nAssume that the integer does not contain any leading decimal point.\n\
    Assume that the integer does not contain any leading exponential sign.\nAssume\
    \ that the integer does not contain any leading infinity sign.\nAssume that the\
    \ integer does not contain any leading NaN sign.\nAssume \nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlag3zq_.jl:17\nin expression starting at\
    \ /tmp/tmptlag3zq_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9_sv7vn.jl:17\nin expression starting at\
    \ /tmp/tmpy9_sv7vn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttjc7gi3.jl:15\nin expression starting at\
    \ /tmp/tmpttjc7gi3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nWrite a function that takes a string as input and returns the\
    \ number of words in the string.\nWrite a function that takes a string as input\
    \ and returns the number of lines in the string.\nWrite a function that takes\
    \ a string as input and returns the number of characters in the string that are\
    \ not spaces.\nWrite a function that takes a string as input and returns the number\
    \ of words in the string that are not spaces.\nWrite a function that takes a string\
    \ as input and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string as input and returns the number of characters\
    \ in the string that are not spaces and words in the string that are not spaces.\n\
    Write a function that takes a string as input and returns the number of words\
    \ in the string that are not spaces and characters in the string that are not\
    \ spaces.\nWrite a function that takes a string as input and returns the number\
    \ of lines in the string that are not spaces and characters in the string that\
    \ are not spaces.\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are not spaces and words in the string\
    \ that are not spaces and characters in the string that are not spaces.\nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string that are not spaces and characters in the string that are not spaces\
    \ and lines in the string that are not spaces.\nWrite a function that takes a\
    \ string as input and returns the number of lines in the string that are not spaces\
    \ and characters in the string that are not spaces and words in the string that\
    \ are not spaces.\nWrite a function that takes a string as input and returns the\
    \ number of characters in the string that are not spaces and words in the string\
    \ that are not spaces and characters in the string that are not spaces and lines\
    \ in the string that are not spaces.\nWrite a function that takes a string as\
    \ input and returns the number of words in the string that are not spaces and\
    \ characters in the string that are not spaces and lines in the string that are\
    \ not spaces and characters in the string that are not spaces.\nWrite a function\
    \ that takes a string as input and returns the number of lines in the string that\
    \ are not spaces and characters in the string that are not spaces and words in\
    \ the string that are not spaces and characters in the string that are not spaces\
    \ and lines in the string that are not spaces.\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string that are\
    \ not spaces and words in the string that are not spaces and characters in the\
    \ string that are not spaces and lines in the string that are not spaces and characters\
    \ in the string that are not spaces and words in the string that are not spaces.\n\
    Write a function that takes a string as input and returns the number of words\
    \ in the string that are not spaces and characters in the string that are not\
    \ spaces and lines in the string that are not spaces and characters in the \n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3p6azm9e.jl:18\nin expression starting at\
    \ /tmp/tmp3p6azm9e.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9_sv7vn.jl:17\nin expression starting at\
    \ /tmp/tmpy9_sv7vn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(digits, digits[end-1:end]...)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8piohabh.jl:17\nin expression starting at\
    \ /tmp/tmp8piohabh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), abs(shift)))\n\
    \    else\n        return reverse(x[shift:end-1] + x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbs2_gx7z.jl:12\nin expression starting at\
    \ /tmp/tmpbs2_gx7z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\n    >>> count_characters(\"Hello World\"\
    )\n    12\n    >>> count_characters(\"Hello World!\")\n    13\n    >>> count_characters(\"\
    Hello World!!\")\n    14\n    >>> count_characters(\"Hello World!!!\")\n    15\n\
    \    >>> count_characters(\"Hello World!!!\", 2)\n    14\n    >>> count_characters(\"\
    Hello World!!!\", 3)\n    15\n    >>> count_characters(\"Hello World!!!\", 4)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 5)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 6)\n    15\n    >>> count_characters(\"Hello World!!!\", 7)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 8)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 9)\n    15\n    >>> count_characters(\"Hello World!!!\", 10)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 11)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 12)\n    15\n    >>> count_characters(\"Hello World!!!\", 13)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 14)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 15)\n    15\n    >>> count_characters(\"Hello World!!!\", 16)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 17)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 18)\n    15\n    >>> count_characters(\"Hello World!!!\", 19)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 20)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 21)\n    15\n    >>> count_characters(\"Hello World!!!\", 22)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 23)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 24)\n    15\n    >>> count_characters(\"Hello World!!!\", 25)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 26)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 27)\n    15\n    >>> count_characters(\"Hello World!!!\", 28)\n\
    \    15\n    >>> count_characters(\"Hello World!!!\", 29)\n    15\n    >>> count_characters(\"\
    Hello World!!!\", 30)\n    15\n    >>> count_characters(\"Hello \nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuia8qead.jl:17\nin expression starting at\
    \ /tmp/tmpuia8qead.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123,\
    \ 1)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(123) == 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwo_4ejls.jl:17\nin expression starting at\
    \ /tmp/tmpwo_4ejls.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknzpdt_5.jl:19\nin expression starting at\
    \ /tmp/tmpknzpdt_5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55fkvs2f.jl:20\nin expression starting at\
    \ /tmp/tmp55fkvs2f.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsw5q51.jl:15\nin expression starting at\
    \ /tmp/tmpsrsw5q51.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttjc7gi3.jl:15\nin expression starting at\
    \ /tmp/tmpttjc7gi3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplp_98itm.jl:18\nin expression starting at\
    \ /tmp/tmplp_98itm.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ \"\"\n    else\n        return reverse(digits(x))[1:shift]\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    \    >>> digits(123)\n    3\n    >>> digits(0)\n    1\n    >>> digits(-4)\n  \
    \  1\n    >>> digits(1234)\n    4\n    >>> digits(12345)\n    5\n    >>> digits(123456789)\n\
    \    9\n    >>> digits(1234567890)\n    9\n    >>> digits(12345678901)\n    9\n\
    \    >>> digits(1234567890123)\n    9\n    >>> digits(12345678901234)\n    10\n\
    \    >>> digits(12345678901234567)\n    10\n    >>> digits(123456789012345678)\n\
    \    10\n    >>> digits(1234567890123456789)\n    10\n    >>> digits(12345678901234567890)\n\
    \    10\n    >>> digits(123456789012345678901)\n    10\n    >>> digits(12345678901234567890123)\n\
    \    10\n    >>> digits(123456789012345678901234)\n    10\n    >>> digits(123456789012345678901234567)\n\
    \    10\n    >>> digits(1234567890123456789012345678)\n    10\n    >>> digits(12345678901234567890123456789)\n\
    \    10\n    >>> digits(123456789012345678901234567890)\n    10\n    >>> digits(1234567890123456789012345678901)\n\
    \    10\n    >>> digits(123456789012345678901234567890123)\n    10\n    >>> digits(1234567890123456789012345678901234)\n\
    \    10\n    >>> digits(1234567890123456789012345678901234567)\n    10\n    >>>\
    \ digits(12345678901234567890123456789012345678)\n    10\n    >>> digits(123456789012345678901234567890123456789)\n\
    \    10\n    >>> digits(1234567890123456789012345678901234567890)\n    10\n  \
    \  >>> digits(12345678901234567890123456789012345678901)\n    10\n    >>> digits(1234567890123456789012345678901234567890123)\n\
    \    10\n    >>> digits(12345678901234567890123456789012345678901234)\n    10\n\
    \    >>> digits(12345678901234567890123456789012345678901234567)\n    10\n   \
    \ >>> digits(123456789012345678901234567890123456789012345678)\n    10\n    >>>\
    \ digits(1234567890123456789012345678901234567890123456789)\n    10\n    >>> digits(12345678901234567890123456789012345678901234567890)\n\
    \    10\n    >>> digits(123456789012345678901234567890123456789012345678901)\n\
    \    10\n    >>> digits(12345678901234567890123456789012345678901234567890123)\n\
    \    10\n    >>> digits(123456789012345678901234567890123456789012345678901234)\n\
    \    10\n    >>> \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp50c_b4k.jl:17\nin expression starting at\
    \ /tmp/tmpp50c_b4k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstsphfsh.jl:19\nin expression starting at\
    \ /tmp/tmpstsphfsh.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuh11sxy3.jl:19\nin expression starting at\
    \ /tmp/tmpuh11sxy3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    return join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64)\
    \ returns a string containing the digits of x, in reverse order.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2s2e6s5p.jl:18\nin expression starting at\
    \ /tmp/tmp2s2e6s5p.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_qqk3pw.jl:16\nin expression starting at\
    \ /tmp/tmpk_qqk3pw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrri51cl.jl:18\nin expression starting at\
    \ /tmp/tmphrri51cl.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2ditvd.jl:17\nin expression starting at\
    \ /tmp/tmpmh2ditvd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4d44tme.jl:17\nin expression starting at\
    \ /tmp/tmpr4d44tme.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttjc7gi3.jl:15\nin expression starting at\
    \ /tmp/tmpttjc7gi3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<text>\nThe function digits(x)\
    \ returns a list of all the digits of x. For example, digits(12) returns [1, 2,\
    \ 3].\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y5gb77n.jl:18\nin expression starting at\
    \ /tmp/tmp2y5gb77n.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52quvt7u.jl:15\nin expression starting at\
    \ /tmp/tmp52quvt7u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:]+digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu_vzpns1.jl:14\n\
    in expression starting at /tmp/tmpu_vzpns1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else \n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qmow0dy.jl:15\nin expression starting at\
    \ /tmp/tmp3qmow0dy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), abs(shift)))\n\
    \    else\n        return reverse(x[shift:end-1] + x[1:shift])\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\nI wrote a package for this.\
    \ It's called circular_shift. \n<code>\njulia> using CircularShift \nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8m_29f0v.jl:12\nin expression starting at\
    \ /tmp/tmp8m_29f0v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwo2xnsjy.jl:15\nin expression starting at\
    \ /tmp/tmpwo2xnsjy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:]+digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph29oergt.jl:14\n\
    in expression starting at /tmp/tmph29oergt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(reverse(x))\n    else\n       \
    \ return reverse(reverse(x)[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8u9j9gb3.jl:12\nin expression starting at\
    \ /tmp/tmp8u9j9gb3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\nReturn\
    \ the digits of integer x.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xjtslsq.jl:15\nin expression starting at\
    \ /tmp/tmp4xjtslsq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2oiurxf.jl:17\nin expression starting at\
    \ /tmp/tmpl2oiurxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz178abqc.jl:16\nin expression starting at\
    \ /tmp/tmpz178abqc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyzcxxmv.jl:18\nin expression starting at\
    \ /tmp/tmpkyzcxxmv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        digits = digits[1 : length(digits)-1]\n\
    \        digits = join(digits, \"\")\n        return digits\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kx85wr2.jl:21\nin expression starting at\
    \ /tmp/tmp3kx85wr2.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        shift %= length(x)\
    \ - 1\n    else \n        shift = 0\n    return reverse(digits(x))[1:shift]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv841jtyp.jl:16\nin expression starting at\
    \ /tmp/tmpv841jtyp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_qqk3pw.jl:16\nin expression starting at\
    \ /tmp/tmpk_qqk3pw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhga7mlt.jl:17\nin expression starting at\
    \ /tmp/tmpyhga7mlt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7keypyt0.jl:17\nin expression starting at\
    \ /tmp/tmp7keypyt0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6w8jbrj5.jl:17\nin expression starting at\
    \ /tmp/tmp6w8jbrj5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppeokkey8.jl:15\nin expression starting at\
    \ /tmp/tmppeokkey8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7k_o8rkh.jl:17\nin expression starting at\
    \ /tmp/tmp7k_o8rkh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsw5q51.jl:15\nin expression starting at\
    \ /tmp/tmpsrsw5q51.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkq_22q5.jl:17\nin expression starting at\
    \ /tmp/tmppkq_22q5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq57oiuys.jl:17\nin expression starting at\
    \ /tmp/tmpq57oiuys.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. For example, length(123) = 4.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nwq9gj5.jl:17\nin expression starting at\
    \ /tmp/tmp5nwq9gj5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lqbpudw.jl:17\nin expression starting at\
    \ /tmp/tmp_lqbpudw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyzcxxmv.jl:18\nin expression starting at\
    \ /tmp/tmpkyzcxxmv.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3q8fqr.jl:15\nin expression starting at\
    \ /tmp/tmpck3q8fqr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer. Test it on some integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr70m1ldv.jl:17\nin expression starting at\
    \ /tmp/tmpr70m1ldv.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_ayggoq.jl:13\nin expression\
    \ starting at /tmp/tmp8_ayggoq.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(reverse(digits[shift:end-1]),\
    \ digits[end])\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ur172pj.jl:16\nin expression starting at\
    \ /tmp/tmp6ur172pj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"shift:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8_ayggoq.jl:13\nin expression\
    \ starting at /tmp/tmp8_ayggoq.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 24)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97gtlvuj.jl:17\nin expression starting at\
    \ /tmp/tmp97gtlvuj.jl:17\n"
  stdout: ''
