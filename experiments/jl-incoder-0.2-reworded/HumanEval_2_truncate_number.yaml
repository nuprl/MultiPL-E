name: HumanEval_2_truncate_number
language: jl
prompt: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
  \    and integer part (largest integer smaller than given number) and decimals\n\
  \    (leftover part always smaller than 1).\n\n    Return the decimal part of the\
  \ number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
  \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
  end\n"
completions: ["    truncate_number = number % 1\n    return truncate_number\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    truncate_number = number %\
    \ 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n\
    </", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    The function truncate_number above returns the decimal part of the number. Let's\
    \ see how it works.", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the number of decimal places it is composed of. For example, truncate_number(3.5)\
    \ should return 2.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive floating point\
    \ number and returns the number rounded to a specific number of decimal places.",
  "    truncate_number = trunc(number)\nend", "    \n    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.3>\n# TEST truncate_number\
    \ (5b)\n@test truncate_number(3.5) == 0.5\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that converts a floating point number to a string with two decimal\
    \ places.", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    truncate_number = trunc(number)\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. `trunc` returns `-1` for negative\
    \ numbers. `trunc` also doesn't work for `Float64` numbers. `trunc` returns `Float64`\
    \ for `Float64` numbers. `trunc` also doesn't work for `Float32` numbers. `trunc`\
    \ returns `Float32` for `Float32` numbers. `trunc` also doesn't work for `Int`\
    \ numbers. `trunc` returns `Int` for `Int` numbers. `trunc` also doesn't work\
    \ for `UInt` numbers. `trunc` returns `UInt` for `UInt` numbers. `trunc` also\
    \ doesn't work for `Bool` numbers. `trunc` returns `Bool` for `Bool` numbers.\
    \ `trunc` also doesn't work for `Complex` numbers. `trunc` returns `Complex` for\
    \ `Complex` numbers. `trunc` also doesn't work for `Any` numbers. `trunc` returns\
    \ `Any` for `Any` numbers. `trunc` also doesn't work for `Array` numbers. `trunc`\
    \ returns `Array` for `Array` numbers. `trunc` also doesn't work for `Dict` numbers.\
    \ `trunc` returns `Dict` for `Dict` numbers. `trunc` also doesn't work for `Union`\
    \ numbers. `trunc` returns `Union` for `Union` numbers. `trunc` also doesn't work\
    \ for `Unit` numbers. `trunc` returns `Unit` for `Unit` numbers. `trunc` also\
    \ doesn't work for `Nothing` numbers. `trunc` returns `Nothing` for `Nothing`\
    \ numbers. `trunc` also doesn't work for `NaN` numbers. `trunc` returns `NaN`\
    \ for `NaN` numbers. `trunc` also doesn't work for `Inf` numbers. `trunc` returns\
    \ `Inf` for `Inf` numbers. `trunc` also doesn't work for `Nothing` numbers. `trunc`\
    \ returns `Nothing` for `Nothing` numbers. `trunc` also doesn't work for `NaN`\
    \ numbers. `trunc` returns `NaN` for `NaN` numbers. `trunc` also doesn't work\
    \ for `Inf` numbers. `trunc` returns `Inf` for `Inf` numbers. `trunc` also doesn't\
    \ work for `Nothing` numbers. `trunc` returns `Nothing` for `Nothing` numbers.\
    \ `trunc` also ", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Truncating floats\nThe function truncate truncates a floating point number to\
    \ a given precision.\nThe precision can be specified as a positive integer or\
    \ as a Float64 number.\nThe default precision is 6.", "    \n    truncate_number\
    \ = truncate_number(number)\n    \n    if truncate_number == number\n        truncate_number\n\
    \    else\n        truncate_number - truncate_number(number)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(2.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(2.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(2.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(2.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(2.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(1.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(1.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(1.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(1.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(1.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(0.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(0.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(0.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(0.6)\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a positive floating point number as input and returns\
    \ the integer part and the decimal part as a tuple.", "    \n    if number ==\
    \ 0.\n        return 0.\n    \n    digits = floor(log10(number))\n    decimals\
    \ = digits-(digits-1)\n    \n    if number < 1.\n        return number\n    \n\
    \    trunc_number = round(number*10^decimals)/10^decimals\n    \n    return trunc_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a decimal number to its binary representation.",
  "    truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = round(number)\nend", "    truncate_number = trunc(number)\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=juli",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits of an integer.", "    truncate_number = trunc(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = truncate_number(number)\n\
    \    truncate_number = truncate_number - truncate_number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    The function truncate_number above is implemented in the following cell:", " \
    \   \n    number = round(number)\n    \n    decimal_part = number % 1\n    \n\
    \    if decimal_part == 0.\n        decimal_part = 1\n    \n    integer_part =\
    \ floor(number)\n    \n    return integer_part * decimal_part\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \nFor instance,\
    \ truncate_number(3) should return 3.", "    truncate_number = number % 1\n  \
    \  return truncate_number\nend", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend", "    \"\"\"\n    Truncate a floating point number to\
    \ the nearest integer.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = number\
    \ % 1\n    \n    return truncate_number\nend", "    truncate_number = number %\
    \ 1\n    return truncate_number\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef truncate_number(number::Float64)::Float64 \n    truncate_number =\
    \ number % 1\n    return truncate_number\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    truncate_number(number::Float64)::Float64 \n    truncate_number = number % 1\n\
    \    return truncate_number\n</code>\n<|/ a tags=julia |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a tags=julia |>\n<code>", "    truncate_number = truncate_number(number)\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = trunc(number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's implement the function truncate_number\
    \ in Julia", "    truncate_number = number % 1\n    return truncate_number\nend",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    truncate_number = truncate_number(number)\n    truncate_number\
    \ = truncate_number - truncate_number % 1\n    return truncate_number\nend", " \
    \   truncate_number = trunc(number)\n    return truncate_number\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</", "    \n    number = round(number)\n    \n    if number\
    \ % 1 == 0.0:\n        return number\n    \n    decimal_part = number % 1\n  \
    \  \n    if number < 1:\n        return number\n    \n    integer_part = floor(number)\n\
    \    \n    return integer_part + decimal_part\nend\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    number = round(number)\n\
    \    \n    if number == 0.0:\n        return number\n    \n    decimal_part =\
    \ number % 1\n    \n    if decimal_part == 0.0:\n        return number\n    \n\
    \    integer_part = floor(number)\n    \n    if integer_part == number:\n    \
    \    return number\n    \n    return integer_part + decimal_part\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(7.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(8.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(9.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(10.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(11.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(12.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(13.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(14.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(15.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(16.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(17.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(18.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(19.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(20.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(21.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(22.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(23.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(24.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(25.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(26.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(27.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(28.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(29.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    truncate_number = number % 1\n \
    \   return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.4>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ == 0.5\n</cell>\n<text>\nExercise 3\nWrite a function that returns the floor\
    \ of a number. For example, trunc(2.8) = 2.", "    truncate_number = number %\
    \ 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a function\
    \ that takes a vector of numbers and returns a vector of numbers with the same\
    \ number of elements as the original vector but with the decimal part truncated.",
  "    truncate_number = truncate_number(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's write our own truncate function which truncates the decimal part of a\
    \ number.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncate number function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in a number.", "    truncate_number = floor(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    digits = floor(log10(number))\n\
    \    decimals = number - truncate_number(number)\n    \n    if digits == 0\n \
    \       digits = 1\n    \n    return truncate_number(decimals) / pow(10, digits)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of digits in a number.", " \
    \   truncate_number = floor(number)\n    truncate_number = truncate_number - truncate_number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", " \
    \   truncate_number = trunc(number)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work if `number` is negative.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if `number` is negative.\n<|/ c |>\n<| c |>\nIt doesn't work if `number` is\
    \ negative.\n<|/ c |>\n<| c |>\nIt doesn't work if `number` is negative.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if `number` is negative.\n<|/ c |>\n<| a tags=julia,truncate\
    \ |>\nI wrote a package truncate that does this for you:\n<code>\njulia> using\
    \ truncate\njulia> truncate(3.5)\n0.5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ has two outputs: truncate_number returns the truncated number and the truncate_number\
    \ function returns the truncated number as a Float64.", "    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a vector of numbers. If the vector is empty, return NaN.", "   \
    \ \"\"\"\n    Truncates a floating point number to its integer part and decimal\
    \ part.\n    \"\"\"\n    return math.trunc(number)\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in a given number. \nFor instance, the number of digits\
    \ of 1234 is 4.", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<text>\nNow let's test our truncate function:", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's use our truncate function to\
    \ truncate our data set", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<text>\nLet's test our truncate function:",
  "    truncate_number = truncate_number(number)\n    return truncate_number\nend",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's try it\
    \ out on some random numbers:", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    \n    if number == 0.0:\n        return\
    \ 0.0\n    \n    precision = floor(log10(abs(number)))\n    \n    if number <\
    \ 0.0:\n        precision = -precision\n    \n    number = round(number, precision)\n\
    \    \n    if number == 0.0:\n        return 0.0\n    \n    return number\n</code>\n\
    <|/ a tags=julia,floating-point |>\n<| a dscore=2 |>\nI wrote a package that does\
    \ this for you:\nhttps://github.com/jrm/FloatTruncation\n<code>\nusing FloatTruncation",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    truncate_number = truncate_number(number)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\n</code>\n\
    <|/ a tags=julia,floating-point |>\n<| c |>\n`truncate_number(3.5)` returns `0.5`,\
    \ not `2`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the\
    \ answer.\n<|/ c |>\n<| a dscore=3 |>\nThe other answers are correct in that truncating\
    \ floating point numbers is rarely a good idea. \nHowever, sometimes it can be\
    \ useful to do so. \nFor example, if you're writing a function that computes some\
    \ value based on a floating point number, and you want to round the result to\
    \ some number of decimal places, you can do so by rounding the floating point\
    \ number to the nearest integer and then dividing by that integer. \n<code>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.3>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = round(number)\nend\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will compute the mean of a list\
    \ of numbers:", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on some random numbers:", "    \"\"\"\n    Truncate a floating\
    \ point number to the nearest integer.", "    \n    if number < 1.0\n        return\
    \ number\n    \n    decimal_part = floor(log10(number))\n    \n    if decimal_part\
    \ == 0\n        return number\n    \n    decimal_part = min(decimal_part, 10)\n\
    \    \n    number = round(number, decimal_part)\n    \n    return number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's use our truncate function to truncate our data set. We'll use the truncated\
    \ data set from before to test our model.", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive floating point\
    \ number as input and returns the absolute value of the number.", "    \n    truncate_number\
    \ = trunc(number)\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's see how we can use these functions\
    \ to solve the problem of finding the largest prime factor of a given number.\
    \ We'll start by defining the function prime_factors(number::Int64)::Vector{Int64}\
    \ which takes an integer and returns a vector containing the prime factors of\
    \ that integer.", "    \n    digits = floor(log10(number))\n    decimals = digits\
    \ - floor(log10(digits))\n    \n    if number < 1\n        return number\n   \
    \ \n    trunc_number = round(number, digits)\n    \n    if decimals > 0\n    \
    \    return trunc_number - trunc_number * 10^decimals\n    else\n        return\
    \ trunc_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.1)\n</cell>\n<code language=julia-1.5>\n", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n\
    </", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    number = round(number)\n\
    \    \n    if number % 1 == 0.0:\n        return number\n    \n    decimal_part\
    \ = number % 1\n    \n    number = number / 1\n    \n    return number\n</code>\n\
    <|/ a tags=julia,floating-point,rounding |>\n<| c |>\nThis doesn't work for negative\
    \ numbers, e.g. `truncate_number(-0.5)` returns `-0.5`.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work for negative numbers, because `truncate_number(-0.5)` returns `-0.5`,\
    \ not `-0.5`.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to\
    \ fix that.\n<|/ c |>\n<| a tags=julia,floating-point,rounding |>\nThe accepted\
    \ answer doesn't work for negative numbers, e.g. truncate_number(-0.5) returns\
    \ -0.5. Here's a version that does:\n<code>", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's use our truncate function to truncate our data to a\
    \ certain number of decimal places.", "    \n    truncate_number = number % 1\n\
    \    \n    if truncate_number < 0.5\n        truncate_number = truncate_number\
    \ + 1.0\n    end\n    \n    return truncate_number\nend\n</cell>\n<text>\nNow\
    \ let's test our truncate function on a few examples:", "    truncate_number =\
    \ trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\n    truncate_number = truncate_number\
    \ - truncate_number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's try it out on our dataset!", "    truncate_number = trunc(number)\nend\n\
    </cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n  \
    \  return truncate_number\nend", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = floor(number)\n    truncate_number = truncate_number - truncate_number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    truncate_number = round(number)\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's create a function that will plot a histogram of the given data", "   \
    \ truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# TEST truncate_number (5b)\n@test truncate_number(3.5)\
    \ == 0.5\n</cell>\n<text>\nExercise 4\nWrite a function that returns the floor\
    \ of a number. For example, truncate_number(3.5) should return 3.", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's use our truncate function to\
    \ round the number to the nearest whole number:", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nThe function truncate_number above is now a Julia function, and\
    \ can be called from Julia as follows:", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is equivalent\
    \ to the following Python code:", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    \"\"\"\n    Given a positive floating\
    \ point number, it can be decomposed into\n    and integer part (largest integer\
    \ smaller than given number) and decimals\n    (leftover part always smaller than\
    \ 1).", "    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"\n    Truncate a floating point number to the nearest integer.", "  \
    \  truncate_number = trunc(number)\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    number = round(number)\n\
    \    \n    if number < 1:\n        return number\n    \n    decimals = math.floor(math.log(number,\
    \ 10))\n    \n    if number % 1 == 0.0:\n        return number / 10 ** decimals\n\
    \    else:\n        return number / 10 ** decimals + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-", "    truncate_number =\
    \ trunc(number)\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    return truncate_number\nend", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = trunc(number)\n\
    \    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n#\
    \ Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function that converts a number from one base to another. We'll use our truncate_number\
    \ function to truncate the decimal part of a number and then multiply it by the\
    \ base to convert it to another base.", "    \n    truncate_number = number %\
    \ 1\n    \n    if truncate_number < 0.5\n        truncate_number = truncate_number\
    \ + 1.0\n    end\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    \n    truncate_number = round(number)\n\
    \    \n    return truncate_number\n</code>\n<|/ a tags=julia,floating-point |>\n\
    <| c |>\nThis doesn't work for negative numbers. `truncate_number(-0.5)` returns\
    \ `-0.5`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `truncate_number(-0.5)`\
    \ returns `-0.5`.\n<|/ c |>\n<| a dscore=4 |>\nI like using round() for this purpose:\n\
    <code>\njulia> round(3.5)\n3\n</code>\n<|/ a tags=julia,floating-point |>\n<|\
    \ c |>\nThis doesn't work for negative numbers. `round(3.5)` returns `3`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers. `round(3.5)` returns\
    \ `3`.\n<|/ c |>\n<| a dscore=4 |>\nI like using floor() and ceil() for this purpose:\n\
    <code>\njulia> floor(3.5)\n3", "    \n    truncate_number = number % 1\n    \n\
    \    if truncate_number < 0.5\n        truncate_number = truncate_number + 1.0\n\
    \    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a positive floating point\
    \ number and returns the integer part and decimal part separately. For example,\
    \ truncate_number(3.5) should return (3,0.5).", "    truncate_number = truncate_number(number)\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work for `truncate_number(3.5)`\
    \ which returns `0.5` instead of `2`.\n<|/ c |>\n<| c |>\nI believe this should\
    \ work. Can you try it again? I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\n\
    I tested it on Julia 0.6.2 and it works. I guess you didn't reload the module\
    \ after changing the function.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\
    \ and it works. I guess you didn't reload the module after changing the function.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I guess you didn't\
    \ reload the module after changing the function.\n<|/ c |>\n<| a dscore=2 |>\n\
    The truncate function works on Float64 and Float32, but does not work on Float16.\
    \ \n<code>\njulia> truncate(3.5)\nERROR: MethodError: no method matching truncate(::Float16)\n\
    Closest candidates are:\n  truncate(::Float32) at float.jl:18\n  truncate(::Float64)\
    \ at float.jl:18\n  ...\nStacktrace:\n [1] top-level scope at none:0\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't seem to work for `truncate(3.5)` which\
    \ returns `0.5` instead of `2`.\n<|/ c |>\n<| c |>\nI believe this should work.\
    \ Can you try it again? I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and it works. I guess you didn't reload the module after changing\
    \ the function.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I\
    \ guess you didn't reload the module after changing the function.\n<|/ c |>\n\
    <| a tags=julia |>\nThe truncate function works on Float64 and Float32, but does\
    \ not work on Float16. \n<code>\njulia> truncate(3.5)\nERROR: MethodError: no\
    \ method matching truncate(::Float16)\nClosest candidates are:\n  truncate(::Float32)\
    \ at float.jl:18\n  truncate(::Float64) at float.jl:18\n  ...\nStacktrace:\n [1]\
    \ top-level scope at none:0\n</code>", "    truncate_number = number % 1\n   \
    \ return truncate_number\nend\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ truncate_number(1000) should return 3.", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    if truncate_number == number\n        \n        return number\n   \
    \ \n    truncate_number = truncate_number - truncate_number % 1\n    \n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.", "    truncate_number\
    \ = truncate_number(number)\n    return truncate_number\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    digits = floor(log10(number))\n    decimals = number - digits*pow(10,\
    \ digits)\n    \n    return decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer\n    number. For example, truncate_number(123)\
    \ = 2, truncate_number(12345) = 3.", "    truncate_number = trunc(number)\n  \
    \  return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   truncate_number = trunc(number)\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# export", "    \"\"\"\n    Truncate a floating point\
    \ number into its decimal part.", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will compute the mean of a vector\
    \ of numbers:", "    \n    truncate_number = truncate_number(number)\n    \n \
    \   return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\nend", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    truncate_number = number % 1\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(", "    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function that converts a number to a string with two decimal places.", "   \
    \ truncate_number = trunc(number)\nend", "    truncate_number = number % 1\n \
    \   return truncate_number\nend\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </", "    truncate_number = trunc(number)\n    return truncate_number\nend", " \
    \   truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"\n    Truncate a floating point number into an integer part and decimal\
    \ part.", "    truncate_number = trunc(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n  \
    \  return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's use our truncate function to truncate our data frame to just the numerical\
    \ columns and then apply our truncate function to each of those columns.", " \
    \   truncate_number = round(number)\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that returns\
    \ the floor of a number:", "    \n    number = round(number)\n    \n    if number\
    \ % 1 == 0.0:\n        return number\n    \n    decimal_part = number % 1\n  \
    \  \n    number = number / 1\n    \n    return number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's see how we can use these functions\
    \ to solve the problem of finding the largest integer less than or equal to a\
    \ given floating point number.", "    truncate_number = round(number)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<text>\nLet's try it\
    \ out:", "    truncate_number = number % 1\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\nNow\
    \ let's try it out on some random numbers:", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    \n    truncate_number = number % 1\n \
    \   \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    number = round(number)\n    \n    if number\
    \ < 1:\n        return number\n    \n    decimal_part = number % 1\n    \n   \
    \ if decimal_part == 0:\n        return number\n    \n    integer_part = number\
    \ / 1\n    \n    return integer_part * 1 + decimal_part\nend\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-", "    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    return truncate_number\nend", "    \n    truncate_number = number %\
    \ 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(", "    \n    number = round(number)\n    \n    if number % 1\
    \ == 0.0:\n        return number\n    else:\n        return number - int(number)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the square root of a number. Test your\
    \ function on different numbers. What happens when you pass a negative number?",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    \"\"\"\n \
    \   Truncate a floating point number to a given precision.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the\
    \ function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a function\
    \ that will convert a number from one base to another.", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive floating point number as input and returns\
    \ the integer part and the decimal part as a tuple.", "    \"\"\"\n    Truncate\
    \ a floating point number to the nearest integer.", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend", "    \n    truncate_number = number % 1\n    \n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the floor of a given\
    \ number. \nThe floor of a number is the largest integer smaller than the given\
    \ number.", "    truncate_number = truncate_number(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n",
  "    \n    number = round(number)\n    \n    if number % 1 == 0.0:\n        return\
    \ number\n    else:\n        return number - number % 1\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2: Implement\
    \ the function truncate_number_with_precision(number, precision)", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the sum of its digits. \nFor instance, sum(digits(123))\
    \ == 1 + 2 + 3 = 6\nHint: use the function digits(number)", "    \n    truncate_number\
    \ = truncate_number(number)\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's try\
    \ it out on our truncated numbers:", "    truncate_number = trunc(number)\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nThe function truncate_number above is equivalent to the Julia\
    \ function trunc", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer and returns the next\
    \ bigger integer after it (starting from 0).", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    truncate_number = number % 1\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(", "    truncate_number =\
    \ round(number, digits)\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's use our truncate function and see what happens when\
    \ we truncate a number that is too big:", "    truncate_number = number % 1\n\
    \    return truncate_number\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,floating-point\
    \ |>\n<code>", "    truncate_number = truncate_number(number)\nend", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    number = round(number)\n\
    \    \n    if number < 1:\n        return number\n    \n    decimals = math.floor(math.log(number,\
    \ 10))\n    \n    return number - decimals * math.pow(10, -decimals)\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=1 |>\n<code>", "    truncate_number = round(number::Float64)\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that returns the number of digits\
    \ of an integer.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n\
    </", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's see how we can use these functions to solve the problem of finding the\
    \ largest prime factor of a given number.", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
