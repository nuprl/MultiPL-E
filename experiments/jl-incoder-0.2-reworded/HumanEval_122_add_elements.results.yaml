language: jl
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj4oqu53.jl:24\nin expression starting at\
    \ /tmp/tmpqj4oqu53.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8z7c1lqo.jl:21\nin expression starting at\
    \ /tmp/tmp8z7c1lqo.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k \n            sum += arr[i] \n        end\n \
    \       return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh_iygpk.jl:25\nin expression starting at\
    \ /tmp/tmpnh_iygpk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7h0esj2.jl:28\nin expression starting at\
    \ /tmp/tmpm7h0esj2.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nQuestion 3.2\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzcx9n77.jl:24\nin expression starting at\
    \ /tmp/tmpdzcx9n77.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    \n    sum = 0\n    for i = 1:k\n  \
    \      sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, your function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqwb0ixd.jl:25\nin expression starting at\
    \ /tmp/tmpnqwb0ixd.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmvj34p4.jl:25\nin expression starting at\
    \ /tmp/tmpfmvj34p4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm0tqmyu_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0tqmyu_.jl:1\n\
    in expression starting at /tmp/tmpm0tqmyu_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, your function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyqb5lz5.jl:21\nin expression starting at\
    \ /tmp/tmpmyqb5lz5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        elseif e < 100\n            sum += e - 10\n        elseif\
    \ e < 1000\n            sum += e - 100\n        elseif e < 10000\n           \
    \ sum += e - 1000\n        elseif e < 100000\n            sum += e - 10000\n \
    \       elseif e < 1000000\n            sum += e - 100000\n        elseif e <\
    \ 10000000\n            sum += e - 1000000\n        elseif e < 100000000\n   \
    \         sum += e - 10000000\n        elseif e < 1000000000\n            sum\
    \ += e - 100000000\n        elseif e < 10000000000\n            sum += e - 1000000000\n\
    \        elseif e < 100000000000\n            sum += e - 10000000000\n       \
    \ elseif e < 1000000000000\n            sum += e - 100000000000\n        elseif\
    \ e < 10000000000000\n            sum += e - 1000000000000\n        elseif e <\
    \ 100000000000000\n            sum += e - 10000000000000\n        elseif e < 1000000000000000\n\
    \            sum += e - 100000000000000\n        elseif e < 10000000000000000\n\
    \            sum += e - 1000000000000000\n        elseif e < 100000000000000000\n\
    \            sum += e - 10000000000000000\n        elseif e < 1000000000000000000\n\
    \            sum += e - 100000000000000000\n        else\n            sum += e\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum of the elements with\
    \ at most three digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24\
    \ (3 + 4 + 5 + 6 + 7 + 8 + 9).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnem4rxdl.jl:59\nin expression starting at\
    \ /tmp/tmpnem4rxdl.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ojj9okc.jl:24\nin expression starting at\
    \ /tmp/tmp_ojj9okc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsojrdcu3.jl:25\nin expression starting at\
    \ /tmp/tmpsojrdcu3.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    else\n        sum = 0\n        for i in 1:k\n            sum += arr[i]\n\
    \        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrrzprl5.jl:25\nin expression starting at\
    \ /tmp/tmpfrrzprl5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49pppal1.jl:21\nin expression starting at\
    \ /tmp/tmp49pppal1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd53y44l7.jl:21\nin expression starting at\
    \ /tmp/tmpd53y44l7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        else\n            sum += e % 10 + 10 * (e / 10)\n   \
    \ end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmoscjwke.jl:24\nin expression starting at\
    \ /tmp/tmpmoscjwke.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj542exg_.jl:25\nin expression starting at\
    \ /tmp/tmpj542exg_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length of arr\"))\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0q5v8qe.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0q5v8qe.jl:1\n\
    in expression starting at /tmp/tmpk0q5v8qe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k \n            sum += arr[i] \n        end\n \
    \       return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6glglai.jl:25\nin expression starting at\
    \ /tmp/tmpi6glglai.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdollpcje.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdollpcje.jl:1\n\
    in expression starting at /tmp/tmpdollpcje.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaw0qki81.jl:20\nin expression starting at\
    \ /tmp/tmpaw0qki81.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu30pb954.jl:20\nin expression starting at\
    \ /tmp/tmpu30pb954.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for e in\
    \ arr[k:end]\n        sum += e\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpm77qvgnq.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpm77qvgnq.jl:29\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm77qvgnq.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm77qvgnq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm77qvgnq.jl:30\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm77qvgnq.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm77qvgnq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm77qvgnq.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm77qvgnq.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm77qvgnq.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n \
    \       return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe6obi9qf.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpe6obi9qf.jl:30\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6obi9qf.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6obi9qf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpe6obi9qf.jl:31\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6obi9qf.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6obi9qf.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpe6obi9qf.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe6obi9qf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe6obi9qf.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwknb7wul.jl:25\nin expression starting at\
    \ /tmp/tmpwknb7wul.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphtomg1r.jl:20\nin expression starting at\
    \ /tmp/tmpphtomg1r.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5w_jvg3f.jl:21\nin expression starting at\
    \ /tmp/tmp5w_jvg3f.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm0tqmyu_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0tqmyu_.jl:1\n\
    in expression starting at /tmp/tmpm0tqmyu_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes as\
    \ input a vector of integers arr and an integer k, and returns the sum of the\
    \ elements with at most k digits from the first k elements of arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsijvrvd9.jl:59\nin expression starting at\
    \ /tmp/tmpsijvrvd9.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxx8veydp.jl:20\nin expression starting at\
    \ /tmp/tmpxx8veydp.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpssqvwwi0.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpssqvwwi0.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpssqvwwi0.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpssqvwwi0.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpssqvwwi0.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpssqvwwi0.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpssqvwwi0.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmprnmqq.jl:25\nin expression starting at\
    \ /tmp/tmpdmprnmqq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function called two_digits that takes as input a vector of integers arr and\
    \ an integer k, and returns the sum of the elements with at most two digits from\
    \ the first k elements of arr.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnk0eqkx.jl:21\nin expression starting at\
    \ /tmp/tmprnk0eqkx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nLet's test\
    \ our add_elements function by calling it with the test array we created earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvviyn10q.jl:20\nin expression starting at\
    \ /tmp/tmpvviyn10q.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sbqtipr.jl:21\nin expression starting at\
    \ /tmp/tmp8sbqtipr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpjl1124zk.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpjl1124zk.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl1124zk.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl1124zk.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjl1124zk.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjl1124zk.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjl1124zk.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nLet's test\
    \ our add_elements function by verifying it works on some test cases:\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7f0pfbv.jl:20\nin expression starting at\
    \ /tmp/tmpw7f0pfbv.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpytuakidj.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpytuakidj.jl:33\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 324 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytuakidj.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytuakidj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpytuakidj.jl:34\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4186 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytuakidj.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytuakidj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpytuakidj.jl:35\n  Expression: candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4) == 125\n   Evaluated: 110 == 125\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytuakidj.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytuakidj.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpytuakidj.jl:36\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4110 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpytuakidj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpytuakidj.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnx4soj10.jl:59\nin expression starting at\
    \ /tmp/tmpnx4soj10.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo4r63jv2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpo4r63jv2.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4r63jv2.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4r63jv2.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ebltyyp.jl:21\nin expression starting at\
    \ /tmp/tmp0ebltyyp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr\n        if n <= 9\n      \
    \      sum += n\n        else\n            sum += 9 + n % 10\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, you should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6sq2z6y.jl:24\nin expression starting at\
    \ /tmp/tmpr6sq2z6y.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x <= 9\n      \
    \      sum += x\n        elseif x > 9\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ your function should return 24. Your function should use only a single for loop.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc86dzb7.jl:25\nin expression starting at\
    \ /tmp/tmphc86dzb7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo4r63jv2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpo4r63jv2.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4r63jv2.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4r63jv2.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3: Add elements with\
    \ at most two digits from the first k elements of arr\nWrite a function that adds\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmr39oc_0.jl:21\nin expression starting at\
    \ /tmp/tmpmr39oc_0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ivexgqb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ivexgqb.jl:1\n\
    in expression starting at /tmp/tmp3ivexgqb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 0 && x < 10\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2p55cfjn.jl:23\nin expression starting at\
    \ /tmp/tmp2p55cfjn.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp00v769ds.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp00v769ds.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp00v769ds.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp00v769ds.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in arr[k+1:end]\n        sum += i\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzdfpm_y.jl:21\nin expression starting at\
    \ /tmp/tmphzdfpm_y.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49pppal1.jl:21\nin expression starting at\
    \ /tmp/tmp49pppal1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hgeihbk.jl:20\nin expression starting at\
    \ /tmp/tmp9hgeihbk.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphtomg1r.jl:20\nin expression starting at\
    \ /tmp/tmpphtomg1r.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmphvbydv.jl:25\nin expression starting at\
    \ /tmp/tmpmphvbydv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qi5llcf.jl:26\nin expression starting at\
    \ /tmp/tmp_qi5llcf.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kxqycxr.jl:25\nin expression starting at\
    \ /tmp/tmp2kxqycxr.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k > length(arr)\n        return sum(arr)\n\
    \    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24. Your function should work for any arr and k. Make sure your\
    \ function works for arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5x65bl9.jl:24\nin expression starting at\
    \ /tmp/tmpb5x65bl9.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 1:k \n            sum += arr[i] \n        return\
    \ sum + add_elements(arr[k+1:], k-1) \nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. \nFor example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(k + 1):\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxg_65lh4.jl:21\nin expression\
    \ starting at /tmp/tmpxg_65lh4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9mfo7_t.jl:20\nin expression starting at\
    \ /tmp/tmpk9mfo7_t.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nQuestion 2.2\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. \nThe function should return\
    \ an error if k is greater than or equal to the length of the array.\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx8pv4ul.jl:24\nin expression starting at\
    \ /tmp/tmpkx8pv4ul.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphtomg1r.jl:20\nin expression starting at\
    \ /tmp/tmpphtomg1r.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaw0qki81.jl:20\nin expression starting at\
    \ /tmp/tmpaw0qki81.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in arr[k:] \n            sum += i \n        return\
    \ sum + arr[k] \nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. \nFor example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzexbmpu9.jl:19\nin expression\
    \ starting at /tmp/tmpzexbmpu9.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    \n    sum = 0\n    \n    for i in 1:k\n        sum += arr[i]\n    end\n \
    \   \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqf1l_xc.jl:26\nin expression starting at\
    \ /tmp/tmpmqf1l_xc.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy26h5ugr.jl:20\nin expression starting at\
    \ /tmp/tmpy26h5ugr.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3tks29o.jl:21\nin expression starting at\
    \ /tmp/tmpi3tks29o.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3po984xb.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3po984xb.jl:1\n\
    in expression starting at /tmp/tmp3po984xb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxxcgb3l.jl:21\nin expression starting at\
    \ /tmp/tmptxxcgb3l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in arr[k:end]\n        sum += i\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxzur_z8.jl:21\nin expression starting at\
    \ /tmp/tmpaxzur_z8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k \n            sum += arr[i] \n        end\n \
    \       return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4y0p36o.jl:25\nin expression starting at\
    \ /tmp/tmpu4y0p36o.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length of arr\"))\n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0q5v8qe.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0q5v8qe.jl:1\n\
    in expression starting at /tmp/tmpk0q5v8qe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k > length(arr)\n        error(\"\
    k must be less than or equal to length(arr)\")\n    end\n    \n    sum = 0\n \
    \   for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpogiamve5.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpogiamve5.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogiamve5.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogiamve5.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpogiamve5.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogiamve5.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogiamve5.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 1:k \n            sum += arr[i] \n        endfor\
    \ \n        return sum \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf7hh2vg.jl:25\nin expression starting at\
    \ /tmp/tmpyf7hh2vg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznludfo7.jl:25\nin expression starting at\
    \ /tmp/tmpznludfo7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp00v769ds.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp00v769ds.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp00v769ds.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp00v769ds.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    \n    sum = 0\n    for i in 1:k\n        sum = sum + arr[i]\n    end\n  \
    \  return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7tm6w4f9.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tm6w4f9.jl:1\n\
    in expression starting at /tmp/tmp7tm6w4f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24. Write a test that tests your function\
    \ with arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0psekzsi.jl:25\nin expression starting at\
    \ /tmp/tmp0psekzsi.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7qgj0k74.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qgj0k74.jl:1\n\
    in expression starting at /tmp/tmp7qgj0k74.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4rwq_oz.jl:28\nin expression starting at\
    \ /tmp/tmpb4rwq_oz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 3.2\nWrite\
    \ a function called two_digits that takes as input a vector of integers arr and\
    \ an integer k, and returns the sum of the elements with at most two digits from\
    \ the first k elements of arr.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpms6nwjwx.jl:21\nin expression starting at\
    \ /tmp/tmpms6nwjwx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        if el % 10 > 2 \n            sum += el\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the elements with at most two digits from the\
    \ first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcbtfozdq.jl:26\nin expression starting at\
    \ /tmp/tmpcbtfozdq.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nQuestion\
    \ 7\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24. Write a test that verifies\
    \ that your function works.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3pg43cov.jl:20\nin expression starting at\
    \ /tmp/tmp3pg43cov.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24. \nThe function should\
    \ work for any arr and k. \nThe function should work for any arr and k. \nThe\
    \ function should work for any arr and k. \nThe function should work for any arr\
    \ and k. \nThe function should work for any arr and k. \nThe function should work\
    \ for any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for any arr and k.\
    \ \nThe function should work for any arr and k. \nThe function should work for\
    \ any arr and k. \nThe function should work for any arr and k. \nThe function\
    \ should work for any arr and k. \nThe function should work for \nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0fjby6d.jl:20\nin expression starting at\
    \ /tmp/tmpw0fjby6d.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptnpc881g.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmptnpc881g.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:28\n  Expression: candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4) == 125\n   Evaluated: 35 == 125\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:30\n  Expression: candidate([1], 1) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   "
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptnpc881g.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmptnpc881g.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:28\n  Expression: candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4) == 125\n   Evaluated: 35 == 125\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:30\n  Expression: candidate([1], 1) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   "
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nQuestion 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmaj8luou.jl:25\nin expression starting at\
    \ /tmp/tmpmaj8luou.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyps7h_8x.jl:59\nin expression starting at\
    \ /tmp/tmpyps7h_8x.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm0tqmyu_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0tqmyu_.jl:1\n\
    in expression starting at /tmp/tmpm0tqmyu_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in arr[k:end] \n            sum += i \n        return\
    \ sum + arr[1] \nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6splpgp6.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6splpgp6.jl:1\n\
    in expression starting at /tmp/tmp6splpgp6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nQuestion 7\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lda5wwi.jl:28\nin expression starting at\
    \ /tmp/tmp4lda5wwi.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) \n        error(\"k must be less than\
    \ or equal to length(arr)\") \n    else \n        sum = 0\n        for i in 1:k\n\
    \            sum += arr[i]\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, your function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4zvx3ql.jl:25\nin expression starting at\
    \ /tmp/tmpq4zvx3ql.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppf2ehml2.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmppf2ehml2.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf2ehml2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf2ehml2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppf2ehml2.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf2ehml2.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf2ehml2.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd07hkdev.jl:24\nin expression starting at\
    \ /tmp/tmpd07hkdev.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5vs0z5v.jl:24\nin expression starting at\
    \ /tmp/tmpl5vs0z5v.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n    for\
    \ i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, your function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra61w1f7.jl:25\nin expression starting at\
    \ /tmp/tmpra61w1f7.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj59teur5.jl:25\nin expression starting at\
    \ /tmp/tmpj59teur5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, if arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24. \nThe function should\
    \ work for any arr and k. \nThe function should return an error if the array is\
    \ empty or if k is less than 1.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyjcagtd.jl:20\nin expression starting at\
    \ /tmp/tmptyjcagtd.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k \n            sum += arr[i] \n        end\n \
    \       return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh_iygpk.jl:25\nin expression starting at\
    \ /tmp/tmpnh_iygpk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x <= 9\n      \
    \      sum += x\n        else\n            sum += x - 10\n            if sum >\
    \ k\n                sum -= 10\n            end\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x8rfnvg.jl:28\nin expression starting at\
    \ /tmp/tmp8x8rfnvg.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm0tqmyu_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0tqmyu_.jl:1\n\
    in expression starting at /tmp/tmpm0tqmyu_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp98auqfeh.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp98auqfeh.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98auqfeh.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98auqfeh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp98auqfeh.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp98auqfeh.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp98auqfeh.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length(arr)\")\n    end\n    sum = 0\n    for i = 1:k\n        sum\
    \ += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpiplx0i_x.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpiplx0i_x.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiplx0i_x.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiplx0i_x.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpiplx0i_x.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiplx0i_x.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiplx0i_x.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7qgj0k74.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qgj0k74.jl:1\n\
    in expression starting at /tmp/tmp7qgj0k74.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp00v769ds.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp00v769ds.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp00v769ds.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp00v769ds.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp00v769ds.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp00v769ds.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptnpc881g.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmptnpc881g.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4014 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:28\n  Expression: candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4) == 125\n   Evaluated: 35 == 125\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 35 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptnpc881g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptnpc881g.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptnpc881g.jl:30\n  Expression: candidate([1], 1) == 1\n   Evaluated:\
    \ 0 == 1\nStacktrace:\n [1] macro expansion\n   "
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95qxokcz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp95qxokcz.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qxokcz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qxokcz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp95qxokcz.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qxokcz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qxokcz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the elements with\
    \ at most three digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24\
    \ (3 + 4 + 5 + 6 + 7 + 8 + 9).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0tzfedk.jl:59\nin expression starting at\
    \ /tmp/tmpf0tzfedk.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr\n        if n < 10\n      \
    \      sum += n\n        elseif n < 100\n            sum += n\n        elseif\
    \ n < 1000\n            sum += n\n        elseif n < 10000\n            sum +=\
    \ n\n        elseif n < 100000\n            sum += n\n        elseif n < 1000000\n\
    \            sum += n\n        elseif n < 10000000\n            sum += n\n   \
    \     elseif n < 100000000\n            sum += n\n        elseif n < 1000000000\n\
    \            sum += n\n        elseif n < 10000000000\n            sum += n\n\
    \        elseif n < 100000000000\n            sum += n\n        elseif n < 1000000000000\n\
    \            sum += n\n        elseif n < 10000000000000\n            sum += n\n\
    \        elseif n < 100000000000000\n            sum += n\n        elseif n <\
    \ 1000000000000000\n            sum += n\n        elseif n < 10000000000000000\n\
    \            sum += n\n        elseif n < 100000000000000000\n            sum\
    \ += n\n        elseif n < 1000000000000000000\n            sum += n\n       \
    \ elseif n < 10000000000000000000\n            sum += n\n        elseif n < 100000000000000000000\n\
    \            sum += n\n        elseif n < 1000000000000000000000\n           \
    \ sum += n\n        elseif n < 10000000000000000000000\n            sum += n\n\
    \        elseif n < 100000000000000000000000\n            sum += n\n        elseif\
    \ n < 1000000000000000000000000\n            sum += n\n        elseif n < 10000000000000000000000000\n\
    \            sum += n\n        elseif n < 100000000000000000000000000\n      \
    \      sum += n\n        elseif n < 1000000000000000000000000000\n           \
    \ sum += n\n        elseif n < 10000000000000000000000000000\n            sum\
    \ += n\n        elseif n < 100000000000000000000000000000\n            sum +=\
    \ n\n        elseif n < 1000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 10000000000000000000000000000000\n            sum += n\n \
    \       elseif n < 100000000000000000000000000000000\n            sum += n\n \
    \       elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n            sum += n\n\
    \        elseif n < 1000000000000000000000000000000000\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwr6b3vmc.jl:1\nin expression starting at /tmp/tmpwr6b3vmc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  return arr[1] + add_elements(arr[2:k], k-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbyg05fx.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbyg05fx.jl:1\n\
    in expression starting at /tmp/tmpqbyg05fx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in arr[k:end]\n        sum += i\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7jm0x5tr.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp7jm0x5tr.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jm0x5tr.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jm0x5tr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7jm0x5tr.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jm0x5tr.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jm0x5tr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7jm0x5tr.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jm0x5tr.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jm0x5tr.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length of arr\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmgnlu6ot.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmgnlu6ot.jl:1\n\
    in expression starting at /tmp/tmpmgnlu6ot.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements with at most two digits from the\
    \ first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9] and k = 4, your function should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijb1frcs.jl:21\nin expression starting at\
    \ /tmp/tmpijb1frcs.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpczxkitd8.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpczxkitd8.jl:1\n\
    in expression starting at /tmp/tmpczxkitd8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1et1camq.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1et1camq.jl:1\n\
    in expression starting at /tmp/tmp1et1camq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvc9s8ow2.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvc9s8ow2.jl:1\n\
    in expression starting at /tmp/tmpvc9s8ow2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x > 9\n       \
    \     sum += x - 10\n        else\n            sum += x\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ your function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xrx6_nq.jl:24\nin expression starting at\
    \ /tmp/tmp0xrx6_nq.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3: Find the sum of all elements with at most two digits from the first\
    \ k elements of arr\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmiziybb.jl:24\nin expression starting at\
    \ /tmp/tmpmmiziybb.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pl41k0q.jl:25\nin expression starting at\
    \ /tmp/tmp0pl41k0q.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k < 1 \n        throw(ArgumentError(\"\
    k must be between 1 and length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphqt6lijz.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphqt6lijz.jl:1\n\
    in expression starting at /tmp/tmphqt6lijz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamgqvvrp.jl:21\nin expression starting at\
    \ /tmp/tmpamgqvvrp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmprnmqq.jl:25\nin expression starting at\
    \ /tmp/tmpdmprnmqq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5caayjx.jl:20\nin expression starting at\
    \ /tmp/tmpg5caayjx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 || k == length(arr)\n        return arr[k]\n\
    \    \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegieeb7z.jl:24\nin expression starting at\
    \ /tmp/tmpegieeb7z.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sbqtipr.jl:21\nin expression starting at\
    \ /tmp/tmp8sbqtipr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ish20tb.jl:23\nin expression starting at\
    \ /tmp/tmp4ish20tb.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    \n    for i in 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q7h8x4v.jl:26\nin expression starting at\
    \ /tmp/tmp5q7h8x4v.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length of arr\"))\n    end\n    sum = 0\n    for i\
    \ = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbkrru5f2.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpbkrru5f2.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkrru5f2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkrru5f2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbkrru5f2.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkrru5f2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkrru5f2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5caayjx.jl:20\nin expression starting at\
    \ /tmp/tmpg5caayjx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr) || k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length of arr\"))\n    end\n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2389o5s_.jl:25\nin expression starting at\
    \ /tmp/tmp2389o5s_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sbqtipr.jl:21\nin expression starting at\
    \ /tmp/tmp8sbqtipr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r4bcr6l.jl:25\nin expression starting at\
    \ /tmp/tmp6r4bcr6l.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k+1:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nQuestion 3.2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. \nThe function should take as input a vector of integers\
    \ arr and an integer k. \nThe function should return the sum of the elements with\
    \ at most two digits from the first k elements of arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_gye7xx.jl:21\nin expression starting at\
    \ /tmp/tmpz_gye7xx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i in\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2rjrzo4v.jl:24\nin expression starting at\
    \ /tmp/tmp2rjrzo4v.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 1:k \n            sum += arr[i] \n        endfor\
    \ \n        return sum \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf7hh2vg.jl:25\nin expression starting at\
    \ /tmp/tmpyf7hh2vg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98qa5wiv.jl:25\nin expression starting at\
    \ /tmp/tmp98qa5wiv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnx4soj10.jl:59\nin expression starting at\
    \ /tmp/tmpnx4soj10.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements with\
    \ at most three digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\
    \ Your function should work for any arr and k. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 5, your function should return 50.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyoo_62j6.jl:59\nin expression starting at\
    \ /tmp/tmpyoo_62j6.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e < 10\n      \
    \      sum += e\n        else\n            sum += e % 10 + 10 * (e / 10)\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzqh17_x.jl:24\nin expression starting at\
    \ /tmp/tmpqzqh17_x.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k \n            sum += arr[i] \n        end\n \
    \       return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugug6_q3.jl:24\nin expression starting at\
    \ /tmp/tmpugug6_q3.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95qxokcz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp95qxokcz.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qxokcz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qxokcz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp95qxokcz.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qxokcz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qxokcz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp95qxokcz.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmp95qxokcz.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qxokcz.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qxokcz.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp95qxokcz.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp95qxokcz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp95qxokcz.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nSolution\n\
    Let's see how we would solve this problem manually.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64gfszyf.jl:20\nin expression starting at\
    \ /tmp/tmp64gfszyf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh89napl.jl:24\nin expression starting at\
    \ /tmp/tmpfh89napl.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxslcq_nj.jl:59\nin expression starting at\
    \ /tmp/tmpxslcq_nj.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be <= length(arr)\"\
    )\n    end\n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the\
    \ function should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuhds6oo.jl:24\nin expression starting at\
    \ /tmp/tmpbuhds6oo.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    \n    sum = 0\n    for\
    \ i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj59teur5.jl:25\nin expression starting at\
    \ /tmp/tmpj59teur5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpo4r63jv2.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmpo4r63jv2.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4r63jv2.jl:27\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 4135 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo4r63jv2.jl:29\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4035 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo4r63jv2.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo4r63jv2.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj542exg_.jl:25\nin expression starting at\
    \ /tmp/tmpj542exg_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be <= length\
    \ of arr\")\n    end\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz56kabpa.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz56kabpa.jl:1\n\
    in expression starting at /tmp/tmpz56kabpa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr\n        if e > 0 && e <= 9\n\
    \            sum += e\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpv985hm48.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmpv985hm48.jl:28\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 1 == -4\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv985hm48.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv985hm48.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv985hm48.jl:29\n  Expression: candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0\n   Evaluated: 14 == 0\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv985hm48.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv985hm48.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv985hm48.jl:30\n  Expression: candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4) == 125\n   Evaluated: 38 == 125\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv985hm48.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv985hm48.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpv985hm48.jl:31\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 38 == 24\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv985hm48.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv985hm48.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. \nThe function should return an error if k is greater than or equal to\
    \ len(arr).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkszthc9l.jl:24\nin expression starting at\
    \ /tmp/tmpkszthc9l.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj542exg_.jl:25\nin expression starting at\
    \ /tmp/tmpj542exg_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvak3aexv.jl:24\nin expression starting at\
    \ /tmp/tmpvak3aexv.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hgeihbk.jl:20\nin expression starting at\
    \ /tmp/tmp9hgeihbk.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nProblem 2b\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrylaoi2.jl:21\nin expression starting at\
    \ /tmp/tmpwrylaoi2.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporxb3ifh.jl:26\nin expression starting at\
    \ /tmp/tmporxb3ifh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm0tqmyu_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm0tqmyu_.jl:1\n\
    in expression starting at /tmp/tmpm0tqmyu_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. Test\
    \ your function on the following arrays:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2wrddum.jl:24\nin expression starting at\
    \ /tmp/tmpv2wrddum.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        return sum(arr)\n    else\n\
    \        sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnmrcu5m.jl:25\nin expression starting at\
    \ /tmp/tmpbnmrcu5m.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the\
    \ function should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3ozvira.jl:24\nin expression starting at\
    \ /tmp/tmph3ozvira.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nQuestion 2.2\nWrite a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr. \nFor example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9] and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvc6iy_q.jl:21\nin expression starting at\
    \ /tmp/tmpbvc6iy_q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr\n        if n <= 9\n      \
    \      sum += n\n        elseif n <= 99\n            sum += n\n        elseif\
    \ n <= 999\n            sum += n\n        elseif n <= 9999\n            sum +=\
    \ n\n        elseif n <= 99999\n            sum += n\n        elseif n <= 999999\n\
    \            sum += n\n        elseif n <= 9999999\n            sum += n\n   \
    \     elseif n <= 999999999\n            sum += n\n        elseif n <= 99999999999\n\
    \            sum += n\n        elseif n <= 9999999999999\n            sum += n\n\
    \        elseif n <= 1000000000000\n            sum += n\n        elseif n <=\
    \ 10000000000000\n            sum += n\n        elseif n <= 100000000000000\n\
    \            sum += n\n        elseif n <= 1000000000000000\n            sum +=\
    \ n\n        elseif n <= 10000000000000000\n            sum += n\n        elseif\
    \ n <= 100000000000000000\n            sum += n\n        elseif n <= 1000000000000000000\n\
    \            sum += n\n        elseif n <= 10000000000000000000\n            sum\
    \ += n\n        elseif n <= 100000000000000000000\n            sum += n\n    \
    \    elseif n <= 1000000000000000000000\n            sum += n\n        elseif\
    \ n <= 10000000000000000000000\n            sum += n\n        elseif n <= 100000000000000000000000\n\
    \            sum += n\n        elseif n <= 1000000000000000000000000\n       \
    \     sum += n\n        elseif n <= 10000000000000000000000000\n            sum\
    \ += n\n        elseif n <= 100000000000000000000000000\n            sum += n\n\
    \        elseif n <= 1000000000000000000000000000\n            sum += n\n    \
    \    elseif n <= 10000000000000000000000000000\n            sum += n\n       \
    \ elseif n <= 100000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000\n            sum += n\n        elseif n\
    \ <= 10000000000000000000000000000000\n            sum += n\n        elseif n\
    \ <= 100000000000000000000000000000000\n            sum += n\n        elseif n\
    \ <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcrp6zra.jl:1\nin expression starting at /tmp/tmppcrp6zra.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. Test it on arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5bb311v.jl:24\nin expression starting at\
    \ /tmp/tmpg5bb311v.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr\n        if el > 0\n     \
    \       sum += el % 10\n            el = el / 10\n        end\n    end\n    return\
    \ sum + add_elements(arr[k+1:end], k)\nend\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykpg7itz.jl:24\nin expression starting at\
    \ /tmp/tmpykpg7itz.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecvz8jjg.jl:20\nin expression starting at\
    \ /tmp/tmpecvz8jjg.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7qgj0k74.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qgj0k74.jl:1\n\
    in expression starting at /tmp/tmp7qgj0k74.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5caayjx.jl:20\nin expression starting at\
    \ /tmp/tmpg5caayjx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9qcucrr.jl:21\nin expression starting at\
    \ /tmp/tmps9qcucrr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length of arr\"))\n    end\n    sum = 0\n    for i\
    \ = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbkrru5f2.jl:26

    '
  stdout: "test set: Test Failed at /tmp/tmpbkrru5f2.jl:30\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkrru5f2.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkrru5f2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbkrru5f2.jl:32\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkrru5f2.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkrru5f2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj0t4tli.jl:59\nin expression starting at\
    \ /tmp/tmpuj0t4tli.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b4i_fa8.jl:21\nin expression starting at\
    \ /tmp/tmp3b4i_fa8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nQuestion 3.2\nWrite a function that returns the\
    \ sum of the elements with at most two digits from the first k elements of arr.\
    \ For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, your function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbh12_eki.jl:23\nin expression starting at\
    \ /tmp/tmpbh12_eki.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        if el < 10 \n            sum += el\n      \
    \  else\n            sum += el - 10\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpskbmx93s.jl:27\nin expression starting at\
    \ /tmp/tmpskbmx93s.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinnrf8ch.jl:24\nin expression starting at\
    \ /tmp/tmpinnrf8ch.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for el in arr[k:end]\n        sum += el\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4) == 24\n</cell>\n<text>\nProblem 7: add_elements2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptg4ryijj.jl:24\nin expression starting at\
    \ /tmp/tmptg4ryijj.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length of arr\"))\n    end\n    sum = 0\n    for i\
    \ = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsg3ktxw.jl:24\nin expression starting at\
    \ /tmp/tmpgsg3ktxw.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  return arr[1] + add_elements(arr[2:k], k-1)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24. Your function should\
    \ work for any arr and k. Make sure your function works for arr = [111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9] and k = 4.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpok3e5_qb.jl:20\nin expression starting at\
    \ /tmp/tmpok3e5_qb.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7eob0oha.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmp7eob0oha.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7eob0oha.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7eob0oha.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp7eob0oha.jl:33\n  Expression: candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24\n   Evaluated: 4135 == 24\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7eob0oha.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7eob0oha.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x82xds0.jl:20\nin expression starting at\
    \ /tmp/tmp_x82xds0.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj542exg_.jl:25\nin expression starting at\
    \ /tmp/tmpj542exg_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb50cqm92.jl:20\nin expression starting at\
    \ /tmp/tmpb50cqm92.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7lji036.jl:24\nin expression starting at\
    \ /tmp/tmpb7lji036.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += x - 10\n        elseif\
    \ x < 1000\n            sum += x - 100\n        elseif x < 10000\n           \
    \ sum += x - 1000\n        elseif x < 100000\n            sum += x - 10000\n \
    \       elseif x < 1000000\n            sum += x - 100000\n        elseif x <\
    \ 10000000\n            sum += x - 1000000\n        elseif x < 100000000\n   \
    \         sum += x - 10000000\n        elseif x < 1000000000\n            sum\
    \ += x - 100000000\n        elseif x < 10000000000\n            sum += x - 1000000000\n\
    \        elseif x < 100000000000\n            sum += x - 10000000000\n       \
    \ elseif x < 1000000000000\n            sum += x - 100000000000\n        elseif\
    \ x < 10000000000000\n            sum += x - 1000000000000\n        elseif x <\
    \ 100000000000000\n            sum += x - 10000000000000\n        elseif x < 1000000000000000\n\
    \            sum += x - 100000000000000\n        elseif x < 10000000000000000\n\
    \            sum += x - 1000000000000000\n        elseif x < 100000000000000000\n\
    \            sum += x - 10000000000000000\n        elseif x < 1000000000000000000\n\
    \            sum += x - 100000000000000000\n        else\n            sum += x\
    \ - 1000000000000000000\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the sum of the elements with\
    \ at most three digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24\
    \ (3 + 4 + 5 + 6 + 7 + 8).\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcba94kc4.jl:59\nin expression starting at\
    \ /tmp/tmpcba94kc4.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr\n        if n <= 9\n      \
    \      sum += n\n        elseif n <= 99\n            sum += n\n        elseif\
    \ n <= 999\n            sum += n\n        elseif n <= 9999\n            sum +=\
    \ n\n        elseif n <= 99999\n            sum += n\n        elseif n <= 999999\n\
    \            sum += n\n        elseif n <= 9999999\n            sum += n\n   \
    \     elseif n <= 999999999\n            sum += n\n        elseif n <= 99999999999\n\
    \            sum += n\n        elseif n <= 9999999999999\n            sum += n\n\
    \        elseif n <= 1000000000000\n            sum += n\n        elseif n <=\
    \ 10000000000000\n            sum += n\n        elseif n <= 100000000000000\n\
    \            sum += n\n        elseif n <= 1000000000000000\n            sum +=\
    \ n\n        elseif n <= 10000000000000000\n            sum += n\n        elseif\
    \ n <= 100000000000000000\n            sum += n\n        elseif n <= 1000000000000000000\n\
    \            sum += n\n        elseif n <= 10000000000000000000\n            sum\
    \ += n\n        elseif n <= 100000000000000000000\n            sum += n\n    \
    \    elseif n <= 1000000000000000000000\n            sum += n\n        elseif\
    \ n <= 10000000000000000000000\n            sum += n\n        elseif n <= 100000000000000000000000\n\
    \            sum += n\n        elseif n <= 1000000000000000000000000\n       \
    \     sum += n\n        elseif n <= 10000000000000000000000000\n            sum\
    \ += n\n        elseif n <= 100000000000000000000000000\n            sum += n\n\
    \        elseif n <= 1000000000000000000000000000\n            sum += n\n    \
    \    elseif n <= 10000000000000000000000000000\n            sum += n\n       \
    \ elseif n <= 100000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000\n            sum += n\n        elseif n\
    \ <= 10000000000000000000000000000000\n            sum += n\n        elseif n\
    \ <= 100000000000000000000000000000000\n            sum += n\n        elseif n\
    \ <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\n        elseif\
    \ n <= 1000000000000000000000000000000000\n            sum += n\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcrp6zra.jl:1\nin expression starting at /tmp/tmppcrp6zra.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<code language=julia-1.3>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 3.2\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqn9t7ncq.jl:25\nin expression starting at\
    \ /tmp/tmpqn9t7ncq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4,\
    \ the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvunim_h.jl:21\nin expression starting at\
    \ /tmp/tmpmvunim_h.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for i =\
    \ 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ojj9okc.jl:24\nin expression starting at\
    \ /tmp/tmp_ojj9okc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr \n    \n    sum = 0\n\
    \    \n    for i = 1:k\n        sum += arr[i]\n    end\n    \n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ elements with at most two digits from the first k elements of arr. For example,\
    \ given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6jkxk3d.jl:26\nin expression starting at\
    \ /tmp/tmpf6jkxk3d.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    sum = 0\n    for el in\
    \ arr[k:end]\n        if el < 10\n            sum += el\n        else\n      \
    \      sum += el - 10\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphu3jb2os.jl:28\nin expression starting at\
    \ /tmp/tmphu3jb2os.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr\n        if el > 0\n     \
    \       sum += el\n            el -= k\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01_7p016.jl:24\nin expression starting at\
    \ /tmp/tmp01_7p016.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nSolution\n\
    Let's see how we would solve this problem manually.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64gfszyf.jl:20\nin expression starting at\
    \ /tmp/tmp64gfszyf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3tks29o.jl:21\nin expression starting at\
    \ /tmp/tmpi3tks29o.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkt6j57kc.jl:24\nin expression starting at\
    \ /tmp/tmpkt6j57kc.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x82xds0.jl:20\nin expression starting at\
    \ /tmp/tmp_x82xds0.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x <= 9\n      \
    \      sum += x\n        else\n            sum += x - 10\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the\
    \ function should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxem5bthm.jl:25\nin expression starting at\
    \ /tmp/tmpxem5bthm.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvfmm9i1.jl:24\nin expression starting at\
    \ /tmp/tmppvfmm9i1.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length of arr\")\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmgnlu6ot.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmgnlu6ot.jl:1\n\
    in expression starting at /tmp/tmpmgnlu6ot.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k > length(arr)\n        error(\"k must be less than\
    \ or equal to length of arr\")\n    end\n    \n    sum = 0\n    for i = 1:k\n\
    \        sum += arr[i]\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9] and k = 4, the function should return 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr14f8xlm.jl:26\nin expression starting at\
    \ /tmp/tmpr14f8xlm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in arr[k:end]\n            sum += i\n        end\n\
    \        return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. Test your function with arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9] and k =\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0faw8rv.jl:24\nin expression starting at\
    \ /tmp/tmpu0faw8rv.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n</cell>\n<text>\nQuestion 3\nWrite a\
    \ function that returns the sum of the elements with at most two digits from the\
    \ first k elements of arr. For example, given arr = [111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9] and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkv4alsrz.jl:21\nin expression starting at\
    \ /tmp/tmpkv4alsrz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr\n        if x < 10\n      \
    \      sum += x\n        elseif x < 100\n            sum += 10 + x\n        elseif\
    \ x < 1000\n            sum += 100 + x\n        elseif x < 10000\n           \
    \ sum += 1000 + x\n        elseif x < 100000\n            sum += 10000 + x\n \
    \       elseif x < 1000000\n            sum += 100000 + x\n        elseif x <\
    \ 10000000\n            sum += 1000000 + x\n        elseif x < 100000000\n   \
    \         sum += 10000000 + x\n        elseif x < 1000000000\n            sum\
    \ += 100000000 + x\n        elseif x < 10000000000\n            sum += 1000000000\
    \ + x\n        elseif x < 100000000000\n            sum += 10000000000 + x\n \
    \       elseif x < 1000000000000\n            sum += 100000000000 + x\n      \
    \  elseif x < 10000000000000\n            sum += 1000000000000 + x\n        elseif\
    \ x < 100000000000000\n            sum += 10000000000000 + x\n        elseif x\
    \ < 1000000000000000\n            sum += 100000000000000 + x\n        elseif x\
    \ < 10000000000000000\n            sum += 1000000000000000 + x\n        elseif\
    \ x < 100000000000000000\n            sum += 10000000000000000 + x\n        elseif\
    \ x < 1000000000000000000\n            sum += 100000000000000000 + x\n       \
    \ else\n            sum += 1000000000000000000 + x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ sum of the digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2po9llb2.jl:59\nin expression starting at\
    \ /tmp/tmp2po9llb2.jl:59\n"
  stdout: ''
