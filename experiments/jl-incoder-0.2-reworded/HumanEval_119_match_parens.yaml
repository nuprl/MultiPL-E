name: HumanEval_119_match_parens
language: jl
prompt: "\"\"\"\n    You are given a vector of two strings, both strings consist of\
  \ open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check\
  \ if it is possible to concatenate the two strings in\n    some order, that the\
  \ resulting string will be good.\n    A string S is considered to be good if and\
  \ only if all parentheses in S\n    are balanced. For example: the string '(())()'\
  \ is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way\
  \ to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens([\"\
  ()(\", \")\"])\n    \"Yes\"\n    >>> match_parens([\")\", \")\"])\n    \"No\"\n\
  \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
  ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
  (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) ==\
  \ \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
  ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
  )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\"\
  , \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"\
  (\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
completions: ["    stack = Vector{String}()\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a vector is a valid permutation of another vector.", "    stack =\
    \ Vector{String}()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of booleans indicating whether each string is\
    \ a valid parenthesis string. Valid strings are strings that do not contain any\
    \ parentheses.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \")\", \"(\",\
    \ \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"\
    (\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \")\", \"(\", \"\
    )\", \"(\", \")\", \"", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a given string is a valid mathematical expression.\
    \ For example, the string \"(1 + 2)\" is a valid expression, but \"(1 + 2 + 3)\"\
    \ isn't.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n     \
    \   if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n  \
    \          if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is even.", "    \n\
    \    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may want to use isPrime() from Base or write your own.",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()\", \"(\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"(\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()\", \"(\", \"()\", \"()\", \"()\", \"\
    ()\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()\", \"(\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"\
    (\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()\", \"(\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"(\"])\n</cell", "    stack\
    \ = Vector{String}()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Vector{String}()\n    for s in lst\n      \
    \  if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n   \
    \         if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a given string is a palindrome.\
    \ Palindromes are strings that read the same backward as forward.", "    \n  \
    \  stack = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n \
    \           push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is a valid binary search tree. \nA binary tree is valid if every node has\
    \ at most two children.", "    \n    stack = Vector{String}()\n    \n    for s\
    \ in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s\
    \ == \")\"\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        else\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is a binary\
    \ search tree (BST).", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack{String}()\n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ Your function should take in a number as an argument and return a boolean value.",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings as\
    \ input and returns a vector of booleans indicating whether each string is a valid\
    \ parenthesis expression. Valid expressions are of the form '(())', where each\
    \ pair of parentheses has equal number of opening and closing parentheses.", " \
    \   stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n      \
    \      push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime. You may want to use the\nfollowing functions: isa(),\
    \ ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <,\
    \ <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=,\
    \ ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <,\
    \ <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=,\
    \ ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <,\
    \ <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=,\
    \ ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <,\
    \ <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=,\
    \ ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <,\
    \ <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <, <=, >, >=, ==, !=, <", "    \n \
    \   stack = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in that string.", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()", "    \n    stack\
    \ = Stack()\n    \n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>", "    stack\
    \ = Vector{String}()\n    stack = push!(stack, \"\")\n    stack = push!(stack,\
    \ \"\")\n    for i in lst\n        if i == \"(\"\n            push!(stack, \"\"\
    )\n        elseif i == \")\"\n            pop!(stack)\n        else\n        \
    \    push!(stack, i)\n        end\n    end\n    if length(stack) != 0\n      \
    \  return \"No\"\n    else\n        return \"Yes\"\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/18574164)\n<|/ c |>\n<| c |>\n\
    This does provide an answer. He asked how to check if a string can be concatenated\
    \ with another string in some order. He also asked how to check if a parenthesis\
    \ string is balanced. He also asked how to check if a string is good. He also\
    \ asked how to check if a string is valid. He also asked how to check if a string\
    \ is valid. He also asked how to check if a string is valid. He also asked how\
    \ to check if a string is valid. He also asked how to check if a string is valid.\
    \ He also asked how to check if a string is valid. He also asked how to check\
    \ if a string is valid. He also asked how to check if a string is valid. He also\
    \ asked how to check if a string is valid. He also asked how to check if a string\
    \ is valid. He also asked how to check if a string is valid. He also asked how\
    \ to check if a string is valid. He also asked how to check if a string is valid.\
    \ He also asked how to check if a string is valid. He also asked how to check\
    \ if a string is valid. He also asked how to check if a string is valid. He also\
    \ asked how to check if a string is valid. He also asked how to check if a string\
    \ is valid. He also asked how to check if a string is valid. He also asked how\
    \ to check if a string is valid. He also asked how to check if a string is valid.\
    \ He also asked how to check if a string is valid. He also asked how to check\
    \ if a string is valid. He also asked how to check if a string is valid. He also\
    \ asked how to check if a string is valid. He also asked how to check if a string\
    \ is valid. He also asked how to check if a string is valid. He also asked how\
    \ to check if a string is valid. H", "    \n    stack = Vector{String}()\n   \
    \ \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n   \
    \     elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nThe function should take in a number as an argument and return a boolean.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    if length(lst) == 0 \n   \
    \     return \"No\"\n    \n    if length(lst) == 1 \n        if lst[1] == \"(\"\
    \ \n            return \"Yes\"\n        else \n            return \"No\"\n   \
    \ end\n    \n    stack = Vector{String}(lst)\n    \n    while length(stack) >\
    \ 0 \n        \n        if stack[length(stack)-1] == \"(\" \n            pop!(stack)\n\
    \        else \n            push!(stack, \")\")\n        end\n        \n     \
    \   if length(stack) == 0 \n            return \"No\"\n        end\n        \n\
    \        if stack[length(stack)-1] == \"(\" \n            push!(stack, \"(\")\n\
    \        else \n            push!(stack, \")\")\n        end\n    end\n    \n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nA number is prime if and only if it is a prime number (i.e. has no\
    \ divisors other than 1 and itself).\nA number is not prime if and only if it\
    \ is not a prime number (i.e. has divisors other than 1 and itself).\nA number\
    \ is prime if and only if it is a perfect square (i.e. has no divisors other than\
    \ 1 and itself).\nA number is not prime if and only if it is not a perfect square\
    \ (i.e. has divisors other than 1 and itself).\nA number is prime if and only\
    \ if it is a perfect cube.\nA number is not prime if and only if it is not a perfect\
    \ cube.\nA number is prime if and only if it is a perfect fifth power.\nA number\
    \ is not prime if and only if it is not a perfect fifth power.\nA number is prime\
    \ if and only if it is a perfect seventh power.\nA number is not prime if and\
    \ only if it is not a perfect seventh power.\nA number is prime if and only if\
    \ it is a perfect third power.\nA number is not prime if and only if it is not\
    \ a perfect third power.\nA number is prime if and only if it is a perfect fourth\
    \ power.\nA number is not prime if and only if it is not a perfect fourth power.\n\
    A number is prime if and only if it is a perfect sixth power.\nA number is not\
    \ prime if and only if it is not a perfect sixth power.\nA number is prime if\
    \ and only if it is a perfect eighth power.\nA number is not prime if and only\
    \ if it is not a perfect eighth power.\nA number is prime if and only if it is\
    \ a perfect n", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a new string where all occurrences of \"(\" have been replaced with\
    \ \"(\" and all occurrences of \")\" have been replaced with \")\".", "    stack\
    \ = Vector{String}()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</code>\n<|/ a tags=string,julia,parentheses\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for me. I am\
    \ still trying to understand how it works. But I guess I understand it now. Thanks\
    \ again.\n<|/ c |>\n<| c |>\nI added some comments to my answer, hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your comments. I understand it now. Thanks again.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    stack = Vector{String}()\n    \n   \
    \ for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    if length(lst) == 0 \n        return \"No\"\n    \n\
    \    if length(lst) == 1 \n        if lst[1] == \"(\" \n            return \"\
    Yes\"\n        else \n            return \"No\"\n    end\n    \n    stack = Vector{String}(lst)\n\
    \    \n    while length(stack) > 0 \n        if stack[length(stack)-1] == \"(\"\
    \ \n            stack[length(stack)-1] = \")\"\n        else \n            stack[length(stack)-1]\
    \ = \"(\"\n        end\n        \n        if length(stack) == 1 \n           \
    \ if stack[1] == \"(\" \n                return \"Yes\"\n            else \n \
    \               return \"No\"\n        end\n        \n        pop = stack[length(stack)-1]\n\
    \        push = stack[length(stack)-2]\n        \n        if pop == \"(\" \n \
    \           push = \"(\"\n        else \n            push = \")\"\n        end\n\
    \        \n        stack = replace(stack, pop, push)\n    end\n    \n    return\
    \ \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. Your function\
    \ should take in a number as an argument and return a boolean.", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is a binary search tree (BST).\nA binary tree is BST if each node has a value\
    \ less than or equal to its \nparent node's value, and each node has a value greater\
    \ than or equal to its \nparent node's value.\nA binary search tree (BST) is a\
    \ binary tree in which all the nodes have values \ngreater than or equal to their\
    \ parent node's values.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    stack = Stack()\n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may assume that the number is not negative.", "    stack\
    \ = Vector{String}()\n    stack = push!(stack, \"\")\n    stack = push!(stack,\
    \ \"\")\n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if length(stack) == 0\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        else\n            if length(stack) == 0\n                return \"No\"\
    \n            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns a string with all the characters in lower case. \nThe function should\
    \ ignore all non-alphabetic characters and replace them with spaces.", "    \n\
    \    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.length() == 0\n                return \"No\"\n        \
    \    else\n                stack.pop()\n            end\n        else\n      \
    \      if stack.length() > 0\n                stack.pop()\n            end\n \
    \       end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may assume that the number is not negative.", "    \n \
    \   stack = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n\
    \            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()", "    stack = Vector{String}()\n    stack = push!(stack,\
    \ \"\")\n    stack = push!(stack, \"\")\n    for s in lst\n        if s == \"\
    )\"\n            stack = pop!(stack)\n        elseif s == \"(\"\n            stack\
    \ = push!(stack, \"\")\n        else\n            stack = push!(stack, s)\n  \
    \      end\n    end\n    if stack[1] != \"\"\n        return \"No\"\n    else\n\
    \        return \"Yes\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree\
    \ is balanced.", "    stack = Vector{String}()\n    for s in lst\n        if s\
    \ == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n         \
    \   if isempty(stack)\n                return \"No\"\n            else\n     \
    \           pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in\
    \ lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n        elseif\
    \ i == \")\"\n            if stack.pop() == \"(\"\n                return \"Yes\"\
    \n            else\n                return \"No\"\n        end\n    end\n    return\
    \ \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even.", "    \n\
    \    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a given string is\
    \ a valid phone number.", "    stack = Vector{String}()\n    for s in lst\n  \
    \      if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string with all the uppercase letters replaced by lowercase\
    \ letters.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"", "    \n    if length(lst) == 0 \n      \
    \  return \"No\"\n    \n    stack = Stack()\n    \n    for x in lst\n        if\
    \ x == \"(\" \n            push!(stack, x)\n        else if x == \")\" \n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of parentheses in it.", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n\
    \    for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.pop() == \"(\"\n            \
    \    return \"Yes\"\n            else\n                return \"No\"\n       \
    \ end\n    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ as an argument and returns a vector of the lengths of the strings in the vector.\
    \ For example: \n[\"a\", \"b\", \"c\"] -> [3, 3]\n[\"a\", \"b\", \"c\", \"d\"\
    ] -> [4, 3, 2]\n[\"a\", \"b\", \"c\", \"d\", \"e\"] -> [4, 3, 2, 1]\n[\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"\
    f\", \"g\", \"h\", \"i\", \"j\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"] -> [4, 3, 2, 1]\n[\"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"] ->\
    \ [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"] -> [4, 3,\
    \ 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\"] -> [4, 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"\
    , \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"] -> [4,\
    \ 3, 2, 1]\n[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing formula to determine whether a number is\
    \ prime or not:", "    \n    stack = Stack()\n    \n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    \n    if lst.size == 0\n        return \"No\"\n    \n    if lst.size == 1\n\
    \        if lst[0] == \"()\"\n            return \"Yes\"\n        else\n     \
    \       return \"No\"\n    end\n    \n    stack = Vector{String}(\"\")\n    \n\
    \    for x in lst\n        if x == \"(\"\n            push!(stack, x)\n      \
    \  else\n            if stack[end] == \")\"\n                stack[end] = x\n\
    \            else\n                stack[end] = stack[end] + x\n            end\n\
    \        end\n    end\n    \n    if stack[end] == \")\"\n        return \"Yes\"\
    \n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s\
    \ == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n         \
    \   if isempty(stack)\n                return \"No\"\n            else\n     \
    \           pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a vector is a\
    \ permutation of another vector.", "    \n    stack = Vector{String}()\n    \n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ (a number is a prime if and only if it has only two factors: 1 and itself).",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the letters capitalized.", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    stack = Stack()\n   \
    \ for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing algorithm:", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a vector is a\
    \ valid permutation of another vector.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given string\
    \ is a valid phone number.", "    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of parentheses in it.", "    stack = Stack()\n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ You may use the\nfollowing definition of a prime number:", "    \n    stack\
    \ = Stack()\n    stack.append(lst)\n    \n    while !isempty(stack)\n        \n\
    \        str = pop!(stack)\n        \n        if str == \"()\"\n            return\
    \ \"Yes\"\n        elseif str == \")\"\n            return \"No\"\n        else\n\
    \            push!(stack, str)\n        end\n    end\n    \n    return \"No\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a binary tree is balanced.", "    \n    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.", "    \n    stack = Vector{String}()\n  \
    \  \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n  \
    \      elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ (a number is a prime if and only if it has only two factors: 1 and itself).\
    \ A number is prime if and only if it has only two factors: 1 and itself. For\
    \ example, 5 is prime because 5=2*2, and 2 is not a prime number.", "    \n  \
    \  stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the letters in lower case. \nThe string\
    \ can contain any characters, including spaces.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. You may use the\nfollowing algorithm:", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    stack = Vector{String}()\n    stack = push!(stack,\
    \ \"\")\n    stack = push!(stack, \"\")\n    \n    for i in lst\n        if i\
    \ == \"(\"\n            push!(stack, i)\n        elseif i == \")\"\n         \
    \   pop!(stack)\n            pop!(stack)\n        else\n            push!(stack,\
    \ i)\n        end\n    end\n    \n    if length(stack) == length(lst)\n      \
    \  return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "    \n    stack\
    \ = Stack()\n    \n    for x in lst\n        if x == '('\n            push!(stack,\
    \ x)\n        elseif x == ')'\n            if isempty(stack)\n               \
    \ return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a binary tree is balanced.", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\"", "    \n    stack = Stack()\n    \n    for s in lst\n     \
    \   if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n  \
    \          if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime.\
    \ You may use any number theoretic function here.", "    \n    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a given string is a palindrome or not.\nA palindrome is a string that\
    \ reads the same backward as forward.\nFor example, the string \"racecar\" is\
    \ a palindrome.\nWrite a function that checks if a given string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same backward as forward.\n\
    For example, the string \"racecar\" is a palindrome.\nWrite a function that checks\
    \ if a given string is a palindrome or not.\nA palindrome is a string that reads\
    \ the same backward as forward.\nFor example, the string \"racecar\" is a palindrome.\n\
    Write a function that checks if a given string is a palindrome or not.\nA palindrome\
    \ is a string that reads the same backward as forward.\nFor example, the string\
    \ \"racecar\" is a palindrome.\nWrite a function that checks if a given string\
    \ is a palindrome or not.\nA palindrome is a string that reads the same backward\
    \ as forward.\nFor example, the string \"racecar\" is a palindrome.\nWrite a function\
    \ that checks if a given string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same backward as forward.\nFor example, the string \"racecar\"\
    \ is a palindrome.\nWrite a function that checks if a given string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same backward as forward.\n\
    For example, the string \"racecar\" is a palindrome.\nWrite a function that checks\
    \ if a given string is a palindrome or not.\nA palindrome is a string that reads\
    \ the same backward as forward.\nFor example, the string \"racecar\" is a palindrome.\n\
    Write a function that checks if a given string is a palindrome or not.\nA palindrome\
    \ is a string that reads the same backward as forward.\nFor example", "    \n\
    \    stack = Stack()\n    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n\
    \        if elem == \"(\"\n            stack.append(elem)\n        elseif elem\
    \ == \")\"\n            if stack.pop() != elem\n                return \"No\"\n\
    \            else\n                stack.pop()\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"", "    stack = Vector{String}()\n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.size == 0\n                return \"No\"\n            else\n\
    \                stack.pop()\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. You may want to use\nthe isqrt function\
    \ from the Base package.", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nPart 2\nWrite a function that checks if a binary tree is a binary\
    \ search tree.", "    stack = Stack()\n    stack.append(\"\")\n    for s in lst\n\
    \        if s == \"(\"\n            stack.append(s)\n        elseif s == \")\"\
    \n            if stack.pop() == \"(\"\n                return \"Yes\"\n      \
    \      else\n                return \"No\"\n        else\n            stack.append(s)\n\
    \    end\n    return \"No\"\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. \nA prime number is a number that has exactly two positive\
    \ divisors: 1 and itself. \nA prime number is a number that has exactly three\
    \ positive divisors: 1, 2 and 3. \nA prime number is a number that has exactly\
    \ four positive divisors: 1, 2, 3 and 4.\nA prime number is a number that has\
    \ exactly five positive divisors: 1, 2, 3, 4 and\n5.\nA prime number is a number\
    \ that has exactly six positive divisors: 1, 2, 3, 4, 5 and 6.\nA prime number\
    \ is a number that has exactly seven positive divisors: 1, 2, 3, 4, 5, 6 and 7.\n\
    A prime number is a number that has exactly eight positive divisors: 1, 2, 3,\
    \ 4, 5, 6, 7 and 8.\nA prime number is a number that has exactly nine positive\
    \ divisors: 1, 2, 3, 4, 5, 6, 7, 8 and 9.\nA prime number is a number that has\
    \ exactly ten positive divisors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 and 11.\nA prime\
    \ number is a number that has exactly eleven positive divisors: 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11 and 12.\nA prime number is a number that has exactly twelve\
    \ positive divisors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 and 13.\nA prime number\
    \ is a number that has exactly thirteen positive divisors: 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12 and 13 and 14.\nA prime number is a number that has exactly\
    \ fourteen positive divisors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 and 13 and\
    \ 14 and 15.\nA prime number is a number that has exactly fifteen positive divisors:\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 and 13 and 14 and 15 and 16.\nA prime\
    \ number is a number that has exactly sixteen positive divisors: 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12 and 13 and 14", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.0>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.", "    stack = Vector{String}()\n\
    \    stack = push!(stack, \"\")\n    for i in lst\n        if i == \"(\"\n   \
    \         push!(stack, \"\")\n        elseif i == \")\"\n            if isempty(pop!(stack))\n\
    \                return \"No\"\n            else\n                push!(stack,\
    \ \"\")\n            end\n        else\n            push!(stack, i)\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ Your function should take in a number as an argument and return a boolean indicating\
    \ whether the number is prime or not.", "    stack = Stack()\n    stack.append(lst)\n\
    \    \n    while !isempty(stack)\n        str = pop!(stack)\n        if str ==\
    \ \"(\"\n            push!(stack, str)\n        elseif str == \")\"\n        \
    \    if isempty(stack)\n                return \"No\"\n            else\n    \
    \            pop!(stack)\n            end\n        end\n    end\n    return \"\
    Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a binary tree is balanced.", "   \
    \ \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n     \
    \       push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a new string where all occurrences of '(' and ')' have been replaced\
    \ by '-'.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n  \
    \          push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a number is prime. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings where each string is the concatenation\
    \ of all the strings in the original vector except the one that comes before the\
    \ one that comes after the other string. For example, if the input vector is [\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], then the output vector should\
    \ be [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\"].", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Vector{String}()\n    stack = push!(stack, \"\")\n    stack = push!(stack,\
    \ \"\")\n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may use the following formula to check if a number is prime:",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. You may use the\nfollowing algorithm:", "    \n    stack =\
    \ Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n          \
    \  push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a binary tree is balanced.", "    \n    stack\
    \ = Vector{String}()\n    \n    for s in lst\n        if s == \"(\"\n        \
    \    push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of parentheses in the string.", "    \n    if\
    \ length(lst) == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n \
    \       if lst[1] == \"(\" \n            return \"Yes\"\n        elseif lst[1]\
    \ == \")\" \n            return \"No\"\n        else \n            return \"No\"\
    \n    end", "    \n    stack = Vector{String}()\n    \n    for s in lst\n    \
    \    if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Vector{String}()\n    for s in lst\n      \
    \  if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n   \
    \         if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. You may\
    \ want to use the\nSieve of Eratosthenes algorithm to find primes. You may want\
    \ to look at\nthis post for a detailed explanation.", "    \n    if lst.length\
    \ == 0 \n        return \"No\"\n    \n    if lst.length == 1 \n        if lst[0]\
    \ == \"()\" \n            return \"Yes\"\n        else \n            return \"\
    No\"\n    end1 = lst[end-1]\n    if end1 == \"()\" \n        return \"Yes\"\n\
    \    end2 = lst[end-2]\n    if end2 == \"()\" \n        return \"Yes\"\n    end3\
    \ = lst[end-3]\n    if end3 == \"()\" \n        return \"Yes\"\n    end4 = lst[end-4]\n\
    \    if end4 == \"()\" \n        return \"Yes\"\n    end5 = lst[end-5]\n    if\
    \ end5 == \"()\" \n        return \"Yes\"\n    end6 = lst[end-6]\n    if end6\
    \ == \"()\" \n        return \"Yes\"\n    end7 = lst[end-7]\n    if end7 == \"\
    ()\" \n        return \"Yes\"\n    end8 = lst[end-8]\n    if end8 == \"()\" \n\
    \        return \"Yes\"\n    end9 = lst[end-9]\n    if end9 == \"()\" \n     \
    \   return \"Yes\"\n    end10 = lst[end-10]\n    if end10 == \"()\" \n       \
    \ return \"Yes\"\n    end11 = lst[end-11]\n    if end11 == \"()\" \n        return\
    \ \"Yes\"\n    end12 = lst[end-12]\n    if end12 == \"()\" \n        return \"\
    Yes\"\n    end13 = lst[end-13]\n    if end13 == \"()\" \n        return \"Yes\"\
    \n    end14 = lst[end-14]\n    if end14 == \"()\" \n        return \"Yes\"\n \
    \   end15 = lst[end-15]\n    if end15 == \"()\" \n        return \"Yes\"\n   \
    \ end16 = lst[end-16]\n    if end16 == \"()\" \n        return \"Yes\"\n    end17\
    \ = lst[end-17]\n    if end17 == \"()\" \n        return \"Yes\"\n    end18 =\
    \ lst[end-18]\n    if end18 == \"()\" \n        return \"Yes\"\n    end19 = lst[end-19]\n\
    \    if end19 == \"()\" \n        return \"Yes\"\n    end20 = lst[end-20]\n  \
    \  if end20 == \"()\" \n        return \"Yes\"\n    end21 = lst[end-21]\n    if\
    \ end21 == \"()\" \n        return \"Yes\"\n    end22 = lst[end-22]\n    if end22\
    \ == \"()\" \n        return \"Yes\"\n    end23 = lst[end-23]\n    if end23 ==\
    \ \"()\" \n        return \"Yes\"\n    end24 = lst[end-24]\n    if end24 == \"\
    ()\" \n        return \"Yes\"\n    end25 = lst[end-25]\n", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings. Each string in the input vector\
    \ is concatenated with each string in the output vector, except for the last string\
    \ in the output vector. For example, the input vector [\"a\", \"b\", \"c\"] should\
    \ produce the output vector [\"aa\", \"bb\", \"cc\"].", "    stack = Stack()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. You may want to use the\nfollowing formula to check whether\
    \ a number is prime:", "    \n    if length(lst) == 0 \n        return \"No\"\n\
    \    \n    if length(lst) == 1 \n        if lst[0] == \"()\" \n            return\
    \ \"Yes\"\n        else \n            return \"No\"\n    end\n    \n    if lst[1]\
    \ == \"()\" \n        if match_parens(lst[2:end-1]) \n            return \"Yes\"\
    \n        else \n            return \"No\"\n    end\n    \n    if lst[2] == \"\
    ()\" \n        if match_parens(lst[1:end-2]) \n            return \"Yes\"\n  \
    \      else \n            return \"No\"\n    end\n    \n    if lst[1] == \"()\"\
    \ and lst[2] == \"()\" \n        if match_parens(lst[3:end]) \n            return\
    \ \"Yes\"\n        else \n            return \"No\"\n    end\n    \n    if lst[1]\
    \ == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-1]) \n  \
    \          return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-2])\
    \ \n            return \"Yes\"\n        else \n            return \"No\"\n   \
    \ end\n    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-3])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-4])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-5])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-6])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-7])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-8])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-9])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"()\" and lst[2] == \"()\" \n        if match_parens(lst[3:end-10])\n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"", "    stack = Stack()\n    for s in lst\n        if\
    \ s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n       \
    \     if isempty(stack)\n                return \"No\"\n            else\n   \
    \             pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Stack()\n    \n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ Your function should take in a single number as an argument and return a boolean\
    \ value.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Vector{String}()\n    stack = push!(stack,\
    \ \"\")\n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a given\
    \ string is a valid phone number.", "    \n    stack = Vector{String}()\n    \n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    stack = Stack{String}()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take one argument, an integer number.\
    \ \nThe function should return 'Yes' if number is prime and 'No' otherwise.",
  "    \n    if lst.size == 0\n        return \"No\"\n    \n    if lst.size == 1\n\
    \        if lst[0] == \"()\"\n            return \"Yes\"\n        else\n     \
    \       return \"No\"\n    end", "    stack = Stack()\n    for s in lst\n    \
    \    if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a given string is a valid\
    \ mathematical expression. \nA valid mathematical expression is one that does\
    \ not contain any unbalanced parentheses.", "    stack = Vector{String}()\n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.", "    stack = Stack()\n    stack.append(lst[1])\n\
    \    for i in lst[2:end]\n        if i == \"(\"\n            stack.append(i)\n\
    \        elseif i == \")\"\n            if stack.pop() != i\n                return\
    \ \"No\"\n            else\n                return \"Yes\"\n        end\n    end\n\
    \    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nThe function should take in a number as an argument and return a boolean\
    \ value.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n   \
    \         push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nA number is prime if and only if it has only two factors:\
    \ 1 and itself. \nA number is not prime if and only if it has more than two factors.\
    \ \nA number is not prime if and only if it has any factor other than 1 or itself.",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is prime. Your function\
    \ should take one argument, an integer $n$, and return 'Yes' if $n$ is prime,\
    \ and 'No' otherwise.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s\
    \ == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n         \
    \   if isempty(stack)\n                return \"No\"\n            else\n     \
    \           pop!(stack)\n            end\n        end\n    end\n    \n    if isempty(stack)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>", "    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself. \nA prime number is not divisible by any other\
    \ number.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    stack = Vector{String}()\n    for s in lst\n      \
    \  if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n   \
    \         if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.4>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.4>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"", "    \n    if length(lst) == 0 \n     \
    \   return \"No\"\n    end\n    \n    if length(lst) == 1 \n        if lst[1]\
    \ == \"(\" \n            return \"Yes\"\n        elseif lst[1] == \")\" \n   \
    \         return \"No\"\n        else\n            return \"No\"\n        end\n\
    \    end\n    \n    if lst[1] == \"(\" \n        if match_parens(lst[2:end-1])\
    \ == \"Yes\" \n            return \"Yes\"\n        elseif match_parens(lst[2:end-1])\
    \ == \"No\" \n            return \"No\"\n        else\n            return \"No\"\
    \n        end\n    elseif lst[1] == \")\" \n        if match_parens(lst[2:end-1])\
    \ == \"Yes\" \n            return \"Yes\"\n        elseif match_parens(lst[2:end-1])\
    \ == \"No\" \n            return \"No\"\n        else\n            return \"No\"\
    \n        end\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\",\
    \ \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()", "    stack = Vector{String}()\n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime. Your function\
    \ should take one integer argument and return a boolean.", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime. Your function should take\
    \ in a number as an argument and return a boolean indicating whether the number\
    \ is prime or not. \nThe number should be an integer greater than or equal to\
    \ 1.", "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is a binary search tree. Assume that each node has a left and a right child,\
    \ and that each node also has a value and a parent pointer.", "    \n    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. \nA number is prime if and only if it is a whole number and has no\
    \ divisors other than 1 and itself.\nThe function should take one argument, an\
    \ integer number.\nThe function should return 'Yes' if a number is prime, and\
    \ 'No' otherwise.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(lst)\
    \ == 0 \n        return \"No\"\n    \n    if length(lst) == 1 \n        if lst[1]\
    \ == \"(\" \n            return \"Yes\"\n        else \n            return \"\
    No\"\n    end\n    \n    if lst[1] == \"(\" \n        if match_parens(lst[2:end-1])\
    \ \n            return \"Yes\"\n        else \n            return \"No\"\n   \
    \ end\n    \n    if lst[1] == \")\" \n        if match_parens(lst[2:end-1]) \n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"(\" \n        if match_parens(lst[2:end-1]) \n     \
    \       return \"Yes\"\n        else \n            return \"No\"\n    end\n  \
    \  \n    if lst[1] == \")\" \n        if match_parens(lst[2:end-1]) \n       \
    \     return \"Yes\"\n        else \n            return \"No\"\n    end\n    \n\
    \    if lst[1] == \"(\" \n        if match_parens(lst[2:end-1]) \n           \
    \ return \"Yes\"\n        else \n            return \"No\"\n    end\n    \n  \
    \  if lst[1] == \")\" \n        if match_parens(lst[2:end-1]) \n            return\
    \ \"Yes\"\n        else \n            return \"No\"\n    end\n    \n    if lst[1]\
    \ == \"(\" \n        if match_parens(lst[2:end-1]) \n            return \"Yes\"\
    \n        else \n            return \"No\"\n    end\n    \n    if lst[1] == \"\
    )\" \n        if match_parens(lst[2:end-1]) \n            return \"Yes\"\n   \
    \     else \n            return \"No\"\n    end\n    \n    if lst[1] == \"(\"\
    \ \n        if match_parens(lst[2:end-1]) \n            return \"Yes\"\n     \
    \   else \n            return \"No\"\n    end\n    \n    if lst[1] == \")\" \n\
    \        if match_parens(lst[2:end-1]) \n            return \"Yes\"\n        else\
    \ \n            return \"No\"\n    end\n    \n    if lst[1] == \"(\" \n      \
    \  if match_parens(lst[2:end-1]) \n            return \"Yes\"\n        else \n\
    \            return \"No\"\n    end\n    \n    if lst[1] == \")\" \n        if\
    \ match_parens(lst[2:end-1]) \n            return \"Yes\"\n        else \n   \
    \         return \"No\"\n    end\n    \n    if lst[1] == \"(\" \n        if match_parens(lst[2:end-1])\
    \ \n            return \"Yes\"\n        else \n            return \"No\"\n   \
    \ end\n    \n    if lst[1] == \")\" \n        if match_parens(lst[2:end-1]) \n\
    \            return \"Yes\"\n        else \n            return \"No\"\n    end\n\
    \    \n    if lst[1] == \"(\" \n        if match_parens(lst[2:end-1]) \n     \
    \       return \"Yes\"\n        else \n            return \"No\"\n    end\n  \
    \  \n    if lst[1] == \")\" \n        if match_parens(lst[2:end", "    stack =\
    \ Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string that has all its parentheses balanced.", "   \
    \ stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    stack = Vector{String}()\n  \
    \  \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n  \
    \      elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of booleans indicating whether each string is a valid parenthesis\
    \ expression. Valid expressions are those that contain balanced parentheses.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Stack()\n    \n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\", \"(\",\
    \ \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"", "    \n    stack = Stack()\n    for s in lst\n   \
    \     if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a binary tree is balanced.",
  "    \n    stack = Stack()\n    stack.append(lst[1])\n    \n    for i in lst[2:end]\n\
    \        if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\
    \n            if stack.length() == 0\n                return \"No\"\n        \
    \    else\n                stack.pop()\n            end\n        end\n    end\n\
    \    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree\
    \ is balanced.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a vector is a valid permutation of the integers 0 to n-1.", "    stack\
    \ = Stack()\n    for x in lst\n        if x == \"(\"\n            push!(stack,\
    \ x)\n        elseif x == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a given\
    \ string is a valid expression (i.e., it has valid parentheses).", "    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take one argument and return a boolean.",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\"", "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime. You may use any number as input.", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is a binary search tree. An example of a binary tree is shown below.",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.3>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\"", "    stack = Vector{String}()\n    for s\
    \ in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s\
    \ == \")\"\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        else\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ a string that has all its parentheses\nbalanced.", "    stack = Vector{String}()\n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string where all occurrences of \"(\" and \")\" have been replaced\
    \ by \"(\" and \")\".", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        else\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is even.",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and returns a vector of strings where each string\
    \ is a concatenation of the strings in the original vector except the one that\
    \ starts with \"(\". For example, if the input vector is [\"(hello)\", \"(world)\"\
    , \"(how)\", \"(are)\", \"(you)\"], then the output vector should be [\"helloworld\"\
    , \"howareyou\"].", "    stack = Stack()\n    stack.append(lst)\n    \n    while\
    \ !isempty(stack)\n        str = pop!(stack)\n        if str == \"(\"\n      \
    \      push!(stack, str)\n        elseif str == \")\"\n            if isempty(stack)\n\
    \                return \"Yes\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            return str\n        end\n    end\n\
    \    return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary tree\
    \ is balanced.", "    \n    stack = Stack()\n    for s in lst\n        if s ==\
    \ \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n            if\
    \ isempty(stack)\n                return \"No\"\n            else\n          \
    \      pop!(stack)\n            end\n        end\n    end\n    return \"Yes\"\n\
    end\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"", "    \n    if lst.size\
    \ == 0\n        return \"No\"\n    \n    stack = Vector{String}()\n    \n    for\
    \ s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        else\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  if isempty(stack)\n        return \"Yes\"\n    else\n        return \"No\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"\
    ()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()", "    \n    stack = Vector{String}()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     else\n            if isempty(stack)\n                return \"No\"\n   \
    \         else\n                pop!(stack)\n            end\n        end\n  \
    \  end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n      \
    \  return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"(\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\
    (\", \"(\", \"(\", \"(\"", "    \n    stack = Stack()\n    \n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    \n  \
    \  return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree is\
    \ balanced.", "    \n    stack = Vector{String}()\n    \n    for s in lst\n  \
    \      if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n\
    \            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a given string is\
    \ a valid phone number.\nA valid phone number has the following properties:",
  "    stack = Stack()\n    stack.append(lst[1])\n    for i in lst[2:end]\n      \
    \  if i == \"(\"\n            stack.append(i)\n        elseif i == \")\"\n   \
    \         if stack.length() == 0\n                return \"No\"\n            else\n\
    \                stack.pop()\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis doesn't seem\
    \ to work. `match_parens([\"()(\", \")\"])` returns `\"No\"` instead of `\"Yes\"\
    `.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| a tags=string,julia |>\n<code>", "    \n    stack = Vector{String}()\n    \n\
    \    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n      \
    \  elseif s == \")\"\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ else\n            if isempty(stack)\n                return \"No\"\n       \
    \     else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a binary tree\
    \ is balanced.", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\
    \n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    stack = Stack()\n    for s in lst\n       \
    \ if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n    \
    \        if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ Your function should take in a number as an argument and return a boolean indicating\
    \ whether the number is prime or not.", "    stack = Stack()\n    for s in lst\n\
    \        if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\
    \n            if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is prime or not. \nA number is prime if and only if it can\
    \ be written as the sum of two primes.\nFor example, 5 is prime because it is\
    \ equal to 2 + 3, and 7 is not prime because it can be written as 2 + 3 + 4.",
  "    \n    stack = Vector{String}()\n    \n    for s in lst\n        if s == \"\
    (\"\n            push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"])\n</cell>\n\
    <code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\",\
    \ \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n\
    </cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"()\", \"()\"\
    , \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\",\
    \ \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\", \"()\"\
    ])\n</cell>\n<code language=", "    \n    stack = Vector{String}()\n    \n   \
    \ for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. Your function should take in a number as input and output \"Yes\" or\
    \ \"No\".", "    \n    stack = Vector{String}()\n    \n    for s in lst\n    \
    \    if s == \"(\"\n            push!(stack, s)\n        elseif s == \")\"\n \
    \           if isempty(stack)\n                return \"No\"\n            else\n\
    \                pop!(stack)\n            end\n        else\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    \n    if isempty(stack)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a vector\
    \ is a valid permutation of another vector.", "    \n    if length(lst) == 0 \n\
    \        return \"No\"\n    \n    if length(lst) == 1 \n        if lst[1] == \"\
    (\" \n            return \"Yes\"\n        else \n            return \"No\"\n \
    \   end", "    stack = Stack()\n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.0>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.0>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a binary tree is a binary search tree.", "    \n    stack = Stack()\n\
    \    stack.append(lst[1])\n    \n    for elem in lst[2:end]\n        if elem ==\
    \ \"(\"\n            stack.append(elem)\n        elseif elem == \")\"\n      \
    \      if stack.pop() != elem\n                return \"No\"\n            else\n\
    \                stack.pop()\n            end\n        end\n    end\n    return\
    \ \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \"\
    )\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of occurrences of every character in the string. For example, the string \"\
    abcabc\" has 3 a's and 2 b's.", "    \n    stack = Stack()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime\
    \ or not. Your function should take in a number as its only argument, and return\
    \ 'Yes' if it is prime and 'No' otherwise.", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    stack = Vector{String}()\n    stack = push!(stack,\
    \ \"\")\n    stack = push!(stack, \"\")\n    for i in lst\n        if i == \"\
    (\"\n            push!(stack, \"\")\n        elseif i == \")\"\n            if\
    \ length(stack) == 2\n                return \"Yes\"\n            else\n     \
    \           pop!(stack)\n            end\n        else\n            push!(stack,\
    \ i)\n        end\n    end\n    return \"No\"\nend\n</code>\n<|/ a tags=string,julia,stack\
    \ |>\n<| c |>\nThank you for your answer! I understand your solution, but I do\
    \ not understand why you use \"push!(stack, \"\")\" twice. Why not just \"push!(stack,\
    \ i)\"?\n<|/ c |>\n<| c |>\nBecause I wanted to push an empty string to the stack\
    \ if I encounter a left parenthesis. But I wanted to pop it when I encounter a\
    \ right parenthesis. So I pushed two empty strings to the stack. One for the left\
    \ parenthesis and one for the right parenthesis.\n<|/ c |>\n<| c |>\nI see. Thank\
    \ you very much for your help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    stack\
    \ = Stack()\n    for s in lst\n        if s == \"(\"\n            push!(stack,\
    \ s)\n        elseif s == \")\"\n            if isempty(stack)\n             \
    \   return \"No\"\n            else\n                pop!(stack)\n           \
    \ end\n        else\n            if isempty(stack)\n                return \"\
    No\"\n            else\n                pop!(stack)\n            end\n       \
    \ end\n    end\n    return \"Yes\"\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\", \"\
    (\", \"(\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\", \")\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\"\
    , \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"", "    \n    stack = Stack()\n\
    \    \n    for s in lst\n        if s == \"(\"\n            push!(stack, s)\n\
    \        elseif s == \")\"\n            if isempty(stack)\n                return\
    \ \"No\"\n            else\n                pop!(stack)\n            end\n   \
    \     end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a new string where all occurrences of '(' and ')' have been replaced by '-'.",
  "    \n    stack = Stack()\n    \n    for s in lst\n        if s == \"(\"\n    \
    \        push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        else\n            if isempty(stack)\n              \
    \  return \"No\"\n            else\n                pop!(stack)\n            end\n\
    \        end\n    end\n    \n    if isempty(stack)\n        return \"Yes\"\n \
    \   else\n        return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    )\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a binary\
    \ tree is balanced.", "    \n    stack = Vector{String}()\n    \n    for s in\
    \ lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif s ==\
    \ \")\"\n            if isempty(stack)\n                return \"No\"\n      \
    \      else\n                pop!(stack)\n            end\n        end\n    end\n\
    \    \n    if isempty(stack)\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"()(\"\
    , \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"])\n\
    </cell>\n<text>\nExercise\nWrite a function that checks if a binary tree is balanced.",
  "    stack = Vector{String}()\n    for s in lst\n        if s == \"(\"\n       \
    \     push!(stack, s)\n        elseif s == \")\"\n            if isempty(stack)\n\
    \                return \"No\"\n            else\n                pop!(stack)\n\
    \            end\n        end\n    end\n    return \"Yes\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmatch_parens([\"()(\", \")\"])\n</cell>\n<code language=julia-1.5>\n\
    match_parens([\")\", \")\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a binary tree is balanced.", "    \n    stack = Stack()\n    \n  \
    \  for s in lst\n        if s == \"(\"\n            push!(stack, s)\n        elseif\
    \ s == \")\"\n            if isempty(stack)\n                return \"No\"\n \
    \           else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    \n    if isempty(stack)\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nmatch_parens([\"\
    ()(\", \")\"])\n</cell>\n<code language=julia-1.5>\nmatch_parens([\")\", \")\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number is prime.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
