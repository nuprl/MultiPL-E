language: jl
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            elseif isupper(key)\n \
    \               true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where the keys are all strings in lower case and the values are all\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n\
    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\"))\nDict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    )\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\"\
    \ => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> check_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgm097iz.jl:17\nin expression starting at /tmp/tmpxgm097iz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            elseif isupper(key)\n\
    \                return false\n            else\n                return true\n\
    \        end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the values in upper case. \nThe function should\
    \ return an empty dictionary if the given dictionary is empty.\nExamples:\n>>>\
    \ Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\
    >>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp36rt04h0.jl:17\nin expression starting at /tmp/tmp36rt04h0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    for key in keys(dict)\n\
    \        if islower(key)\n            return false\n        if isupper(key)\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    count_dict_keys(dict::Dict{String, String})\n    \n    Return the\
    \ number of keys in the given dictionary.\n    Examples:\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    3\n    >>> count_dict_keys(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>>\
    \ count_dict_keys(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpltzt0qg5.jl:17\nin expression starting at /tmp/tmpltzt0qg5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a new string with the first letter capitalized.\nExamples:\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"Banana\"\n\
    >>> capitalize(\"apple\")\n\"Apple\"\n>>> capitalize(\"banana\")\n\"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplq1xjyd5.jl:17\nin expression starting at /tmp/tmplq1xjyd5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}()\n        return true\n    end\n\
    \    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  count_dict_keys(dict::Dict{String, String})\n    \n    Count the number of\
    \ keys in a dictionary that are not strings.\n    \n    Examples:\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    2\n    >>> count_dict_keys(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    2\n    >>>\
    \ count_dict_keys(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9fngnfwp.jl:17\nin expression starting at /tmp/tmp9fngnfwp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3: Write a function that checks if\
    \ a dictionary is valid JSON. \nThe function should return false if the given\
    \ dictionary is not valid JSON. \nThe function should return true if the given\
    \ dictionary is valid JSON. \nThe function should return false if the given dictionary\
    \ is empty.\nExamples:\n>>> check_json_case(Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\"))\nfalse\n>>> check_json_case(Dict(\"a\" => \"apple\", \"A\" => \"\
    banana\", \"B\" => \"banana\"))\ntrue\n>>> check_json_case(Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_json_case(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_json_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1cxvvxut.jl:17\nin expression starting at /tmp/tmp1cxvvxut.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where all keys are strings in lower case and all keys are strings in upper case.\
    \ \nThe function should return an empty dictionary if the given dictionary is\
    \ empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"A\" => \"\
    banana\", \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\nDict()\n>>> check_dict_case(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp82j8wgqh.jl:17\nin expression starting at /tmp/tmp82j8wgqh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplkpf_7__.jl:17\nin expression starting at /tmp/tmplkpf_7__.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary and returns a new dictionary with the keys in lower case and the\
    \ keys in upper case.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdy8yv6wt.jl:17\nin expression starting at /tmp/tmpdy8yv6wt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in that string.\nExamples:\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog. \
    \ \")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\n\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\n\")\n\
    7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\n\\n\")\n\
    7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\n\\n\\n\"\
    )\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\n\\n\\\
    n\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\n\\\
    n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.  \\\
    n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\
    \  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  \\n\\n\\n\")\n7\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy do\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzdv9zs0j.jl:17\nin expression starting at /tmp/tmpzdv9zs0j.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            if isupper(key)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_dict_keys(dict::Dict{String,\
    \ String})\n    Count the number of keys in a dictionary\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbbpnplxo.jl:17\nin expression starting at /tmp/tmpbbpnplxo.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the keys in upper case if the keys are strings in both cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi7hqge_b.jl:17\nin expression starting at /tmp/tmpi7hqge_b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\")\nDict(\"NAME\" => \"John\", \"AGE\" => \"\
    36\", \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmputzrnutk.jl:17\nin expression starting at /tmp/tmputzrnutk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where all keys are strings in lower\
    \ case and all keys are strings in upper case.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2vovw4w4.jl:17\nin expression starting at /tmp/tmp2vovw4w4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ where all keys are strings in lower case and all values are strings in upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the given dictionary has keys that are not strings or values\
    \ that are not strings.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5nxa39p0.jl:17\nin expression starting at /tmp/tmp5nxa39p0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    end\n    \n    true_keys\
    \ = Set()\n    false_keys = Set()\n    for key in keys(dict)\n        if islower(key)\n\
    \            true_keys.add(key)\n        else\n            false_keys.add(key)\n\
    \        end\n    end\n    \n    return true_keys == false_keys\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd1e1rzvz.jl:17\nin expression starting at /tmp/tmpd1e1rzvz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 2: Write a function that checks\
    \ if a dictionary is empty or not. \nThe function should return true if the given\
    \ dictionary is empty and false otherwise.\nExamples:\n>>> check_dict_empty(Dict())\n\
    true\n>>> check_dict_empty(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n\
    >>> check_dict_empty(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\"))\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\nfalse\n>>> check_dict_empty(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ltq5c_h.jl:17\nin expression starting at /tmp/tmp8ltq5c_h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary where all keys are converted to\
    \ upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the keys are not strings. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty and if the keys are not strings.\
    \ \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgbbuh_e1.jl:17\nin expression starting at /tmp/tmpgbbuh_e1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns the number of\
    \ keys in the dictionary that are strings in lower case or strings in upper case.\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw269tkgb.jl:17\nin expression starting at /tmp/tmpw269tkgb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    true_keys = Set()\n\
    \    false_keys = Set()\n    for key in dict\n        if islower(key)\n      \
    \      true_keys.add(key)\n        elseif isupper(key)\n            false_keys.add(key)\n\
    \        else\n            return false\n    end\n    \n    return true_keys ==\
    \ false_keys\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case.\nExamples:\n>>> Dict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"APPLE\", 8\
    \ => \"BANANA\", \"a\" => \"APPLE\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"JOHN\", \"Age\" => \"36\"\
    , \"City\" => \"HOUSTON\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n</text>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvgpvm_gb.jl:17\nin expression starting at /tmp/tmpvgpvm_gb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            elseif isupper(key)\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a dictionary, return true if all keys are strings in lower \n    case\
    \ or all keys are strings in upper case, else return false.\n    The function\
    \ should return false is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpog6s0q9p.jl:17\nin expression starting at /tmp/tmpog6s0q9p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        end\n        if isupper(k)\n            return false\n        end\n \
    \   end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of uppercase and lowercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqhnpq0fg.jl:17\nin expression starting at /tmp/tmpqhnpq0fg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegixaxn6.jl:17\nin expression starting at /tmp/tmpegixaxn6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 9\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty. \nThe function should return a new dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6d6w7ev7.jl:17\nin expression starting at /tmp/tmp6d6w7ev7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict() \n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a dictionary and returns a new dictionary with\
    \ the keys in lower case and values in upper case.\nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the given dictionary\
    \ has keys that are not strings in lower case or upper case.\nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\"\
    , \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" =>\
    \ \"cherry\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\", \"c\" => \"cherry\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"cherry\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" =>\
    \ \"cherry\")\n>>> \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0849imyt.jl:17\nin expression starting at /tmp/tmp0849imyt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 7: check_dict_case\nWrite a\
    \ function that takes a dictionary and returns a new dictionary where all keys\
    \ are strings in lower case or all keys are strings in upper case, else return\
    \ an empty dictionary.\nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n\
    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\"))\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\nDict()\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\",\
    \ \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"\
    City\" => \"Houston\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkrgz9oue.jl:17\nin expression starting at /tmp/tmpkrgz9oue.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3: Write a function that checks if\
    \ a dictionary is empty or not. \nThe function should return true if the given\
    \ dictionary is empty, and false otherwise.\nExamples:\n>>> check_dict_empty(Dict())\n\
    true\n>>> check_dict_empty(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n\
    >>> check_dict_empty(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\"))\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"Name\" => \"John\",\
    \ \"Age\" => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvp3p1_jo.jl:17\nin expression starting at /tmp/tmpvp3p1_jo.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case.\nThe function should return a new dictionary if the given dictionary is\
    \ not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm87cbioq.jl:17\nin expression starting at /tmp/tmpm87cbioq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case.\nThe function should return a new dictionary if the given dictionary is\
    \ non-empty, and return an empty dictionary if the given dictionary is empty.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpglhn93w2.jl:17\nin expression starting at /tmp/tmpglhn93w2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are already in upper case. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpou_klpap.jl:17\nin expression starting at /tmp/tmpou_klpap.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if islower(k)\
    \ || isupper(k)\n                return true\n            else\n             \
    \   return false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where the keys are all strings in lower case and the values\
    \ are all strings in upper case. \nThe function should return an empty dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\" \")\nDict()\n>>> Dict(\" a \")\nDict()\n>>> Dict(\" a b \")\nDict(\"\
    a\" => \"b\", \"b\" => \"a\")\n>>> Dict(\" a b c \")\nDict(\"a\" => \"b\", \"\
    b\" => \"c\", \"c\" => \"\")\n>>> Dict(\" a b c d \")\nDict(\"a\" => \"b\", \"\
    b\" => \"c\", \"c\" => \"\", \"d\" => \"\")\n>>> Dict(\" a b c d e \")\nDict(\"\
    a\" => \"b\", \"b\" => \"c\", \"c\" => \"\", \"d\" => \"\", \"e\" => \"\")\n>>>\
    \ Dict(\" a b c d e f \")\nDict(\"a\" => \"b\", \"b\" => \"c\", \"c\" => \"\"\
    , \"d\" => \"\", \"e\" => \"\", \"f\" => \"\")\n>>> Dict(\" a b c d e f g \")\n\
    Dict(\"a\" => \"b\", \"b\" => \"c\", \"c\" => \"\", \"d\" => \"\", \"e\" => \"\
    \", \"f\" => \"\", \"g\" => \"\")\n>>> Dict(\" a b c d e f g h \")\nDict(\"a\"\
    \ \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx83qyvqa.jl:17\nin expression starting at /tmp/tmpx83qyvqa.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys are not in lower case or if\
    \ the values are not in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptmvxheuc.jl:17\nin expression starting at /tmp/tmptmvxheuc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key) || isupper(key)\n                return true\n           \
    \ else\n                return false\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 2: check_dict_case\nWrite a function that takes\
    \ a dictionary and checks if all keys are strings in lower case or all keys are\
    \ strings in upper case. Return false if the given dictionary is empty.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc384ew6j.jl:17\nin expression starting at /tmp/tmpc384ew6j.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys are already in upper case.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\"\
    \ => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaxlw_aq3.jl:17\nin expression starting at /tmp/tmpaxlw_aq3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict_empty(dict)\n        for (key, value) in dict\n    \
    \        if !is_dict_empty(key)\n                if is_dict_empty(value)\n   \
    \                 return false\n                else\n                    if !is_dict_empty(value)\n\
    \                        for key_value in value\n                            if\
    \ !is_dict_empty(key_value)\n                                if is_dict_empty(key_value)\n\
    \                                    return false\n                          \
    \      else\n                                    if !is_dict_empty(key_value)\n\
    \                                        if is_dict_empty(key_value)\n       \
    \                                     return false\n                         \
    \               else\n                                            return true\n\
    \                                    end\n                            end\n  \
    \                  end\n            end\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiz4t2h6n.jl:17\nin expression starting at /tmp/tmpiz4t2h6n.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegixaxn6.jl:17\nin expression starting at /tmp/tmpegixaxn6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1x7in5wg.jl:17\nin expression starting at /tmp/tmp1x7in5wg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(value)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\"\
    \"\"\n    count_dict_case(dict::Dict{String, String})\n    Count the number of\
    \ keys in dict that are in lower case or upper case.\n    Examples:\n    >>> count_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    2\n    >>> count_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    2\n    >>> count_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n    2\n    >>> count_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    3\n    >>>\
    \ count_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n    2\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm6pyxp9s.jl:17\nin expression starting at /tmp/tmpm6pyxp9s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\n    \n    for\
    \ k in keys(dict)\n        if islower(k)\n            return true\n        elseif\
    \ isupper(k)\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary as\
    \ an argument and returns a new dictionary where the keys are converted to upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the given dictionary is not of type Dict{String, String}. \n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"A\" => \"\
    apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\nDict(\"A\" => \"apple\", 8 => \"banana\", \"A\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"NAME\" => \"John\", \"AGE\" => \"36\", \"CITY\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeazq5hgk.jl:17\nin expression starting at /tmp/tmpeazq5hgk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty and all the keys are strings in lower case\
    \ or all the keys are strings in upper case. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty and all the keys are not strings\
    \ in lower case or all the keys are not strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is not empty and all\
    \ the keys are not strings in lower case and all the keys are not strings in upper\
    \ case. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", \"C\" => \"carrot\")\n\
    Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", \"C\" => \"\
    carrot\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    , \"d\" => \"dog\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"\
    carrot\", \"d\" => \"dog\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\", \"C\" => \"carrot\", \"D\" => \"dog\")\nDict(\"a\" => \"\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfvjzd_2r.jl:17\nin expression starting at /tmp/tmpfvjzd_2r.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where the keys are\
    \ all strings in lower case and the values are all strings in upper case. \nThe\
    \ function should return a new dictionary if the given dictionary is empty or\
    \ if the keys or values are already in upper case.\nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6r0m6i1o.jl:17\nin expression starting at /tmp/tmp6r0m6i1o.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 9\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are converted\
    \ to upper case.\nThe function should return a new dictionary if the given dictionary\
    \ is empty or if the given dictionary has keys that are not strings or if the\
    \ given dictionary has keys that are not strings in upper case.\nExamples:\n>>>\
    \ Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\
    >>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpde2ocst2.jl:17\nin expression starting at /tmp/tmpde2ocst2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where the keys are\
    \ all strings in lower case and the values are all strings in upper case.\nThe\
    \ function should return a new dictionary if the given dictionary is empty or\
    \ if the keys or values are already in upper case.\nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuw9rrx75.jl:17\nin expression starting at /tmp/tmpuw9rrx75.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplkpf_7__.jl:17\nin expression starting at /tmp/tmplkpf_7__.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegixaxn6.jl:17\nin expression starting at /tmp/tmpegixaxn6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy23ei4or.jl:17\nin expression starting at /tmp/tmpy23ei4or.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        else if isupper(k)\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a dictionary as an argument and\
    \ returns a new dictionary where the keys are all strings in lower case and the\
    \ values are all strings in upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys or values are already in upper\
    \ case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n</text>\n<cell>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2udhbr8q.jl:17\nin expression starting at /tmp/tmp2udhbr8q.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are converted\
    \ to upper case and all values are converted to lower case. \nThe function should\
    \ return a new dictionary if the given dictionary is not empty. \nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp27an3d6w.jl:17\nin expression starting at /tmp/tmp27an3d6w.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where the keys are all\
    \ strings in lower case and the values are all strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values are already in upper case. \nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx_mzi446.jl:17\nin expression starting at /tmp/tmpx_mzi446.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgrts1mi.jl:17\nin expression starting at /tmp/tmpxgrts1mi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that takes a dictionary and returns a new dictionary\
    \ where all keys are strings in lower case and all values are strings in upper\
    \ case. \nThe function should return an empty dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> \nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnpruoc3k.jl:17\nin expression starting at /tmp/tmpnpruoc3k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy23ei4or.jl:17\nin expression starting at /tmp/tmpy23ei4or.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    for k in keys(dict)\n        if islower(k)\n            return false\n\
    \        elseif isupper(k)\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns the number of keys in the dictionary\
    \ that are strings in lower case or strings in upper case.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcqwrxbzq.jl:17\nin expression starting at /tmp/tmpcqwrxbzq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" =>\
    \ \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2sor2hur.jl:17\nin expression starting at /tmp/tmp2sor2hur.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return true\n        elseif\
    \ isupper(k)\n            return true\n        else\n            return false\n\
    \        end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_8iy3n6d.jl:17\nin expression starting at /tmp/tmp_8iy3n6d.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the keys or values are\
    \ already in upper case.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\n>>> check_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjq9nfwy6.jl:17\nin expression starting at /tmp/tmpjq9nfwy6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all keys are strings in upper case.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2zy96u9p.jl:17\nin expression starting at /tmp/tmp2zy96u9p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            elseif isupper(key)\n \
    \               true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a dictionary, return true if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return false.\n    The function\
    \ should return false is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0isv3c6y.jl:17\nin expression starting at /tmp/tmp0isv3c6y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            if isupper(key)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case.\nThe function\
    \ should return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n</text>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpih5x7odq.jl:17\nin expression starting at /tmp/tmpih5x7odq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            elseif isupper(key)\n \
    \               true\n            else\n                false\n            end\n\
    \        end\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the values in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the given\
    \ dictionary has keys in upper case and values in lower case. \nThe function should\
    \ return a new dictionary if the given dictionary has keys in lower case and values\
    \ in upper case. \nThe function should return a new dictionary if the given dictionary\
    \ has keys in upper case and values in lower case. \nExamples:\n>>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\"\
    , \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n</text>\n<cell>\n\"\"\"\n\
    \    Given a dictionary, return a new dictionary with the keys in lower \n   \
    \ case and the values in upper case. \n    The function should return a new dictionary\
    \ if the given dictionary is empty or if the given dictionary has keys in upper\
    \ case and values in lower case. \n    The function should return a new dictionary\
    \ if the given dictionary has keys in lower case and values in upper case. \n\
    \    The function should return a new dictionary if the given dictionary has keys\
    \ in upper case and values in lower case. \n    Examples:\n    >>> Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")\n    Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\n    >>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n    Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n  \
    \  >>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe7vfjb3j.jl:17\nin expression starting at /tmp/tmpe7vfjb3j.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return true\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return false\n        if isupper(k)\n    \
    \        return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in that string.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphwsvsl_0.jl:17\nin expression starting at /tmp/tmphwsvsl_0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string. \nExamples:\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\"\
    )\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"\
    banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n\
    >>> count_chars(\"apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"\
    apple\")\n5\n>>> count_chars(\"banana\")\n6\n>>> count_chars(\"apple\")\n5\n>>>\
    \ count_char\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpka7wdzm1.jl:17\nin expression starting at /tmp/tmpka7wdzm1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgrts1mi.jl:17\nin expression starting at /tmp/tmpxgrts1mi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(value) || !is_string(key)\n                return false\n  \
    \      end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a dictionary, return true if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return false.\n    The function\
    \ should return false is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9xbz2yj7.jl:17\nin expression starting at /tmp/tmp9xbz2yj7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2: Write a function that takes a\
    \ dictionary and returns a new dictionary with the keys in lower case and the\
    \ values as upper case. \nThe function should return a new dictionary if the given\
    \ dictionary is not empty. \nThe function should return a new dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> dict_to_upper_case(Dict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\"\
    )\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\"))\nDict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    )\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"\
    apple\"))\nDict(\"a\" => \"APPLE\", 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>>\
    \ dict_to_upper_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\"))\nDict(\"name\" => \"JOHN\", \"age\" => \"36\", \"city\" => \"\
    HOUSTON\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzxbu498t.jl:17\nin expression starting at /tmp/tmpzxbu498t.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\n    \n    true\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that checks if a dictionary\
    \ is empty or not. \nThe function should return true if the given dictionary is\
    \ empty and false otherwise.\nExamples:\n>>> check_dict_empty(Dict())\ntrue\n\
    >>> check_dict_empty(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\nfalse\n>>>\
    \ check_dict_empty(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\ntrue\n>>> check_dict_empty(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\"))\ntrue\n>>> check_dict_empty(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nfalse\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkepoypvt.jl:17\nin expression starting at /tmp/tmpkepoypvt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict_empty(dict)\n        for (key, value) in dict\n    \
    \        if !is_str_lower(key)\n                return false\n            if !is_str_upper(key)\n\
    \                return false\n        end\n        return true\n    else\n  \
    \      return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    \    dict_to_str(dict::Dict{String, String})\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfojf8nce.jl:17\nin expression starting at /tmp/tmpfojf8nce.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict_empty(dict)\n        for (key, value) in dict\n    \
    \        if !is_dict_empty(key)\n                if !is_dict_empty(value)\n  \
    \                  if is_dict_empty(value)\n                        return false\n\
    \                    else\n                        return true\n             \
    \   else\n                    return false\n            else\n               \
    \ return false\n        end\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a dictionary and returns the number\
    \ of keys that are strings in lower case or upper case. \nThe function should\
    \ return 0 if the given dictionary is empty.\nExamples:\n>>> count_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n2\n>>> count_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n3\n>>> count_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n0\n>>> count_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n3\n>>> count_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n1\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgyy7wts3.jl:17\nin expression starting at /tmp/tmpgyy7wts3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwjy4rf9h.jl:17\nin expression starting at /tmp/tmpwjy4rf9h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty()\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplkpf_7__.jl:17\nin expression starting at /tmp/tmplkpf_7__.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1x7in5wg.jl:17\nin expression starting at /tmp/tmp1x7in5wg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a dictionary is valid JSON. Valid JSON must have keys and values that are\
    \ strings in double quotes. Valid JSON cannot have keys or values that are not\
    \ strings in double quotes.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp45sa55ko.jl:17\nin expression starting at /tmp/tmp45sa55ko.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1x7in5wg.jl:17\nin expression starting at /tmp/tmp1x7in5wg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3: Write a function that checks\
    \ if a dictionary is valid JSON\nWrite a function that checks if a dictionary\
    \ is valid JSON. Valid JSON consists of only strings, numbers, booleans, arrays,\
    \ and dictionaries. \nThe function should return true if the dictionary is valid\
    \ JSON, else return false.\nExamples:\n>>> check_json_valid(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\ntrue\n>>> check_json_valid(Dict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\"))\nfalse\n>>> check_json_valid(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_json_valid(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_json_valid(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\ntrue\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa7ag3goa.jl:17\nin expression starting at /tmp/tmpa7ag3goa.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if\
    \ a dictionary contains only strings of length greater than or equal to 3.\nExamples:\n\
    >>> check_dict_length(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"\
    cherry\"))\ntrue\n>>> check_dict_length(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"cherry\", \"d\" => \"dog\"))\nfalse\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\"))\ntrue\n>>> check_dict_length(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\", \"e\" => \"elephant\"\
    , \"f\" => \"fish\"))\nfalse\n>>> check_dict_length(Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\", \"e\" => \"elephant\"\
    , \"f\" => \"fish\", \"g\" => \"goat\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\", \"h\" => \"horse\"\
    ))\nfalse\n>>> check_dict_length(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"cherry\", \"d\" => \"dog\", \"e\" => \"elephant\", \"f\" => \"fish\"\
    , \"g\" => \"goat\", \"h\" => \"horse\", \"i\" => \"indian\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\", \"h\" => \"horse\"\
    , \"i\" => \"indian\", \"j\" => \"japanese\"))\nfalse\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"elephant\", \"f\" => \"fish\", \"g\" => \"goat\", \"h\" => \"horse\"\
    , \"i\" => \"indian\", \"j\" => \"japanese\", \"k\" => \"kiwi\"))\ntrue\n>>> check_dict_length(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"cherry\", \"d\" => \"dog\",\
    \ \"e\" => \"ele\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps7wdb8t3.jl:17\nin expression starting at /tmp/tmps7wdb8t3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            if isupper(key)\n\
    \                return false\n        end\n        return true\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvye6s80h.jl:17\nin expression starting at /tmp/tmpvye6s80h.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where the keys are strings\
    \ in lower case and the values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty. \nExamples:\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"A\" => \"APPLE\", \"B\" => \"\
    BANANA\")\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\nDict(\"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"A\" => \"APPLE\"\
    , 8 => \"BANANA\", \"A\" => \"APPLE\")\n>>> dict_to_upper_case(Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"NAME\" => \"\
    JOHN\", \"AGE\" => \"36\", \"CITY\" => \"HOUSTON\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqqrhns9o.jl:17\nin expression starting at /tmp/tmpqqrhns9o.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the given dictionary\
    \ has keys that are not strings or values that are not strings.\nExamples:\n>>>\
    \ Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n\
    >>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_bkvvcwf.jl:17\nin expression starting at /tmp/tmp_bkvvcwf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy23ei4or.jl:17\nin expression starting at /tmp/tmpy23ei4or.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                false\n            elseif isupper(key)\n\
    \                false\n            else\n                true\n            end\n\
    \        end\n    else\n        true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary where the keys are strings in lower case and the values are strings\
    \ in upper case. \nThe function should return an empty dictionary if the given\
    \ dictionary is empty.\nExamples:\n>>> dict_to_upper_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> dict_to_upper_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"APPLE\"\
    , 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> dict_to_upper_case(Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"Name\" => \"\
    JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\")\n>>> dict_to_upper_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvc8hddvq.jl:17\nin expression starting at /tmp/tmpvc8hddvq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy23ei4or.jl:17\nin expression starting at /tmp/tmpy23ei4or.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 7: check_dict_case\nWrite a\
    \ function that takes a dictionary and returns a new dictionary with the keys\
    \ in lower case and values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys are not in lower case or not\
    \ in upper case.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\"))\nDict(\"a\" => \"APPLE\", \"b\" => \"BANANA\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nDict(\"a\" => \"\
    APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\")\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nDict(\"a\" => \"APPLE\"\
    , 8 => \"BANANA\", \"a\" => \"APPLE\")\n>>> check_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nDict(\"name\" => \"JOHN\"\
    , \"age\" => \"36\", \"city\" => \"HOUSTON\")\n>>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpme8y4hh1.jl:17\nin expression starting at /tmp/tmpme8y4hh1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty. \nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzdiz8wtg.jl:17\nin expression starting at /tmp/tmpzdiz8wtg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if !is_string(k)\
    \ || !is_string(v)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary with the\
    \ keys in lower case and the values in upper case. \nThe function should return\
    \ an empty dictionary if the given dictionary is empty.\nExamples:\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\"\
    , \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" a \")\nDict()\n>>> Dict(\" a\
    \ b \")\nDict()\n>>> Dict(\" a b c \")\nDict()\n>>> Dict(\" a b c d \")\nDict()\n\
    >>> Dict(\" a b c d e \")\nDict()\n>>> Dict(\" a b c d e f \")\nDict()\n>>> Dict(\"\
    \ a b c d e f g \")\nDict()\n>>> Dict(\" a b c d e f g h \")\nDict()\n>>> Dict(\"\
    \ a b c d e f g h i \")\nDict()\n>>> Dict(\" a b c d e f g h i j \")\nDict()\n\
    >>> Dict(\" a b c d e f g h i j k \")\nDict()\n>>> Dict(\" a b c d e f g h i j\
    \ k l \")\nDict()\n>>> Dict(\" a b c d e f g h i j k l m \")\nDict()\n>>> Dict(\"\
    \ a b c d e f g h i j k l m n \")\nDict()\n>>> Dict(\" a b c d e f g \nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj8s7gm4j.jl:17\nin expression starting at /tmp/tmpj8s7gm4j.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7: check_dict_case\nWrite a function\
    \ that takes a dictionary and returns a new dictionary where all keys are strings\
    \ in lower case or all keys are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty.\nExamples:\n>>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\nDict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"\
    B\" => \"banana\"))\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\"))\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\"))\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\n>>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    ))\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl6tow85b.jl:17\nin expression starting at /tmp/tmpl6tow85b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the values in upper case.\nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are strings.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\",\
    \ \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" =>\
    \ \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\")\n\
    Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"\
    dog\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    , \"d\" => \"dog\", \"e\" => \"egg\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"carrot\", \"d\" => \"dog\", \"e\" => \"egg\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\", \"e\"\
    \ => \"egg\", \"f\" => \"fish\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"carrot\", \"d\" => \"dog\", \"e\" => \"egg\", \"f\" => \"fish\")\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" =>\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7i89v9ov.jl:17\nin expression starting at /tmp/tmp7i89v9ov.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7: Write a function that takes a\
    \ dictionary and returns a new dictionary with the keys in lower case and the\
    \ keys in upper case.\nThe function should return a new dictionary if the given\
    \ dictionary is not empty. Otherwise it should return an empty dictionary.\nExamples:\n\
    >>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"name\" => \"John\"\
    , \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>>\
    \ Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \"\
    )\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\n\
    Dict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n\
    >>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>>\
    \ Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \"\
    )\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\n\
    Dict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n\
    >>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\" \")\nDict()\n>>>\
    \ Dict(\" \")\nDict()\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp90190sw6.jl:17\nin expression starting at /tmp/tmp90190sw6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_dict(dict)\n        return false\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy23ei4or.jl:17\nin expression starting at /tmp/tmpy23ei4or.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary with the keys in lower\
    \ case and the keys in upper case if the keys are both strings. If the given dictionary\
    \ is empty, return an empty dictionary.\nExamples:\n>>> Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"name\" => \"John\", \"age\" => \"36\", \"city\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\"\
    \ => \"NC\", \"zip\" => \"12345\")\n>>> Dict()\nDict()\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd2zdfw5s.jl:17\nin expression starting at /tmp/tmpd2zdfw5s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary and returns a new dictionary where all keys are converted to upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    A\" => \"apple\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"apple\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    A\" => \"apple\", 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"NAME\" => \"John\", \"AGE\" => \"36\"\
    , \"CITY\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_8d7mdup.jl:17\nin expression starting at /tmp/tmp_8d7mdup.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the dictionary\
    \ contains any non-string values.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp01tum359.jl:17\nin expression starting at /tmp/tmp01tum359.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ dictionary and returns a new dictionary where all keys are strings in lower\
    \ case and all values are strings in upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is empty or if the keys or values are\
    \ already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"\
    banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\"\
    \ => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" =>\
    \ \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"\
    a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", \"a\"\
    \ => \"apple\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\"\
    \ => \"apple\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"a\" => \"apple\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\", \"a\" => \"apple\", \"a\" => \"apple\")\n\
    Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\", \"a\" => \"\
    apple\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"a\" => \"apple\", \"a\" => \"apple\", \"a\" => \"apple\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\", \"a\" => \"apple\", \"a\" => \"apple\", \"a\" =>\
    \ \"apple\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"ban\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphbtbbmwa.jl:17\nin expression starting at /tmp/tmphbtbbmwa.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegixaxn6.jl:17\nin expression starting at /tmp/tmpegixaxn6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpegixaxn6.jl:17\nin expression starting at /tmp/tmpegixaxn6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxgrts1mi.jl:17\nin expression starting at /tmp/tmpxgrts1mi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(value) || !is_string(key)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where the keys are all strings in lower case and the values\
    \ are all strings in upper case. \nThe function should return an empty dictionary\
    \ if the given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , 8 => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n</text>\n<cell>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1impbfq1.jl:17\nin expression starting at /tmp/tmp1impbfq1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2: Write a function that takes a\
    \ dictionary and returns a new dictionary where all keys are converted to upper\
    \ case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty. \nThe function should return a new dictionary if the given dictionary\
    \ is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\")\n>>> Dict(\"Name\" => \"John\", \"Age\" =>\
    \ \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfl5i7t8t.jl:17\nin expression starting at /tmp/tmpfl5i7t8t.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt8kovhky.jl:17\nin expression starting at /tmp/tmpt8kovhky.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ dictionary as an argument and returns a new dictionary where all keys are strings\
    \ in lower case and all values are strings in upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is empty or if the keys or values\
    \ are already in upper case.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n\
    Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" =>\
    \ \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvve35wxc.jl:17\nin expression starting at /tmp/tmpvve35wxc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return false\n        end\n\
    \        if isupper(k)\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in that string. \nExamples:\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"\
    hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>> count_chars(\"hello\")\n5\n>>>\
    \ count_chars(\"hello\")\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr7_7_han.jl:17\nin expression starting at /tmp/tmpr7_7_han.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(value) || !is_string(key)\n                return false\n  \
    \      end\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<text>\nExercise 3: Write a function that takes a dictionary and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is empty. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" =>\
    \ \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"a\" => \"apple\")\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\"\
    \ => \"apple\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"b\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaa7gv5i6.jl:17\nin expression starting at /tmp/tmpaa7gv5i6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                true\n            else\n                false\n\
    \        end\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a dictionary, return true if all keys are strings in lower \n\
    \    case or all keys are strings in upper case, else return false.\n    The function\
    \ should return false is the given dictionary is empty.\n    Examples:\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n \
    \   >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqt1ue71z.jl:17\nin expression starting at /tmp/tmpqt1ue71z.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty() \n        return false\n    \n    for k in keys(dict)\n\
    \        if islower(k)\n            return true\n        else if isupper(k)\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_keys(dict::Dict{String, String})\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn26_gesn.jl:17\nin expression starting at /tmp/tmpn26_gesn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if islower(k)\n\
    \                return false\n            if isupper(k)\n                return\
    \ false\n        end\n        return true\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a dictionary and returns a new\
    \ dictionary where all keys are strings in lower case and all keys are strings\
    \ in upper case.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmifoxt1t.jl:17\nin expression starting at /tmp/tmpmifoxt1t.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if !is_string(k)\n\
    \                return false\n        end\n        return true\n    else\n  \
    \      return false\n    end\nend\n</cell>\n<text>\nExercise 7: check_dict_case\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwkyh5j6n.jl:17\nin expression starting at /tmp/tmpwkyh5j6n.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if islower(k)\n\
    \                return false\n            elseif isupper(k)\n               \
    \ return false\n            end\n        end\n        return true\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_49atarv.jl:17\nin expression starting at /tmp/tmp_49atarv.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if islower(key)\n                return false\n            elseif isupper(key)\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a dictionary as an argument and returns a new dictionary where the\
    \ keys are strings in lower case and the values are strings in upper case.\nThe\
    \ function should return an empty dictionary if the given dictionary is empty.\n\
    Examples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"\
    apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    )\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\nDict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n>>> Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\")\nDict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\"\
    )\n>>> Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"A\" => \"ban\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6zs9wa56.jl:17\nin expression starting at /tmp/tmp6zs9wa56.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo9cr2yie.jl:17\nin expression starting at /tmp/tmpo9cr2yie.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict{String, String}() \n        return true\n    \n\
    \    for k in keys(dict) \n        if islower(k) \n            return true\n \
    \       else if isupper(k) \n            return true\n        else \n        \
    \    return false\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a dictionary as an argument and returns a new dictionary\
    \ with the keys in lower case and the keys in upper case if the dictionary is\
    \ empty. \nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" => \"banana\")\nDict(\"\
    a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" =>\
    \ \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\")\n\
    >>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")\nDict(\"\
    name\" => \"John\", \"age\" => \"36\", \"city\" => \"Houston\")\n>>> Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\nDict(\"state\" => \"NC\", \"zip\" => \"12345\"\
    )\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\" \")\nDict()\n>>> Dict(\"\
    \ a \")\nDict()\n>>> Dict(\" a b \")\nDict()\n>>> Dict(\" a b c \")\nDict()\n\
    >>> Dict(\" a b c d \")\nDict()\n>>> Dict(\" a b c d e \")\nDict()\n>>> Dict(\"\
    \ a b c d e f \")\nDict()\n>>> Dict(\" a b c d e f g \")\nDict()\n>>> Dict(\"\
    \ a b c d e f g h \")\nDict()\n>>> Dict(\" a b c d e f g h i \")\nDict()\n>>>\
    \ Dict(\" a b c d e f g h i j \")\nDict()\n>>> Dict(\" a b c d e f g h i j k \"\
    )\nDict()\n>>> Dict(\" a b c d e f g h i j k l \")\nDict()\n>>> Dict(\" a b c\
    \ d e f g h i j k l m \")\nDict()\n>>> Dict(\" a b c d e f g h i j k l m n \"\
    )\nDict()\n>>> Dict(\" a \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm9ttwnbj.jl:17\nin expression starting at /tmp/tmpm9ttwnbj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a dictionary, return true if all keys are strings in lower \n    case or all\
    \ keys are strings in upper case, else return false.\n    The function should\
    \ return false is the given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp53xkchjn.jl:17\nin expression starting at /tmp/tmp53xkchjn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 10\nWrite a function that takes a\
    \ dictionary as an argument and returns the number of keys in the dictionary that\
    \ are strings in lower case or strings in upper case. \nThe function should return\
    \ -1 if the dictionary is empty.\nExamples:\n>>> count_dict_case(Dict(\"a\" =>\
    \ \"apple\", \"b\" => \"banana\"))\n2\n>>> count_dict_case(Dict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\"))\n3\n>>> count_dict_case(Dict(\"a\"\
    \ => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\n-1\n>>> count_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n-1\n>>> count_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n3\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk8gomob1.jl:17\nin expression starting at /tmp/tmpk8gomob1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo9cr2yie.jl:17\nin expression starting at /tmp/tmpo9cr2yie.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a new string with all \nnon-alphanumeric characters replaced\
    \ by underscores. \nExamples:\n>>> replace_non_alphanumeric(\"hello\")\n\"hello\"\
    \n>>> replace_non_alphanumeric(\"hello123\")\n\"hello_123\"\n>>> replace_non_alphanumeric(\"\
    hello!@#$%^&*()\")\n\"hello_\"\n>>> replace_non_alphanumeric(\"hello_123\")\n\"\
    hello_123\"\n>>> replace_non_alphanumeric(\"hello_123_\")\n\"hello_123__\"\n>>>\
    \ replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"\
    hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\"\
    )\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"\
    hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\
    \n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>>\
    \ replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"\
    hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\"\
    )\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"\
    hello_123__\"\n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\
    \n>>> replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>>\
    \ replace_non_alphanumeric(\"hello_123_!@#$%^&*()\")\n\"hello_123__\"\n>>> replace_non_alphanumeric(\"\
    hello_123_!@#$%^&\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0jqnbyz8.jl:17\nin expression starting at /tmp/tmp0jqnbyz8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict.is_empty\n        return false\n    end\n    \n    for k\
    \ in keys(dict)\n        if islower(k)\n            return true\n        end\n\
    \        if isupper(k)\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nExamples:\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n5\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n5\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  A\")\n5\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  A \")\n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  A .\")\n5\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A . \")\n5\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A . . \")\n5\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.  A . . . \")\n5\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog.  A . . . . \")\n5\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.  A . . . . . \")\n5\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  A . . . . . . \")\n5\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  A . . . . . . . \")\n5\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.  A . . . . . . . . . \")\n5\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.  A . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxtacqkin.jl:17\nin expression starting at /tmp/tmpxtacqkin.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (k,v) in dict\n            if !is_string(k)\
    \ || !is_string(v)\n                return false\n        end\n        return\
    \ true\n    end\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprw5w5cmc.jl:17\nin expression starting at /tmp/tmprw5w5cmc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if dict == Dict()\n        return false\n    \n    true_keys = Set()\n\
    \    false_keys = Set()\n    for key in dict\n        if islower(key)\n      \
    \      true_keys.add(key)\n        else\n            false_keys.add(key)\n   \
    \ end\n    \n    return true_keys == false_keys\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeqdguw7p.jl:17\nin expression starting at /tmp/tmpeqdguw7p.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5tjjfh4b.jl:17\nin expression starting at /tmp/tmp5tjjfh4b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a dictionary,\
    \ return true if all keys are strings in lower \n    case or all keys are strings\
    \ in upper case, else return false.\n    The function should return false is the\
    \ given dictionary is empty.\n    Examples:\n    >>> check_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\"))\n    true\n    >>> check_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\n    false\n    >>>\
    \ check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"\
    ))\n    false\n    >>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\"))\n    false\n    >>> check_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\"))\n    true\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvc3l9us3.jl:17\nin expression starting at /tmp/tmpvc3l9us3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8y5vfkl1.jl:17\nin expression starting at /tmp/tmp8y5vfkl1.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    if !is_empty(dict)\n        for (key, value) in dict\n         \
    \   if !is_string(key) || !is_string(value)\n                return false\n  \
    \      end\n        return true\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all values are\
    \ strings in upper case. \nThe function should return an empty dictionary if the\
    \ given dictionary is empty.\nExamples:\n>>> Dict(\"a\" => \"apple\", \"b\" =>\
    \ \"banana\")\nDict(\"a\" => \"apple\", \"b\" => \"banana\")\n>>> Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")\nDict(\"a\" => \"apple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")\n>>> Dict(\"a\" => \"apple\", 8 =>\
    \ \"banana\", \"a\" => \"apple\")\nDict(\"a\" => \"apple\", 8 => \"banana\", \"\
    a\" => \"apple\")\n>>> Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\"\
    \ => \"Houston\")\nDict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"\
    Houston\")\n>>> Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")\nDict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\")\n>>> Dict()\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\
    \")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\n\
    Dict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n\
    >>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict()\n>>> Dict(\"\")\nDict\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiyzy4azg.jl:17\nin expression starting at /tmp/tmpiyzy4azg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    true\nend\n</cell>\n<text>\nExercise 3: Write a function that checks if\
    \ a dictionary is empty. \nThe function should return true if the given dictionary\
    \ is empty and false otherwise. \nThe function should return false if the given\
    \ dictionary is non-empty.\nExamples:\n>>> check_dict_empty(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\"))\ntrue\n>>> check_dict_empty(Dict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_dict_empty(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\"))\ntrue\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjhp5xw9w.jl:17\nin expression starting at /tmp/tmpjhp5xw9w.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a dictionary, return true if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return false.\n\
    \    The function should return false is the given dictionary is empty.\n    Examples:\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n    true\n\
    \    >>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" =>\
    \ \"banana\"))\n    false\n    >>> check_dict_case(Dict(\"a\" => \"apple\", 8\
    \ => \"banana\", \"a\" => \"apple\"))\n    false\n    >>> check_dict_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\n    false\n\
    \    >>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\n  \
    \  true\n    \"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\
    \ \n    \n    true\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a string and returns a new string with all the characters in lower case and\
    \ all the characters in upper case. \nExamples:\n>>> lowercase_and_uppercase(\"\
    Hello World\")\n\"hello world\"\n>>> lowercase_and_uppercase(\"Hello World!\"\
    )\n\"Hello World!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\
    \n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase(\"HelloWorld!\")\n\"HelloWorld!\"\n>>> lowercase_and_uppercase(\"\
    HelloWorld\")\n\"helloworld\"\n>>> lowercase_and_uppercase(\"HelloWorld!\")\n\"\
    HelloWorld!\"\n>>> lowercase_and_uppercase(\"HelloWorld\")\n\"helloworld\"\n>>>\
    \ lowercase_and_uppercase\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpay0qh8_4.jl:17\nin expression starting at /tmp/tmpay0qh8_4.jl:17\n"
  stdout: ''
