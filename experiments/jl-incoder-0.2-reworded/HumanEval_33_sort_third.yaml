name: HumanEval_33_sort_third
language: jl
prompt: "\"\"\"This function takes a vector l and returns a vector l' such that\n\
  \    l' is identical to l in the indicies that are not divisible by three, while\
  \ its values at the indicies that are divisible by three are equal\n    to the values\
  \ of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n\
  \    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9,\
  \ 5]\n    \"\"\"\nfunction sort_third(l::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_third;\n\t@test(candidate([5,\
  \ 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\n\t@test(candidate([5, 8, 3, 4, 6,\
  \ 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\t@test(candidate([5, 6, 9, 4, 8, 3, 2]) ==\
  \ [2, 6, 9, 4, 8, 3, 5])\n\t@test(candidate([5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6,\
  \ 3, 4, 8, 9, 5, 1])\nend\n"
completions: ["    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3\
    \ == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n    \n\
    \    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 ==\
    \ 0)]\n    \n    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ % 3 == 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector l and returns a vector l' such\
    \ that\n    l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n   \
    \ to the values of the corresponding indicies of l, but sorted in descending order.\n\
    \    >>> sort_third_desc([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n \
    \   \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 == 1)]\n    \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector l and returns a vector l' such that\n   \
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted in descending order.\n\
    \    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_third([5, 6, 3, 4,\
    \ 8, 9, 2])\n    [8, 9, 5, 6, 3, 4]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l\
    \ = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    return l\nend", "    \n    l = sort(l)\n    \n    l = l[findall(l .%\
    \ 3 == 0)]\n    \n    return l\nend", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    third\
    \ = l[div(length(l)-1,3)+1]\n    \n    l = l[div(length(l)-1,3):end]\n    \n \
    \   l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n \
    \   \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n\
    \    \n    l = l[div(length(l)-1,3):end]\n    \n    l = l[div(length(l)-1,3):end]\n",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    third = l[3:end]\n    \n    third = third[sortperm(third)]\n    \n\
    \    third = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n  \
    \  third = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n    third\
    \ = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n    third =\
    \ third[3:end]\n    \n    third = third[sortperm(third)]\n    \n    third = third[3:end]\n\
    \    \n    third = third[sortperm(third)]\n    \n    third = third[3:end]\n  \
    \  \n    third = third[sortperm(third)]\n    \n    third = third[3:end]\n    \n\
    \    third = third[sortperm(third)]\n    \n    third = third[3:end]\n    \n  \
    \  third = third[sortperm(third)]\n    \n    third = third[3:end]\n    \n    third\
    \ = third[sortperm(third)]\n    \n    third = third[3:end]\n    \n    third =\
    \ third[sortperm(third)]\n    \n    third = third[3:end]\n    \n    third = third[sortperm(third)]\n\
    \    \n    third = third[3:end]\n    \n    third = third[sortperm(third)]\n  \
    \  \n    third = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n\
    \    third = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n  \
    \  third = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n    third\
    \ = third[3:end]\n    \n    third = third[sortperm(third)]\n    \n    third =\
    \ third[3:end]\n    \n    third = third[sortperm(third)]\n    \n    third = third[3:end]\n\
    \    \n    third = third[sortperm(third)]\n    \n    third = third[3:end]\n  \
    \  \n    third = third[sortperm(third)]\n    \n    third = thir", "    \n    l\
    \ = sort(l)\n    \n    third = l[div(length(l), 3)]\n    \n    third = third[div(length(third),\
    \ 2)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(third),\
    \ 1)]\n    \n    third = third[div(length(third), 1)]\n    \n    third = third[div(length(thir",
  "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector l and returns a vector l' such that\n    l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n   \
    \ l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3\
    \ == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector l and returns a vector l' such\
    \ that\n    l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n   \
    \ to the values of the corresponding indicies of l, but sorted in descending order.\n\
    \    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_third([5, 6, 3, 4,\
    \ 8, 9, 2])\n    [5, 8, 6, 4, 3, 9, 2]\n    \"\"\"", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3\
    \ == 0)]\n    l = l[findall(l % 3 == 1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l\
    \ % 3 != 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like to use\
    \ this approach for sorting a vector in Julia:\n<code>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n\
    \    \n    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l\
    \ = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    return l\nend", "    \n    l = sort(l)\n  \
    \  \n    l = l[findall(l .% 3 == 0)]\n    \n    return l\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector l and returns a vector l' such\
    \ that\n    l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n   \
    \ to the values of the corresponding indicies of l, but sorted in descending order.\n\
    \    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_third([5, 6, 3, 4,\
    \ 8, 9, 2])\n    [5, 6, 4, 8, 9, 3, 2]\n    \"\"\"", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3\
    \ == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a dscore=2 |>\nI like your solution with sort! but I think it can be\
    \ simplified a bit:\n<code>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort`\
    \ sorts *in place*, so `l` will be sorted in-place and `l` will be returned unchanged.\n\
    <|/ c |>\n<| c |>\nI didn't realize that sort sorts in place. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nI added a version that doesn't sort in place.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ sort in place. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\nI\
    \ came up with a solution that doesn't sort in place:\n<code>", "    \n    l =\
    \ sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .%\
    \ 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    return\
    \ l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector l and returns\
    \ a vector l' such that\n    l' is identical to l in the indicies that are not\
    \ divisible by three, while its values at the indicies that are divisible by three\
    \ are equal\n    to the values of the corresponding indicies of l, but sorted\
    \ in descending order.\n    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n    [8, 9, 5, 6, 3, 4, 2]\n    \"\"\"", " \
    \   l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector l and returns a vector\
    \ l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted in descending\
    \ order.\n    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [8, 9, 5, 6, 3, 4, 2]\n    \"\"\"", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector l and returns a vector l' such that\n\
    \    l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted in descending order.\n\
    \    >>> sort_third_descend([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n\
    \    \"\"\"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l\
    \ .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend", "    \n    l\
    \ = sort(l)\n    \n    third = l[3:end]\n    \n    third = sort(third)\n    \n\
    \    third = third[2:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[:end]\n    \n    return\
    \ third\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[3:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[2:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    \n    third = sort(third)\n    \n    third\
    \ = third[1:end]\n    \n    third = sort(third)\n    \n    third = third[1:end]\n\
    \    \n    third = sort(third)\n    \n    third = third[1:end]\n    \n    third\
    \ = sort(third)\n    \n    third = third[1:end]\n    \n    third = sort(third)\n\
    \    \n    third = third[1:end]\n    ", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n\
    \    third = l[div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n   \
    \ l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n\
    \    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n   \
    \ l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n\
    \    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l),\
    \ 3) != div(length(l), 3)]\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l),\
    \ 3)]\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l =\
    \ sort(l)\n    \n    l = l[div(length(l), 3) != div(length(l), 3)]\n    \n   \
    \ l = l[div(length(l), 3) != div(length(l), 3)]\n    \n    l = sort(l)\n    \n\
    \    l = l[div(length(l), 3) != div(length(l), 3)]\n    ", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector l and returns a vector l' such that\n\
    \    l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector l and returns a vector l' such that\n    l' is identical to l in the\
    \ indicies that are not divisible by three, while its values at the indicies that\
    \ are divisible by three are equal\n    to the values of the corresponding indicies\
    \ of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector l and returns a vector l' such that\n \
    \   l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n    to the\
    \ values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return\
    \ l\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26889886)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He wants to sort\
    \ a vector by its values at the indicies that are divisible by three.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26889886)\n\
    <|/ c |>\n<| c |>\nI believe it does. He wants to sort a vector by its values\
    \ at the indicies that are divisible by three.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26889886)\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.3>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector l and returns a vector l' such that\n    l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3\
    \ != 0)]\n    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    third = l[div(length(l), 3) == 3]\n    \n    third\
    \ = sort(third)\n    \n    third = third[div(length(third), 3) == 3]\n    \n \
    \   third = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    third\
    \ = third[div(length(third), 3) == 3]\n    \n    third = third[div(length(third),\
    \ 3) == 3]\n    \n    third = third[div(length(third), 3) == 3]\n    \n    thir",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis doesn't work if there are duplicates in the input\
    \ vector. `sort_third([1, 1, 2])` returns `[1, 1, 2]` instead of `[1, 2]`.\n<|/\
    \ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer to account\
    \ for duplicates.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a small function which\
    \ does this in O(n log n) time. \n<code>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    return l\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector l and returns a vector l' such that\n    l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector l and returns a vector\
    \ l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/25859463)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to sort a\
    \ vector by its values at the indicies that are divisible by three. He also wants\
    \ to sort the indicies that are divisible by three by their corresponding values\
    \ in l. He also wants to sort the indicies that are not divisible by three by\
    \ their corresponding values in l. He also wants to sort the indicies that are\
    \ not divisible by three by their corresponding values in l. He also wants to\
    \ sort the indicies that are not divisible by three by their corresponding values\
    \ in l. He also wants to sort the indicies that are not divisible by three by\
    \ their corresponding values in l. He also wants to sort the indicies that are\
    \ not divisible by three by their corresponding values in l. He also wants to\
    \ sort the indicies that are not divisible by three by their corresponding values\
    \ in l. He also wants to sort the indicies that are not divisible by three by\
    \ their corresponding values in l. He also wants to sort the indicies that are\
    \ not divisible by three by their corresponding values in l. He also wants to\
    \ sort the indicies that are not divisible by three by their corresponding values\
    \ in l. He also wants to sort the indicies that are not divisible by three by\
    \ their corresponding values in l. He also wants to sort the indicies that are\
    \ not divisible by three by their corresponding values in l. He also wants to\
    \ sort the indicies that are not divisible by three by their corresponding values\
    \ in l. He also wants to sort the indicies that are not divisible by three by\
    \ their corresponding values in l. He also wants to sort the indicies that are\
    \ not divisible by three by their corresponding values in l. He also wants to\
    \ sort the indicies that are not divisible by three by their corresponding values\
    \ in l. He also wants to sort the indicies that are not divisible by three by\
    \ their corresponding values in l. He also wants to sort the indicies that are\
    \ not divisible by three by ", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a dscore=0 |>\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l\
    \ = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    l = sort(l)\n    l\
    \ = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n\
    \    \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  l = l[findall(l .% 3 != 0)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>", "    \n    l = sort(l)\n    \n    third = Int64[]\n    \n  \
    \  for i in 1:length(l)\n        if mod(l[i], 3) == 0\n            push!(third,\
    \ l[i])\n        end\n    end\n    \n    return third\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if\
    \ there are duplicates in the input vector. For example, `sort_third([5, 6, 3,\
    \ 4, 8, 9, 2, 5])` returns `[5, 6, 3, 4, 8, 9, 2, 5]`.\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I tested it before posting it. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it myself and it doesn't work. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it myself and it doesn't work. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it myself and it doesn't work. Try it yourself.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>", " \
    \   \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l\
    \ % 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n\
    \    l = l[findall(l % 3 == 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector l and returns a vector\
    \ l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted in descending\
    \ order.\n    >>> sort_third_descend([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4,\
    \ 8, 9, 5]\n    \"\"\"", "    \n    l = sort(l)\n    \n    l = l[findall(l .%\
    \ 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    l = sort(l)\n    l\
    \ = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n\
    \    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l % 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<text>\nThe function sort_third is now available to us. Let's try\
    \ it out on a few examples:", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n\
    \    \n    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector l and returns a vector l' such that\n    l' is identical to l in the\
    \ indicies that are not divisible by three, while its values at the indicies that\
    \ are divisible by three are equal\n    to the values of the corresponding indicies\
    \ of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  return l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ l and returns a vector l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    \n    l = sort(l)\n\
    \    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    l = sort(l)\n    \n    l = l[findall(l % 3 == 0)]\n    \n    l = l[findall(l\
    \ % 3 == 1)]\n    \n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis does not work for me. `sort_third([5, 6, 3, 4, 8, 9, 2])`\
    \ returns `[2, 6, 3, 4, 8, 9, 5]`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it again and it works. I used\
    \ Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it again and it works. I used Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nI tested it again and it works. I used Julia 0.6.2\n\
    <|/ c |>\n<| a dscore=3 |>\nThe function you are looking for is partition:\n<code>\n\
    julia> partition([1,2,3,4,5,6,7,8,9], 3)\n([1,2,3],[4,5,6,7,8,9])\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| c |>\nThis does not work for me. `partition([5,\
    \ 6, 3, 4, 8, 9, 2])` returns `([2, 6, 3, 4, 8, 9, 5])`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works. I used Julia 0.6.2\n<|/ c |>\n<| a dscore=3 |>\nThe function you\
    \ are looking for is partition:\n<code>\njulia> partition([1,2,3,4,5,6,7,8,9],\
    \ 3)\n([1,2,3],[4,5,6,7,8,9])\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\n\
    This does not work for me. `partition([5, 6, 3, 4, 8, 9, 2])` returns `([2, 6,\
    \ 3, 4, 8, 9, 5])`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia\
    \ 0.6.2\n<|/ c |>\n<| a |>\nThe function you are looking for is partition:\n<code>\n\
    julia> partition([1,2,3,4,5,6,7,8,9], 3)\n([1,2,3],[4,5,6,7,8,9])\n</code>\n<|/\
    \ a tags=julia,sorting dscore=3 |>\n<| a tags=julia,sorting |>\nThe function you\
    \ are looking for is partition:\n<code>\njulia> partition([1,2,3,4,5,6,7,8,9],\
    \ 3)\n([1,2,", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\n\
    end", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,sorting |>\n<code>", "    l = sort(l)\n   \
    \ l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n\
    \    \n    third = l[3:end]\n    \n    third = third[l[3:end] .!= l]\n    \n \
    \   third = sort(third)\n    \n    third = third[l[3:end] .!= l]\n    \n    third\
    \ = third[l[3:end] .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n   \
    \ third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end] .!= l]\n   \
    \ \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end] .!= l]\n\
    \    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end] .!=\
    \ l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:end] .!= l]\n    \n    third = third[l[3:end]\
    \ .!= l]\n    \n    third = third[l[3:", "    \n    l = sort(l)\n    \n    third\
    \ = l[3:end]\n    \n    third = third[findall(third .% 3 == 0)]\n    \n    third\
    \ = third[findall(third .% 3 != 0)]\n    \n    third = sort(third)\n    \n   \
    \ l = l[1:end-1]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = sort(l)\n    \n    l = third\n    \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector l and returns a vector l' such\
    \ that\n    l' is identical to l in the indicies that are not divisible by three,\
    \ while its values at the indicies that are divisible by three are equal\n   \
    \ to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.4>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector l and returns a vector\
    \ l' such that\n    l' is identical to l in the indicies that are not divisible\
    \ by three, while its values at the indicies that are divisible by three are equal\n\
    \    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6,\
    \ 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector l and returns\
    \ a vector l' such that\n    l' is identical to l in the indicies that are not\
    \ divisible by three, while its values at the indicies that are divisible by three\
    \ are equal\n    to the values of the corresponding indicies of l, but sorted\
    \ in descending order.\n    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n    >>>\
    \ sort_third([5, 6, 3, 4, 8, 9, 2])\n    [8, 9, 5, 6, 3, 4]\n    \"\"\"", "  \
    \  \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n    l = l[findall(l\
    \ .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.3>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia |>\n<code>", "    l = sort(l)\n    l =\
    \ l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer! I didn't know about\
    \ `sort!` but this doesn't seem to work if there are duplicate values in `l`.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a version that doesn't require\
    \ `sort!`.\n<|/ c |>\n<| c |>\nThanks for your answer! I didn't know about `sort!`\
    \ but this doesn't seem to work if there are duplicate values in `l`.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a version that doesn't require `sort!`.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using sort!:\n<code>", "    l =\
    \ sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 == 1)]\n  \
    \  return l\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for the answer!\
    \ I didn't know about `sort` before. Is there a way to do this without `sort`?\n\
    <|/ c |>\n<| c |>\nI added a solution that does not use `sort`\n<|/ c |>\n<| c\
    \ |>\nThanks for the edit! I didn't know about `find` before. Is there a way to\
    \ do this without `find`?\n<|/ c |>\n<| c |>\nI added a solution that does not\
    \ use `find`\n<|/ c |>\n<| c |>\nThanks for the edit! I didn't know about `find`\
    \ before. Is there a way to do this without `find`?\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3 == 0)]\n    \n\
    \    l = l[findall(l .% 3 != 0)]\n    \n    l = sort(l)\n    \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l\
    \ = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\n<code>", "    \n    l = sort(l)\n    \n\
    \    third = Int64[]\n    \n    for i in 1:length(l)\n        if mod(l[i], 3)\
    \ == 0\n            push!(third, l[i])\n        end\n    end\n    \n    return\
    \ third\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ l and returns a vector l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted in descending order.\n    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n\
    \    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n\
    \    l = l[findall(l % 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    l = l[findall(l % 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    return l\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=julia,sorting |>\nThe solution from is very elegant, but unfortunately\
    \ it has a bug in it. The bug is that if l has length 1, then l % 3 == 0 will\
    \ throw an error.\nA better solution would be:\n<code>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ % 3 == 0)]\n    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 ==\
    \ 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l % 3 == 0)]\n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l .% 3\
    \ == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ % 3 == 0)]\n    \n    l = l[findall(l % 3 != 0)]\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ .% 3 == 0)]\n    \n    l = l[findall(l .% 3 != 0)]\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .%\
    \ 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend", "    l =\
    \ sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector l\
    \ and returns a vector l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l\
    \ = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n  \
    \  l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l\
    \ .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n  \
    \  return l\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ l and returns a vector l' such that\n    l' is identical to l in the indicies\
    \ that are not divisible by three, while its values at the indicies that are divisible\
    \ by three are equal\n    to the values of the corresponding indicies of l, but\
    \ sorted in descending order.\n    >>> sort_third([1, 2, 3])\n    [3, 2, 1]\n\
    \    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 8, 6, 4, 3, 9, 2]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .%\
    \ 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = sort(l)\n\
    \    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    \n    l = sort(l)\n    \n\
    \    l = l[findall(l % 3 == 0)]\n    \n    l = sort(l)\n    \n    l = l[findall(l\
    \ % 3 != 0)]\n    \n    return l\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector l and returns a vector l' such that\n    l' is identical\
    \ to l in the indicies that are not divisible by three, while its values at the\
    \ indicies that are divisible by three are equal\n    to the values of the corresponding\
    \ indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n \
    \   >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\
    \"", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n\
    \    l = l[findall(l .% 3 != 0)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = sort(l)\n    l = l[findall(l .% 3 == 0)]\n    l = l[findall(l .% 3 != 0)]\n\
    \    return l\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector l and returns a vector l' such that\n    l' is identical to l in the\
    \ indicies that are not divisible by three, while its values at the indicies that\
    \ are divisible by three are equal\n    to the values of the corresponding indicies\
    \ of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5,\
    \ 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
