name: HumanEval_83_starts_one_ends
language: jl
prompt: "\"\"\"\n    Given a positive integer n, return the count of the numbers of\
  \ n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
  \ starts_one_ends(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
  \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
  \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
completions: ["    if n < 10 \n        return 1 \n    else \n        return starts_one_ends(n\
    \ / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.", "    if n < 10 \n        return 0 \n    else \n \
    \       return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n == 0 \n\
    \        then return 0 \n    else \n        count_one_ends(n-1) + count_one_ends(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of integers less than or\
    \ equal to n that start or end with 1.", "    if n < 0 \n        error(\"n must\
    \ be positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of integers from 1 to n that\
    \ start or end with 1.", "    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        local count = 1\n        local\
    \ i = 1\n        while i <= n \n            do if i%10 == 1 \n               \
    \ then count = count + 1\n                else count = count + 1\n           \
    \ end\n            i = i + 1\n        end\n        return count\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"", "    if n < 10 \n        return n\n    else \n        return\
    \ starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers less than n that start or end with 1.", "    if n ==\
    \ 1 \n        then return 1 \n        else return 0 \n    else \n        n <-\
    \ n \n        i <- 0 \n        count <- 0 \n        while i < n \n           \
    \ do if n%10 == 1 \n                then count += 1 \n                else if\
    \ n%10 == 0 \n                    then return 0 \n                else \n    \
    \                count += 1 \n            i <- i + 1 \n        return count \n\
    end \n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(2)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(3)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(4)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(5)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(6)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(7)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(8)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(9)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(11)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(12)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(13)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(14)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(15)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(16)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(17)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(18)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(19)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(20)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(21)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(22)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(23)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(24)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(25)\n</cell>\n", "    if n\
    \ == 0 \n        then return 0 \n    else \n        x <- starts_one_ends(n-1)\
    \ \n        if n % 10 == 1 \n            then return x + 1 \n        else return\
    \ x \nend \n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.3>", "    if n == 1 \n        then return 1 \n        else\
    \ return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>", "    if n < 0 \n   \
    \     error(\"n must be positive\")\n    else if n == 0 \n        1\n    else\
    \ \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.", "    if n < 10 \n\
    \        then return 1\n    else if n < 100 \n        then return 1 + starts_one_ends(n//10)\n\
    \    else if n < 1000 \n        then return 1 + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 10000 \n        then return 1 + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 100000 \n        then return 1 + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000 \n        then return 1 + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000 \n        then return 1 +\
    \ starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 100000000 \n        then return 1 + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000000 \n        then return 1 + starts_one_ends(n//100000000)\
    \ + starts_one_ends(n//10000000) + starts_one_ends(n//1000000) + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000000 \n        then return\
    \ 1 + starts_one_ends(n//1000000000) + starts_one_ends(n//100000000) + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + start", "    if n ==\
    \ 0 \n        then return 0\n    else if n == 1 \n        then return 1\n    else\
    \ \n        let\n            digits = digits(n)\n            counts = counts(digits)\n\
    \            \n            count_starts_ends(digits, counts)\n        end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        let\n        \
    \    digits = digits(n) \n            start = digits[1]\n            end = digits[end]\n\
    \            digits_start = digits[start]\n            digits_end = digits[end]\n\
    \            digits_start_end = digits_start + digits_end\n            digits_start_end_one\
    \ = digits_start + digits_end + 1\n            digits_start_end_one_one = digits_start\
    \ + digits_end + 2\n            digits_start_end_one_one_one = digits_start +\
    \ digits_end + 3\n            digits_start_end_one_one_one_one = digits_start\
    \ + digits_end + 4\n            digits_start_end_one_one_one_one_one = digits_start\
    \ + digits_end + 5\n            digits_start_end_one_one_one_one_one_one = digits_start\
    \ + digits_end + 6\n            digits_start_end_one_one_one_one_one_one_one =\
    \ digits_start + digits_end + 7\n            digits_start_end_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 8\n            digits_start_end_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 9\n            digits_start_end_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 10\n            digits_start_end_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 11\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 12\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 13\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 14\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 15\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 16\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 17\n            digits_start_end_one_one_one_one_one_one_one_one_one_one_one_one_one_one_one\
    \ = digits_start + digits_end + 18\n            digits_start_end_one_one_one_one_one_one_",
  "    if n == 0 \n        then return 0\n    else \n        local count = 0\n   \
    \     for i = 1 to n \n            do if starts_one_ends(i) == 1 \n          \
    \      then count = count + 1\n                else return 0\n            end\n\
    \        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return starts_one_ends(n / 2)\n   \
    \ else \n        return starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>",
  "    if n < 10 \n        return 0 \n    else \n        return 1 + starts_one_ends(n\
    \ / 10) \nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to n that start or end with 1.", "    if n < 0 \n       \
    \ error(\"n must be positive\")\n    else if n < 10 \n        return n\n    else\
    \ if n < 100\n        return 10 * n + n\n    else if n < 1000\n        return\
    \ 100 * n + n\n    else if n < 10000\n        return 1000 * n + n\n    else if\
    \ n < 100000\n        return 10000 * n + n\n    else if n < 1000000\n        return\
    \ 100000 * n + n\n    else if n < 10000000\n        return 1000000 * n + n\n \
    \   else if n < 100000000\n        return 10000000 * n + n\n    else if n < 1000000000\n\
    \        return 100000000 * n + n\n    else if n < 10000000000\n        return\
    \ 1000000000 * n + n\n    else if n < 100000000000\n        return 10000000000\
    \ * n + n\n    else if n < 1000000000000\n        return 100000000000 * n + n\n\
    \    else if n < 10000000000000\n        return 1000000000000 * n + n\n    else\
    \ if n < 100000000000000\n        return 10000000000000 * n + n\n    else if n\
    \ < 1000000000000000\n        return 100000000000000 * n + n\n    else if n <\
    \ 10000000000000000\n        return 1000000000000000 * n + n\n    else if n <\
    \ 100000000000000000\n        return 10000000000000000 * n + n\n    else if n\
    \ < 1000000000000000000\n        return 100000000000000000 * n + n\n    else \n\
    \        error(\"n too large\")\nend\n</cell>\n<code language=julia-1.3>", " \
    \   if n < 0 \n        error(\"n must be positive\")\n    else if n == 0 \n  \
    \      1\n    else \n        1 + starts_one_ends(n - 1)\nend", "    if n == 0\
    \ \n        then return 0\n    else if n < 0 \n        then return 0\n    else\
    \ if n == 1 \n        then return 1\n    else \n        local i::Int64 = 1\n \
    \       local count::Int64 = 1\n        while i <= n \n            do if i %%\
    \ 10 == 1 \n                then count = count + 1\n                else return\
    \ 0\n            end\n            i = i + 1\n        end\n        return count\n\
    end\n\"\"\"\n    Given a positive integer n, return the count of the numbers of\
    \ n-digit\n    positive integers that start or end with 0.\n    \"\"\"", "   \
    \ if n == 1 \n        then return 1\n    else \n        let\n            digits\
    \ = digits(n)\n            digits_count = length(digits)\n            digits_count_plus_one\
    \ = digits_count + 1\n            digits_count_minus_one = digits_count - 1\n\
    \            digits_count_minus_one_plus_one = digits_count_minus_one + 1\n  \
    \          digits_count_minus_one_minus_one = digits_count_minus_one - 1\n   \
    \         digits_count_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one = digits_count_minus_one_minus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_min"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
