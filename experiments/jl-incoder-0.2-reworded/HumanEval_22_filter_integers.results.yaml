language: jl
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5lhels_.jl:10\nin expression starting at\
    \ /tmp/tmpl5lhels_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFilter out\
    \ all strings from given vector of strings\nWe will filter out all strings from\
    \ given vector of strings. We will use filter! function from Julia to filter out\
    \ all strings from given vector of strings. We will use isa function to check\
    \ if given value is string.\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2d_x19xr.jl:10\nin expression starting at\
    \ /tmp/tmp2d_x19xr.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings that\
    \ are not integers\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyo1yr0o.jl:10\nin expression starting at\
    \ /tmp/tmpdyo1yr0o.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</cell>\n\
    <text>\nFilter a vector of any jlthon values only for integers\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpka_1kh7p.jl:11\nin expression starting at\
    \ /tmp/tmpka_1kh7p.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a |>\n<code>\njulia> function filter_integers(x::Vector{Any})\n     \
    \      filter!(x -> isa(x, Int64), x)\n       end\nfilter_integers (generic function\
    \ with 1 method)\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m17yezc.jl:10\nin expression starting at\
    \ /tmp/tmp6m17yezc.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,arrays |>\nI believe that your problem is that you are trying\
    \ to use filter! on a vector of Any. filter! works on arrays of type AbstractArray{T,1}\
    \ where T is any type. \nIn your case you have a vector of Any. \n<code>\njulia>\
    \ filter!(x -> isa(x, Int64), [\"a\", 3.14, 5])\n5-element Array{Any,1}:\n \"\
    a\"\n 3.14\n 5\n</code>\nYou can convert your vector to an array of type AbstractArray{T,1}\
    \ where T is Int64. \n<code>\njulia> filter!(x -> isa(x, Int64), [\"a\", 3.14,\
    \ 5] .|> Base.convert{Int64})\n5-element Array{Int64,1}:\n 3\n 3.14\n 5\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks, this works. I guess I should read up on `Base.convert`\
    \ a bit more. I'm still a bit confused about how `filter!` works, since it seems\
    \ to me that `filter!` should work on any `AbstractArray{T,1}` where `T` is `Int64`.\n\
    <|/ c |>\n<| c |>\n`filter!` works on any `AbstractArray{T,1}` where `T` is `Int64`.\
    \ But your vector is of type `Any`. `filter!` works on arrays of type `AbstractArray{T,1}`\
    \ where `T` is any type. `filter!` works on arrays of type `AbstractArray{T,1}`\
    \ where `T` is any type. `filter!` works on arrays of type `AbstractArray{T,1}`\
    \ where `T` is any type. `filter!` works on arrays of type `AbstractArray{T,1}`\
    \ where `T` is any type.\n<|/ c |>\n<| c |>\nI understand now. Thanks for your\
    \ help!\n<|/ c |>\n<| a tags=julia,arrays |>\nI believe that your problem is that\
    \ you are trying to use filter! on a vector of Any. filter! works on arrays of\
    \ type AbstractArray{T,1} where T is any type. \nIn your case you have a vector\
    \ of Any. \n<code>\njulia> filter!(x -> isa(x, Int64), [\"a\", 3.14, 5])\n5-element\
    \ Array{Any,1}:\n \"a\"\n 3.14\n 5\n</code>\nYou can \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb7u8m42.jl:10\nin expression starting at\
    \ /tmp/tmpsb7u8m42.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFilter out\
    \ all non-numeric values\nThe function filter! will remove all elements from a\
    \ vector that do not satisfy a given predicate.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuqjl2in.jl:10\nin expression starting at\
    \ /tmp/tmpbuqjl2in.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values\
    \ which are not integers\nJulia has many built in functions for filtering out\
    \ values from a vector. Here are some examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4py533ru.jl:10\nin expression starting at\
    \ /tmp/tmp4py533ru.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64}) == true\n        return values\n    else\n\
    \        integer = Int64[]\n        for i in values\n            if isa(i, Int64)\
    \ == true\n                push!(integer, i)\n            else\n             \
    \   push!(integer, 0)\n            end\n        end\n        return integer\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpavi8msfz.jl:24

    '
  stdout: "test set: Test Failed at /tmp/tmpavi8msfz.jl:28\n  Expression: candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n   Evaluated: [4, 0, 0, 0, 9, 0]\
    \ == [4, 9]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpavi8msfz.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpavi8msfz.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpavi8msfz.jl:29\n  Expression: candidate([3, \"c\", 3, 3, \"\
    a\", \"b\"]) == [3, 3, 3]\n   Evaluated: [3, 0, 3, 3, 0, 0] == [3, 3, 3]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpavi8msfz.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpavi8msfz.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,arrays |>\nThe most efficient way is to use isa(x, Int64) instead\
    \ of typeof(x) == Int64. \n<code>\njulia> filter!(x -> isa(x, Int64), rand(1:10,\
    \ 10))\n10-element Vector{Int64}:\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n\
    \ 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\nI came up with this\
    \ solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzpbdzk0.jl:10\nin expression starting at\
    \ /tmp/tmpzzpbdzk0.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integer values\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwh7oql9.jl:11\nin expression starting at\
    \ /tmp/tmptwh7oql9.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filtering out empty vectors and dictionaries\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zcwyfb4.jl:11\nin expression starting at\
    \ /tmp/tmp0zcwyfb4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for me. `filter!` doesn't seem to accept `Any` types. I get\
    \ the following error: `ERROR: LoadError: ArgumentError: invalid argument type\
    \ Any`\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and 0.6.3. Both worked.\
    \ Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2\
    \ and 0.6.3. Both worked. Maybe you have a different version?\n<|/ c |>\n<| c\
    \ |>\nI tested it on 0.6.2 and 0.6.3. Both worked. Maybe you have a different\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and 0.6.3. Both worked. Maybe\
    \ you have a different version?\n<|/ c |>\n<| a dscore=2 |>\nI believe that Julia\
    \ 0.7 has added a filter function which can do this for you. \n<code>\njulia>\
    \ filter(x -> isa(x, Int), [1, 2, 3, 4.5, 6])\n6-element Array{Int64,1}:\n 1\n\
    \ 2\n 3\n 4.5\n 6\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays\
    \ |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8lgpe_p.jl:10\nin expression starting at\
    \ /tmp/tmp_8lgpe_p.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0 \n        return Vector{Int64}() \n    else \n\
    \        integer = Int64() \n        integers = Vector{Int64}() \n        for\
    \ v in values \n            if isa(v,Int64) \n                push!(integers,v)\
    \ \n            else \n                push!(integers,integer) \n            \
    \    push!(integer,v) \n            end \n        end \n        return integers\
    \ \n    end \nend \n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\"\
    , 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only for\
    \ integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_nsu43g.jl:24\nin expression starting at\
    \ /tmp/tmp8_nsu43g.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hpo89jk.jl:10\nin expression starting at\
    \ /tmp/tmp2hpo89jk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</code>\n\
    <|/ a |>\n<| c |>\nI like the idea of using filter!, but this doesn't seem to\
    \ work when applied to vectors of strings. I get the following error:\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnr_fmay.jl:11\nin expression starting at\
    \ /tmp/tmpcnr_fmay.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnozv7fi1.jl:12\nin expression starting at\
    \ /tmp/tmpnozv7fi1.jl:12\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for floats\n    >>> filter_floats([\"a\", 3.14,\
    \ 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3, \"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1eijbt9.jl:10\nin expression starting at\
    \ /tmp/tmpk1eijbt9.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Array))\n    values\
    \ = filter(values, x -> !isa(x, Union))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, String))\n    values = filter(values,\
    \ x -> !isa(x, Symbol))\n    values = filter(values, x -> !isa(x, Set))\n    values\
    \ = filter(values, x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x,\
    \ Vector))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Tuple))\n   \
    \ values = filter(values, x -> !isa(x, String))\n    values = filter(values, x\
    \ -> !isa(x, Symbol))\n    values = filter(values, x -> !isa(x, Set))\n    values\
    \ = filter(values, x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x,\
    \ Vector))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Tuple))\n   \
    \ values = filter(values, x -> !isa(x, String))\n    values = filter(values, x\
    \ -> !isa(x, Symbol))\n    values = filter(values, x -> !isa(x, Set))\n    values\
    \ = filter(values, x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x,\
    \ Vector))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Tuple))\n   \
    \ values = filter(values, x -> !isa(x, String))\n    values = filter(values, x\
    \ -> !isa(x, Symbol))\n    values = filter(values, x -> !isa(x, Set))\n    values\
    \ = filter(values, x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x,\
    \ Vector))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Union))\n    values = filter(values, x -> \nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4c_ihr0.jl:48\nin expression starting at\
    \ /tmp/tmpy4c_ihr0.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a |>\nThe function filter! from Julia is designed for that purpose.\n<code>\n\
    julia> filter!(x->isa(x,Int64),[1,2,\"abc\",Dict(),[]])\n1-element Array{Int64,1}:\n\
    \ 1\n</code>\n<|/ a tags=julia dscore=2 |>\n<| a dscore=1 |>\nI wanted to filter\
    \ out all strings and all numbers from a vector. \n<code>\njulia> filter!(x ->\
    \ isa(x,String) || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n\
    \ 1\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wanted to filter out\
    \ all strings and all numbers from a vector. \n<code>\njulia> filter!(x -> isa(x,String)\
    \ || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\njulia> filter!(x -> isa(x,String)\
    \ || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> filter!(x -> isa(x,String)\
    \ || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n\
    <|/ a tags=julia |>\n<| a |>\n<code>\njulia> filter!(x -> isa(x,String) || isa(x,Number),[1,2,\"\
    abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n<|/ a tags=julia dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\njulia> filter!(x -> isa(x,String) || isa(x,Number),[1,2,\"\
    abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=1 |>\n<code>\njulia> filter!(x -> isa(x,String) || isa(x,Number),[1,2,\"\
    abc\",Dict(),[]])\n1-element Array{Any,1}\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ofi8l6j.jl:10\nin expression starting at\
    \ /tmp/tmp_ofi8l6j.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nI like the `isa` approach, though it might be worth pointing out that\
    \ `isa` also works with `Float64`, `Float32`, `Complex{Float32}`, etc.\n<|/ c\
    \ |>\n<| c |>\nThanks, I didn't know about `isa`, but `isa` also works with `Int64`,\
    \ `Float64`, `Complex{Float32}`, etc.\n<|/ c |>\n<| a tags=julia |>\n<code>\n\
    julia> function filter_integers(x::Vector{Any})\n           filter!(x -> isa(x,\
    \ Int), x)\n       end\nfilter_integers (generic function with 1 method)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jy3_7kx.jl:10\nin expression starting at\
    \ /tmp/tmp5jy3_7kx.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0 \n        return [] \n    end\n    \n    values\
    \ = filter(values, x -> isa(x, Int64))\n    \n    if length(values) == 0 \n  \
    \      return [] \n    end\n    \n    values = filter(values, x -> x != 0)\n \
    \   \n    if length(values) == 0 \n        return [] \n    end\n    \n    return\
    \ values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\",\
    \ Dict(), []])\n</cell>\n<text>\nFilter out all non-integer values\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2x6vkkfc.jl:26\nin expression starting at\
    \ /tmp/tmp2x6vkkfc.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters given vector of any jlthon values only for integers\
    \ and returns vector of integers\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkh1wyb4_.jl:10\nin expression starting at\
    \ /tmp/tmpkh1wyb4_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1.0, 2.0, 3.0]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxtvzigw.jl:11\nin expression starting at\
    \ /tmp/tmpsxtvzigw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    if length(values) == 0 \n        return values\n    \n    values\
    \ = filter(values, x -> isa(x, Int64))\n    \n    if length(values) == 0 \n  \
    \      return values\n    \n    values = filter(values, x -> isa(x, Int))\n  \
    \  \n    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Int8))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Int16))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Int32))\n    \n    if length(values) == 0 \n        return values\n    \n  \
    \  values = filter(values, x -> isa(x, Int64))\n    \n    if length(values) ==\
    \ 0 \n        return values\n    \n    values = filter(values, x -> isa(x, Int))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> isa(x, Int8))\n    \n    if length(values) == 0 \n     \
    \   return values\n    \n    values = filter(values, x -> isa(x, Int16))\n   \
    \ \n    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Int32))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Int64))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Int))\n    \n    if length(values) == 0 \n        return values\n    \n    values\
    \ = filter(values, x -> isa(x, Int8))\n    \n    if length(values) == 0 \n   \
    \     return values\n    \n    values = filter(values, x -> isa(x, Int16))\n \
    \   \n    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Int32))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Int64))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Int))\n    \n    if length(values) == 0 \n        return values\n    \n    values\
    \ = filter(values, x -> isa(x, Int8))\n    \n    if length(values) == 0 \n   \
    \     return values\n    \n    values = filter(values, x -> isa(x, Int16))\n \
    \   \n    if length(values) == 0 \n        return values\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2bayn6s.jl:1\nin expression starting at /tmp/tmpu2bayn6s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnozv7fi1.jl:12\nin expression starting at\
    \ /tmp/tmpnozv7fi1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_integers([\"\
    a\", 3.14, 5])\n# => [5]\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphg7u3vv2.jl:10\nin expression starting at\
    \ /tmp/tmphg7u3vv2.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    integers = Set()\n    for value in values\n        if isa(value,Int64)\n\
    \            integers.add(value)\n        end\n    end\n    return integers\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt72vyxe3.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpt72vyxe3.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ Cannot `convert` an object of type Set{Any} to an object of type Vector{Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpt72vyxe3.jl:15\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt72vyxe3.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt72vyxe3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt72vyxe3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  type Set has no\
    \ field add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_integers(values::Vector{Any})\n     @ Main /tmp/tmpt72vyxe3.jl:12\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt72vyxe3.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt72vyxe3.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt72vyxe3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3]\n  type Set has no field\
    \ add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ filter_integers(val"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt67cw5an.jl:10\nin expression starting at\
    \ /tmp/tmpt67cw5an.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2s_61bx6.jl:11\nin expression starting at\
    \ /tmp/tmp2s_61bx6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1, 2, 3, \"abc\", Dict(), []]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkm5q07l5.jl:11\nin expression starting at\
    \ /tmp/tmpkm5q07l5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter out all\
    \ non-integers\nWe can filter out all non-integers using the filter_integers function\
    \ defined above. Let's see how it works.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpua0rfd3c.jl:10\nin expression starting at\
    \ /tmp/tmpua0rfd3c.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Vector))\n   \
    \ values = filter(values, x -> !isa(x, Tuple))\n    values = filter(values, x\
    \ -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Bool))\n    values\
    \ = filter(values, x -> !isa(x, String))\n    values = filter(values, x -> !isa(x,\
    \ Symbol))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Vector))\n   \
    \ values = filter(values, x -> !isa(x, Tuple))\n    values = filter(values, x\
    \ -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Bool))\n    values\
    \ = filter(values, x -> !isa(x, String))\n    values = filter(values, x -> !isa(x,\
    \ Symbol))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Vector))\n   \
    \ values = filter(values, x -> !isa(x, Tuple))\n    values = filter(values, x\
    \ -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Bool))\n    values\
    \ = filter(values, x -> !isa(x, String))\n    values = filter(values, x -> !isa(x,\
    \ Symbol))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Vector))\n   \
    \ values = filter(values, x -> !isa(x, Tuple))\n    values = filter(values, x\
    \ -> !isa(x, Union))\n    values = filter(values, x -> !isa(x, Bool))\n    values\
    \ = filter(values, x -> !isa(x, String))\n    values = filter(values, x -> !isa(x,\
    \ Symbol))\n    values = filter(values, x -> !isa(x, Array))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Vector))\n   \
    \ values = filter(values, x -> !isa(x, Tuple))\n    values = filter(values, x\
    \ -> \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz4e7ogd.jl:48\nin expression starting at\
    \ /tmp/tmplz4e7ogd.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integer values\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqk2g58dz.jl:11\nin expression starting at\
    \ /tmp/tmpqk2g58dz.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,arrays,filter\
    \ |>\n<| a dscore=2 |>\nI like using filter for this. It makes it easy to write\
    \ code that is more readable and maintainable. \n<code>\njulia> using Statistics\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4is62lw5.jl:10\nin expression starting at\
    \ /tmp/tmp4is62lw5.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    \n   \
    \ return filter_integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,julia-jump\
    \ |>\n<| a tags=julia,julia-jump |>\nThe answer by is correct but Julia has built-in\
    \ functions for this. \n<code>\njulia> filter(x->isa(x, Int64), 1:10)\n10-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.2 you can also use isa(x, Int64):\n<code>\n\
    julia> filter(x->isa(x, Int64), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n<|/ a tags=julia,julia-jump |>\n<| a dscore=2\
    \ |>\nIn Julia 1.2, you can also use isa(x, Int64):\n<code>\njulia> filter(x->isa(x,\
    \ Int64), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n\
    \ 9\n10\n</code>\n<|/ a tags=julia,julia-jump |>\n<| a dscore=2 |>\nIn Julia 1.2\
    \ you can also use isa(x, Int64):\n<code>\njulia> filter(x->isa(x, Int64), 1:10)\n\
    10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n\
    <|/ a tags=julia,julia-jump |>\n<| a tags=julia,julia-jump |>\nIn Julia 1.2 you\
    \ can also use isa(x, Int64):\n<code>\njulia> filter(x->isa(x, Int64), 1:10)\n\
    10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.2, you can also use isa(x, Int64):\n\
    <code>\njulia> filter(x->isa(x, Int64), 1:10)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamu_id_o.jl:10\nin expression starting at\
    \ /tmp/tmpamu_id_o.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(values, x -> isa(x, Int64))\n    \n   \
    \ return filter_integers\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all non-integers\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgcz9prc.jl:13\nin expression starting at\
    \ /tmp/tmpsgcz9prc.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,type-conversion,arrays\
    \ |>\n<| a |>\nI came across this question while trying to solve a similar problem.\
    \ My solution was to convert the array to a tuple and then back to an array:\n\
    <code>\njulia> a = [1, 2, 3, 4]\n4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkljz7bjn.jl:10\nin expression starting at\
    \ /tmp/tmpkljz7bjn.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter out all\
    \ non-integer values from given vector of any jlthon values\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc6raehq.jl:10\nin expression starting at\
    \ /tmp/tmpmc6raehq.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    if length(values) == 0\n        return values\n    \n    if length(values)\
    \ == 1\n        return filter_integers(values(1))\n    \n    if length(values)\
    \ > 1\n        \n        filtered = filter_integers(values(1))\n        \n   \
    \     for v in values(2:end)\n            if isa(v,Int64)\n                push!(filtered,v)\n\
    \            else\n                push!(filtered,filter_integers(v))\n      \
    \      end\n        end\n        \n        return filtered\n    end\n    \n  \
    \  return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n\
    \    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmv4vvi4v.jl:19\nin expression\
    \ starting at /tmp/tmpmv4vvi4v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_integers([\"\
    a\", 3.14, 5])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sdjruth.jl:10\nin expression starting at\
    \ /tmp/tmp5sdjruth.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt67cw5an.jl:10\nin expression starting at\
    \ /tmp/tmpt67cw5an.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering by type\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom_7kyd7.jl:10\nin expression starting at\
    \ /tmp/tmpom_7kyd7.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\nI wrote a Julia package that does this for you. \n<code>\nusing DataFrames\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71id5hxh.jl:10\nin expression starting at\
    \ /tmp/tmp71id5hxh.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n   \
    \ [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3, \"abc\", Dict(), []]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbxpggan.jl:10\nin expression starting at\
    \ /tmp/tmphbxpggan.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxugn1oss.jl:11\nin expression starting at\
    \ /tmp/tmpxugn1oss.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvik6sba9.jl:11\nin expression starting at\
    \ /tmp/tmpvik6sba9.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThanks for the answer. I am not very familiar with Julia yet, so I might\
    \ have missed something, but I get the following error when I try your code: `ERROR:\
    \ LoadError: MethodError: no method matching filter!(::Type{Int64}, ::Array{Any,1})`\n\
    <|/ c |>\n<| c |>\nI added a version that works with `Any` instead of `Int64`.\n\
    <|/ c |>\n<| c |>\nThanks, that works great! I still have some issues with my\
    \ code though, since I still get an error when I try to run it: `ERROR: LoadError:\
    \ MethodError: no method matching filter!(::Type{Int64}, ::Array{Any,1})`. Any\
    \ ideas on how to fix that?\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ `Any` instead of `Int64`.\n<|/ c |>\n<| c |>\nThanks, that works great! I still\
    \ have some issues with my code though, since I still get an error when I try\
    \ to run it: `ERROR: LoadError: MethodError: no method matching filter!(::Type{Int64},\
    \ ::Array{Any,1})`. Any ideas on how to fix that?\n<|/ c |>\n<| a dscore=1 |>\n\
    The other answers here are great, but I thought I'd add my own answer since I\
    \ ran into this issue myself and thought it might be helpful to others.\nI wanted\
    \ to filter out any non-integer values from a vector of strings. I used the isa\
    \ function to do this, but I ran into issues because isa doesn't work with strings.\
    \ Instead, I used the isa function to check if each element in the vector is a\
    \ string, and then used the isa function to check if each element in the vector\
    \ is an integer.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6rgpfch.jl:10\nin expression starting at\
    \ /tmp/tmpg6rgpfch.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm27epadp.jl:10\nin expression starting at\
    \ /tmp/tmpm27epadp.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n   \
    \ [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3, \"abc\", Dict(), []]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns120e_s.jl:10\nin expression starting at\
    \ /tmp/tmpns120e_s.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filtered = filter(values, x -> isa(x, Int64))\n    \n    if length(filtered)\
    \ == length(values)\n        return values\n    else\n        return filtered\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3, \"\
    abc\", Dict(), []])\n</cell>\n<text>\nFilter given vector of any jlthon values\
    \ only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>>\
    \ filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67onj7m_.jl:17\nin expression starting at\
    \ /tmp/tmp67onj7m_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpharzk9p9.jl:10\nin expression starting at\
    \ /tmp/tmpharzk9p9.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x, Vector))\n   \
    \ return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wzuql5t.jl:13\nin expression starting at\
    \ /tmp/tmp8wzuql5t.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14,\
    \ 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1,\
    \ 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    >>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n\
    [5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1,\
    \ 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    >>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n\
    [5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1,\
    \ 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    >>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71lqt4dk.jl:10\nin expression starting at\
    \ /tmp/tmp71lqt4dk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt67cw5an.jl:10\nin expression starting at\
    \ /tmp/tmpt67cw5an.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFiltering out\
    \ non-numeric values\nFiltering out non-numeric values can be done by using the\
    \ isa function\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzi_4w85.jl:10\nin expression starting at\
    \ /tmp/tmpfzi_4w85.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hpo89jk.jl:10\nin expression starting at\
    \ /tmp/tmp2hpo89jk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFiltering by\
    \ type\nWe can also filter by type. For example, we can filter out all strings\
    \ by checking if their type is an Int64:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp999mzgqr.jl:10\nin expression starting at\
    \ /tmp/tmp999mzgqr.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    \n    return values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpou70y4a4.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpou70y4a4.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpou70y4a4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou70y4a4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou70y4a4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpou70y4a4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpou70y4a4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou70y4a4.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou70y4a4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpou70"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0 \n        return Vector{Int64}() \n    else \n\
    \        integers = Vector{Int64}() \n        for value in values \n         \
    \   if isa(value,Int64) \n                push!(integers,value) \n           \
    \ else \n                push!(integers,0) \n            end \n        end \n\
    \        return integers \n    end \nend \n</cell>\n<text>\nFilter out all non-integer\
    \ values\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_a2o2os.jl:22\nin expression starting at\
    \ /tmp/tmpn_a2o2os.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    \n    return values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpou70y4a4.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpou70y4a4.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpou70y4a4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou70y4a4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou70y4a4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpou70y4a4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpou70y4a4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou70y4a4.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou70y4a4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpou70"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering out all non-integers\n\
    We can also filter out all non-integers by using filter!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg23izwcw.jl:10\nin expression starting at\
    \ /tmp/tmpg23izwcw.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    return values\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpawz09nka.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpawz09nka.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#3\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpawz09nka.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpawz09nka.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpawz09nka.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpawz09nka.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#3\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpawz09nka.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpawz09nka.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpawz09nka.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpawz0"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd878aunl.jl:10\nin expression starting at\
    \ /tmp/tmpd878aunl.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    \n   \
    \ return filter_integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    if length(values) == 0 \n        return values\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi077uge_.jl:1\nin expression starting at /tmp/tmpi077uge_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,arrays |>\n<code>\njulia> a = [1, 2, 3, Dict(), []]\n\
    4-element Array{Any,1}:\n 1\n 2\n 3\n Dict()\n []\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsifsf1j8.jl:11\nin expression starting at\
    \ /tmp/tmpsifsf1j8.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFiltering out\
    \ empty vectors and strings\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpetsyxp6p.jl:10\nin expression starting at\
    \ /tmp/tmpetsyxp6p.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10oux31l.jl:11\nin expression starting at\
    \ /tmp/tmp10oux31l.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFiltering out\
    \ all non-integers\nWe can also filter out all non-integers by applying the filter_integers\
    \ function to the vector of any jlthon values.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfr0h6yp5.jl:10\nin expression starting at\
    \ /tmp/tmpfr0h6yp5.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all non-integer values\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduqbsk8z.jl:12\nin expression starting at\
    \ /tmp/tmpduqbsk8z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxugn1oss.jl:11\nin expression starting at\
    \ /tmp/tmpxugn1oss.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1mu856g.jl:10\nin expression starting at\
    \ /tmp/tmpm1mu856g.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a |>\n<| a |>\n\
    I like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=2\
    \ tags=julia |>\n<| a tags=julia |>\nI like using filter! for this:\n<code>\n\
    julia> filter!(x->isa(x,Int64),[1,2,\"abc\",Dict(),[]])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nI like using filter!\
    \ for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"abc\",Dict(),[]])\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nI like using filter! for this:\n<code>\njuli\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l6seyjm.jl:10\nin expression starting at\
    \ /tmp/tmp5l6seyjm.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering out all non-integers\n\
    We can also filter out all non-integers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptj3d8jlp.jl:10\nin expression starting at\
    \ /tmp/tmptj3d8jlp.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter out all\
    \ non-integer values\nFilter out all non-integer values\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0p468gw.jl:10\nin expression starting at\
    \ /tmp/tmph0p468gw.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</cell>\n\
    <text>\nfilter!\nfilter! is a higher-order function that takes a function and\
    \ applies it to every element of a collection. filter! returns nothing and modifies\
    \ the original collection in place. filter! can take any number of functions as\
    \ arguments. In this case, we are only interested in filtering out integers. We\
    \ can do this by passing filter! a function that checks if an element is an integer:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8q4bkhw.jl:11\nin expression starting at\
    \ /tmp/tmpf8q4bkhw.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThanks, this was very helpful. One thing I noticed is that `filter!`\
    \ doesn't seem to work on `Vector{Any}`, so I changed it to `filter!(x->isa(x,\
    \ Int64), values)`\n<|/ c |>\n<| c |>\nYes, I forgot about that one. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=1 |>\nI came up with a solution using\
    \ filter! and isa functions. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsly_pv5.jl:10\nin expression starting at\
    \ /tmp/tmpxsly_pv5.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values\
    \ which are not integers\nThe function filter_integers filters out any jlthon\
    \ values which are not integers\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepdsjqy3.jl:10\nin expression starting at\
    \ /tmp/tmpepdsjqy3.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(values, x -> isa(x, Int64))\n    return\
    \ filter_integers\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxif_a27s.jl:12\nin expression starting at\
    \ /tmp/tmpxif_a27s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1mu856g.jl:10\nin expression starting at\
    \ /tmp/tmpm1mu856g.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFiltering by\
    \ type\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhtg089p.jl:10\nin expression starting at\
    \ /tmp/tmprhtg089p.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_integers([\"\
    a\", 3.14, 5])\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sdjruth.jl:10\nin expression starting at\
    \ /tmp/tmp5sdjruth.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out any jlthon values which are not integers\nWe will filter out\
    \ any jlthon values which are not integers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk43dliv4.jl:11\nin expression starting at\
    \ /tmp/tmpk43dliv4.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFilter out\
    \ all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter \nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1azi1eu.jl:10\nin expression starting at\
    \ /tmp/tmpr1azi1eu.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1mu856g.jl:10\nin expression starting at\
    \ /tmp/tmpm1mu856g.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tbpl24z.jl:10\nin expression starting at\
    \ /tmp/tmp9tbpl24z.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_bigints\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl03q854i.jl:10\nin expression starting at\
    \ /tmp/tmpl03q854i.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nFilter out all non-integers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0siewu8z.jl:11\nin expression starting at\
    \ /tmp/tmp0siewu8z.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64})\n        return values\n    elseif isa(values,\
    \ Vector{Any})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkkcuxt8.jl:52\nin expression starting at\
    \ /tmp/tmpqkkcuxt8.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hpo89jk.jl:10\nin expression starting at\
    \ /tmp/tmp2hpo89jk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filtered = filter(values, x -> isa(x, Int64))\n    \n    if length(filtered)\
    \ == length(values)\n        return values\n    else\n        return filtered\n\
    \    end\nend\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\nFilter given vector of any jlthon values only for integers\nFilter\
    \ given vector of any jlthon values only for integers\nFilter given vector of\
    \ any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd66cuw2.jl:17\nin expression starting at\
    \ /tmp/tmpcd66cuw2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64}) == false\n        error(\"values must be\
    \ vector of integers\")\n    end\n    \n    filter!(x -> isa(x, Int64), values)\n\
    \    return values\nend\n</cell>\n<code language=julia-1.3>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp770urvs5.jl:15\nin expression starting at\
    \ /tmp/tmp770urvs5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugu0eylg.jl:10\nin expression starting at\
    \ /tmp/tmpugu0eylg.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64})\n        return values\n    elseif isa(values,\
    \ Vector{Any})\n        filtered = filter(values, x -> isa(x, Int64))\n      \
    \  return filter_integers(filtered)\n    else\n        error(\"filter_integers:\
    \ expected vector of Int64 or Any\")\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nI came up with a solution that is more generic and does\
    \ not require any packages. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp75hoyagl.jl:17\nin expression starting at\
    \ /tmp/tmp75hoyagl.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all strings that are not integers\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk85mu5_u.jl:11\nin expression starting at\
    \ /tmp/tmpk85mu5_u.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt67cw5an.jl:10\nin expression starting at\
    \ /tmp/tmpt67cw5an.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</cell>\n\
    <text>\nFilter out all non-numeric values\nThe function filter!() removes elements\
    \ from a vector that do not satisfy a given predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb766l6g.jl:11\nin expression starting at\
    \ /tmp/tmpvb766l6g.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for floats\n>>> filter_integers([\"a\", 3.14, 5])\n[3.14,\
    \ 5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Float64)\n[1, 2, 3]\n>>> filter_integers([1, 2,\
    \ 3, \"abc\", Dict(), []], Float32)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []], Int64)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []], Int32)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(),\
    \ []], Int16)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []],\
    \ Int8)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Int)\n\
    [1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Union{Int64, Int32,\
    \ Int16, Int8, Int, Float64, Float32, Float16})\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32,\
    \ Float16}, Float64)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(),\
    \ []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32, Float16}, Float32)\n\
    [1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Union{Int64, Int32,\
    \ Int16, Int8, Int, Float64, Float32, Float16}, Int64)\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32,\
    \ Float16}, Int32)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(),\
    \ []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32, Float16}, Int16)\n\
    [1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Union{Int64, Int32,\
    \ Int16, Int8, Int, Float64, Float32, Float16}, Int8)\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32,\
    \ Float\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7anugijm.jl:10\nin expression starting at\
    \ /tmp/tmp7anugijm.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1.0, 2.0, 3.0, 3.0, 3.0, 3.0]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8j6y51v_.jl:11\nin expression starting at\
    \ /tmp/tmp8j6y51v_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFilter out\
    \ all non-integer values from given vector of any jlthon values\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqguvbrv.jl:10\nin expression starting at\
    \ /tmp/tmpkqguvbrv.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n   \
    \ [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3, \"abc\", Dict(), []]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns120e_s.jl:10\nin expression starting at\
    \ /tmp/tmpns120e_s.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hpo89jk.jl:10\nin expression starting at\
    \ /tmp/tmp2hpo89jk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    \    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfesxipb.jl:11\nin expression starting at\
    \ /tmp/tmptfesxipb.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering out strings and\
    \ dictionaries\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx10kar8o.jl:10\nin expression starting at\
    \ /tmp/tmpx10kar8o.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter out all\
    \ non-integer values from given vector of any jlthon values only for integers\n\
    \    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjhkhric.jl:10\nin expression starting at\
    \ /tmp/tmpfjhkhric.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filtered = filter(values, x -> isa(x, Int64))\n    return collect(filtered)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0vsf2v0.jl:12\nin expression starting at\
    \ /tmp/tmpw0vsf2v0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    if length(values) == 0 \n        return values\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi077uge_.jl:1\nin expression starting at /tmp/tmpi077uge_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integers\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2s_61bx6.jl:11\nin expression starting at\
    \ /tmp/tmp2s_61bx6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if isa(values, Vector{Int64}) == true\n        return values\n    else\n\
    \        error(\"Expected vector of integers\")\n    end\nend\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphy3pvvb3.jl:14\nin expression starting at\
    \ /tmp/tmphy3pvvb3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all strings that\
    \ are not integers\nWe could also filter out all strings that are not integers,\
    \ but this would leave out all strings that are not integers. We will leave out\
    \ all strings that are not integers because we know that all strings are integers.\
    \ We will also leave out all strings that are not integers because we know that\
    \ all strings are integers. We will also leave out all strings that are not integers\
    \ because we know that all strings are integers. We will also leave out all strings\
    \ that are not integers because we know that all strings are integers. We will\
    \ also leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will \nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmuvk7as.jl:10\nin expression starting at\
    \ /tmp/tmpkmuvk7as.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFiltering by\
    \ type\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhtg089p.jl:10\nin expression starting at\
    \ /tmp/tmprhtg089p.jl:10\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\n    return values\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    3      3

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    return\
    \ filter_integers\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1son7kdw.jl:12\nin expression starting at\
    \ /tmp/tmp1son7kdw.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    integers = Int64[]\n    for value in values\n        if isa(value,Int64)\n\
    \            push!(integers,value)\n        end\n    end\n    return integers\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tom8qk2.jl:17\nin expression starting at\
    \ /tmp/tmp5tom8qk2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of any jlthon values and returns a vector\
    \ of integers \n    containing only integers\n    >>> filter_integers([\"a\",\
    \ 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8o0kljx.jl:10\nin expression starting at\
    \ /tmp/tmpe8o0kljx.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values\
    \ which are not integers\nWe will filter out any jlthon values which are not integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bxo60jl.jl:10\nin expression starting at\
    \ /tmp/tmp9bxo60jl.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,arrays,vector,filter\
    \ |>\n<| a tags=julia,arrays,vector,filter |>\nIn Julia 1.2 you can use filter!:\n\
    <code>\njulia> filter!(x->isa(x,Int64),[1,2,\"a\",3.14,5])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,arrays,vector,filter\
    \ |>\nIn Julia 1.2 you can use filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=julia,arrays,vector,filter |>\nIn Julia 1.2 you can use\
    \ filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"a\",3.14,5])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\nIn Julia 1.2 you can use filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a\
    \ tags=julia,arrays,vector,filter |>\n<| a tags=julia,arrays,vector,filter |>\n\
    In Julia 1.2 you can use filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a dscore=3 |>\nIn Julia 1.2 you can use filter!:\n<code>\njulia>\
    \ filter!(x->isa(x,Int64),[1,2,\"a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n\
    \ 2\n a\n 3.14\n 5\n</code>\n<|/ a tags=julia,arrays,vector,filter |>\n<| a tags=julia,arrays,\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lrbuvuj.jl:10\nin expression starting at\
    \ /tmp/tmp7lrbuvuj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpozy2lj2c.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpozy2lj2c.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2lj2c.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpozy2lj2c.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpozy2lj2c.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpozy2lj2c.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpozy2"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering by type\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom_7kyd7.jl:10\nin expression starting at\
    \ /tmp/tmpom_7kyd7.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5yyt8cs.jl:10\nin expression starting at\
    \ /tmp/tmpb5yyt8cs.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk_y9dbo.jl:12\nin expression starting at\
    \ /tmp/tmpzk_y9dbo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all non-numeric values\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nlkvo8k.jl:12\nin expression starting at\
    \ /tmp/tmp7nlkvo8k.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    \n    return values\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpou70y4a4.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpou70y4a4.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpou70y4a4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou70y4a4.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou70y4a4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpou70y4a4.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpou70y4a4.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpou70y4a4.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpou70y4a4.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpou70"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) ==\
    \ Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1qhlwwf.jl:12\nin expression starting at\
    \ /tmp/tmpu1qhlwwf.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hpo89jk.jl:10\nin expression starting at\
    \ /tmp/tmp2hpo89jk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugu0eylg.jl:10\nin expression starting at\
    \ /tmp/tmpugu0eylg.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpa887nv82.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpa887nv82.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887nv82.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmpa887nv82.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa887nv82.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa887nv82.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpa887"
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    if length(values) == 0 \n        return values\n    \n    values\
    \ = filter(values, x -> isa(x, Int64))\n    \n    if length(values) == 0 \n  \
    \      return values\n    \n    values = filter(values, x -> !isa(x, Int64))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> isa(x, Int))\n    \n    if length(values) == 0 \n      \
    \  return values\n    \n    values = filter(values, x -> !isa(x, Int))\n    \n\
    \    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Float64))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> !isa(x, Float64))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Float))\n    \n    if length(values) == 0 \n        return values\n    \n  \
    \  values = filter(values, x -> !isa(x, Float))\n    \n    if length(values) ==\
    \ 0 \n        return values\n    \n    values = filter(values, x -> isa(x, String))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> !isa(x, String))\n    \n    if length(values) == 0 \n  \
    \      return values\n    \n    values = filter(values, x -> isa(x, Array{Any}))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> !isa(x, Array{Any}))\n    \n    if length(values) == 0 \n\
    \        return values\n    \n    values = filter(values, x -> isa(x, Dict))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> !isa(x, Dict))\n    \n    if length(values) == 0 \n    \
    \    return values\n    \n    values = filter(values, x -> isa(x, Union{Nothing,\
    \ Any}))\n    \n    if length(values) == 0 \n        return values\n    \n   \
    \ values = filter(values, x -> !isa(x, Union{Nothing, Any}))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Union{Nothing, AnyRef}))\n    \n    if length(values) == 0 \n        return\
    \ values\n    \n    values = filter(values, x -> !isa(x, Union{Nothing, AnyRef}))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"\
    ]) == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdfr5vks.jl:1\nin expression starting at /tmp/tmpcdfr5vks.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to avoid the allocation\
    \ of a new vector and still use filter!\n<|/ c |>\n<| c |>\nI guess you could\
    \ do something like `filter!(x -> isa(x, Int64), values)` but then you'd have\
    \ to do `Int64[]` instead of `Int64`\n<|/ c |>\n<| c |>\nYeah, I thought about\
    \ that too, but then you'd have to do `Int64[]` instead of `Int64`\n<|/ c |>\n\
    <| c |>\nI guess you could do something like `filter!(x -> isa(x, Int64), values)`\
    \ but then you'd have to do `Int64[]` instead of `Int64`\n<|/ c |>\n<| c |>\n\
    Yeah, I guess you could do something like `filter!(x -> isa(x, Int64), values)`\
    \ but then you'd have to do `Int64[]` instead of `Int64`\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nI came up with this solution:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = filter_integers;\n\t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyxnpj3_.jl:10\nin expression starting at\
    \ /tmp/tmpnyxnpj3_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    if length(values) == 0 \n        return Vector{Int64}() \n    else \n\
    \        integer = Int64() \n        for value in values \n            if typeof(value)\
    \ == Int \n                integer += value \n            end \n        end \n\
    \        return Vector{Int64}(integer) \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp86fu67tu.jl:20\nin expression starting at\
    \ /tmp/tmp86fu67tu.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ufa41wj.jl:10\nin expression starting at\
    \ /tmp/tmp9ufa41wj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nI like this solution, although it does require you to write `filter_integers`\
    \ twice. One could also define `filter_integers` as a macro.\n<|/ c |>\n<| a |>\n\
    I like using filter! here because it's more general:\n<code>\njulia> filter!(x\
    \ -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=4\
    \ tags=julia,arrays |>\n<| c |>\nI like this solution, although it does require\
    \ you to write `filter_integers` twice. One could also define `filter_integers`\
    \ as a macro.\n<|/ c |>\n<| a dscore=4 |>\nI like using filter! here because it's\
    \ more general:\n<code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n\
    \ 1\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nI like using\
    \ filter! here because it's more general:\n<code>\njulia> filter!(x -> isa(x,\
    \ Int), 1:10)\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ tags=julia,arrays |>\nI like using filter! here because it's more general:\n\
    <code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nI like using filter! here because\
    \ it's more general:\n<code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element\
    \ Array{Int64,1}:\n 1\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=3 |>\n\
    I like using filter! here because it's more general:\n<code>\njulia> filter!(x\
    \ -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nI like using filter! here because it's more general:\n\
    <code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n\
    </code>\n<|/\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t\
    @test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eur1h01.jl:10\nin expression starting at\
    \ /tmp/tmp5eur1h01.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa(x, Int16))\n    values = filter(values, x -> isa(x,\
    \ Int32))\n    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> isa(x, Int))\n    values = filter(values, x -> isa(x, Int8))\n    values\
    \ = filter(values, x -> isa\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpar_4pv99.jl:48\nin expression starting at\
    \ /tmp/tmpar_4pv99.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Filter given vector of any jlthon values only for integers\n  \
    \  >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
    \ \n    \n    filter_integers = filter(values, x -> isa(x, Int64))\n    \n   \
    \ return filter_integers\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_integers;\n\
    \t@test(candidate(Vector{Any}([])) == Vector{Int64}([]))\n\t@test(candidate([4,\
    \ Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9])\n\t@test(candidate([3, \"c\", 3,\
    \ 3, \"a\", \"b\"]) == [3, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp0bo8__y1.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp0bo8__y1.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{Any}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates\
    \ are:\n    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp0bo8__y1.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bo8__y1.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bo8__y1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0bo8__y1.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([4, Dict(), [], 23.2, 9, \"adasd\"]) == [4, 9]\n  MethodError: no\
    \ method matching filter(::Vector{Any}, ::var\"#1#2\")\n  Closest candidates are:\n\
    \    filter(::Any, !Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:363\n\
    \    filter(::Any, !Matched::Array{T, N}) where {T, N} at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2479\n\
    \    filter(::Any, !Matched::AbstractDict) at /shared/centos7/julia/1.7.3/share/julia/base/abstractdict.jl:434\n\
    \    ...\n  Stacktrace:\n   [1] filter_integers(values::Vector{Any})\n     @ Main\
    \ /tmp/tmp0bo8__y1.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0bo8__y1.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0bo8__y1.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp0bo8"
