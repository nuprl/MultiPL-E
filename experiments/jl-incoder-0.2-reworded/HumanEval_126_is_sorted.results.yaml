language: jl
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return length(sorted) == length(lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkec842r.jl:28\nin expression starting at\
    \ /tmp/tmpbkec842r.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6tbooaa.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6tbooaa.jl:1\n\
    in expression starting at /tmp/tmps6tbooaa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    lengths = countmap(uniques)\n    return all(lengths[v]\
    \ == lengths[v+1] for v in uniques)\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4,\
    \ 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test\
    \ is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1])\n@test is_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfujo4g7.jl:30\nin expression starting at\
    \ /tmp/tmpmfujo4g7.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    \n    if length(sorted) == length(lst)\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns a vector of booleans indicating whether each number is\
    \ greater than the previous number. Assume no negative numbers and only integers.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp976lq37m.jl:33\nin expression starting at\
    \ /tmp/tmp976lq37m.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhp_vx0f.jl:33\nin expression starting at\
    \ /tmp/tmpyhp_vx0f.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) == true\n@assert is_sorted([1, 3, 2, 4, 5]) == false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) == true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == true\n\
    @assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == false\n@assert is_sorted([1, 2, 2,\
    \ 3, 3, 4]) == true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of unique elements\
    \ in a vector. Assume no duplicates.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8n9cdye.jl:28\nin expression starting at\
    \ /tmp/tmpg8n9cdye.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != x\n            sorted = false\n           \
    \ break\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmph0hb07ec.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph0hb07ec.jl:1\n\
    in expression starting at /tmp/tmph0hb07ec.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nis_sorted([1,2,3,4,5,6,7,8,9,10,11])\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmu0fare3.jl:33\nin expression starting at\
    \ /tmp/tmpmu0fare3.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb37g3qex.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpb37g3qex.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb37g3qex.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb37g3qex.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb37g3qex.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb37g3qex.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb37g3qex.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6tbooaa.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6tbooaa.jl:1\n\
    in expression starting at /tmp/tmps6tbooaa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<text>\nis_sorted() tests for sorted order. is_sorted() returns\
    \ true if the list is in ascending order, and false if the list is in descending\
    \ order. is_sorted() also returns false if the list has duplicates.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmj6qsjr7.jl:27\nin expression starting at\
    \ /tmp/tmpmj6qsjr7.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    \n    for x in lst\n        if x != last(lst)\n            sorted\
    \ = false\n            break\n        end\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrcnmmpg.jl:37\nin expression starting at\
    \ /tmp/tmpwrcnmmpg.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb37g3qex.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpb37g3qex.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb37g3qex.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb37g3qex.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb37g3qex.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb37g3qex.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb37g3qex.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != x\n            sorted = false\n           \
    \ break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpz30k76.jl:33\nin expression starting at\
    \ /tmp/tmpfpz30k76.jl:33\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ false\n    for x in lst\n        if x != sort(x)\n            sorted = true\n\
    \            break\n        end\n    end\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpgeggxggn.jl:40\n  Test threw
    exception\n  Expression: candidate([5]) == true\n  MethodError: no method matching
    sort(::Int64)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpgeggxggn.jl:28\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgeggxggn.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgeggxggn.jl:39\ntest set: Error
    During Test at /tmp/tmpgeggxggn.jl:41\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest
    candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpgeggxggn.jl:28\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgeggxggn.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgeggxggn.jl:39\ntest set: Er'
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdkqo84j2.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdkqo84j2.jl:1\n\
    in expression starting at /tmp/tmpdkqo84j2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6tbooaa.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6tbooaa.jl:1\n\
    in expression starting at /tmp/tmps6tbooaa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1])\
    \ == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1qz6lqe.jl:35\nin expression starting at\
    \ /tmp/tmpd1qz6lqe.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kf7g4v9.jl:34\nin expression starting at\
    \ /tmp/tmp3kf7g4v9.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0crnkjbe.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0crnkjbe.jl:36\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:39\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:42\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:45\n  Expression: candidate([1, 2, 2, 3, 3, 4])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     4     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        for (i,val) in\
    \ enumerate(sorted)\n            if val != lst[i]\n                return false\n\
    \            end\n        end\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppn8suahf.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmppn8suahf.jl:53\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn8suahf.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn8suahf.jl:43\ntest set: Test\
    \ Failed at /tmp/tmppn8suahf.jl:54\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppn8suahf.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppn8suahf.jl:43\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_50711cx.jl:33\nin expression starting at\
    \ /tmp/tmp_50711cx.jl:33\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x < lst[end(x)]\n            sorted = true\n   \
    \     else\n            sorted = false\n        end\n    end\n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjotxu39q.jl:40\n  Test threw
    exception\n  Expression: candidate([5]) == true\n  MethodError: objects of type
    Int64 are not callable\n  Maybe you forgot to use an operator such as *, ^, %,
    / etc. ?\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpjotxu39q.jl:27\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjotxu39q.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjotxu39q.jl:39\ntest set: Error
    During Test at /tmp/tmpjotxu39q.jl:41\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 5]) == true\n  MethodError: objects of type Int64 are not callable\n  Maybe
    you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpjotxu39q.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjotxu39q.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjotxu39q.jl:39\ntest set: Error
    During Test at /tmp/tmpjotxu39q.jl:42\n  Test threw exception\n  Expression: candidate([1,
    3, 2, 4, 5]) == false\n  MethodError: objects of type Int64 are not callable\n  Maybe
    you forgot to use an operator such as *, ^, %, / etc. ?\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpjotxu39q.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjotxu39q.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjotxu3'
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    seen = Set()\n    for x in lst\n        if x in seen\n            sorted\
    \ = false\n            break\n        seen.add(x)\n    end\n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi34kvv3.jl:35\nin expression starting at\
    \ /tmp/tmpyi34kvv3.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    last = sorted[end]\n    last = last.last if length(last) > 1 else last\n\
    \    last = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(last)\
    \ > 1 else last\n    last = last.last if length(last) > 1 else last\n    last\
    \ = last.last if length(last) > 1 else last\n    last = last.last if length(\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpwd_78zfv.jl:24 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwd_78zfv.jl:27\n\
    in expression starting at /tmp/tmpwd_78zfv.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of unique elements in a vector. Assume that there are no\
    \ duplicate elements.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4uj1964l.jl:33\nin expression starting at\
    \ /tmp/tmp4uj1964l.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_9xgspu.jl:33\nin expression starting at\
    \ /tmp/tmpg_9xgspu.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1, 1]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1,\
    \ 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1]) == false\n\
    @assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 2, 1]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 2, 1, 1, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2,\
    \ 1, 1, 1, 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2,\
    \ 1, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 2,\
    \ 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1,\
    \ 2, 1, 1, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2,\
    \ 1, 1, 1, 2, 1, 1, 1, 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2,\
    \ 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1]) == false\n@assert\
    \ is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2,\
    \ 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]) == false\n@assert is_sorted([5,\
    \ 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1])\
    \ == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1,\
    \ 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1]) == false\n\
    @assert is_sorted([5, 2, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1,\
    \ 1, 2, 1, 1, 1, 2, 1, 1, 1]) == false\n@assert is_sorted([5, 2, 3, 4, 1, 2, 1,\
    \ 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1]) == false\n\
    @assert is_sorted([5, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm__ckfi0.jl:28\nin expression starting at\
    \ /tmp/tmpm__ckfi0.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_sorted([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of numbers and\
    \ returns the number of unique numbers in the vector. Assume no negative numbers\
    \ and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurg22xt4.jl:29\nin expression starting at\
    \ /tmp/tmpurg22xt4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ is a function that takes a function and a list of numbers and returns true if\
    \ the list of numbers is sorted using the given function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kz6n2_p.jl:33\nin expression starting at\
    \ /tmp/tmp7kz6n2_p.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrdk7h3a.jl:28\nin expression starting at\
    \ /tmp/tmpnrdk7h3a.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpimmnnr.jl:34\nin expression starting at\
    \ /tmp/tmpnpimmnnr.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of unique elements in a vector. Assume that there are\
    \ no duplicate elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbol_9l_3.jl:34\nin expression starting at\
    \ /tmp/tmpbol_9l_3.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    last = sorted[end]\n    last = last.last if length(sorted) > 1 else last\n\
    \    for x in lst\n        if x != last\n            return false\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpvtws5nbh.jl:24 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvtws5nbh.jl:27\n\
    in expression starting at /tmp/tmpvtws5nbh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ false\n    \n    for x in lst\n        if x != sort(x)\n            sorted =\
    \ true\n            break\n        end\n    end\n    \n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxhn6wrn.jl:37\nin expression starting at\
    \ /tmp/tmpdxhn6wrn.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfii5a7c4.jl:1\nin expression starting at /tmp/tmpfii5a7c4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    sorted = sorted && (lst.head == lst.last)\n    for x in lst[1:end-1]\n  \
    \      sorted = sorted && (lst.head < x)\n    end\n    sorted\nend\n</cell>\n\
    <text>\nis_sorted()\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3twvsky8.jl:32\nin expression starting at\
    \ /tmp/tmp3twvsky8.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    last = lst[1]\n    \n    for i in lst[2:end]\n\
    \        if i == last\n            return false\n        last = i\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpiiiuh1yh.jl:30\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiiiuh1yh.jl:1\n\
    in expression starting at /tmp/tmpiiiuh1yh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    sorted = sorted && (lst.head == lst.last)\n    for i in lst.tail:\n     \
    \   if i != lst.head\n            sorted = sorted && (lst.head < i)\n        end\n\
    \    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_flwiu2.jl:28\nin expression starting at\
    \ /tmp/tmpi_flwiu2.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend\n</cell>\n<code language=julia-1.3>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n@test is_sorted(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ybmt221.jl:28\nin expression starting at\
    \ /tmp/tmp9ybmt221.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.0>\n\
    @test is_sorted([5, 2, 3, 4, 1])\n@test is_sorted([5, 2, 3, 4, 1, 1])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5,\
    \ 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test\
    \ is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3,\
    \ 4, 5])\n@test is_sorted([5, 2, 3, 4, 1, 2, 3, 4, 5])\n@test is_sorted([5, 2,\
    \ 3, 4, 1, 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpniuvg5l3.jl:33\nin expression starting at\
    \ /tmp/tmpniuvg5l3.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xjetw0f.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xjetw0f.jl:1\n\
    in expression starting at /tmp/tmp5xjetw0f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedsf0yjf.jl:1\nin expression starting at /tmp/tmpedsf0yjf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    count_sort(lst)\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gjbaorz.jl:33\nin expression starting at\
    \ /tmp/tmp2gjbaorz.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of numbers and returns the number of unique numbers in the\
    \ vector. Assume no duplicates.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrz518ye.jl:33\nin expression starting at\
    \ /tmp/tmpfrz518ye.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sort(lst)\
    \ == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd1ahmyzw.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpd1ahmyzw.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd1ahmyzw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd1ahmyzw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd1ahmyzw.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd1ahmyzw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd1ahmyzw.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnpb0xfq.jl:31\nin expression starting at\
    \ /tmp/tmpdnpb0xfq.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    unique_elements = unique(sorted_list)\n    return length(unique_elements)\
    \ == length(sorted_list)\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test\
    \ is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5,\
    \ 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2, 1])\n@test is_sorted([5, 4, 3, 2,\
    \ 1])\n@test is_sorted([5, 4, 3, 2, 1])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmi8n9ljh.jl:29\nin expression starting at\
    \ /tmp/tmpmi8n9ljh.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph54mlgh_.jl:27\nin expression starting at\
    \ /tmp/tmph54mlgh_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    local i =\
    \ 1\n    while i <= length(lst)\n        if lst[i-1] == lst[i]\n            i\
    \ = i + 1\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nis_sorted_by() is a function that takes two arguments:\
    \ a predicate and a vector. It returns true if the predicate is true for all elements\
    \ of the vector, false otherwise. is_sorted_by() also takes an optional third\
    \ argument, which is the value to return if the predicate is false. is_sorted_by()\
    \ also takes an optional fourth argument, which is the value to return if the\
    \ predicate is true.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw16rms3p.jl:36\nin expression starting at\
    \ /tmp/tmpw16rms3p.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    return sorted_list == lst\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptd9_aidr.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmptd9_aidr.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptd9_aidr.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptd9_aidr.jl:32\ntest set: Test\
    \ Failed at /tmp/tmptd9_aidr.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptd9_aidr.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptd9_aidr.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppwwywfp4.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmppwwywfp4.jl:41\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwwywfp4.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwwywfp4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppwwywfp4.jl:44\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwwywfp4.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwwywfp4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppwwywfp4.jl:47\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwwywfp4.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwwywfp4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppwwywfp4.jl:48\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppwwywfp4.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppwwywfp4.jl:38\ntest set: Test\
    \ Failed at /tmp/tmppwwywfp4.jl:49\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp59zr1k0z.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp59zr1k0z.jl:38\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:40\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0crnkjbe.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0crnkjbe.jl:36\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:39\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:42\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:45\n  Expression: candidate([1, 2, 2, 3, 3, 4])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     4     13\n"
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqc01cd_w.jl:39\n  Test threw
    exception\n  Expression: candidate([5]) == true\n  MethodError: no method matching
    sort(::Int64)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpqc01cd_w.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqc01cd_w.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqc01cd_w.jl:38\ntest set: Error
    During Test at /tmp/tmpqc01cd_w.jl:40\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest
    candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpqc01cd_w.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqc01cd_w.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqc01cd_w.jl:38\ntest set: Er'
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpscy8a_9h.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpscy8a_9h.jl:41\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:44\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:47\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:48\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:49\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n        end\n    end\n    return sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp5wz01z4f.jl:37

    '
  stdout: "test set: Error During Test at /tmp/tmp5wz01z4f.jl:40\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp5wz01z4f.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5wz01z4f.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wz01z4f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5wz01z4f.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp5wz01z4f.jl:28\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5wz01z4f.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wz01z4f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5wz01z4f.jl:42\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    lst = sort(lst)\n\
    \    last = lst[1]\n    for x in lst[2:end]\n        if last < x\n           \
    \ return false\n        last = x\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpfi84mlfw.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfi84mlfw.jl:1\n\
    in expression starting at /tmp/tmpfi84mlfw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdkqo84j2.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdkqo84j2.jl:1\n\
    in expression starting at /tmp/tmpdkqo84j2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    if length(lst)\
    \ == 1 \n        return true\n    \n    last = lst[1]\n    \n    for i in lst[2:end]\n\
    \        if i == last\n            return false\n        last = i\n    end\n \
    \   \n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblfi5j41.jl:1\nin expression starting at /tmp/tmpblfi5j41.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0crnkjbe.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0crnkjbe.jl:36\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:39\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:42\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:45\n  Expression: candidate([1, 2, 2, 3, 3, 4])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     4     13\n"
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqc01cd_w.jl:39\n  Test threw
    exception\n  Expression: candidate([5]) == true\n  MethodError: no method matching
    sort(::Int64)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpqc01cd_w.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqc01cd_w.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqc01cd_w.jl:38\ntest set: Error
    During Test at /tmp/tmpqc01cd_w.jl:40\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest
    candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpqc01cd_w.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqc01cd_w.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqc01cd_w.jl:38\ntest set: Er'
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    last = lst[1]\n    for x in lst[2:end]\n\
    \        if x == last\n            return false\n        last = x\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpdt1tl81f.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdt1tl81f.jl:1\n\
    in expression starting at /tmp/tmpdt1tl81f.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n        end\n    end\n    return sorted\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqc01cd_w.jl:39\n  Test threw
    exception\n  Expression: candidate([5]) == true\n  MethodError: no method matching
    sort(::Int64)\n  Closest candidates are:\n    sort(!Matched::AbstractUnitRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpqc01cd_w.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqc01cd_w.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqc01cd_w.jl:38\ntest set: Error
    During Test at /tmp/tmpqc01cd_w.jl:40\n  Test threw exception\n  Expression: candidate([1,
    2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n  Closest
    candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n    sort(!Matched::AbstractRange)
    at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n    sort(!Matched::SparseArrays.SparseVector{Tv,
    Ti}; kws...) where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n    ...\n  Stacktrace:\n   [1]
    is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpqc01cd_w.jl:27\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqc01cd_w.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqc01cd_w.jl:38\ntest set: Er'
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    if length(lst)\
    \ == 1 \n        return true\n    end\n    \n    last = lst[1]\n    for i in lst[2:end]\n\
    \        if i > last\n            return false\n        end\n        last = i\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzj08qin.jl:39\nin expression starting at\
    \ /tmp/tmpnzj08qin.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_bool\
    \ = sort(lst) == lst\n    \n    if length(lst) == length(unique(lst))\n      \
    \  return sorted_bool\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2q0joz7_.jl:34\nin expression starting at\
    \ /tmp/tmp2q0joz7_.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnqr1gg2w.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpnqr1gg2w.jl:40\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqr1gg2w.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqr1gg2w.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnqr1gg2w.jl:43\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqr1gg2w.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqr1gg2w.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnqr1gg2w.jl:46\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqr1gg2w.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqr1gg2w.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnqr1gg2w.jl:47\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnqr1gg2w.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnqr1gg2w.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnqr1gg2w.jl:48\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given vector is sorted in descending order. Assume no negative\
    \ numbers and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6e3nrv03.jl:34\nin expression starting at\
    \ /tmp/tmp6e3nrv03.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    length(sorted) == length(lst) && all(sorted .== lst)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == false\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7_9xiks.jl:28\nin expression starting at\
    \ /tmp/tmpt7_9xiks.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kf7g4v9.jl:34\nin expression starting at\
    \ /tmp/tmp3kf7g4v9.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3,\
    \ 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test\
    \ is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5, 6, 4, 3, 1])\n@test is_sorted([5,\
    \ 6, 4, 3, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrhm1pn3.jl:34\nin expression starting at\
    \ /tmp/tmpzrhm1pn3.jl:34\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(unique(lst))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(sort(lst))\n\
    \        return true\n    return false\nend\n</cell>\n<code language=julia-1.4>\n\
    @test is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns true if the vector is sorted in descending order. Assume no negative\
    \ numbers and only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3kiblht.jl:29\nin expression starting at\
    \ /tmp/tmpw3kiblht.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    \n    for x in lst\n        if x != sort(x)\n            sorted =\
    \ false\n            break\n    end\n    \n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3i39vcnr.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3i39vcnr.jl:1\n\
    in expression starting at /tmp/tmp3i39vcnr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6tbooaa.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6tbooaa.jl:1\n\
    in expression starting at /tmp/tmps6tbooaa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    sorted = sorted && all(lst.==sort(lst))\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl67i1ifj.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpl67i1ifj.jl:43\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl67i1ifj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl67i1ifj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl67i1ifj.jl:44\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl67i1ifj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl67i1ifj.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != x\n            sorted = false\n           \
    \ break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyf85msiw.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyf85msiw.jl:1\n\
    in expression starting at /tmp/tmpyf85msiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xjetw0f.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xjetw0f.jl:1\n\
    in expression starting at /tmp/tmp5xjetw0f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnof8nak6.jl:33\nin expression starting at\
    \ /tmp/tmpnof8nak6.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) <= length(sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 2, 3, 4, 1]) ==\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3,\
    \ 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqt8zbnr.jl:29\nin expression starting at\
    \ /tmp/tmpgqt8zbnr.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \            break\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ function\nGiven a vector of numbers, return whether or not they are sorted\n\
    in ascending order. If vector has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqej60fxa.jl:34\nin expression starting at\
    \ /tmp/tmpqej60fxa.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return length(sorted) == length(lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsapvmxfl.jl:28\nin expression starting at\
    \ /tmp/tmpsapvmxfl.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) == true\n@assert is_sorted([1, 3, 2, 4, 5]) == false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) == true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == true\n\
    @assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == false\n@assert is_sorted([1, 2, 2,\
    \ 3, 3, 4]) == true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) == false\n</cell>\n\
    <text>\nis_sorted() is a higher-order function. It takes another function as its\
    \ argument, which is called for each element of the vector to determine whether\
    \ the element should be kept in the sorted order. is_sorted() returns a boolean\
    \ vector, which is true if the vector is sorted, and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjl768ul.jl:28\nin expression starting at\
    \ /tmp/tmpvjl768ul.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    last = sorted[end]\n    for x in sorted\n        if x != last\n         \
    \   return false\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpi9b2c412.jl:27\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi9b2c412.jl:1\n\
    in expression starting at /tmp/tmpi9b2c412.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 6])\
    \ == true\n@assert is_sorted([5, 1, 2, 3, 4, 5]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n\
    @assert is_sorted([5, 1, 2, 2, 3, 3, 4]) == true\n@assert is_sorted([5, 1, 2,\
    \ 2, 2, 3, 4]) == false\n@assert is_sorted([5, 1, 2, 2, 3, 3, 4, 5]) == true\n\
    @assert is_sorted([5, 1, 2, 2, 2, 3, 4, 5]) == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the number of\
    \ unique numbers in the vector. Assume no negative numbers and only integers.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ibnqf8c.jl:29\nin expression starting at\
    \ /tmp/tmp8ibnqf8c.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert\
    \ is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n\
    @assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1])\
    \ == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4,\
    \ 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert \n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpanj6ybds.jl:35\nin expression starting at\
    \ /tmp/tmpanj6ybds.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    \n    trues = zeros(length(sorted_list), Bool)\n    \n    for i = 1:length(sorted_list)\n\
    \        if sorted_list[i] != sorted_list[i-1]\n            trues[i] = true\n\
    \        else\n            trues[i] = false\n        end\n    end\n    \n    return\
    \ trues\nend\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n\
    @time is_sorted(rand(1:10000));\n</cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n\
    </cell>\n<code language=julia-1.4>\n@time is_sorted(rand(1:10000));\n</cell>\n\
    <code language=julia-1.4>\n\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpta_gaq1w.jl:39\nin expression starting at\
    \ /tmp/tmpta_gaq1w.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    sorted.length == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmp217j5ov3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp217j5ov3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp217j5ov3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp217j5ov3.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp217j5ov3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp217j5ov3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp217j5ov3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp217j5ov3.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp217j5ov3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp217j5ov3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp217j5ov3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp217j5ov3.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp217j5ov3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp217j5ov3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5, 6]) == true\n  type Array has no"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedsf0yjf.jl:1\nin expression starting at /tmp/tmpedsf0yjf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xjetw0f.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xjetw0f.jl:1\n\
    in expression starting at /tmp/tmp5xjetw0f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    lst = sort(lst)\n\
    \    return lst == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([5,\
    \ 4, 3, 2, 1]) == true\n@assert is_sorted([5, 4, 3, 2, 1]) == true\n@assert is_sorted([\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpldo9j7jy.jl:28\nin expression starting at\
    \ /tmp/tmpldo9j7jy.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted() returns\
    \ a boolean. True or false. True means it's sorted. False means it's not sorted.\
    \ is_sorted() returns true if the list is sorted, and false if not.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkci9gt4x.jl:33\nin expression starting at\
    \ /tmp/tmpkci9gt4x.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(unique(lst))\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([5, 2, 3, 4, 1])\n</cell>\n<text>\nis_sorted()\
    \ is a generic function and can take any type that implements Base.eltype(). Vector{Int64}\
    \ implements eltype() with Int64, so is_sorted() will work for any Vector{Int64}.\
    \ is_sorted() also works for other types that implement eltype() with other types.\
    \ For example, Vector{Int} implements eltype() with Float64, so is_sorted() will\
    \ work for any Vector{Int}.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkivm1o0_.jl:31\nin expression starting at\
    \ /tmp/tmpkivm1o0_.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.0>\n\
    @test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n@test is_sorted([1, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 2, 2, 2, 3, 4])\n@test is_sorted([2, 2, 2, 2, 3, 4])\n@test is_sorted([2, 2,\
    \ 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2,\
    \ 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2,\
    \ 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3,\
    \ 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n\
    @test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test\
    \ is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2,\
    \ 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2,\
    \ 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2,\
    \ 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2,\
    \ 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3,\
    \ 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n\
    @test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test\
    \ is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2,\
    \ 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2,\
    \ 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2,\
    \ 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2,\
    \ 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3,\
    \ 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n@test is_sorted([2, 2, 2, 2, 3, 3])\n\
    @test is_sorted([2, 2, 2, 2, 3, 3])\n@\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fxdk4nm.jl:33\nin expression starting at\
    \ /tmp/tmp2fxdk4nm.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp59zr1k0z.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp59zr1k0z.jl:38\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:40\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    \n    for x in lst\n        if x != sort(x)\n            sorted =\
    \ false\n            break\n        end\n    end\n    \n    return sorted\nend\n\
    </cell>\n<text>\nis_sorted_by() is a function that takes a function and a list\
    \ of numbers and returns true if the list of numbers is sorted according to the\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8eza526_.jl:37\nin expression starting at\
    \ /tmp/tmp8eza526_.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    if length(sorted) == length(lst)\n        return true\n    else\
    \ \n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_93pmm0i.jl:33\nin expression starting at\
    \ /tmp/tmp_93pmm0i.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 2])\
    \ == false\n@assert is_sorted([5, 3, 2, 4, 3]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 4]) == false\n@assert is_sorted([5, 3, 2, 4, 5]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 6]) == false\n@assert is_sorted([5, 3, 2, 4, 7]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 8]) == false\n@assert is_sorted([5, 3, 2, 4, 9]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 10]) == false\n@assert is_sorted([5, 3, 2, 4, 11]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 12]) == false\n@assert is_sorted([5, 3, 2, 4, 13]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 14]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 15]) == true\n@assert is_sorted([5, 3, 2, 4, 16]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 17]) == true\n@assert is_sorted([5, 3, 2, 4, 18]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 19]) == true\n@assert is_sorted([5, 3, 2, 4, 20]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 21]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 22]) == false\n@assert is_sorted([5, 3, 2, 4, 23]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 24]) == false\n@assert is_sorted([5, 3, 2, 4, 25]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 26]) == false\n@assert is_sorted([5, 3, 2, 4, 27]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 28]) == false\n@assert is_sorted([5, 3,\
    \ 2, 4, 29]) == true\n@assert is_sorted([5, 3, 2, 4, 30]) == false\n@assert is_sorted([5,\
    \ 3, 2, 4, 31]) == true\n@assert is_sorted([5, 3, 2, 4, 32]) == false\n@assert\
    \ is_sorted([5, 3, 2, 4, 33]) == true\n@assert is_sorted([5, 3, 2, 4, 34]) ==\
    \ false\n@assert is_sorted([5, 3, 2, 4, 35]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 36]) == false\n@assert is_sorted([5, 3, 2, 4, 37]) == true\n@assert \n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ms3czc4.jl:33\nin expression starting at\
    \ /tmp/tmp8ms3czc4.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 9 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0crnkjbe.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmp0crnkjbe.jl:36\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:39\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:42\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0crnkjbe.jl:45\n  Expression: candidate([1, 2, 2, 3, 3, 4])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0crnkjbe.jl:45 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0crnkjbe.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     4     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 2, 3, 4, 1])\n</cell>\n\
    <text>\nExercise: Write a function that checks whether a vector is sorted in descending\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcsdpbo9w.jl:27\nin expression starting at\
    \ /tmp/tmpcsdpbo9w.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n</cell>\n\
    <text>\nExercise: Write a function that returns whether or not a vector is sorted\
    \ in descending order. Assume no negative numbers and only integers.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sq0x8sr.jl:28\nin expression starting at\
    \ /tmp/tmp9sq0x8sr.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    length(sorted) == length(lst) && all(sorted .== lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdoeyiizp.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpdoeyiizp.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdoeyiizp.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdoeyiizp.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpdoeyiizp.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdoeyiizp.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdoeyiizp.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    lst = sort(lst)\n\
    \    last = lst[1]\n    for i in 2:length(lst)\n        if lst[i] != last\n  \
    \          return false\n        last\n    end\n    return true\nend\n</cell>\n\
    <text>\nis_sorted_by() function\nGiven a vector of numbers, return whether or\
    \ not they are sorted\nin ascending order by the given function. If vector has\
    \ more than 1\nduplicate of the same number, return false. Assume no negative\
    \ numbers\nand only integers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8b5pl_7r.jl:34\nin expression starting at\
    \ /tmp/tmp8b5pl_7r.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1b49lnx0.jl:35\nin expression starting at\
    \ /tmp/tmp1b49lnx0.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xjetw0f.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xjetw0f.jl:1\n\
    in expression starting at /tmp/tmp5xjetw0f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ function\nThis function will take in a function and a list of numbers and return\
    \ whether or not the numbers are sorted in the order specified by the function.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe26efwre.jl:33\nin expression starting at\
    \ /tmp/tmpe26efwre.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp59zr1k0z.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp59zr1k0z.jl:38\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:40\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    \n    if length(sorted_list) == length(lst)\n        for (i,val) in enumerate(sorted_list)\n\
    \            if val != lst[i]\n                return false\n            end\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <text>\nis_sorted_by() is a function that takes a function and a list of numbers\
    \ and returns true if the function returns true for all the numbers in the list.\
    \ is_sorted_by() also takes a key function and a list of numbers and returns true\
    \ if the function returns true for all the numbers in the list that have the same\
    \ key as the key function.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpuhs9ncsi.jl:28 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuhs9ncsi.jl:33\n\
    in expression starting at /tmp/tmpuhs9ncsi.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3,\
    \ 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6,\
    \ 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n\
    <code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\n\
    is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2,\
    \ 3, 4, 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4,\
    \ 6, 7])\n</cell>\n<code language=julia-1.3>\nis_sorted([5, 1, 2, 3, 4, 6, 7])\n\
    </cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdszfx_6.jl:34\nin expression starting at\
    \ /tmp/tmpmdszfx_6.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb37g3qex.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpb37g3qex.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb37g3qex.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb37g3qex.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpb37g3qex.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb37g3qex.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb37g3qex.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != x\n            sorted = false\n           \
    \ break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyf85msiw.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyf85msiw.jl:1\n\
    in expression starting at /tmp/tmpyf85msiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpilh40xjv.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpilh40xjv.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilh40xjv.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilh40xjv.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpilh40xjv.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpilh40xjv.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpilh40xjv.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(sort(lst))\n\
    \        return true\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7])\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9])\n@assert\
    \ !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10])\n@assert !is_sorted([5, 1, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10,\
    \ 11, 12])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13])\n\
    @assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15])\n@assert !is_sorted([5, 1,\
    \ 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16])\n@assert !is_sorted([5, 1,\
    \ 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n@assert\
    \ !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n@assert !is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n@assert !is_sorted([5, 1, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26])\n@assert !is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzcxjg1o.jl:31\nin expression starting at\
    \ /tmp/tmpxzcxjg1o.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.3>\n\
    @test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n@test is_sorted([1, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 2, 2, 2, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 4])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3,\
    \ 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1, 1, 2, 2, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\
    @test is_sorted([1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, \nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13k4i42k.jl:33\nin expression starting at\
    \ /tmp/tmp13k4i42k.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    last = sorted[end]\n    last = last.last if length(sorted) > 1 else last\n\
    \    return last == lst[1]\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpsn9j9ncq.jl:24 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsn9j9ncq.jl:27\n\
    in expression starting at /tmp/tmpsn9j9ncq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    seen = Set()\n    for x in lst\n        if x in seen\n            sorted\
    \ = false\n            break\n        seen.add(x)\n    end\n    return sorted\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ht0jrd2.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2ht0jrd2.jl:1\n\
    in expression starting at /tmp/tmp2ht0jrd2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    sorted = sorted && all(lst.==sort(lst))\n    return sorted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpl67i1ifj.jl:31

    '
  stdout: "test set: Test Failed at /tmp/tmpl67i1ifj.jl:43\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl67i1ifj.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl67i1ifj.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpl67i1ifj.jl:44\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl67i1ifj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl67i1ifj.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 1, 2, 3, 4, 6])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</cell>\n<code language=julia-1.5>\n@test\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7])\n</\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65xso0wd.jl:33\nin expression starting at\
    \ /tmp/tmp65xso0wd.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    \n    for x in lst\n        if x != sort(x)\n            sorted =\
    \ false\n            break\n    end\n    \n    return sorted\nend\n</cell>\n<text>\n\
    is_sorted() is a function that takes a vector of numbers and returns true if the\
    \ vector is sorted in ascending order. is_sorted() uses sort() to sort the vector\
    \ and checks to see if they are equal. If they are not, it returns false. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. sort() is a function that\
    \ sorts a vector of numbers in ascending order. sort() is a function that sorts\
    \ a vector of numbers in ascending order. sort() is a function that sorts a vector\
    \ of numbers in ascending order. sort() is a function that sorts a vector of numbers\
    \ in ascending order. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. sort() is a function that\
    \ sorts a vector of numbers in ascending order. sort() is a function that sorts\
    \ a vector of numbers in ascending order. sort() is a function that sorts a vector\
    \ of numbers in ascending order. sort() is a function that sorts a vector of numbers\
    \ in ascending order. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. sort() is a function that\
    \ sorts a vector of numbers in ascending order. sort() is a function that sorts\
    \ a vector of numbers in ascending order. sort() is a function that sorts a vector\
    \ of numbers in ascending order. sort() is a function that sorts a vector of numbers\
    \ in ascending order. sort() is a function that sorts a vector of numbers in ascending\
    \ order. sort() is a function that sorts a vector of numbers in ascending order.\
    \ sort() is a function that sorts a vector of numbers in ascending order. sort()\
    \ is a function that sorts a vector of numbers in ascending order. sort() is a\
    \ function that sorts a vector of numbers in ascending order. sort() is a function\
    \ that sorts a vector of numbers in ascending order. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nprm568.jl:36\nin expression starting at\
    \ /tmp/tmp5nprm568.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp59zr1k0z.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp59zr1k0z.jl:38\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:40\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpimmnnr.jl:34\nin expression starting at\
    \ /tmp/tmpnpimmnnr.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ sort(lst)\n    \n    if length(sorted) == length(lst)\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 8 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpscy8a_9h.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpscy8a_9h.jl:41\n  Expression: candidate([1,\
    \ 3, 2, 4, 5]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:44\n  Expression: candidate([1, 3, 2, 4, 5, 6,\
    \ 7]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:47\n  Expression: candidate([3, 2, 1]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:48\n  Expression: candidate([1, 2, 2, 2, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpscy8a_9h.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpscy8a_9h.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpscy8a_9h.jl:49\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/ju"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([5, 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5,\
    \ 3, 2, 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2,\
    \ 4, 1])\n</cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n\
    </cell>\n<code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\n\
    <code language=julia-1.5>\n@test is_sorted([5, 3, 2, 4, 1])\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rxpzoeo.jl:33\nin expression starting at\
    \ /tmp/tmp5rxpzoeo.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ false\n    \n    for x in lst\n        if x != sort(x)\n            sorted =\
    \ true\n            break\n        end\n    end\n    \n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5,\
    \ 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([5, 4, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([5, 4, 3, 2, 1])\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxhn6wrn.jl:37\nin expression starting at\
    \ /tmp/tmpdxhn6wrn.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) ==\
    \ true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2,\
    \ 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert \nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82_t_u1l.jl:27\nin expression starting at\
    \ /tmp/tmp82_t_u1l.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    sorted.length == 1\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4,\
    \ 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2,\
    \ 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n@assert !is_sorted([5, 4, 3, 2, 1])\n\
    @assert !is_sorted([5, 4, 3, 2, 1])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ftifxdx.jl:28\nin expression starting at\
    \ /tmp/tmp1ftifxdx.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    counts = Dict{Int, Int}()\n    for i\
    \ in lst\n        counts[i] = counts[i] + 1 \n    end\n    \n    for i in counts\n\
    \        if counts[i] > 1\n            return false\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg3ywwp3s.jl:39\nin expression starting at\
    \ /tmp/tmpg3ywwp3s.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n@test is_sorted([1, 2, 3, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 2, 2, 2, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 4])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 4, 5])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 4, 5])\n@test is_sorted([1, 1, \nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi63z24uk.jl:33\nin expression starting at\
    \ /tmp/tmpi63z24uk.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sort(lst)\
    \ == lst\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpd1ahmyzw.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpd1ahmyzw.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd1ahmyzw.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd1ahmyzw.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpd1ahmyzw.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd1ahmyzw.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd1ahmyzw.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend\n</cell>\n<text>\nis_sorted() is a higher-order\
    \ function that takes a function as an argument. is_sorted() returns a function\
    \ that takes an array and returns true if the array is sorted.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvs_shf2.jl:28\nin expression starting at\
    \ /tmp/tmphvs_shf2.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted_list\
    \ = sort(lst)\n    \n    if length(sorted_list) == length(lst)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 3, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 3, 2, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 3, 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 3, 3, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2,\
    \ 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2,\
    \ 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3,\
    \ 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nis_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    is_sorted([1, 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1,\
    \ 2, 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2,\
    \ 2, 2, 3, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nis_sorted([1, 2, 2,\
    \ 2, 3, 3, 4, 5])\n</cell\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lakm9xx.jl:34\nin expression starting at\
    \ /tmp/tmp1lakm9xx.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != x\n            sorted = false\n           \
    \ break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyf85msiw.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyf85msiw.jl:1\n\
    in expression starting at /tmp/tmpyf85msiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \   end\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 12 errored,
    0 broken.

    in expression starting at /tmp/tmp59zr1k0z.jl:35

    '
  stdout: "test set: Error During Test at /tmp/tmp59zr1k0z.jl:38\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  MethodError: no method matching sort(::Int64)\n\
    \  Closest candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\n\
    \    sort(!Matched::AbstractRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307\n\
    \    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti}\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmp59zr1k0z.jl:27\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp59zr1k0z.jl:39 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp59zr1k0z.jl:37\ntest set:\
    \ Error During Test at /tmp/tmp59zr1k0z.jl:40\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    sorted.length == 1\nend\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 13 errored,
    0 broken.

    in expression starting at /tmp/tmp217j5ov3.jl:30

    '
  stdout: "test set: Error During Test at /tmp/tmp217j5ov3.jl:33\n  Test threw exception\n\
    \  Expression: candidate([5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp217j5ov3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp217j5ov3.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp217j5ov3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp217j5ov3.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5]) == true\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp217j5ov3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp217j5ov3.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp217j5ov3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp217j5ov3.jl:35\n  Test threw exception\n  Expression:\
    \ candidate([1, 3, 2, 4, 5]) == false\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmp217j5ov3.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp217j5ov3.jl:35 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp217j5ov3.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp217j5ov3.jl:36\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 5, 6]) == true\n  type Array has no"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 2, 3, 4, 1]) ==\
    \ true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3,\
    \ 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert is_sorted([5, 2, 3, 4, 1]) == true\n@assert is_sorted([5,\
    \ 2, 3, 4, 1]) == true\n@assert \nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3paoetdx.jl:27\nin expression starting at\
    \ /tmp/tmp3paoetdx.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    last = sorted[end]\n    for i in 1:length(lst)\n        if lst[i] != last\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpt5xjce0t.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpt5xjce0t.jl:40\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5xjce0t.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5xjce0t.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt5xjce0t.jl:42\n  Expression: candidate([1, 2, 3, 4, 5, 6])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt5xjce0t.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5xjce0t.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpt5xjce0t.jl:43\n  Expression: candidate([1, 2, 3, 4, 5, 6,\
    \ 7]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt5xjce0t.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt5xjce0t.jl:38\ntest set: Error\
    \ During Test at /tmp/tmpt5xjce0t.jl:45\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == true\n  BoundsError: attempt to access 0-element\
    \ Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861\
    \ [inlined]\n   [2] is_sorted(lst::Vector{Int64})\n     @ Main /tmp/tmpt5xjce0t.jl:26\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt5xjce0t.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n  "
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted = sort(lst)\n    \n    if length(sorted)\
    \ == length(lst)\n        return true\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1b49lnx0.jl:35\nin expression starting at\
    \ /tmp/tmp1b49lnx0.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph54mlgh_.jl:27\nin expression starting at\
    \ /tmp/tmph54mlgh_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 5])\
    \ == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9])\
    \ == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12]) == false\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11, 12, 13]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 8, 7, 9, 10, 11, 12, 13, 14]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 8, 7, 9, 10, 11, 12, 13, 14, 15]) == false\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\
    \ == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\
    \ == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23]) == false\n@assert is_sorted([5, 1, 2, 3,\
    \ 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\
    \ == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 8, 7, 9, 10,\
    \ 11, 12, 13, \nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5yjk050s.jl:27\nin expression starting at\
    \ /tmp/tmp5yjk050s.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return all(sorted == lst)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsgzm_ti.jl:28\nin expression starting at\
    \ /tmp/tmpgsgzm_ti.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    \n    sorted_list = sort(lst)\n    \n    if\
    \ length(sorted_list) == length(lst)\n        return true\n    else\n        return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngexcpp1.jl:36\nin expression starting at\
    \ /tmp/tmpngexcpp1.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return sorted == lst\nend\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([1,\
    \ 2, 3, 4, 5]) == true\n@assert is_sorted([1, 3, 2, 4, 5]) == false\n@assert is_sorted([1,\
    \ 2, 3, 4, 5, 6]) == true\n@assert is_sorted([1, 2, 3, 4, 5, 6, 7]) == true\n\
    @assert is_sorted([1, 3, 2, 4, 5, 6, 7]) == false\n@assert is_sorted([1, 2, 2,\
    \ 3, 3, 4]) == true\n@assert is_sorted([1, 2, 2, 2, 3, 4]) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a vector. Assume no duplicates.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps88v_xom.jl:28\nin expression starting at\
    \ /tmp/tmps88v_xom.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    uniques = unique(sorted)\n    return length(uniques) == length(sorted)\n\
    end\n</cell>\n<text>\nis_sorted() returns a boolean, true if the given vector\
    \ is sorted in ascending order, false otherwise. is_sorted() also returns a vector\
    \ of unique numbers in the given vector, which is useful for checking if the given\
    \ vector is sorted.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t\
    @test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t\
    @test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9e31_g4.jl:29\nin expression starting at\
    \ /tmp/tmpz9e31_g4.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpdmv6ywgl.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpdmv6ywgl.jl:41\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdmv6ywgl.jl:42\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdmv6ywgl.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdmv6ywgl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted_list = sort(lst)\n\
    \    length(sorted_list) == length(lst) && all(issorted(sorted_list) == true)\n\
    end\n</cell>\n<text>\nis_sorted() tests if a vector is sorted in ascending order.\
    \ is_sorted() returns true if the vector is sorted in ascending order, and false\
    \ otherwise. is_sorted() also returns true if the vector is sorted in descending\
    \ order, and false otherwise. is_sorted() also returns true if the vector is sorted\
    \ in any order, and false otherwise. is_sorted() also returns true if the vector\
    \ is sorted in any order except for descending order, and false otherwise. is_sorted()\
    \ also returns true if the vector is sorted in any order except for ascending\
    \ order, and false otherwise. is_sorted() also returns true if the vector is sorted\
    \ in any order except for descending order and ascending order, and false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvimmivoo.jl:28\nin expression starting at\
    \ /tmp/tmpvimmivoo.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    lst = sort(lst)\n\
    \    last = lst[1]\n    for i in 2:length(lst)\n        if lst[i] > last\n   \
    \         return false\n        last = lst[i]\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbordwoz.jl:34\nin expression starting at\
    \ /tmp/tmppbordwoz.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n\
    @assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert\
    \ is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5,\
    \ 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3, 2, 1])\n@assert is_sorted([5, 4, 3,\
    \ 2, 1])\n@assert is_sorted([\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jixekpl.jl:33\nin expression starting at\
    \ /tmp/tmp5jixekpl.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    seen = Set()\n    for x in lst\n        if x in seen\n            sorted\
    \ = true\n        else\n            push!(seen, x)\n        end\n    end\n   \
    \ return sorted\nend\n</cell>\n<text>\nis_sorted_by() is a helper function that\
    \ returns a function that checks if a list is sorted by a specific key. For example,\
    \ we can sort a list of numbers by their value using the following code:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) ==\
    \ true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3,\
    \ 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88oojpf2.jl:36\nin expression starting at\
    \ /tmp/tmp88oojpf2.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    for x in lst\n        if x != sort(x)\n            sorted = false\n\
    \        end\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5])\
    \ == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx__qfem8.jl:34\nin expression starting at\
    \ /tmp/tmpx__qfem8.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test is_sorted([1, 2, 3, 4, 5])\n@test is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n@test is_sorted([1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 2, 2, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of numbers and returns the number of unique numbers in the vector. Assume\
    \ no duplicate numbers.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyk4_vwq.jl:33\nin expression starting at\
    \ /tmp/tmpeyk4_vwq.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<text>\nis_sorted() is a higher-order function. It takes another\
    \ function as its argument, and returns a new function that takes an argument\
    \ and returns a boolean.\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7ss_yoc.jl:27\nin expression starting at\
    \ /tmp/tmpb7ss_yoc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\n</cell>\n<text>\nis_sorted_by()\
    \ is a function that takes a function and a list of numbers and returns true if\
    \ the function returns true for all the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s3j6h3c.jl:33\nin expression starting at\
    \ /tmp/tmp_s3j6h3c.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    if is_sorted(lst)\
    \ == true\n        return true\n    else\n        true\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    sorted = sorted && all(lst.==sort(lst))\n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert\
    \ is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n\
    @assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1])\
    \ == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3,\
    \ 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\n@assert is_sorted([5,\
    \ 3, 2, 4, 1]) == true\n@assert is_sorted([5, 3, 2, 4, 1]) == true\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgibi3ze.jl:29\nin expression starting at\
    \ /tmp/tmpmgibi3ze.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = true\n      \
    \      break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xjetw0f.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xjetw0f.jl:1\n\
    in expression starting at /tmp/tmp5xjetw0f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = false\n\
    \    sorted = true\n    for x in lst\n        if x != sort(x)\n            sorted\
    \ = false\n            break\n    end\n    return sorted\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9f5v0o48.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9f5v0o48.jl:1\n\
    in expression starting at /tmp/tmp9f5v0o48.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sort(lst) == lst\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_sorted([5, 1, 2, 3, 4, 6])\
    \ == true\n@assert is_sorted([5, 1, 2, 3, 4, 7]) == false\n@assert is_sorted([5,\
    \ 1, 2, 3, 4, 6, 7]) == true\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n\
    @assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2,\
    \ 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4,\
    \ 6, 7]) == false\n@assert is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert\
    \ is_sorted([5, 1, 2, 3, 4, 6, 7]) == false\n@assert \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7icya8e.jl:27\nin expression starting at\
    \ /tmp/tmpq7icya8e.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = sort(lst)\n\
    \    return length(sorted) == length(lst) && all(sorted .== lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5])\
    \ == false)\n\t@test(candidate([1, 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\
    \t@test(candidate(Vector{Int64}([])) == true)\n\t@test(candidate([1]) == true)\n\
    \t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1, 2, 2, 2, 3, 4])\
    \ == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 11 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp9_ht4mgk.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp9_ht4mgk.jl:42\n  Expression: candidate([1,\
    \ 2, 2, 2, 3, 4]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_ht4mgk.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_ht4mgk.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp9_ht4mgk.jl:43\n  Expression: candidate([1, 2, 3, 3, 3, 4])\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9_ht4mgk.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9_ht4mgk.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     2     13\n"
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    \n    sorted =\
    \ true\n    \n    for elt in lst\n        if elt != elt.prev\n            sorted\
    \ = false\n            break\n        end\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test is_sorted([1, 2, 3, 4, 5])\n@test\
    \ is_sorted([1, 3, 2, 4, 5])\n@test is_sorted([1, 2, 3, 4, 5, 6])\n@test is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7])\n@test is_sorted([1, 3, 2, 4, 5, 6, 7])\n@test is_sorted([1,\
    \ 2, 2, 3, 3, 4])\n@test is_sorted([1, 2, 2, 2, 3, 4])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 4])\n@test is_sorted([1, 1, 2, 2, 3, 3, 4])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1,\
    \ 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1,\
    \ 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test\
    \ is_sorted([1, 1, 2, 2, 3, 3, 3, 1, 2])\n@test is_sorted([1, 1, 2, 2, 3, 3, 3,\
    \ 1, 2])\n@test is_sorted([\nusing Test\n\n@testset begin\n\ncandidate = is_sorted;\n\
    \t@test(candidate([5]) == true)\n\t@test(candidate([1, 2, 3, 4, 5]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1, 2, 3, 4, 5,\
    \ 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\n\
    \t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\t@test(candidate([1,\
    \ 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3, 3, 4]) == false)\n\
    \t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1, 2, 3, 4])\
    \ == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_t0xd18.jl:37\nin expression starting at\
    \ /tmp/tmpq_t0xd18.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector of numbers, return whether or not they are\
    \ sorted\n    in ascending order. If vector has more than 1 duplicate of the same\n\
    \    number, return false. Assume no negative numbers and only integers.\n\n \
    \   Examples\n    >>> is_sorted([5])\n    true\n    >>> is_sorted([1, 2, 3, 4,\
    \ 5])\n    true\n    >>> is_sorted([1, 3, 2, 4, 5])\n    false\n    >>> is_sorted([1,\
    \ 2, 3, 4, 5, 6])\n    true\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    true\n\
    \    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    false\n    >>> is_sorted([1, 2,\
    \ 2, 3, 3, 4])\n    true\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    false\n \
    \   \"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool \n    sorted = true\n\
    \    for x in lst\n        if x != sort(x)\n            sorted = false\n     \
    \       break\n    end\n    return sorted\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_sorted;\n\t@test(candidate([5]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == true)\n\t@test(candidate([1, 3, 2, 4, 5]) == false)\n\t@test(candidate([1,\
    \ 2, 3, 4, 5, 6]) == true)\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7]) == true)\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, 7]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\n\t@test(candidate([1]) == true)\n\t@test(candidate([3, 2, 1]) == false)\n\
    \t@test(candidate([1, 2, 2, 2, 3, 4]) == false)\n\t@test(candidate([1, 2, 3, 3,\
    \ 3, 4]) == false)\n\t@test(candidate([1, 2, 2, 3, 3, 4]) == true)\n\t@test(candidate([1,\
    \ 2, 3, 4]) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbdf36uwl.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbdf36uwl.jl:1\n\
    in expression starting at /tmp/tmpbdf36uwl.jl:1\n"
  stdout: ''
