name: HumanEval_120_maximum
language: jl
prompt: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
  \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector\
  \ will be in the range of [1, 1000].\n        2. The elements in the vector will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\
  function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ["    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    end\n\
    \    return maximum\nend", "    if k > length(arr) || k < 1 \n        throw(ArgumentError(\"\
    k must be in range [1, length(arr)]\"))\n    end", "    if k == 0 \n        return\
    \ arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k)\n        return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum.(maximum.>maximum[i])\n      \
    \  else\n            maximum = maximum.(maximum.<maximum[i])\n        end\n  \
    \  end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 40)\nmaximum([-3, 2, 1, 2, ", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     break\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and a positive integer\
    \ k and returns a sorted vector of length k with the minimum k numbers in arr.\
    \ \nFor example, minimum([-3, -4, 5], 3) should return [-3, -4, 5].", "    if\
    \ k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            push!(maximum, maximum[i])\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \     end\n    end\n    return maximum\nend", "    maximum = arr\n    for i =\
    \ 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5],\
    \ 3), 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array of numbers.", "    if k > length(arr)\n        return\
    \ arr\n    \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers in a vector.", "    if k > length(arr)\n    \
    \    return arr\n    \n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum.(maximum.>arr[i])\n        else\n            maximum = maximum.(maximum.<=arr[i])\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    else\n        maximum = arr[k-1]\n\
    \        for i = k+1:length(arr)\n            if maximum < arr[i]\n          \
    \      maximum = arr[i]\n            end\n        end\n        return maximum\n\
    \    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.3>\nmaximum([4,\
    \ -4, 4], 2)\n</cell>\n<code language=julia-1.3>\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given vector. \nThe function should take in a vector of integers\
    \ and a positive integer k. \nThe function should return the minimum number in\
    \ the vector arr of length k.", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\nend",
  "    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend", "    if k == 0 \n        return arr\n    else\
    \ \n        maximum = maximum(k-1, maximum(arr, k-1))\n        maximum[end] =\
    \ maximum(maximum[end], arr[k-1])\n        return maximum\nend", "    if k <=\
    \ 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in range (0, length(arr))\"\
    ))\n    end\n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n        if\
    \ arr[i] > maximum\n            maximum = arr[i]\n        end\n    end\n    return\
    \ maximum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
