name: HumanEval_120_maximum
language: jl
prompt: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
  \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector\
  \ will be in the range of [1, 1000].\n        2. The elements in the vector will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\
  function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ["    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    end\n\
    \    return maximum\nend", "    if k > length(arr) || k < 1 \n        throw(ArgumentError(\"\
    k must be in range [1, length(arr)]\"))\n    end", "    if k == 0 \n        return\
    \ arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k)\n        return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum.(maximum.>maximum[i])\n      \
    \  else\n            maximum = maximum.(maximum.<maximum[i])\n        end\n  \
    \  end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 40)\nmaximum([-3, 2, 1, 2, ", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     break\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and a positive integer\
    \ k and returns a sorted vector of length k with the minimum k numbers in arr.\
    \ \nFor example, minimum([-3, -4, 5], 3) should return [-3, -4, 5].", "    if\
    \ k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            push!(maximum, maximum[i])\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \     end\n    end\n    return maximum\nend", "    maximum = arr\n    for i =\
    \ 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5],\
    \ 3), 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array of numbers.", "    if k > length(arr)\n        return\
    \ arr\n    \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers in a vector.", "    if k > length(arr)\n    \
    \    return arr\n    \n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum.(maximum.>arr[i])\n        else\n            maximum = maximum.(maximum.<=arr[i])\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    else\n        maximum = arr[k-1]\n\
    \        for i = k+1:length(arr)\n            if maximum < arr[i]\n          \
    \      maximum = arr[i]\n            end\n        end\n        return maximum\n\
    \    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.3>\nmaximum([4,\
    \ -4, 4], 2)\n</cell>\n<code language=julia-1.3>\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given vector. \nThe function should take in a vector of integers\
    \ and a positive integer k. \nThe function should return the minimum number in\
    \ the vector arr of length k.", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\nend",
  "    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend", "    if k == 0 \n        return arr\n    else\
    \ \n        maximum = maximum(k-1, maximum(arr, k-1))\n        maximum[end] =\
    \ maximum(maximum[end], arr[k-1])\n        return maximum\nend", "    if k <=\
    \ 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in range (0, length(arr))\"\
    ))\n    end\n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n        if\
    \ arr[i] > maximum\n            maximum = arr[i]\n        end\n    end\n    return\
    \ maximum\nend", "    if k == 0 \n        return arr\n    else \n        maximum\
    \ = maximum(maximum(arr, k-1), k-1)\n        maximum[end] = maximum(arr[end],\
    \ k-1)\n        return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the numbers in a vector.", "    if k > length(arr)\n    \
    \    throw(ArgumentError(\"k must be <= length(arr)\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    \
    \    end\n    end\n    return maximum\nend\nmaximum()", "    if k <= 0 || k >\
    \ length(arr)\n        throw(ArgumentError(\"k must be in range [0, length(arr))\"\
    ))\n    end\n    maximum = arr\n    for i = k - 1 downto 1 \n        maximum =\
    \ maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n    return maximum\n\
    end", "    if k > length(arr) \n        throw(ArgumentError(\"k should be less\
    \ than or equal to the length of arr\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nmaximum", "    if k <= length(arr)\n\
    \        maximum = arr[k:]\n        maximum.push(-maximum(maximum))\n        return\
    \ maximum\n    else\n        return arr\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: maximum", "    if k > length(arr)\n        throw(ArgumentError(\"k must be\
    \ less than or equal to the length of arr\"))\n    end\n    maximum = arr\n  \
    \  for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k <= length(arr)\n    \
    \    maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector arr\
    \ of integers and a positive integer k, and returns a sorted vector arr of length\
    \ k with the minimum k numbers in arr.", "    if k == 0 \n        return arr\n\
    \    else \n        maximum = maximum([maximum, arr[k]], k-1)\n        return\
    \ maximum\nend", "    if k > length(arr) \n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr) \n        maximum[i] = maximum(maximum(maximum, arr[i]),\
    \ maximum[i])\n    end\n    return maximum\nend\n\"\"\"\n    Given a vector arr\
    \ of integers and a positive integer k, return a sorted vector \n    of length\
    \ k with the minimum k numbers in arr.", "    if k > length(arr)\n        return\
    \ arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nExercise 5\nWrite a function that returns the minimum number in a given\
    \ vector. \nThe function should take in a vector of integers and a positive integer\
    \ k. \nThe function should return a sorted vector of length k with the minimum\
    \ k numbers in arr.", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), k)\n    end\n    return maximum\nend", "    if k == 0 \n        return\
    \ arr\n    \n    maximum = arr[1]\n    \n    for i = 2:k\n        if maximum <\
    \ arr[i] \n            maximum = arr[i]\n        end\n    end\n    \n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k should\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend", "    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr), k)\n    end\n    return maximum\n\
    end", "    if k <= length(arr)\n        maximum = arr\n    else\n        maximum\
    \ = maximum([maximum, arr[k]], k-1)\n    end\n    return maximum\nend", "    if\
    \ k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend", "    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34", "    if k > length(arr)\n        throw(ArgumentError(\"k must be\
    \ less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i\
    \ = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n\
    \    return maximum\nend", "    if k <= length(arr)\n        maximum = arr\n \
    \       for i in 2:k\n            maximum = maximum(maximum(maximum, arr), i)\n\
    \        end\n        return maximum\n    else\n        return arr\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in a given vector. \nThe function should take in a vector of integers and a\
    \ positive integer k. \nThe function should return the minimum number in the given\
    \ vector with length k.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers in a vector. \nThe function should take in a\
    \ vector of integers and return a vector of integers.", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum()",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 41)\nmaximum([-3, 2, 1, 2, ", "    if k <= length(arr)\n        maximum\
    \ = arr\n    else\n        maximum = arr[k:]\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum()", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n\
    \    end\n    return maximum\nend", "    if k == 0 \n        return arr \n   \
    \ else \n        maximum = maximum(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(arr[end], k) \n        return maximum \nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k should be less than or equal to length(arr)\"\
    ))\n    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be\
    \ less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend\nmaximum", "    if k == 0 \n        return arr\n\
    \    else \n        maximum = maximum([maximum, arr[k]], k-1)\n        return\
    \ maximum\nend", "    if k <= length(arr)\n        maximum = arr\n    else\n \
    \       maximum = maximum.(arr[k+1:end])\n    end\n    return maximum\nend", " \
    \   if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend", "    if k > length(arr)\n     \
    \   throw(ArgumentError(\"k should be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       push!(maximum, maximum[i])\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<text>\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nmaximum([4, -4,\
    \ 4], 2)\n</cell>\n<text>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum number in a given vector.",
  "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum number in a given\
    \ vector. \nThe function should take in a vector of integers and a positive integer\
    \ k. \nThe function should return a sorted vector of length k with the minimum\
    \ k numbers in arr. \nThe function should return an empty vector if k is greater\
    \ than the length of the vector.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of arr\"))\n    end\n    maximum =\
    \ arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n   \
    \         maximum = maximum[i-1:end]\n        else\n            break\n      \
    \  end\n    end\n    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the vector\"))\n    end", "    if\
    \ k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), arr[i])\n    end\n   \
    \ return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum number in a given array.", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the array\"))\n    end\n    maximum\
    \ = arr[k-1]\n    for i = k+1:length(arr) \n        if maximum < arr[i] \n   \
    \         maximum = arr[i]\n        end\n    end\n    return maximum\nend", " \
    \   if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum()", "    if k > length(arr)\n        return arr\n    end\n    \n\
    \    maximum = arr[k-1]\n    for i in (1:k-1)\n        if maximum < arr[i]\n \
    \           maximum = arr[i]\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n          \
    \  maximum = maximum[i-1:end]\n        else\n            break\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to the length of arr\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            push!(maximum, maximum[i])\n\
    \        end\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k should be less than or equal to length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i]\
    \ = maximum(maximum, arr[i])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end", "    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be in range [0, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum", "    if k > length(arr)\n        return arr\n    \n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \ end\n    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            break\n        end\n\
    \    end\n    return maximum\nend\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 9)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 11)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 34", "    if k > length(arr)\n        return\
    \ arr\n    \n    maximum = arr[k-1]\n    for i = k+1:length(arr)\n        if arr[i]\
    \ > maximum\n            maximum = arr[i]\n        end\n    end\n    return maximum\n\
    end\nmaximum", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr[k-1]\n    for i in k+1:length(arr)\n        if maximum < arr[i]\n    \
    \        maximum = arr[i]\n        end\n    end\n    return maximum\nend", " \
    \   if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum", "    if k > length(arr)\n        return arr\n    elseif\
    \ k == length(arr)\n        return arr\n    else\n        maximum = arr[k-1]\n\
    \        for i in (2:k)\n            if maximum < arr[i]\n                maximum\
    \ = arr[i]\n            end\n        end\n        return maximum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum number in a given\
    \ array of integers. \nThe function should take one argument, an array of integers,\
    \ and return one integer.", "    if k == 0 \n        return arr\n    else \n \
    \       maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end] = maximum(arr[end],\
    \ k-1)\n        return maximum\nend", "    if k > length(arr)\n        return\
    \ arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum.(-maximum)\n        end\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be <= length(arr)\"))\n    end\n    maximum = arr\n    for i in 1:k\n \
    \       maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr) \n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr) \n        maximum[i] = maximum(maximum(maximum, arr[i-k]),\
    \ arr[i])\n    end\n    return maximum\nend", "    maximum = arr\n    for i =\
    \ k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n    end\n  \
    \  return maximum\nend", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n       \
    \     maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr[k-1]\n    for i in (1:k-1)\n    \
    \    maximum = max(maximum, arr[i])\n    end\n    return maximum\nend", "    if\
    \ k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in range\
    \ [0, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k - 1 downto 1\n\
    \        maximum = maximum(maximum(maximum(maximum, arr[i]), arr[i + 1]), arr[i\
    \ + 2])\n    end\n    return maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5],\
    \ 3)\n</cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector arr of integers and a positive integer k and returns a sorted vector\
    \ arr of length k with the minimum k numbers in arr.", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector arr of integers and a positive integer k and\
    \ returns a sorted vector arr2 of length k with the minimum k numbers in arr.",
  "    if k <= 0 || length(arr) <= k\n        return arr\n    else\n        maximum\
    \ = arr[k-1]\n        for i in k+1:length(arr)\n            if arr[i] > maximum\n\
    \                maximum = arr[i]\n            end\n        end\n        return\
    \ maximum\n    end\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the vector\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    \
    \    end\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if arr[i] > maximum\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum[i], arr[i])\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \     end\n    end\n    return maximum\nend", "    if k > length(arr)\n      \
    \  return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n        if\
    \ maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n\
    \            break\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr[1]\n    for i = 2:k\n        if maximum\
    \ < arr[i]\n            maximum = arr[i]\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n\
    </cell>\n<text>\nExercise 2", "    if k > length(arr)\n        return arr\n  \
    \  else\n        maximum = arr[k-1]\n        for i in k+1:length(arr)\n      \
    \      if maximum < arr[i]\n                maximum = arr[i]\n            end\n\
    \        end\n        return maximum\n    end\nend\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<text>\nExercise 3: maximum\nWrite a function that returns the maximum\
    \ element of a given vector. \nThe function should take in a vector arr of integers\
    \ and a positive integer k. \nThe function should return a sorted vector of length\
    \ k with the maximum k numbers in arr.", "    if k <= 0 || k > length(arr)\n \
    \       throw(ArgumentError(\"k should be in range [1, length(arr)]\"))\n    end\n\
    \    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        return arr\n    \n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \ end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     break\n    end\n    return maximum\nend", "    if k > length(arr) \n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = arr\n        else\n\
    \            break\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of an array.", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end", "    if k > length(arr) \n        return arr \n    \n    maximum = arr \n\
    \    for i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n       \
    \     maximum = arr \n            break \n        end \n    end \n    return maximum\
    \ \nend \nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum([4,\
    \ -4, 4], 2)\n</cell>\n<code language=julia-1.5>\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the numbers in a vector.", "    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"\
    k must be in range [0, length(arr))\"))\n    end\n    maximum = arr\n    for i\
    \ = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nmaximum()", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-1000,\
    \ 1000])", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr) \n  \
    \      error(\"k should be less than or equal to length(arr)\") \n    else \n\
    \        maximum_rec(arr, k, 0) \n    end\nend", "    if k > length(arr)\n   \
    \     return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n     \
    \   if maximum[i] > maximum[i-1]\n            maximum = arr\n        else\n  \
    \          break\n    end\n    return maximum\nend\nmaximum()", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k should be less than or equal to length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    \n    maximum_idx = k\n    maximum_value\
    \ = arr[k]\n    \n    for i = k+1:length(arr)\n        if arr[i] > maximum_value\n\
    \            maximum_value = arr[i]\n            maximum_idx = i\n        end\n\
    \    end\n    \n    return arr[k+1:maximum_idx]\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum()", "    if k >\
    \ length(arr)\n        throw(ArgumentError(\"k must be less than or equal to the\
    \ length of arr\"))\n    end\n    maximum = arr\n    for i = 1:k\n        maximum\
    \ = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    \n    maximum = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > maximum\n            maximum\
    \ = arr[i]\n        end\n    end\n    \n    maximum = maximum + arr[k-1]\n   \
    \ \n    for i in 2:k\n        maximum = maximum + arr[i-1]\n    end\n    \n  \
    \  return maximum\nend\nmaximum()", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k should be less than or equal to the length of arr\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    \
    \    end\n    end\n    return maximum\nend\nmaximum() = maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 7)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 34", "    if k >\
    \ length(arr)\n        return arr\n    elseif k == length(arr)\n        return\
    \ arr\n    else\n        maximum = arr[k-1]\n        for i = k+1:length(arr)\n\
    \            if arr[i] > maximum\n                maximum = arr[i]\n         \
    \   end\n        end\n        return maximum\n    end\nend", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:k-1]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        return arr\n    \n\
    \    maximum_idx = k\n    maximum_value = arr[k]\n    \n    for i = k+1:length(arr)\n\
    \        if arr[i] > maximum_value\n            maximum_value = arr[i]\n     \
    \       maximum_idx = i\n        end\n    end\n    \n    return arr[maximum_idx:end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum([-3, -4, 5], 3)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum([4, -4, 4], 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the minimum number in a given vector. \nThe function should take\
    \ in a vector of integers and return a sorted vector of length 1 with the minimum\
    \ number in the vector.", "    if k <= length(arr)\n        return arr\n    else\n\
    \        maximum = maximum(maximum(arr, k-1), k-1)\n        return maximum\n \
    \   end\nend", "    if k == 0 \n        return arr\n    \n    maximum = arr[1]\n\
    \    for x in arr[2:end]\n        if x > maximum\n            maximum = x\n  \
    \      end\n    end\n    maximum = maximum + k\n    return maximum + arr[1:end]\n\
    end\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, -4, 5], 3), 3)\n\
    </cell>\n<code language=julia-1.3>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n\
    <code language=julia-1.3>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector arr of integers\
    \ and a positive integer k and returns the sum of the first k numbers in arr.\
    \ \nFor example, if the vector arr is [4, -4, 4], and k is 2, the function should\
    \ return 4.", "    if k > length(arr)\n        return arr\n    \n    maximum =\
    \ arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n   \
    \         maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend", "    if k <= 0 || k > length(arr)\n\
    \        throw(ArgumentError(\"k must be in range [0, length(arr))\"))\n    end\n\
    \    maximum = arr\n    for i = k - 1 downto 1 do\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i + 1])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end\nmaximum", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            break\n        end\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum_idx = 1\n    maximum_value = arr[1]\n    \n    for i in 2:length(arr)\n\
    \        if arr[i] > maximum_value\n            maximum_value = arr[i]\n     \
    \       maximum_idx = i\n        end\n    end\n    \n    return arr[1:maximum_idx+1]\n\
    end", "    if k > length(arr) \n        throw(ArgumentError(\"k must be less than\
    \ or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n  \
    \  return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 5\n\
    Write a function that takes a vector arr of integers and a positive integer k\
    \ and returns a sorted vector \nof length k with the minimum k numbers in arr.",
  "    if k > length(arr)\n        return arr\n    \n    maximum_idx = 1\n    maximum_value\
    \ = arr[1]\n    for i = 2:length(arr)\n        if arr[i] > maximum_value\n   \
    \         maximum_value = arr[i]\n            maximum_idx = i\n        end\n \
    \   end\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx - k\
    \ + 1\n    maximum_idx = maximum_idx - 1\n    maximum_idx = maximum_idx + 1\n\
    \    return maximum_idx\nend\nmaximum()", "    if k <= 0 || length(arr) <= k\n\
    \        return arr\n    \n    maximum_idx = k\n    maximum_value = arr[k]\n \
    \   \n    for i in k+1:length(arr)\n        if arr[i] > maximum_value\n      \
    \      maximum_value = arr[i]\n            maximum_idx = i\n        end\n    end\n\
    \    \n    return arr[maximum_idx:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3))\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2))\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1))\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum number in a given array of integers. \nThe function should take\
    \ in a vector of integers and a positive integer k. \nThe function should return\
    \ a sorted vector of length k with the minimum k numbers in arr.", "    if k >\
    \ length(arr)\n        throw(ArgumentError(\"k must be less than or equal to length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34", "    if k > length(arr) \n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr) \n        maximum[i] = maximum(maximum(maximum, arr[i-k]),\
    \ arr[i])\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum of the numbers in a\
    \ vector.", "    if k == 0 \n        return arr\n    \n    maximum_idx = k - 1\n\
    \    maximum_value = arr[k]\n    \n    for i = k+1:length(arr) \n        if arr[i]\
    \ > maximum_value \n            maximum_value = arr[i]\n            maximum_idx\
    \ = i\n        end\n    end\n    \n    maximum_idx = maximum_idx - k + 1\n   \
    \ maximum_value = arr[maximum_idx]\n    \n    maximum(maximum(arr, maximum_idx),\
    \ maximum_idx - 1)\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector arr of integers and a positive integer k\
    \ and returns a sorted vector \nof length k with the minimum k numbers in arr.",
  "    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        if maximum[i] > maximum[i-1] \n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        return arr\n    \n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \ end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    else\n        maximum = arr\n        for i = k+1:length(arr)\n          \
    \  if maximum(maximum(maximum, arr[i]), arr[i]) < maximum(maximum, arr[i])\n \
    \               maximum = maximum(maximum, arr[i])\n            else\n       \
    \         maximum = maximum(maximum, arr[i])\n            end\n        end\n \
    \       return maximum\n    end\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend\nmaximum() = maximum([], 0)", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be <= length(arr)\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\nmaximum", "    maximum\
    \ = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n\
    \    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of all numbers in a vector.", "    if k <= length(arr)\n   \
    \     maximum = arr\n    else\n        maximum = arr[k:]\n    end\n    return\
    \ maximum\nend\nmaximum() = maximum([-1000, 1000], 1)\nmaximum([-1000, 1000],\
    \ 2)\nmaximum([-1000, 1000], 3)\nmaximum([-1000, 1000], 4)\nmaximum([-1000, 1000],\
    \ 5)\nmaximum([-1000, 1000], 6)\nmaximum([-1000, 1000], 7)\nmaximum([-1000, 1000],\
    \ 8)\nmaximum([-1000, 1000], 9)\nmaximum([-1000, 1000], 10)\nmaximum([-1000, 1000],\
    \ 11)\nmaximum([-1000, 1000], 12)\nmaximum([-1000, 1000], 13)\nmaximum([-1000,\
    \ 1000], 14)\nmaximum([-1000, 1000], 15)\nmaximum([-1000, 1000], 16)\nmaximum([-1000,\
    \ 1000], 17)\nmaximum([-1000, 1000], 18)\nmaximum([-1000, 1000], 19)\nmaximum([-1000,\
    \ 1000], 20)\nmaximum([-1000, 1000], 21)\nmaximum([-1000, 1000], 22)\nmaximum([-1000,\
    \ 1000], 23)\nmaximum([-1000, 1000], 24)\nmaximum([-1000, 1000], 25)\nmaximum([-1000,\
    \ 1000], 26)\nmaximum([-1000, 1000], 27)\nmaximum([-1000, 1000], 28)\nmaximum([-1000,\
    \ 1000], 29)\nmaximum([-1000, 1000], 30)\nmaximum([-1000, 1000], 31)\nmaximum([-1000,\
    \ 1000], 32)\nmaximum([-1000, 1000], 33)\nmaximum([-1000, 1000], 34)\nmaximum([-1000,\
    \ 1000], 35)\nmaximum([-1000, 1000], 36)\nmaximum([-1000, 1000], 37)\nmaximum([-1000,\
    \ 1000], 38)\nmaximum([-1000, 1000], 39)\nmaximum([-1000, 1000], 40)\nmaximum([-1000,\
    \ 1000], 41)\nmaximum([-1000, 1000], 42)\nmaximum([-1000, 1000], 43)\nmaximum([-1000,\
    \ 1000], 44)\nmaximum([-1000, 1000], 45)\nmaximum([-1000, 1000], 46)\nmaximum([-1000,\
    \ 1000], 47)\nmaximum([-1000, 1000], 48)\nmaximum([-1000, 1000], 49)\nmaximum([-1000,\
    \ 1000], 50)\nmaximum([-1000, 1000], 51)\nmaximum([-1000, 1000], 52)\nmaximum([-1000,\
    \ 1000], 53)\nmaximum([-1000, 1000], 54)\nmaximum([-1000, 1000], 55)\nmaximum([-1000,\
    \ 1000], 56)\nmaximum([-1000, 1000], ", "    if k == 0 \n        return arr\n\
    \    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k-1)[end]\n        return maximum\nend", "    if\
    \ k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i in 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i = 1:k-1\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ arr[i+1])\n    end\n    maximum = maximum(maximum(maximum, arr[k]), arr[k+1])\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum[i], arr[i])\n\
    \    end\n    return maximum\nend", "    if k == 0 \n        return arr\n    else\
    \ \n        maximum = maximum([maximum, arr[k]], k-1)\n        return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n          \
    \  maximum = maximum[i-1:end]\n        else\n            break\n    end\n    return\
    \ maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in a vector.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given vector. \nThe function should take in\
    \ a vector of integers and return a single integer.", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr[1]\n    for i in 2:length(arr)\n\
    \        if arr[i] > maximum\n            maximum = arr[i]\n        end\n    end\n\
    \    \n    return maximum\nend\nmaximum()", "    if k <= 0 || k > length(arr)\n\
    \        throw(ArgumentError(\"k must be in range [0, length(arr)]\"))\n    end",
  "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector arr of integers and a positive integer k and \nreturns a sorted\
    \ vector arr of length k with the minimum k numbers in arr.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] =\
    \ maximum(maximum, arr[i])\n    end\n    return maximum\nend\nmaximum()", "  \
    \  if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n    for\
    \ i = k+1:length(arr)\n        if maximum < arr[i]\n            maximum = arr[i]\n\
    \        end\n    end\n    return maximum\nend", "    if k <= 0 || k > length(arr)\n\
    \        throw(ArgumentError(\"k must be in range [1, length(arr)]\"))\n    end\n\
    \    maximum = arr\n    for i = k - 1 downto 1\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i + 1])\n    end\n    return maximum\nend\nmaximum", "    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    else\n     \
    \   maximum = arr\n        for i = k+1:length(arr)\n            if maximum[i]\
    \ > maximum[i-1]\n                maximum = maximum[i-1:end]\n            else\n\
    \                break\n        end\n        return maximum\n    end\nend", " \
    \   if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to the length of arr\"))\n    end", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i in 1:k\n        maximum\
    \ = maximum(maximum(maximum, arr), i)\n    end\n    \n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n    for\
    \ i = k+1:length(arr)\n        if maximum < arr[i]\n            maximum = arr[i]\n\
    \        end\n    end\n    return maximum\nend\nmaximum()", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       push!(maximum, maximum[i])\n        end\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    else\n        maximum =\
    \ arr\n        for i = k+1:length(arr)\n            if maximum[i] > maximum[k]\
    \ \n                maximum = maximum[:i]\n            else\n                break\n\
    \            end\n        end\n        return maximum\n    end\nend", "    if\
    \ k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum.(maximum.>maximum[i])\n        else\n            maximum\
    \ = maximum.(maximum.<=maximum[i])\n        end\n    end\n    return maximum\n\
    end\nmaximum", "    if k > length(arr)\n        throw(ArgumentError(\"k must be\
    \ less than or equal to the length of arr\"))\n    end\n    maximum = arr\n  \
    \  for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\nmaximum()", "    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = arr\n        for i in 1:k\n \
    \           maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n        end\n\
    \        return maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum number in a given array of integers.", "    if k <= length(arr)\n  \
    \      maximum = arr[k:]\n        maximum.sort()\n        return maximum\n   \
    \ else\n        return arr\n    end\nend", "    if k > length(arr)\n        return\
    \ arr\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = arr\n            break\n        end\n\
    \    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([4, -4, 4], 2), 1)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2", "    if k <= length(arr)\n\
    \        maximum = arr\n    else\n        maximum = arr[k:]\n    end\n    return\
    \ maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nmaximum([4,\
    \ -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector arr and a positive integer\
    \ k, and returns a sorted vector arr of length k with the minimum k numbers in\
    \ arr.", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return\
    \ maximum\nend", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5],\
    \ 3)\n</cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that finds\
    \ the minimum number in a given array of integers. \nThe function should take\
    \ one parameter, an array of integers, and return one integer.", "    if k <=\
    \ 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in range [1, length(arr)]\"\
    ))\n    end", "    if k > length(arr) \n        return arr\n    \n    maximum\
    \ = arr[1]\n    for i = 2:length(arr) \n        if arr[i] > maximum \n       \
    \     maximum = arr[i]\n        end\n    end\n    \n    return maximum\nend\n\
    maximum()", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            break\n    end\n   \
    \ return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the minimum number in a given vector.", "    if\
    \ k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4],\
    \ 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.", "    if k <= 0 || k > length(arr)\n     \
    \   throw(ArgumentError(\"k should be in range [1, length(arr)]\"))\n    end\n\
    \    maximum = arr\n    for i = k - 1 downto 1\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i + 1])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given array of numbers.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend", "    if k > length(arr) \n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr) \n        maximum[i]\
    \ = maximum(maximum, arr[i])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend\nmaximum()", "    if k\
    \ <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum number\
    \ in a given array of integers. \nThe function should take in a vector of integers\
    \ and return a sorted vector of length \nk with the minimum k numbers in arr.",
  "    if k == 0 \n        return arr\n    \n    maximum = maximum([maximum(k-1),\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum", "    if\
    \ k > length(arr)\n        return arr\n    else\n        maximum = arr\n     \
    \   for i in 1:k\n            maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \        end\n        return maximum\n    end\nend", "    if k > length(arr) \n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    return maximum\nend", "    if k <= 0 || k > length(arr)\n\
    \        throw(ArgumentError(\"k must be in range (0, length(arr))\"))\n    end\n\
    \    maximum = arr\n    for i in k+1:length(arr)\n        maximum[i] = maximum(maximum[i],\
    \ arr[i])\n    end\n    return maximum\nend", "    if k > length(arr)\n      \
    \  return arr\n    \n    maximum = arr[k-1]\n    for i = k+1:length(arr)\n   \
    \     if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of arr\"))\n    end\n    maximum =\
    \ arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n   \
    \         maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 7)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 33)\nmaximum() = maximum([-", "    if k <= length(arr)\n        maximum\
    \ = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n    end\n    return\
    \ maximum\nend\nmaximum()", "    if k == 0 \n        return arr\n    else \n \
    \       maximum = maximum([maximum(v,k-1) for v in arr], k-1)\n        return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k > length(arr) \n    \
    \    throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end", "    if k > length(arr)\n        return arr\n    \n    maximum =\
    \ arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n   \
    \         maximum = maximum[i-1:end]\n        else\n            break\n    end\n\
    \    return maximum\nend", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum, arr[i])\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    else\n        maximum = arr\n        for i = k+1:length(arr)\n          \
    \  if maximum[i] > maximum[i-1]\n                maximum = maximum[i-1:end]\n\
    \            else\n                break\n        end\n        return maximum\n\
    \    end\nend", "    if k <= length(arr)\n        maximum = arr\n    else\n  \
    \      maximum = maximum.(arr[k+1:end])\n    end\n    return maximum\nend\nmaximum()\
    \ = maximum([-1000, 1000])", "    if k > length(arr)\n        return arr\n   \
    \ \n    maximum_idx = findmax(arr[k+1:end], k)\n    maximum_idx = maximum_idx\
    \ + k\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n", "  \
    \  if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(maximum[end], maximum(arr, k-1))\n\
    \        return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            break\n        end\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \     end\n    end\n    return maximum\nend", "    if k > length(arr)\n      \
    \  throw(ArgumentError(\"k must be less than or equal to the length of arr\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
