language: jl
name: HumanEval_106_f
results:
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n   \
    \         factorials[i] = factorials[i-1] * i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nf(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers.\nExample: \n>>> f([1,2,3])\n[1,2,3]\n>>> f([1,4,9])\n\
    [9,16,25]\n>>> f([1,4,9,16])\n[9,16,25]\n>>> f([1,4,9,16,25])\n[9,16,25]\n>>>\
    \ f([1,4,9,16,25,36])\n[9,16,25]\n>>> f([1,4,9,16,25,36,49])\n[9,16,25]\n>>> f([1,4,9,16,25,36,49,64])\n\
    [9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81])\n[9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100])\n\
    [9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121])\n[9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144])\n\
    [9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144,169])\n[9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144,169,196])\n\
    [9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225])\n[9,16,25]\n\
    >>> f([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256])\n[9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289])\n\
    [9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324])\n\
    [9,16,25]\n>>> f([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,256,289,324,361])\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrnaax5e.jl:21\nin expression starting at\
    \ /tmp/tmpcrnaax5e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nImplement the function g that takes\
    \ n as a parameter, and returns a vector of size n, such that the value of the\
    \ element at index i is the factorial of i if i is odd and -1 otherwise.\n   \
    \ i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, -1,\
    \ 1, -1]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipvizhyw.jl:21\nin expression starting at\
    \ /tmp/tmpipvizhyw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial(n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 9\nImplement the function g that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial\
    \ of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n \
    \   Example:\n    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2aw8_ten.jl:17\nin expression starting at\
    \ /tmp/tmp2aw8_ten.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials += i\n        end\n        factorials\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector v and a number k, and returns the vector v with\
    \ all elements multiplied by k.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbleaxyk.jl:21\nin expression starting at\
    \ /tmp/tmpdbleaxyk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        for i in 2:n\n            factorials[i] = factorials[i-1] * i\n \
    \       end\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpmmf8fsoc.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpmmf8fsoc.jl:27\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpmmf8fsoc.jl:17\n\
    \   [3] f(n::Int64) (repeats 3 times)\n     @ Main /tmp/tmpmmf8fsoc.jl:14\n  \
    \ [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmmf8fsoc.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmmf8fsoc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmmf8fsoc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpmmf8fsoc.jl:17\n\
    \   [3] f(n::Int64) (repeats 5 times)\n     @ Main /tmp/tmpmmf8fsoc.jl:14\n  \
    \ [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmmf8fsoc.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpmmf8fsoc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmmf8fsoc.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmpmmf8fsoc.jl:17\n   [3] f(n::Int64)\n\
    \     @ Main /tmp/tmpmmf8fsoc.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpmmf8fsoc.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i in 1:n\n            factorials += i\n        end\n        return\
    \ factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpm6krq_4j.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpm6krq_4j.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: no method matching\
    \ +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting with\
    \ dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpm6krq_4j.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm6krq_4j.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm6krq_4j.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpm6krq_4j.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: no method matching\
    \ +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting with\
    \ dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpm6krq_4j.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm6krq"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2tjqtfsn.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp2tjqtfsn.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmp2tjqtfsn.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2tjqtfsn.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2tjqtfsn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2tjqtfsn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmp2tjqtfsn.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2tjqtfsn.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2tjqtfsn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2tjqtfsn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmp2tjqtfsn.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp2tjqtfsn.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp2tjqtfsn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp2tjqtfsn.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n\
    <text>\nExercise 2\nImplement the function f that takes n as a parameter,\n  \
    \  and returns a vector of size n, such that the value of the element at index\
    \ i is the factorial of i if i is even\n    or the sum of numbers from 1 to i\
    \ otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n\
    \    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5t4ajqo.jl:21\nin expression starting at\
    \ /tmp/tmpy5t4ajqo.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials(n-1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 7\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc4h10qmj.jl:17\nin expression starting at\
    \ /tmp/tmpc4h10qmj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that takes a vector\
    \ of size n and returns the sum of the elements in the vector that are greater\
    \ than or equal to 3.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nz36yae.jl:21\nin expression starting at\
    \ /tmp/tmp3nz36yae.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, -1, 1, -1]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegzqhpt1.jl:21\nin expression starting at\
    \ /tmp/tmpegzqhpt1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]+1\
    \ for i in 1:n]\n    end\nend\n</cell>\n<text>\nExercise 2\nImplement the function\
    \ g(n::Int64) that returns the factorial of n if n is even, and returns the sum\
    \ of numbers from 1 to n otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpik2jmrok.jl:18\nin expression starting at\
    \ /tmp/tmpik2jmrok.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]*i\
    \ for i in range(1,n+1)]\n        factorial\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes as input a vector of size n and returns a vector\
    \ of size n+1 such that each element of the vector is the sum of the elements\
    \ of the vector except the element at position i.\nExample\n>>> f([1,2,3,4,5])\n\
    [2,3,6,10,15]\nHint: use slicing\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m4oh1mk.jl:19\nin expression starting at\
    \ /tmp/tmp2m4oh1mk.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        Vector{Int64}((n-1)..1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ factorial of $n$, i.e. $n!$. \nExample: \n$n! = n \\times \\times \\times \\\
    times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \\times \\times \\times \\times\
    \ \\times \\times \\times \\times \\times \\times \nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3e5rwblz.jl:17\nin expression starting at\
    \ /tmp/tmp3e5rwblz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        Vector{Int64}((n+1)::Int64)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nImplement the function g that takes n as a parameter,\n\
    \    and returns a vector of size n, such that the value of the element at index\
    \ i is the factorial of i if i is odd\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 3, 9, 27,\
    \ 81]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf8ya3iu6.jl:17\nin expression starting at\
    \ /tmp/tmpf8ya3iu6.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        factorials[2] = factorials[1]*factorials[2]\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function g(n::Int64) that\
    \ returns the factorial of n if n is even and the sum of numbers from 1 to n otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt9rjmcs.jl:20\nin expression starting at\
    \ /tmp/tmpbt9rjmcs.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ $n$ and returns the factorial of $n$ if $n$ is even, and returns the sum of\
    \ the factorials from 1 to $n$ if $n$ is odd.\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmptpovuwp0.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptpovuwp0.jl:16\n\
    in expression starting at /tmp/tmptpovuwp0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]*i\
    \ for i in range(1,n+1)]\n        factorial\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the factorial of $n$,\
    \ i.e. the product of the numbers from 1 to $n$, i.e.\n$$\nf(n) = \\prod_{i=1}^n\
    \ i\n$$\nExample: \n$$\nf(5) = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120\n\
    $$\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52y302h0.jl:19\nin expression starting at\
    \ /tmp/tmp52y302h0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            if i % 2 == 0\n                factorials += i\n     \
    \       else\n                factorials += factorials[i-1] * i\n        end\n\
    \        factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n\
    </cell>\n<text>\nExercise 2\nImplement the function g that takes n as a parameter,\
    \ and returns a vector of size n, such that the value of the element at index\
    \ i is the factorial of i if i is odd and -1 otherwise.\n    i starts from 1.\n\
    \    the factorial of i is the multiplication of the numbers from 1 to i (1 *\
    \ 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1h6grrys.jl:24\nin expression starting at\
    \ /tmp/tmp1h6grrys.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        for i in 2:n\n            factorials[i] = factorials[i-1] * i\n \
    \       end\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp55dgjcum.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp55dgjcum.jl:27\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmp55dgjcum.jl:17\n\
    \   [3] f(n::Int64) (repeats 3 times)\n     @ Main /tmp/tmp55dgjcum.jl:14\n  \
    \ [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp55dgjcum.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp55dgjcum.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp55dgjcum.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n   [1] setindex!\n    \
    \ @ ./array.jl:903 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmp55dgjcum.jl:17\n\
    \   [3] f(n::Int64) (repeats 5 times)\n     @ Main /tmp/tmp55dgjcum.jl:14\n  \
    \ [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp55dgjcum.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp55dgjcum.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp55dgjcum.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [2]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmp55dgjcum.jl:17\n   [3] f(n::Int64)\n\
    \     @ Main /tmp/tmp55dgjcum.jl:14\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp55dgjcum.jl:30 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorials = [1]\n        for i = 2 to n\n        \
    \    factorials = factorials * (i-1)\n        end\n        factorials\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ factorials of all the numbers from 1 to n.\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmput_wulof.jl:15 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmput_wulof.jl:15\n\
    in expression starting at /tmp/tmput_wulof.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpes52kagk.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpes52kagk.jl:24\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [1] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes52kagk.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes52kagk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpes52kagk.jl:25\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [1] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes52kagk.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes52kagk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpes52kagk.jl:27\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [1] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpes52kagk.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpes52kagk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n     \
    \   factorials\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers such that each element\
    \ of the vector is the sum of the squares of the elements of the vector.\nExample:\n\
    >>> f([1,2,3])\n[1,2,9]\n>>> f([1,-2,3])\n[1,2,-4]\n>>> f([1,-2,3,-4])\n[1,2,-4,9]\n\
    >>> f([1,-2,3,-4,5])\n[1,2,-4,9,25]\n>>> f([1,-2,3,-4,5,6])\n[1,2,-4,9,25,49]\n\
    >>> f([1,-2,3,-4,5,6,7])\n[1,2,-4,9,25,49,81]\n>>> f([1,-2,3,-4,5,6,7,8])\n[1,2,-4,9,25,49,81,243]\n\
    >>> f([1,-2,3,-4,5,6,7,8,9])\n[1,2,-4,9,25,49,81,243,729]\n>>> f([1,-2,3,-4,5,6,7,8,9,10])\n\
    [1,2,-4,9,25,49,81,243,729,4031]\n>>> f([1,-2,3,-4,5,6,7,8,9,10,11])\n[1,2,-4,9,25,49,81,243,729,4031,15625]\n\
    >>> f([1,-2,3,-4,5,6,7,8,9,10,11,12])\n[1,2,-4,9,25,49,81,243,729,4031,15625,78125]\n\
    >>> f([1,-2,3,-4,5,6,7,8,9,10,11,12,13])\n[1,2,-4,9,25,49,81,243,729,4031,15625,78125,390625]\n\
    >>> f([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14])\n[1,2,-4,9,25,49,81,243,729,4031,15625,78125,390625,1953125]\n\
    >>> f([1,-2,3,-4,5,6,7,8,9,10,11,12,13,14,15])\n[1,2,-4,9,25,49,81,243,729,4031,15625,78125,390625,1953125,98075]\n\
    >>> f([1,-2,3,-4,5,6,7,8,\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hienb73.jl:21\nin expression starting at\
    \ /tmp/tmp5hienb73.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n-1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the factorial of $n$\
    \ if $n$ is even and $n!$ if $n$ is odd.\nExample: \n$f(5) = 15$\n$f(4) = 24$\n\
    $f(3) = 12$\n$f(2) = 720$\n$f(2) = 24$\n$f(2) = 120$\n$f(2) = 720$\n$f(2) = 720$\n\
    $f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) =\
    \ 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n\
    $f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) =\
    \ 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n\
    $f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) =\
    \ 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n\
    $f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) =\
    \ 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n\
    $f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) =\
    \ 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n$f(2) = 720$\n\
    $f(\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeg1zq6vh.jl:17\nin expression starting at\
    \ /tmp/tmpeg1zq6vh.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]*i\
    \ for i in range(1,n)]\n        factorial\n    end\nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that returns the factorial of n as a vector of size n.\n\
    The function should take n as a parameter.\nThe function should return a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from\
    \ 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 *\
    \ 2 * ... * i).\nExample: \n>>> f(5)\n[1,2,6,24,15]\nHint: use recursion.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6,\
    \ 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7es5lef.jl:19\nin expression starting at\
    \ /tmp/tmpd7es5lef.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  factorials\n    end\nend\n</cell>\n<text>\nExercise 3\nImplement the function\
    \ f that takes n as a parameter,\n    and returns a vector of size n, such that\
    \ the value of the element at index i is the factorial of i if i is even\n   \
    \ or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the\
    \ factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ...\
    \ * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6,\
    \ 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5w769v6q.jl:21\nin expression starting at\
    \ /tmp/tmp5w769v6q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n-1)*[1..n]\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector v of size n and returns its sum.\n\
    The function should return v[0] + v[1] + ... + v[n-1].\nThe function should work\
    \ for any size vector v.\nExamples:\n>>> v = [1, 2, 3]\n>>> sum(v)\n6\n>>> v =\
    \ [1, 2, 3]\n>>> sum(v)\n6\n>>> v = [1, 2]\n>>> sum(v)\n3\n>>> v = [1, 2]\n>>>\
    \ sum(v)\n3\n>>> v = [1, 2, 3, 4]\n>>> sum(v)\n10\n>>> v = [1, 2, 3, 4]\n>>> sum(v)\n\
    10\n>>> v = [1, 2, 3, 4, 5]\n>>> sum(v)\n15\n>>> v = [1, 2, 3, 4, 5]\n>>> sum(v)\n\
    15\n>>> v = [1, 2, 3, 4, 5, 6]\n>>> sum(v)\n21\n>>> v = [1, 2, 3, 4, 5, 6]\n>>>\
    \ sum(v)\n21\n>>> v = [1, 2, 3, 4, 5, 6, 7]\n>>> sum(v)\n28\n>>> v = [1, 2, 3,\
    \ 4, 5, 6, 7]\n>>> sum(v)\n28\n>>> v = [1, 2, 3, 4, 5, 6, 7, 8]\n>>> sum(v)\n\
    36\n>>> v = [1, 2, 3, 4, 5, 6, 7, 8]\n>>> sum(v)\n36\n>>> v = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]\n>>> sum(v)\n45\n>>> v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n>>>\
    \ sum(v)\n45\n>>> v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\
    \ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\
    \ 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\
    \ 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,\
    \ 93, 94, 95, 96, 97, 98, 99]\n>>> sum(v)\n99\n>>> v = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, \nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm23n0syy.jl:17\nin expression starting at\
    \ /tmp/tmpm23n0syy.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + [i]\n        end\n        return factorials\n    else\n     \
    \   factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + [i]\n        end\n        return factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nf(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5_i3kot.jl:25\nin expression starting at\
    \ /tmp/tmpw5_i3kot.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n   \
    \         factorials[i] = factorials[i-1] * i\n        end\n        return factorials\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer! I understand\
    \ your solution, but I wanted to know if there was a way to do it without using\
    \ recursion.\n<|/ c |>\n<| c |>\nI edited my answer to include a non-recursive\
    \ solution\n<|/ c |>\n<| c |>\nThanks for the edit! I understand your solution,\
    \ but I wanted to know if there was a way to do it without using recursion.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a non-recursive solution\n<|/\
    \ c |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7y6z316.jl:21\nin expression starting at\
    \ /tmp/tmpd7y6z316.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = [1]\n        for i in 2:n\n            factorials\
    \ = factorials * (i-1)\n        end\n        factorials\n    end\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that takes a vector v of n elements and returns\
    \ a vector w of size n such that\nthe element at index i is the product of all\
    \ the elements of v except the element at index i.\nExample:\n>>> v = [1, 2, 3,\
    \ 4, 5]\n>>> w = f(v)\n>>> w\n[120, 60, 40, 30, 24]\nHint: use v .- v[i]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6,\
    \ 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ivzrgvm.jl:21\nin expression starting at\
    \ /tmp/tmp0ivzrgvm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function f that takes n as\
    \ a parameter, and returns a vector of size n, such that the value of the element\
    \ at index i is the factorial of i if i is odd and -1 otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, -1, 6, -24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fgg794o.jl:21\nin expression starting at\
    \ /tmp/tmp1fgg794o.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial(n)\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpp47lduhs.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpp47lduhs.jl:22\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpp47lduhs.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp47lduhs.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp47lduhs.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpp47lduhs.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpp47lduhs.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp47lduhs.jl:23 [inlined]\n\
    \   [4] macro expansion\n   "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i = 2 to n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpeon07r5o.jl:15 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeon07r5o.jl:15\n\
    in expression starting at /tmp/tmpeon07r5o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nImplement the function g(n::Int64)\
    \ that takes n as a parameter, and returns a vector of size n, such that the value\
    \ of the element at index i is the factorial of i if i is odd and 0 otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 2, 6, 24,\
    \ 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd6p5_lu.jl:21\nin expression starting at\
    \ /tmp/tmpcd6p5_lu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = f(n-1)\n        factorials\
    \ = [factorials[i] + 1 for i in 1:n]\n        factorials\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even and the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolr3enda.jl:19\nin expression starting at\
    \ /tmp/tmpolr3enda.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + i\n        end\n        return factorials\n    else\n       \
    \ factorials = Vector{Int64}()\n        for i in 1:n\n            factorials =\
    \ factorials + i\n        end\n        return factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nf(5)\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvmgjc19o.jl:25\nin expression starting at\
    \ /tmp/tmpvmgjc19o.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that takes two vectors\
    \ as parameters and returns the element-wise product of the two vectors.\nThe\
    \ element-wise product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is\n$$\\\
    mathbf{a} \\odot \\mathbf{b} = \\begin{bmatrix}\na{11} & a{12} & \\cdots & a{1n}\
    \ \\\na{21} & a{22} & \\cdots & a{2n} \\\n\\vdots & \\vdots & \\ddots & \\vdots\
    \ \\\na{n1} & a{n2} & \\cdots & a{nn}\n\\end{bmatrix} \\odot \\begin{bmatrix}\n\
    b{11} & b{12} & \\cdots & b{1n} \\\nb{21} & b{22} & \\cdots & b{2n} \\\n\\vdots\
    \ & \\vdots & \\ddots & \\vdots \\\nb{n1} & b{n2} & \\cdots & b{nn}\n\\end{bmatrix}\
    \ = \\begin{bmatrix}\na{11} b{11} & a{12} b{12} & \\cdots & a{1n} b{1n} \\\na{21}\
    \ b{21} & a{22} b{22} & \\cdots & a{2n} b{2n} \\\n\\vdots & \\vdots & \\ddots\
    \ & \\vdots \\\na{n1} b{n1} & a{n2} b{n2} & \\cdots & a{nn} b{nn}\n\\end{bmatrix}$$\n\
    where $\\odot$ is the element-wise product operator.\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpd51314a6.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd51314a6.jl:16\n\
    in expression starting at /tmp/tmpd51314a6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        vec=Vector{Int64}()\n\
    \        for i in 1:n\n            if i%2==0\n                push!(vec,factorial)\n\
    \            else\n                push!(vec,1)\n            end\n        end\n\
    \        return vec\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2r4a0bb5.jl:28

    '
  stdout: "test set: Error During Test at /tmp/tmp2r4a0bb5.jl:31\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  UndefVarError: factorial not\
    \ defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp2r4a0bb5.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r4a0bb5.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r4a0bb5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2r4a0bb5.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  UndefVarError: factorial not defined\n\
    \  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp2r4a0bb5.jl:14\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r4a0bb5.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r4a0bb5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2r4a0bb5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  UndefVarError: factorial not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmp2r4a0bb5.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2r4a0bb5.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2r4a0bb5.jl:30\ntest set:\
    \ Error During Test at /tmp/tmp2r4a0bb5.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  UndefVarError: factorial not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmp2r4a0bb5.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer.\
    \ Could you please explain what is the difference between `Vector{Int64}()` and\
    \ `Vector{Int64}[]`?\n<|/ c |>\n<| c |>\n`Vector{Int64}[]` is an array type, while\
    \ `Vector{Int64}()` is an empty array type. `Vector{Int64}[]` is more efficient\
    \ than `Vector{Int64}()` in this case. `Vector{Int64}[]` is more efficient than\
    \ `Vector{Int64}()` because `Vector{Int64}[]` allocates memory in advance, while\
    \ `Vector{Int64}()` allocates memory only when it is needed.\n<|/ c |>\n<| c |>\n\
    Thanks. I got it. But I still don't understand why `Vector{Int64}[]` is more efficient\
    \ than `Vector{Int64}()`. Could you please explain it?\n<|/ c |>\n<| c |>\n`Vector{Int64}[]`\
    \ is more efficient because `Vector{Int64}[]` allocates memory in advance, while\
    \ `Vector{Int64}()` allocates memory only when it is needed.\n<|/ c |>\n<| c |>\n\
    Thanks. Could you please explain why `Vector{Int64}[]` is more efficient than\
    \ `Vector{Int64}()`?\n<|/ c |>\n<| a dscore=2 |>\nThe other answers already explained\
    \ why your function does not work, but I wanted to add an alternative solution\
    \ that is more efficient than your original one:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpn1big0nw.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn1big0nw.jl:16\n\
    in expression starting at /tmp/tmpn1big0nw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        end\n        return factorials\n    else\n        factorials =\
    \ Vector{Int64}()\n        for i in 1:n\n            factorials += i\n       \
    \ end\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpfagj8eeu.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpfagj8eeu.jl:30\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: no method matching\
    \ +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting with\
    \ dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpfagj8eeu.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfagj8eeu.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfagj8eeu.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpfagj8eeu.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: no method matching\
    \ +(::Vector{Int64}, ::Int64)\n  For element-wise addition, use broadcasting with\
    \ dot syntax: array .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpfagj8eeu.jl:20\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfagj8"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  factorials\n    end\nend\n</cell>\n<text>\nExercise 4\nImplement the function\
    \ g that takes n as a parameter, and returns a vector of size n, such that the\
    \ value of the element at index i is the factorial of i if i is odd and -1 otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24,\
    \ 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprqxygzft.jl:21\nin expression starting at\
    \ /tmp/tmprqxygzft.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorial(n) * ones(1, n)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of n. \nExample:\
    \ \n>>> factorial(5)\n120\nHint: \nfactorial(n) can be implemented using recursion.\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4v7x5b1z.jl:17\nin expression starting at\
    \ /tmp/tmp4v7x5b1z.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials[i] = factorials[i-1] * i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of size n and returns a vector of size n, such that the value of the element\
    \ at index i is the product of all the elements in the vector except the element\
    \ at index i.\n    i starts from 1.\n    Example:\n    >>> f([1,2,3,4,5])\n  \
    \  [1, 2, 6, 24, 120]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtkt9mso.jl:21\nin expression starting at\
    \ /tmp/tmpgtkt9mso.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = factorials(n-1)\n        factorials = factorials[2:end]\n\
    \        return factorials\n    else\n        factorials = factorials(n-1)\n \
    \       factorials = factorials[1:end]\n        return factorials\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp96yyruov.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp96yyruov.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  UndefVarError: factorials\
    \ not defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp96yyruov.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96yyruov.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96yyruov.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp96yyruov.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  UndefVarError: factorials not\
    \ defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmp96yyruov.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96yyruov.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96yyruov.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp96yyruov.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  UndefVarError: factorials not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmp96yyruov.jl:0\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp96yyruov.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp96yyruov.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp96yyruov.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  UndefVarError: factorials not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmp96yyruov.jl:0\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n   \
    \         factorials[i] = factorials[i-1] * i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the elements of a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwhed7cgf.jl:21\nin expression starting at\
    \ /tmp/tmpwhed7cgf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==1\n       \
    \ [1]\n    else\n        factorials = f(n-1)\n        factorials = [factorials[i]\
    \ + factorials[i-1] for i in 1:n]\n        factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nf(5)\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqzmccc3.jl:19\nin expression starting at\
    \ /tmp/tmpmqzmccc3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n     \
    \       factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ v as input and returns the sum of the absolute values of the elements of the\
    \ vector.\nExample: \n>>> v = [1, 2, 3, 4]\n>>> sum(abs(v))\n10\n</text>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6,\
    \ 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfp_ol94.jl:21\nin expression starting at\
    \ /tmp/tmpgfp_ol94.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i + 1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 3\nImplement the function g(n::Int64) that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial\
    \ of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n \
    \   Example:\n    >>> g(5)\n    [1, 2, -1, -4, -16, -64, -256, -65536]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) ==\
    \ [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t\
    @test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fcll7d2.jl:21\nin expression starting at\
    \ /tmp/tmp9fcll7d2.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials[i] = factorials[i-1]\
    \ + i\n        return factorials\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of size n and returns the sum of the elements\
    \ of the vector.\nExample: \n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 5])\n15\n\
    >>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\
    15\n>>> sum([1, 2, 3, 5])\n15\n>>> sum([1, 2, 3, 5])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqij3h_4b.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqij3h_4b.jl:16\n\
    in expression starting at /tmp/tmpqij3h_4b.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i * factorial(i)\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials += factorial(i)\n\
    \        return factorials\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpu7udflhg.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu7udflhg.jl:16\n\
    in expression starting at /tmp/tmpu7udflhg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    [1]\n    else\n        factorial(n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function called g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and 0 otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 2, 6, 24, 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpft3r5snc.jl:17\nin expression starting at\
    \ /tmp/tmpft3r5snc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==1\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n     \
    \       factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, -1, 1, -1]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxepy6fou.jl:21\nin expression starting at\
    \ /tmp/tmpxepy6fou.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        return [1]+f(n-1)\n    end\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkeevw8b7.jl:17\nin expression starting at\
    \ /tmp/tmpkeevw8b7.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + i\n        end\n        return factorials\n    else\n       \
    \ factorials = Vector{Int64}()\n        for i in 1:n\n            factorials =\
    \ factorials + i\n        end\n        return factorials\n    end\nend\n</code>\n\
    <|/ a tags=julia,factorial |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygl5skmv.jl:25\nin expression starting at\
    \ /tmp/tmpygl5skmv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        for i in 2:n\n            factorials[i] = factorials[i-1] * i\n \
    \       end\n        return factorials\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgyxk6czc.jl:22\nin expression starting at\
    \ /tmp/tmpgyxk6czc.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i=2; i<=n\n    \
    \        factorials = factorials * (i+1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes as input\
    \ a vector of size n, and returns the sum of the elements of the vector that are\
    \ greater than or equal to 2.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkul86oj.jl:21\nin expression starting at\
    \ /tmp/tmpmkul86oj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorial(n) * ones(1, n)\n    end\nend\n</cell>\n\
    <text>\nExercise 7: Implement the function g that takes n as a parameter,\n  \
    \  and returns a vector of size n, such that the value of the element at index\
    \ i is the factorial of i if i is odd\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 2, 3, 6,\
    \ 24]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofhycnpg.jl:17\nin expression starting at\
    \ /tmp/tmpofhycnpg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i = 1:n\n            factorials = factorials + [i]\n        end\n\
    \        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt_zifnpf.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpt_zifnpf.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] f(n::Int64)\n    \
    \ @ Main /tmp/tmpt_zifnpf.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt_zifnpf.jl:26 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt_zifnpf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpt_zifnpf.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] f(n::Int64)\n    \
    \ @ Main /tmp/tmpt_zifnpf.jl:16\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpt_zifnpf.jl:27 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpt_zifnpf.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpt_zifnpf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n\
    \     @ ./indices.jl:169 [inlined]\n   [3]"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorial(n) |> collect{x->x}\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for the answer! I understand that my code\
    \ is not the most efficient, but I wanted to understand how I could write it in\
    \ a more efficient way. Your answer helped me understand how to write it in a\
    \ more efficient way. Thanks!\n<|/ c |>\n<| a tags=julia |>\nI wrote a recursive\
    \ function which does the same thing as the factorial function, but without using\
    \ any loops. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1do_a8t_.jl:17\nin expression starting at\
    \ /tmp/tmp1do_a8t_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n  \
    \          factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nImplement the function g that takes\
    \ n as a parameter,\n    and returns a vector of size n, such that the value of\
    \ the element at index i is the factorial of i if i is even\n    or the sum of\
    \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgra4013.jl:21\nin expression starting at\
    \ /tmp/tmpkgra4013.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + [i]\n        end\n        return factorials\n    else\n     \
    \   factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + [i]\n        end\n        return factorials\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even and the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zy_tenr.jl:25\nin expression starting at\
    \ /tmp/tmp1zy_tenr.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = [1]\n        for i in 2:n\n            factorials = factorials\
    \ * (i-1)\n        end\n        return factorials\n    else\n        factorials\
    \ = [1]\n        for i in 1:n\n            factorials = factorials * (i-1)\n \
    \       end\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    f(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrw56pqp.jl:25\nin expression starting at\
    \ /tmp/tmpsrw56pqp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i = 1:n\n            factorials += i * factorials(n - i)\n       \
    \ end\n        return factorials\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Implement the function g that takes n as a parameter, and returns a vector of\
    \ size n, such that the value of the element at index i is the factorial of i\
    \ if i is odd and 0 otherwise.\n    i starts from 1.\n    the factorial of i is\
    \ the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 2, 6, 24, 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dyr2ssy.jl:21\nin expression starting at\
    \ /tmp/tmp0dyr2ssy.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1o_t_1d4.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1o_t_1d4.jl:26\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [24] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o_t_1d4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o_t_1d4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1o_t_1d4.jl:27\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [720] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o_t_1d4.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o_t_1d4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1o_t_1d4.jl:29\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [2] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1o_t_1d4.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1o_t_1d4.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n-1)*(1:n)\n    end\nend\n</code>\n<|/ a tags=julia,factorial\
    \ |>\n<| c |>\nThis does not answer the question. OP asked for Julia code. Your\
    \ answer does not do that.\n<|/ c |>\n<| c |>\nThe question was how to implement\
    \ factorial in Julia, not how to implement factorial in Julia. Your answer does\
    \ not do that.\n<|/ c |>\n<| c |>\nThe question was how to implement factorial\
    \ in Julia, not how to implement factorial in Julia. Your answer does not do that.\n\
    <|/ c |>\n<| a dscore=2 |>\nThe factorial function can be implemented using recursion:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) ==\
    \ [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t\
    @test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpietiib0f.jl:17\nin expression starting at\
    \ /tmp/tmpietiib0f.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = 1:n\n    else\n        factorials = 1:n-1\n    end\n    return\
    \ factorials\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ vectors as parameters, and returns a vector where each element is the product\
    \ of the corresponding elements of the two vectors.\nExample:\n>>> f([1,2,3],[4,5,6])\n\
    [4,10,18]\nHint: use map()\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhavxtz1.jl:18\nin expression starting at\
    \ /tmp/tmprhavxtz1.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + i\n        end\n        return factorials\n    else\n       \
    \ factorials = Vector{Int64}()\n        for i in 1:n\n            factorials =\
    \ factorials + i\n        end\n        return factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of size n and returns a vector of size n where each element\
    \ is the sum of the elements in the original vector except the element at index\
    \ i.\nExample: \n>>> f([1,2,3,4,5])\n[2,4,6,8,10]\nHint: use an index variable\
    \ and an if statement.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy9job05.jl:25\nin expression starting at\
    \ /tmp/tmpdy9job05.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the factorial of $n$, i.e. $n!$. \nThe function should return\
    \ $n!$ if $n$ is even, and $(n-1)!$ if $n$ is odd.\nExample: \n>>> f(5)\n120\n\
    >>> f(3)\n6\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpxrut7s80.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxrut7s80.jl:16\n\
    in expression starting at /tmp/tmpxrut7s80.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i in 1:n\n            factorials[i] = factorials[i-1] * i\n      \
    \  end\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp4ttnksnn.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmp4ttnksnn.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmp4ttnksnn.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ttnksnn.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ttnksnn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4ttnksnn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmp4ttnksnn.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ttnksnn.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ttnksnn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4ttnksnn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmp4ttnksnn.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4ttnksnn.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4ttnksnn.jl:25\ntest set:\
    \ Error During Test at /tmp/tmp4ttnksnn.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of n (n!). The function should\
    \ take n as a parameter and return a vector of size n, such that the value of\
    \ the element at index i is the factorial of i if i is even or the sum of numbers\
    \ from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the\
    \ multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoy87pmog.jl:21\nin expression starting at\
    \ /tmp/tmpoy87pmog.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpuakwkj64.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuakwkj64.jl:16\n\
    in expression starting at /tmp/tmpuakwkj64.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i = 2 to n\n \
    \           factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nf(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes two vectors v1 and v2 as input, and returns a\
    \ vector that contains the element-wise product of v1 and v2.\nThe element-wise\
    \ product of two vectors $v_1$ and $v_2$ is defined as:\n$$v_1 \\cdot v_2 = \\\
    sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise product of two vectors $v_1$ and $v_2$\
    \ is defined as:\n$$v_1 \\cdot v_2 = \\sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise\
    \ product of two vectors $v_1$ and $v_2$ is defined as:\n$$v_1 \\cdot v_2 = \\\
    sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise product of two vectors $v_1$ and $v_2$\
    \ is defined as:\n$$v_1 \\cdot v_2 = \\sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise\
    \ product of two vectors $v_1$ and $v_2$ is defined as:\n$$v_1 \\cdot v_2 = \\\
    sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise product of two vectors $v_1$ and $v_2$\
    \ is defined as:\n$$v_1 \\cdot v_2 = \\sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise\
    \ product of two vectors $v_1$ and $v_2$ is defined as:\n$$v_1 \\cdot v_2 = \\\
    sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise product of two vectors $v_1$ and $v_2$\
    \ is defined as:\n$$v_1 \\cdot v_2 = \\sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise\
    \ product of two vectors $v_1$ and $v_2$ is defined as:\n$$v_1 \\cdot v_2 = \\\
    sum{i=1}^{n} v_i v_i^2.$$\nThe element-wise product of two vectors $v_1$ and $v_2$\
    \ is defined as:\n$$v_1 \\\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2tt76km6.jl:15 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2tt76km6.jl:15\n\
    in expression starting at /tmp/tmp2tt76km6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n     \
    \       factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_eqqdn1t.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp_eqqdn1t.jl:26\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [24] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_eqqdn1t.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_eqqdn1t.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_eqqdn1t.jl:27\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [720] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_eqqdn1t.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_eqqdn1t.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_eqqdn1t.jl:29\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [2] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_eqqdn1t.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_eqqdn1t.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorials = f(n-1)\n        factorials = [factorials[i]\
    \ + factorials[i+1] for i in 1:length(factorials)]\n        factorials\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sopd29_.jl:19\nin expression starting at\
    \ /tmp/tmp7sopd29_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        factorials[2] = factorials[1]*factorials[0]\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nImplement the function g that takes\
    \ n as a parameter, and returns a vector of size n, such that the value of the\
    \ element at index i is the factorial of i if i is odd and 0 otherwise.\n    i\
    \ starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 2, 6, 24,\
    \ 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk36z6r1g.jl:20\nin expression starting at\
    \ /tmp/tmpk36z6r1g.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i + 1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function f that takes n as\
    \ a parameter, and returns a vector of size n, such that the value of the element\
    \ at index i is the factorial of i if i is even\n    or the sum of numbers from\
    \ 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n\
    \    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5p2bwd6j.jl:21\nin expression starting at\
    \ /tmp/tmp5p2bwd6j.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        return factorials\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ seem to work. `f(1)` returns `[1]` instead of `[1]`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code by changing `factorials[1] = 1` to `factorials[1]\
    \ = 1`\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_11uz59j.jl:19\nin expression starting at\
    \ /tmp/tmp_11uz59j.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        [i*factorial(i-1) for i in 1:n]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ factorial of $n$ if $n$ is even or the sum of numbers from 1 to $n$ otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ev84v94.jl:17\nin expression starting at\
    \ /tmp/tmp7ev84v94.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            factorials = factorials + i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprscg5y5t.jl:21\nin expression starting at\
    \ /tmp/tmprscg5y5t.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        Vector{Int64}(n+1)\n        for i=1:n\n \
    \           factorial[i]=factorial[i-1]*i\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a vector of size n and\
    \ returns the sum of the elements of the vector that are less than n.\nExample:\
    \ \n>>> f([1,2,3,4,5])\n15\nHint: use filter!\nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpusqtsr2b.jl:20\nin expression starting at\
    \ /tmp/tmpusqtsr2b.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ the number of ways to arrange $n$ cards in a deck of $5$ cards.\nThe order of\
    \ the cards does not matter, i.e. the function should return the same result for\
    \ $n=1$, $n=2$, $n=3$, $n=4$, $n=5$, $n=6$, $n=7$, $n=8$, $n=9$, $n=10$, $n=11$,\
    \ $n=12$, $n=13$, $n=14$, $n=15$, $n=16$, $n=17$, $n=18$, $n=19$, $n=20$, $n=21$,\
    \ $n=22$, $n=23$, $n=24$, $n=25$, $n=26$, $n=27$, $n=28$, $n=29$, $n=30$, $n=31$,\
    \ $n=32$, $n=33$, $n=34$, $n=35$, $n=36$, $n=37$, $n=38$, $n=39$, $n=40$, $n=41$,\
    \ $n=42$, $n=43$, $n=44$, $n=45$, $n=46$, $n=47$, $n=48$, $n=49$, $n=50$, $n=51$,\
    \ $n=52$, $n=53$, $n=54$, $n=55$, $n=56$, $n=57$, $n=58$, $n=59$, $n=60$, $n=61$,\
    \ $n=62$, $n=63$, $n=64$, $n=65$, $n=66$, $n=67$, $n=68$, $n=69$, $n=70$, $n=71$,\
    \ $n=72$, $n=73$, $n=74$, $n=75$, $n=76$, $n=77$, $n=78$, $n=79$, $n=80$, $n=81$,\
    \ $n=82$, $n=83$, $n=84$, $n=85$, $n=86$, $n=87$, $n=88$, $n=89$, $n=90$, $n=91$,\
    \ $n=92$, $n=93$, $n=94$, $n=95$, $n=96$, $n=97$, $n=98$\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5yv3zm0e.jl:21\nin expression starting at\
    \ /tmp/tmp5yv3zm0e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n            factorials +=\
    \ n - i\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    f(5)\n</cell>\n<text>\nExercise 2\nImplement the function g(n::Int64) that takes\
    \ n as a parameter, and returns a vector of size n, such that the value of the\
    \ element at index i is the factorial of i if i is odd and -1 otherwise.\n   \
    \ i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24,\
    \ 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwfztv0ix.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwfztv0ix.jl:16\n\
    in expression starting at /tmp/tmpwfztv0ix.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials = factorials * (i+1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nf(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of size n and returns the sum of the\
    \ elements of the vector that are greater than or equal to 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpgumqdd.jl:21\nin expression starting at\
    \ /tmp/tmpnpgumqdd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = f(n-1)\n        factorials[1]\
    \ = 1\n        factorials\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n\
    <| c |>\nThis doesn't work. `factorials` will always be `1` because `factorials\
    \ = f(n-1)` doesn't change `factorials`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7npewdu.jl:19\nin expression starting at\
    \ /tmp/tmpq7npewdu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]*i\
    \ for i in range(1,n+1)]\n        factorial\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a vector of size n and returns a vector\
    \ of size n such that the value of the element at index i is the sum of the numbers\
    \ from 1 to i if i is even and the product of the numbers from 1 to i if i is\
    \ odd.\n    i starts from 1.\n    Example:\n    >>> f([1,2,3,4,5])\n    [1, 3,\
    \ 6, 10, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47qzcg41.jl:19\nin expression starting at\
    \ /tmp/tmp47qzcg41.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    f(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp24ctqkym.jl:19\nin expression starting at\
    \ /tmp/tmp24ctqkym.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes two vectors v1 and v2 as input and returns a\
    \ vector of the dot product of the two vectors.\nThe dot product of two vectors\
    \ $\\mathbf{v}$ and $\\mathbf{w}$ is defined as:\n$$\n\\mathbf{v} \\cdot \\mathbf{w}\
    \ = \\sum_{i=1}^{n} v_i w_i\n$$\nwhere $n$ is the number of elements in the vectors.\n\
    The dot product of two vectors $\\mathbf{v}$ and $\\mathbf{w}$ is defined as:\n\
    $$\n\\mathbf{v} \\cdot \\mathbf{w} = \\sum_{i=1}^{n} v_i w_i\n$$\nwhere $n$ is\
    \ the number of elements in the vectors.\nThe dot product of two vectors $\\mathbf{v}$\
    \ and $\\mathbf{w}$ is defined as:\n$$\n\\mathbf{v} \\cdot \\mathbf{w} = \\sum_{i=1}^{n}\
    \ v_i w_i\n$$\nwhere $n$ is the number of elements in the vectors.\nThe dot product\
    \ of two vectors $\\mathbf{v}$ and $\\mathbf{w}$ is defined as:\n$$\n\\mathbf{v}\
    \ \\cdot \\mathbf{w} = \\sum_{i=1}^{n} v_i w_i\n$$\nwhere $n$ is the number of\
    \ elements in the vectors.\nThe dot product of two vectors $\\mathbf{v}$ and $\\\
    mathbf{w}$ is defined as:\n$$\n\\mathbf{v} \\cdot \\mathbf{w} = \\sum_{i=1}^{n}\
    \ v_i w_i\n$$\nwhere $n$ is the number of elements in the vectors.\nThe dot product\
    \ of two vectors $\\mathbf{v}$ and $\\mathbf{w}$ is defined as:\n$$\n\\mathbf{v}\
    \ \\cdot \\mathbf{w} = \\sum_{i=1}^{n} v_i w_i\n$$\nwhere $n$ is the number of\
    \ elements in the vectors.\nThe dot product of two vectors $\\mathbf{v}$ and $\\\
    mathbf{w}$ is defined as:\n$$\n\\mathbf{v} \\cdot \\mathbf{w} = \\sum_{i=1}^{n}\
    \ v_i w_i\n$$\nwhere $n$ is the number of elements in the vectors.\nThe dot product\
    \ of two vectors $\\mathbf{v}$ and $\\mathbf{w}$ is defined as:\n$$\n\\mathbf{v}\
    \ \\cdot \\mathbf{w} = \\sum_{i=1}^{n} v_i w_i\n$$\nwhere $n$ is the \nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2sc3pn3.jl:21\nin expression starting at\
    \ /tmp/tmpy2sc3pn3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n     \
    \   factorials\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers as an argument and returns the sum of the numbers\
    \ in the vector. \nThe function should raise an error if the vector is empty.\n\
    Example: \n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([1, 2, 3])\n6\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3fofe7p.jl:21\nin expression starting at\
    \ /tmp/tmps3fofe7p.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function f that takes n as a parameter,\n    and returns a\
    \ vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnph7x2q.jl:21\nin expression starting at\
    \ /tmp/tmprnph7x2q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            if i % 2 == 0\n                factorials += i\n     \
    \       else\n                factorials += factorials[i]\n        end\n     \
    \   factorials\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the factorials of all the numbers from 1 to n.\nExample:\
    \ f(5) = [1, 2, 6, 24, 15]\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudzikag5.jl:24\nin expression starting at\
    \ /tmp/tmpudzikag5.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n     \
    \   factorials\n    end\nend\n</cell>\n<code language=julia-1.4>\nf(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two vectors v1 and v2 as input,\
    \ and returns a vector that contains the element-wise product of v1 and v2.\n\
    The element-wise product of two vectors $v_1$ and $v_2$ is defined as follows:\n\
    $$\nv_1\\cdot v_2 = \\sum{i=1}^{n}v_i\\cdot v_i\n$$\nwhere $n$ is the number of\
    \ elements in $v_1$ and $v_2$.\nThe function should work for vectors of any size.\n\
    The function should work for vectors of any type.\nThe function should work for\
    \ vectors of any number of dimensions.\nThe function should work for vectors of\
    \ any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe \nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi_dl_830.jl:21\nin expression starting at\
    \ /tmp/tmpi_dl_830.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  factorials\n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that\
    \ takes two vectors v1 and v2 as inputs, and returns a vector that contains the\
    \ element-wise product of the two vectors.\nThe element-wise product of two vectors\
    \ $v_1$ and $v_2$ is defined as:\n$$v_1\\cdot v_2 = \\sum{i=1}^{n}v_1{i}v_2{i}$$\n\
    where $n$ is the number of elements in the vectors.\nExample:\n$$v_1 = [1,2,3]$$\n\
    $$v_2 = [4,5,6]$$\n$$v_1\\cdot v_2 = [4,10,18]$$\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g6dst8i.jl:21\nin expression starting at\
    \ /tmp/tmp8g6dst8i.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        end\n        return factorials\n    else\n        factorials =\
    \ Vector{Int64}()\n        for i in 1:n\n            factorials += i\n       \
    \ end\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    f(5)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk0dppqnu.jl:25\nin expression starting at\
    \ /tmp/tmpk0dppqnu.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        for i in 2:n\n            factorials[i] = factorials[i-1] * i\n     \
    \   end\n        return factorials\n    end\nend\n</code>\n<|/ a tags=recursion,julia,factorial\
    \ |>\n<| a dscore=1 |>\nThe fastest way is to use memoization:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6,\
    \ 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatgncvk4.jl:22\nin expression starting at\
    \ /tmp/tmpatgncvk4.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n            factorials +=\
    \ n - i\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzn9mljik.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzn9mljik.jl:16\n\
    in expression starting at /tmp/tmpzn9mljik.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    return [1]\n    else \n        factorials = f(n-1)\n        sum = 0\n   \
    \     for f in factorials\n            sum += f\n        end\n        return factorials\
    \ + [sum]\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype f(5)\n</cell>\n<code language=julia-1.5>\n@code_\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbg1qu52m.jl:22\nin expression starting at\
    \ /tmp/tmpbg1qu52m.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        sum = 0\n       \
    \ for i in factorials\n            sum += i\n        end\n        return factorials\
    \ + [sum]\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer!\
    \ I understand your code, but I still don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't understand how it works. I understand\
    \ that `f` returns a vector with the factorials of `n`, but I don't understand\
    \ how it works. I understand that `f` returns a vector with the factorials of\
    \ `n`, but I don't understand how it works. I understand that `f` returns a vector\
    \ with the factorials of `n`, but I don't \nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnzbrb_7.jl:22\nin expression starting at\
    \ /tmp/tmpjnzbrb_7.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ factorial of a given number.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41lbkghk.jl:21\nin expression starting at\
    \ /tmp/tmp41lbkghk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        Vector{Int64}((1:n).*factorial(n-1))\n  \
    \  end\nend\n</cell>\n<text>\nExercise 2\nImplement the function f that takes\
    \ n as a parameter,\n    and returns a vector of size n, such that the value of\
    \ the element at index i is the factorial of i if i is odd\n    or the sum of\
    \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabjhdkah.jl:17\nin expression starting at\
    \ /tmp/tmpabjhdkah.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer.\
    \ I am not allowed to use any built-in functions. I edited my question to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI edited my answer to reflect your edit. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am not allowed to use any built-in\
    \ functions. I edited my question to reflect this.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to reflect your edit. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n\
    The answer by is correct, but I wanted to add some explanation as to why it works.\n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    The function f is defined as a function of n. Since f is defined as a function\
    \ of n, it can be called as a function of n. Thus, f(5) can be called as 5!. \n\
    \nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1oxukcmw.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1oxukcmw.jl:16\n\
    in expression starting at /tmp/tmp1oxukcmw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = f(n-1)\n        factorials\
    \ = [factorials[i] + 1 for i in 1:n]\n        factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ g(n::Int64) that returns the factorial of n if n is even or returns the sum\
    \ of numbers from 1 to n otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxlstr7n.jl:19\nin expression starting at\
    \ /tmp/tmpwxlstr7n.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = factorials(n-1)\n        factorials[1] = 1\n        factorials\n\
    \    else\n        factorials = factorials(n-1)\n        factorials[1] = 1\n \
    \       factorials + 1\n    end\nend\n</cell>\n<text>\nExercise 7\nImplement the\
    \ function factorials that takes n as a parameter, and returns a vector of size\
    \ n, such that the value of the element at index i is the factorial of i if i\
    \ is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from\
    \ 1.\n    the factorial of i is the multiplication of the numbers from 1 to i\
    \ (1 * 2 * ... * i).\n    Example:\n    >>> factorials(5)\n    [1, 2, 6, 24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3saxp4uk.jl:21\nin expression starting at\
    \ /tmp/tmp3saxp4uk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = [1]\n        for i in 2:n\n            factorials\
    \ = factorials * (i-1)\n        end\n        factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes n as a parameter, and returns a vector of size n, such that the value\
    \ of the element at index i is the factorial of i if i is even\n    or the sum\
    \ of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvng1oath.jl:21\nin expression starting at\
    \ /tmp/tmpvng1oath.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    Vector{1}\n    else\n        Vector{Int64}((1:n).*factorial(n))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nImplement the function g that takes n as a parameter,\
    \ and returns a vector of size n, such that the value of the element at index\
    \ i is the factorial of i if i is odd and 0 otherwise.\n    i starts from 1.\n\
    \    the factorial of i is the multiplication of the numbers from 1 to i (1 *\
    \ 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 2, 6, 24, 0]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvpeff7r.jl:17\nin expression starting at\
    \ /tmp/tmpsvpeff7r.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorials = f(n-1)\n        factorials[end-1] = factorials[end-1]\
    \ * n\n        factorials\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,julia,factorial\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqpmb0ya.jl:19\nin expression starting at\
    \ /tmp/tmphqpmb0ya.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n-1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g(n::Int64) that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial\
    \ of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n \
    \   Example:\n    >>> g(5)\n    [1, -1, -1, 1, -1]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkj4sxlks.jl:17\nin expression starting at\
    \ /tmp/tmpkj4sxlks.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, -1, 1, -1]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54lv8kf6.jl:21\nin expression starting at\
    \ /tmp/tmp54lv8kf6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            if i % 2 == 0\n                factorials += i\n     \
    \       else\n                factorials += factorials[i]\n        end\n     \
    \   factorials\n    end\nend\n</cell>\n<code language=julia-1.3>\nf(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the factorial\
    \ of n. \nExample: \n>>> f(5)\n120\n>>> f(10)\n3628800\n>>> f(100)\n15511210043330985984000000\n\
    >>> f(1000)\n2432902008176640000\n>>> f(10000)\n1264036080032000000000000\n>>>\
    \ f(100000)\n9223372036854775808000000000000\n>>> f(1000000)\n362880640000000000000000000000\n\
    >>> f(10000000)\n362880640000000000000000000000\n>>> f(100000000)\n362880640000000000000000000000\n\
    >>> f(1000000000)\n362880640000000000000000000000\n>>> f(10000000000)\n362880640000000000000000000000\n\
    >>> f(100000000000)\n362880640000000000000000000000\n>>> f(1000000000000)\n362880640000000000000000000000\n\
    >>> f(10000000000000)\n362880640000000000000000000000\n>>> f(100000000000000)\n\
    362880640000000000000000000000\n>>> f(1000000000000000)\n362880640000000000000000000000\n\
    >>> f(10000000000000000)\n362880640000000000000000000000\n>>> f(100000000000000000)\n\
    362880640000000000000000000000\n>>> f(1000000000000000000)\n362880640000000000000000000000\n\
    >>> f(10000000000000000000)\n362880640000000000000000000000\n>>> f(100000000000000000000)\n\
    362880640000000000000000000000\n>>> f(1000000000000000000000)\n362880640000000000000000000000\n\
    >>> f(10000000000000000000000)\n362880640000000000000000000000\n>>> f(100000000000000000000000)\n\
    362880640000000000000000000000\n>>> f(1000000000000000000000000)\n362880640000000000000000000000\n\
    >>> f(10000000000000000000000000)\n362880640000000000000000000000\n>>> f(100000000000000000000000000)\n\
    362880640000000000000000000000\n>>> f(1000000000000000000000000000)\n362880640000000000000000000000\n\
    >>> f(10000000000000000000000000000)\n362880640000000000000000000000\n>>> f(100000000000000000000000000000)\n\
    362880640000000000000000000000\n>>> f(1000000000000000000000000000000)\n362880640000000000000000000000\n\
    >>> f(\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) ==\
    \ [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t\
    @test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3h_2z8p3.jl:24\nin expression starting at\
    \ /tmp/tmp3h_2z8p3.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    Vector{1}\n    else\n        factorials = Vector{Int64}()\n        for i\
    \ = 1:n\n            factorials += i\n        end\n        factorials\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two vectors as parameters and returns a vector that contains\
    \ the product of the two vectors.\nThe function should return the following vector:\n\
    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    Hint: use map()\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp244w78ir.jl:21\nin expression starting at\
    \ /tmp/tmp244w78ir.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        return [n*f(n-1)]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nf(5)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprb30xmfo.jl:17\nin expression starting at\
    \ /tmp/tmprb30xmfo.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = 1:n\n    else\n        factorials = 1:n-1\n    end\n    return\
    \ factorials\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ vectors as parameters and returns a vector where each element is the product\
    \ of the corresponding elements of the two vectors.\nThe function should return\
    \ the following vector:\n    [1, 4, 9, 16, 25]\n</text>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ekuw5t9.jl:18\nin expression starting at\
    \ /tmp/tmp9ekuw5t9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n\
    \        factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n            factorials +=\
    \ i\n        return factorials\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26825829)\n\
    <|/ c |>\n<| c |>\nThe question was \"how to implement the factorial function\"\
    , and I provided an implementation. How does it not answer the question?\n<|/\
    \ c |>\n<| c |>\nThe question was \"how to implement the factorial function\"\
    , and I provided an implementation. How does it not answer the question?\n<|/\
    \ c |>\n<| c |>\nThe question was \"how to implement the factorial function\"\
    , and I provided an implementation. How does it not answer the question?\n<|/\
    \ c |>\n<| c |>\nThe question was \"how to implement the factorial function\"\
    , and I provided an implementation. How does it not answer the question?\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpp5er1lkh.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp5er1lkh.jl:16\n\
    in expression starting at /tmp/tmpp5er1lkh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        factorials[2] = 1\n        for i in 3:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        end\n        return factorials\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nImplement the function g that takes n as a parameter,\
    \ and returns a vector of size n, such that the value of the element at index\
    \ i is the factorial of i if i is odd and -1 otherwise.\n    i starts from 1.\n\
    \    the factorial of i is the multiplication of the numbers from 1 to i (1 *\
    \ 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7m3difr.jl:23\nin expression starting at\
    \ /tmp/tmpd7m3difr.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials = factorials + i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two vectors\
    \ v1 and v2 as inputs, and returns a vector that contains the element-wise product\
    \ of v1 and v2.\nThe element-wise product of two vectors v1 and v2 is defined\
    \ as:\n$$\nv1 \\cdot v2 = \\sum{i=1}^{n} v_i \\times v_i\n$$\nwhere $v_i$ is the\
    \ ith element of v1 and $v_i$ is the ith element of v2.\nExample:\n$$\n\\begin{align}\n\
    \\begin{bmatrix}\n1 & 2 & 3 \\\n4 & 5 & 6\n\\end{bmatrix} &\\times \\begin{bmatrix}\n\
    1 & 2 & 3 \\\n4 & 5 & 6\n\\end{bmatrix} = \\begin{bmatrix}\n1 \\times 1 & 2 \\\
    times 2 & 3 \\times 3 \\\n4 \\times 4 & 5 \\times 5 & 6 \\times 6\n\\end{bmatrix}\
    \ = \\begin{bmatrix}\n1 \\times 1 & 2 \\times 2 & 3 \\times 3 \\\n4 \\times 4\
    \ & 5 \\times 5 & 6 \\times 6\n\\end{bmatrix}\n\\end{align}\n$$\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz73hilfh.jl:21\nin expression starting at\
    \ /tmp/tmpz73hilfh.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = [1]\n        for i in 2:n\n            factorials\
    \ = factorials * (i-1)\n        end\n        factorials\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp81vv7nyp.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp81vv7nyp.jl:26\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [24] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81vv7nyp.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81vv7nyp.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp81vv7nyp.jl:27\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [720] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81vv7nyp.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81vv7nyp.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp81vv7nyp.jl:29\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [2] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp81vv7nyp.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp81vv7nyp.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nf(5)\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0xzbi9fm.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0xzbi9fm.jl:16\n\
    in expression starting at /tmp/tmp0xzbi9fm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorial(n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function f that takes n as a parameter, and returns a vector of size\
    \ n, such that the value of the element at index i is the factorial of i if i\
    \ is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from\
    \ 1.\n    the factorial of i is the multiplication of the numbers from 1 to i\
    \ (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) ==\
    \ [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t\
    @test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l4r0s0y.jl:17\nin expression starting at\
    \ /tmp/tmp5l4r0s0y.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g(n::Int64) that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial\
    \ of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n \
    \   Example:\n    >>> g(5)\n    [1, 2, -1, -4, -16, -64, -256, -4096, -8192]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie2y9f3e.jl:21\nin expression starting at\
    \ /tmp/tmpie2y9f3e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            if i%2==0\n                factorials = factorials + i\n\
    \            else\n                factorials = factorials + 1\n            end\n\
    \        end\n        factorials\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two vectors as parameters and returns a vector that\
    \ contains the element-wise product of the two vectors.\nThe element-wise product\
    \ of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is:\n$$\\mathbf{a} \\odot \\\
    mathbf{b} = \\mathbf{a} \\times \\mathbf{b}$$\nThe function should work for vectors\
    \ of any size, and should work for vectors of different sizes.\nThe function should\
    \ work for vectors of any type, and should work for vectors of different types.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of dimensions.\nThe function\
    \ should work for vectors of any number of dimensions.\nThe function should work\
    \ for vectors of any number of dimensions.\nThe function should work for vectors\
    \ of any number of dimensions.\nThe function should work for vectors of any number\
    \ of dimensions.\nThe function should work for vectors of any number of dimensions.\n\
    The function should work for vectors of any number of \nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4tt4ihy.jl:25\nin expression starting at\
    \ /tmp/tmpd4tt4ihy.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = push!(factorials, factorial(i))\n        end\n        return factorials\n\
    \    else\n        factorials = Vector{Int64}()\n        for i in 1:n\n      \
    \      factorials = push!(factorials, factorial(i))\n        end\n        return\
    \ factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function f that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and -1 otherwise.\ni starts from 1.\nthe factorial of i is\
    \ the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample: \n\
    >>> f(5)\n[-1, -1, -1, 6, 24]\nHint: use if-else statements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpirbvpv.jl:25\nin expression starting at\
    \ /tmp/tmpqpirbvpv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of size n and returns the sum of the\
    \ elements of the vector that are less than or equal to n.\nExample: \n>>> f([1,2,3,4,5])\n\
    [1,2,3,4,5]\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n\
    55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n\
    >>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>>\
    \ f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n\
    55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n\
    >>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>>\
    \ f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n\
    55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n\
    >>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>>\
    \ f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n\
    55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n\
    >>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>>\
    \ f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n55\n>>> f(10)\n\
    55\n\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) ==\
    \ [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t\
    @test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sxx8ey5.jl:21\nin expression starting at\
    \ /tmp/tmp9sxx8ey5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = factorials + i\n        end\n        return factorials\n    else\n       \
    \ factorials = Vector{Int64}()\n        for i in 1:n\n            factorials =\
    \ factorials + i\n        end\n        return factorials\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nImplement the function g that takes n as a parameter, and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is odd and -1 otherwise.\n    i starts from 1.\n   \
    \ the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *\
    \ ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkr32t91.jl:25\nin expression starting at\
    \ /tmp/tmppkr32t91.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n\
    \        factorials = factorials(n-1)\n        factorials[1] = 1\n        return\
    \ factorials\n    else\n        factorials = factorials(n-1)\n        factorials[1]\
    \ = 1\n        factorials[2] = factorials[1] * factorials[2] \n        return\
    \ factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpivbiirxt.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpivbiirxt.jl:27\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  UndefVarError: factorials\
    \ not defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpivbiirxt.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivbiirxt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivbiirxt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpivbiirxt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  UndefVarError: factorials not\
    \ defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpivbiirxt.jl:0\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivbiirxt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivbiirxt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpivbiirxt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  UndefVarError: factorials not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpivbiirxt.jl:0\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpivbiirxt.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpivbiirxt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpivbiirxt.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  UndefVarError: factorials not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpivbiirxt.jl:0\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t\
    @test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2,\
    \ 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpkqjwazf8.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpkqjwazf8.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpkqjwazf8.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkqjwazf8.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkqjwazf8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkqjwazf8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpkqjwazf8.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkqjwazf8.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkqjwazf8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkqjwazf8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmpkqjwazf8.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpkqjwazf8.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpkqjwazf8.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpkqjwazf8.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1] * i\n        end\n        return factorials\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpk3bb2a93.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpk3bb2a93.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpk3bb2a93.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk3bb2a93.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk3bb2a93.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk3bb2a93.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpk3bb2a93.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk3bb2a93.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk3bb2a93.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk3bb2a93.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmpk3bb2a93.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpk3bb2a93.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpk3bb2a93.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpk3bb2a93.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials = factorials + [i]\n        end\n        return\
    \ factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two vectors as parameters and\
    \ returns a vector where each element is the sum of the elements of the first\
    \ vector and the elements of the second vector.\nExample: \n>>> f([1,2,3], [4,5,6])\n\
    [5, 7, 9]\nHint: use zip function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocz3nnlg.jl:21\nin expression starting at\
    \ /tmp/tmpocz3nnlg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ factorial of n (n!) using recursion.\nThe function should take one parameter,\
    \ n, which represents the number of times the factorial should be computed.\n\
    The function should return a vector of size n, such that the value of the element\
    \ at index i is the factorial of i if i is even\n    or the sum of numbers from\
    \ 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n\
    \    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4gcc9_uk.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4gcc9_uk.jl:16\n\
    in expression starting at /tmp/tmp4gcc9_uk.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n\
    \        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv274fhrq.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpv274fhrq.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpv274fhrq.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv274fhrq.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv274fhrq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpv274fhrq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpv274fhrq.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv274fhrq.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv274fhrq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpv274fhrq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmpv274fhrq.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv274fhrq.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv274fhrq.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpv274fhrq.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = 1:n\n    else\n        factorials = 1:n-1\n    end\n    return\
    \ factorials\nend\n</code>\n<|/ a tags=julia,factorial |>\n<| a tags=julia,factorial\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyemv81tx.jl:18\nin expression starting at\
    \ /tmp/tmpyemv81tx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials[i] = factorials[i-1]\
    \ + i\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpcnvv352b.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnvv352b.jl:16\n\
    in expression starting at /tmp/tmpcnvv352b.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            if i%2==0\n                factorials = factorials + i\n\
    \            else\n                factorials = factorials + i-1\n           \
    \ end\n        end\n        factorials\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g21q6n_.jl:25\nin expression starting at\
    \ /tmp/tmp8g21q6n_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorial(n) + [factorial(n-1)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of size n and returns\
    \ the sum of the elements of the vector.\nExample: \n>>> f([1,2,3])\n6\nHint:\
    \ use sum\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe76ohfnu.jl:17\nin expression starting at\
    \ /tmp/tmpe76ohfnu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    return [1]\n    else\n        factorials = f(n-1)\n        factorials[1]\
    \ = 1\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu7t_rosh.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpu7t_rosh.jl:24\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [1] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7t_rosh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7t_rosh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu7t_rosh.jl:25\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [1] == [1, 2, 6, 24, 15, 720, 28]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7t_rosh.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7t_rosh.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpu7t_rosh.jl:27\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [1] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7t_rosh.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7t_rosh.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n\
    \        factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, 6, -24, -1]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppik5upyv.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppik5upyv.jl:16\n\
    in expression starting at /tmp/tmppik5upyv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called g that takes\
    \ n as a parameter, and returns a vector of size n, such that the value of the\
    \ element at index i is the factorial of i if i is odd and -1 otherwise.\n   \
    \ i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24,\
    \ 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9919vsy.jl:21\nin expression starting at\
    \ /tmp/tmps9919vsy.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  return factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpnih7pu7_.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpnih7pu7_.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpnih7pu7_.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnih7pu7_.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnih7pu7_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnih7pu7_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpnih7pu7_.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnih7pu7_.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnih7pu7_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnih7pu7_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmpnih7pu7_.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpnih7pu7_.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpnih7pu7_.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpnih7pu7_.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1] * i\n        end\n    \
    \    factorials\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two vectors as parameters, and returns a vector that contains the product\
    \ of the elements of the first vector with the elements of the second vector.\n\
    Example:\n>>> f([1,2,3], [4,5,6])\n[4, 10, 18]\nHint: use the function prod from\
    \ the Julia standard library.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuuxfetu.jl:21\nin expression starting at\
    \ /tmp/tmpnuuxfetu.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        Vector{Int64}(factorial)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa7m0w6hp.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpa7m0w6hp.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  UndefVarError: factorial not\
    \ defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7m0w6hp.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7m0w6hp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpa7m0w6hp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  UndefVarError: factorial not defined\n\
    \  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7m0w6hp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7m0w6hp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpa7m0w6hp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  UndefVarError: factorial not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7m0w6hp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7m0w6hp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpa7m0w6hp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  UndefVarError: factorial not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials(n-1)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpf81j5n84.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpf81j5n84.jl:22\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  UndefVarError: factorials\
    \ not defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpf81j5n84.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf81j5n84.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf81j5n84.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpf81j5n84.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  UndefVarError: factorials not\
    \ defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpf81j5n84.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf81j5n84.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf81j5n84.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpf81j5n84.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  UndefVarError: factorials not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpf81j5n84.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf81j5n84.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf81j5n84.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpf81j5n84.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  UndefVarError: factorials not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpf81j5n84.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:4"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]+factorial[i-1]\
    \ for i in 1:n]\n        factorial\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    f(5)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkhfza36.jl:19\nin expression starting at\
    \ /tmp/tmppkhfza36.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = [1]\n        for i in 1:n\n            factorials = factorials\
    \ * (i + 1)\n        return factorials\n    else\n        factorials = [1]\n \
    \       for i in 1:n\n            factorials = factorials * (i + 1)\n        \
    \    factorials = factorials * (n - i)\n        return factorials\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an integer $n$ and returns the factorial of $n$.\nExample:\
    \ \n$$ f(5) = 5 \\cdot 4 \\cdot 3 \\cdot 2 \\cdot 1 $$\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplvm_bzx7.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplvm_bzx7.jl:16\n\
    in expression starting at /tmp/tmplvm_bzx7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = f(n-1)\n        factorials = [factorials[i]\
    \ + factorials[i-1] for i in 1:length(factorials)]\n        factorials\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nf(5)\n</cell>\n<text>\nExercise 2\nImplement\
    \ the function g(n::Int64) that takes n as a parameter, and returns a vector of\
    \ size n, such that the value of the element at index i is the factorial of i\
    \ if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuw8w0skq.jl:19\nin expression starting at\
    \ /tmp/tmpuw8w0skq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        for i in 2:n\n            factorials[i] = factorials[i-1] * i\n \
    \       end\n        return factorials\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g(n::Int64) that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial\
    \ of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n \
    \   Example:\n    >>> g(5)\n    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplejsl21k.jl:22\nin expression starting at\
    \ /tmp/tmplejsl21k.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        Vector{Int64}((n-1)*f(n-1))\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a given number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf0tvgdr.jl:17\nin expression starting at\
    \ /tmp/tmpgf0tvgdr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] =\
    \ 1\n        factorials[2] = factorials[1] * factorials[2]\n        return factorials\n\
    \    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThanks for your\
    \ answer. I'm still trying to understand how this works. I understand that `factorials\
    \ = f(n-1)` creates a new vector and assigns it to `factorials`. I don't understand\
    \ why `factorials[1] = 1` and `factorials[2] = factorials[1] * factorials[2]`\
    \ work. Could you please explain how this works?\n<|/ c |>\n<| c |>\n`factorials[1]\
    \ = 1` assigns the value 1 to `factorials[1]`.  `factorials[2] = factorials[1]\
    \ * factorials[2]` assigns the value `factorials[1] * factorials[2]` to `factorials[2]`.\
    \  `factorials[1] * factorials[2]` returns the product of all the numbers from\
    \ 1 to `n`.  `factorials[1] * factorials[2]` returns `factorials[1] * factorials[2]`\
    \ because `factorials[1] * factorials[2]` is assigned to `factorials[2]`.  `factorials[1]\
    \ * factorials[2]` returns `factorials[1] * factorials[2]` because `factorials[1]\
    \ * factorials[2]` is assigned to `factorials[2]`.  `factorials[1] * factorials[2]`\
    \ returns `factorials[1] * factorials[2]` because `factorials[1] * factorials[2]`\
    \ is assigned to `factorials[2]`.  `factorials[1] * factorials[2]` returns `factorials[1]\
    \ * factorials[2]` because `factorials[1] * factorials[2]` is assigned to `factorials[2]`.\
    \  `factorials[1] * factorials[2]` returns `factorials[1] * factorials[2]` because\
    \ `factorials[1] * factorials[2]` is assigned to `factorials[2]`.  `factorials[1]\
    \ * factorials[2]` returns `factorials[1] * factorials[2]` because `factorials[1]\
    \ * factorials[2]` is assigned to `factorials[2]`.  `factorials[1] * factorials[2]`\
    \ returns `factorials[1] * factorials[2]` because `factorials[1] * factorials[2]`\
    \ is assigned to `factorials[2]`.  `factorials[1] * factorials[2]` returns `factorials[1]\
    \ * factorials[2]` because `factorials[1] * factorials[2]` is assigned to `factorials[2]`.\
    \  `factorials[1] * factorials[2]` returns \nusing Test\n\n@testset begin\n\n\
    candidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdgssx6j.jl:20\nin expression starting at\
    \ /tmp/tmpzdgssx6j.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = f(n-1)\n        factorials =\
    \ [factorials[i] + 1 for i in 1:n]\n        factorials\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp7k_hfh6r.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp7k_hfh6r.jl:24\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n    [1] getindex(A::Vector{Int64},\
    \ i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var\"#1#2\")(i::Int64)\n\
    \      @ Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [4] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"})\n      @\
    \ Base ./array.jl:724\n    [5] f(n::Int64)\n      @ Main /tmp/tmp7k_hfh6r.jl:15\n\
    \    [6] f(n::Int64) (repeats 4 times)\n      @ Main /tmp/tmp7k_hfh6r.jl:14\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7k_hfh6r.jl:24 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7k_hfh6r.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7k_hfh6r.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [1]\n  Stacktrace:\n    [1] getindex(A::Vector{Int64},\
    \ i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var\"#1#2\")(i::Int64)\n\
    \      @ Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [4] collect(itr::Base.Generator{UnitRange{Int64}, var\"#1#2\"})\n      @\
    \ Base ./array.jl:724\n    [5] f(n::Int64)\n      @ Main /tmp/tmp7k_hfh6r.jl:15\n\
    \    [6] f(n::Int64) (repeats 6 times)\n      @ Main /tmp/tmp7k_hfh6r.jl:14\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp7k_hfh6r.jl:25 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp7k_hfh6r.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp7k_hfh6r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = [1]\n        for i in 2:n\n            factorials\
    \ = factorials * (i-1)\n        end\n        factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. \nExample: \n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(-1)\n1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9k7iluxd.jl:21\nin expression starting at\
    \ /tmp/tmp9k7iluxd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        return factorials\n    end\nend\n</cell>\n<text>\nExercise 3\nImplement\
    \ the function g that takes n as a parameter, and returns a vector of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ odd and -1 otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n\
    \    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21237vla.jl:19\nin expression starting at\
    \ /tmp/tmp21237vla.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = push!(factorials, factorial(i))\n        return factorials\n    else\n   \
    \     factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = push!(factorials, factorial(i))\n        return factorials\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfwkylu92.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwkylu92.jl:16\n\
    in expression starting at /tmp/tmpfwkylu92.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i * factorial(i)\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials += factorial(i)\n\
    \        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp75gjg1kq.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp75gjg1kq.jl:16\n\
    in expression starting at /tmp/tmp75gjg1kq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ factorial of a given number.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtqrdi4v.jl:21\nin expression starting at\
    \ /tmp/tmpdtqrdi4v.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i = 1:n\n            factorials[i] = factorials[i-1] * i\n       \
    \ end\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpaeuuje9x.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpaeuuje9x.jl:26\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpaeuuje9x.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaeuuje9x.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaeuuje9x.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaeuuje9x.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 0-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @\
    \ ./array.jl:861 [inlined]\n   [2] f(n::Int64)\n     @ Main /tmp/tmpaeuuje9x.jl:16\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaeuuje9x.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaeuuje9x.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaeuuje9x.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  BoundsError: attempt to access 0-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] f(n::Int64)\n     @ Main /tmp/tmpaeuuje9x.jl:16\n   [3] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpaeuuje9x.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpaeuuje9x.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpaeuuje9x.jl:29\n  Test threw exception\n  Expression: "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials = factorials + [i]\n        end\n        return\
    \ factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of size n and returns\
    \ the product of the elements in the vector.\nExample: \n>>> f([1,2,3])\n    6\n\
    >>> f([1,2,4])\n    24\n>>> f([1,2])\n    6\n>>> f([1,3])\n    6\n>>> f([1,4])\n\
    \    24\n>>> f([2,3])\n    6\n>>> f([2,4])\n    24\n>>> f([3,4])\n    24\n>>>\
    \ f([4,5])\n    120\n>>> f([5,6])\n    120\n>>> f([6,7])\n    120\n>>> f([7,8])\n\
    \    120\n>>> f([8,9])\n    120\n>>> f([9,10])\n    120\n>>> f([10,11])\n    120\n\
    >>> f([11,12])\n    120\n>>> f([12,13])\n    120\n>>> f([13,14])\n    120\n>>>\
    \ f([14,15])\n    120\n>>> f([15,16])\n    120\n>>> f([16,17])\n    120\n>>> f([17,18])\n\
    \    120\n>>> f([18,19])\n    120\n>>> f([19,20])\n    120\n>>> f([20,21])\n \
    \   120\n>>> f([21,22])\n    120\n>>> f([22,23])\n    120\n>>> f([23,24])\n  \
    \  120\n>>> f([24,25])\n    120\n>>> f([25,26])\n    120\n>>> f([26,27])\n   \
    \ 120\n>>> f([27,28])\n    120\n>>> f([28,29])\n    120\n>>> f([29,30])\n    120\n\
    >>> f([30,31])\n    120\n>>> f([31,32])\n    120\n>>> f([32,33])\n    120\n>>>\
    \ f([33,34])\n    120\n>>> f([34,35])\n    120\n>>> f([35,36])\n    120\n>>> f([36,37])\n\
    \    120\n>>> f([37,38])\n    120\n>>> f([38,39])\n    120\n>>> f\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnjdg04z.jl:21\nin expression starting at\
    \ /tmp/tmpnnjdg04z.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function f that takes n as a parameter, and returns a vector of size\
    \ n, such that the value of the element at index i is the factorial of i if i\
    \ is even and the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n\
    \    the factorial of i is the multiplication of the numbers from 1 to i (1 *\
    \ 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqml2gd6.jl:21\nin expression starting at\
    \ /tmp/tmpvqml2gd6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n   \
    \         factorials[i] = factorials[i-1] * i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nImplement the function g that takes\
    \ n as a parameter, and returns a vector of size n, such that the value of the\
    \ element at index i is the factorial of i if i is odd and -1 otherwise.\n   \
    \ i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, -1,\
    \ 1, -1]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhimpje9.jl:21\nin expression starting at\
    \ /tmp/tmpjhimpje9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n \
    \       for i in 1:n\n            if i % 2 == 0\n                factorials =\
    \ factorials + i\n            else\n                factorials = factorials +\
    \ i\n            end\n        end\n        return factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 3\nImplement the function\
    \ g(n::Int64) that takes n as a parameter, and returns a vector of size n, such\
    \ that the value of the element at index i is the factorial of i if i is odd and\
    \ -1 otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n\
    \    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0ideusw.jl:25\nin expression starting at\
    \ /tmp/tmpr0ideusw.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i=1:n\n            factorials[i] = factorials[i-1]*i\n        end\n        factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nImplement the function f that takes\
    \ n as a parameter,\n    and returns a vector of size n, such that the value of\
    \ the element at index i is the factorial of i if i is even\n    or the sum of\
    \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6cy7ver.jl:21\nin expression starting at\
    \ /tmp/tmpv6cy7ver.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n            factorials +=\
    \ i\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    f(5)\n</cell>\n<text>\nExercise 3\nImplement the function g that takes n as a\
    \ parameter, and returns a vector of size n, such that the value of the element\
    \ at index i is the factorial of i if i is odd and -1 otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, 6, -24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyjip_gbq.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjip_gbq.jl:16\n\
    in expression starting at /tmp/tmpyjip_gbq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    return [1]\n    else \n        factorials = [1]\n        for i in 1:n\n \
    \           factorials = factorials * (i + 1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_6qlb86.jl:21\nin expression starting at\
    \ /tmp/tmpx_6qlb86.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 2:n\n   \
    \         factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function f that takes n as\
    \ a parameter, and returns a vector of size n, such that the value of the element\
    \ at index i is the factorial of i if i is even and the sum of numbers from 1\
    \ to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n\
    \    [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxavoz_w.jl:21\nin expression starting at\
    \ /tmp/tmpfxavoz_w.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials = factorials * (i+1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of ways to arrange $n$ cards in an $n$-card deck.\
    \ \nThe function should return $0$ if $n$ is less than or equal to $0$, and $n!$\
    \ if $n$ is greater than or equal to $0$.\nThe function should return $0$ if $n$\
    \ is less than or equal to $0$, and $n!$ if $n$ is greater than or equal to $0$.\n\
    The function should return $0$ if $n$ is less than or equal to $0$, and $n!$ if\
    \ $n$ is greater than or equal to $0$.\nThe function should return $0$ if $n$\
    \ is less than or equal to $0$, and $n!$ if $n$ is greater than or equal to $0$.\n\
    The function should return $0$ if $n$ is less than or equal to $0$, and $n!$ if\
    \ $n$ is greater than or equal to $0$.\nThe function should return $0$ if $n$\
    \ is less than or equal to $0$, and $n!$ if $n$ is greater than or equal to $0$.\n\
    The function should return $0$ if $n$ is less than or equal to $0$, and $n!$ if\
    \ $n$ is greater than or equal to $0$.\nThe function should return $0$ if $n$\
    \ is less than or equal to $0$, and $n!$ if $n$ is greater than or equal to $0$.\n\
    The function should return $0$ if $n$ is less than or equal to $0$, and $n!$ if\
    \ $n$ is greater than or equal to $0$.\nThe function should return $0$ if $n$\
    \ is less than or equal to $0$, and $n!$ if $n$ is greater than or equal to $0$.\n\
    The function should return $0$ if $n$ is less than or equal to $0$, and $n!$ if\
    \ $n$ is greater than or equal to $0$.\nThe function should return $0$ if $n$\
    \ is less than or equal to $0$, and $n!$ if $n$ is greater than or equal to $0$.\n\
    The function should return $0$ if $n$\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpsdv1k0.jl:21\nin expression starting at\
    \ /tmp/tmpkpsdv1k0.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials[i] = factorials[i-1]\
    \ + i\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    f(5)\n</cell>\n<text>\nExercise 2\nImplement the function g that takes n as a\
    \ parameter, and returns a vector of size n, such that the value of the element\
    \ at index i is the factorial of i if i is odd and -1 otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, -1, -1, 1, -1]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpl1b2rzdt.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl1b2rzdt.jl:16\n\
    in expression starting at /tmp/tmpl1b2rzdt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g(n::Int64) that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd and 0 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 2, 6, 24, 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fywjkbe.jl:17\nin expression starting at\
    \ /tmp/tmp_fywjkbe.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = f(n-1)\n        factorials[end-1]\
    \ = factorials[end-1] + n\n        factorials\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is even and the sum of numbers from 1 to i otherwise.\n    i starts from\
    \ 1.\n    the factorial of i is the multiplication of the numbers from 1 to i\
    \ (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) ==\
    \ [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t\
    @test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bm57tw6.jl:19\nin expression starting at\
    \ /tmp/tmp0bm57tw6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factorial=factorial*(n-1)\n\
    \        factorial=factorial+1\n        factorial=factorial*(n-1)\n        factorial=factorial+1\n\
    \        factorial=factorial*(n-1)\n        factorial=factorial+1\n        factori\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpdxat0n_9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdxat0n_9.jl:1\n\
    in expression starting at /tmp/tmpdxat0n_9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==1\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i = 2:n\n      \
    \      factorials = [factorials[i]*i for i in factorials]\n        end\n     \
    \   return factorials\n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that takes an integer $n$ and returns the factorial of $n$. \nThe function should\
    \ return $n!$ if $n$ is even, and $(n-1)!$ if $n$ is odd.\nExample: \n>>> f(5)\n\
    120\n>>> f(6)\n720\n>>> f(7)\n5040\n>>> f(8)\n40320\n>>> f(9)\n362880\n>>> f(10)\n\
    3628800\n>>> f(11)\n39916800\n>>> f(12)\n479001600\n>>> f(13)\n6227020800\n>>>\
    \ f(14)\n87178291200\n>>> f(15)\n1307674368000\n>>> f(16)\n20922789888000\n>>>\
    \ f(17)\n355687428096000\n>>> f(18)\n6402373705728000\n>>> f(19)\n121645100408832000\n\
    >>> f(20)\n2432902008176640000\n>>> f(21)\n51090942171709440000\n>>> f(22)\n1124000727777607680000\n\
    >>> f(23)\n25852016738884976640000\n>>> f(24)\n620448401733239439360000\n>>> f(25)\n\
    15511210043330985984000000\n>>> f(26)\n403291461126605635584000000\n>>> f(27)\n\
    10888869450418352160768000000\n>>> f(28)\n30418629923324049286464000000\n>>> f(29)\n\
    8841761993739701954543616000000\n>>> f(30)\n265252859812191058636308480000000\n\
    >>> f(31)\n8222838654177922817725562880000000\n>>> f(32)\n263130836933693530167218012160000000\n\
    >>> f(33)\n8683317618811886495518194401280000000\n>>> f(34)\n295232799039604140847618609643520000000\n\
    >>> f(35)\n68719476736883239344262295021200000000\n>>> f(36)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvl_99jka.jl:21\nin expression starting at\
    \ /tmp/tmpvl_99jka.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials = factorials * (i-1)\n        end\n        return factorials\n\
    \    end\nend\n</code>\n<|/ a tags=julia,factorial |>\n<| c |>\nThe `factorials`\
    \ variable is unnecessary. `factorials = [1]` will suffice. Also, `factorials\
    \ = factorials * (i-1)` can be replaced with `factorials = factorials * (i+1)`.\n\
    <|/ c |>\n<| c |>\nThanks for your comment! I edited my answer to include your\
    \ suggestions.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw9q3cyv.jl:21\nin expression starting at\
    \ /tmp/tmpsw9q3cyv.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        end\n        return factorials\n    else\n  \
    \      factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = i\n        end\n        return factorials\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is odd and -1 otherwise.\n    i starts from 1.\n    the factorial of\
    \ i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> f(5)\n    [1, -1, 6, -1, 24]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlvagv6z.jl:25\nin expression starting at\
    \ /tmp/tmptlvagv6z.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n            factorials +=\
    \ n - i\n        return factorials\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzn9mljik.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzn9mljik.jl:16\n\
    in expression starting at /tmp/tmpzn9mljik.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = factorials(n-1)\n        factorials = factorials.*(1:n)\n\
    \        return factorials\n    else\n        factorials = factorials(n-1)\n \
    \       factorials = factorials.*(1:n+1)\n        return factorials\n    end\n\
    end\n</code>\n<|/ a tags=julia,factorial |>\n<| a dscore=2 |>\nI wanted to add\
    \ an answer that uses recursion and is more efficient than other answers posted\
    \ so far.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudxdk9gp.jl:21\nin expression starting at\
    \ /tmp/tmpudxdk9gp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nf(5)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpkqqmoqyt.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqqmoqyt.jl:16\n\
    in expression starting at /tmp/tmpkqqmoqyt.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials[i] = factorials[i-1]*i\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function f that takes n as a parameter,\n    and returns a\
    \ vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is odd\n    or the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 3, 6, 24]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8c9yuln.jl:21\nin expression starting at\
    \ /tmp/tmpo8c9yuln.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n     \
    \       factorials = factorials * (i+1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nImplement the function g that takes\
    \ n as a parameter,\n    and returns a vector of size n, such that the value of\
    \ the element at index i is the factorial of i if i is odd\n    or the sum of\
    \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 3, 9, 27, 81]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00z2dxm5.jl:21\nin expression starting at\
    \ /tmp/tmp00z2dxm5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n-1)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nImplement the function g that takes n as a parameter, and returns a vector\
    \ of size n, such that the value of the element at index i is the factorial of\
    \ i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 2, 6, 24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy55x5gzx.jl:17\nin expression starting at\
    \ /tmp/tmpy55x5gzx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorials = f(n-1)\n        factorials = [factorials[i]\
    \ + 1 for i in 1:n]\n        factorials\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpvo6qmj6q.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpvo6qmj6q.jl:24\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n    [1] getindex(A::Vector{Int64},\
    \ i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var\"#1#2\")(i::Int64)\n\
    \      @ Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [4] collect_to!(dest::Vector{Int64}, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"}, offs::Int64, st::Int64)\n      @ Base ./array.jl:782\n    [5]\
    \ collect_to_with_first!(dest::Vector{Int64}, v1::Int64, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"}, st::Int64)\n      @ Base ./array.jl:760\n    [6] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\n      @ Base ./array.jl:734\n    [7] f(n::Int64)\n      @ Main\
    \ /tmp/tmpvo6qmj6q.jl:15\n    [8] f(n::Int64) (repeats 3 times)\n      @ Main\
    \ /tmp/tmpvo6qmj6q.jl:14\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpvo6qmj6q.jl:24 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpvo6qmj6q.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpvo6qmj6q.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  BoundsError: attempt to access\
    \ 1-element Vector{Int64} at index [2]\n  Stacktrace:\n    [1] getindex(A::Vector{Int64},\
    \ i1::Int64)\n      @ Base ./array.jl:861\n    [2] (::var\"#1#2\")(i::Int64)\n\
    \      @ Main ./none:0\n    [3] iterate\n      @ ./generator.jl:47 [inlined]\n\
    \    [4] collect_to!(dest::Vector{Int64}, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"}, offs::Int64, st::Int64)\n      @ Base ./array.jl:782\n    [5]\
    \ collect_to_with_first!(dest::Vector{Int64}, v1::Int64, itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"}, st::Int64)\n      @ Base ./array.jl:760\n    [6] collect(itr::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"})\n      @ Base ./array.jl:734\n  "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        factorial=[factorial[i]*i\
    \ for i in 1:n]\n        factorial\n    end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThank you for your suggestion,\
    \ I have edited my answer to include an explanation.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kadp45g.jl:19\nin expression starting at\
    \ /tmp/tmp0kadp45g.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n        return factorials\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nImplement the function g(n::Int64)\
    \ that takes n as a parameter, and returns a vector of size n, such that the value\
    \ of the element at index i is the factorial of i if i is odd and -1 otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n    [1, 2, -1, -4,\
    \ -9, -16, -25, -36]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9cadkw3z.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9cadkw3z.jl:16\n\
    in expression starting at /tmp/tmp9cadkw3z.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        end\n        return factorials\n    else\n  \
    \      factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = i\n        end\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    f(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_9gc5sb.jl:25\nin expression starting at\
    \ /tmp/tmpn_9gc5sb.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial(n-1)\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjqu4x5am.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpjqu4x5am.jl:22\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpjqu4x5am.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqu4x5am.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqu4x5am.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpjqu4x5am.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  MethodError: Cannot `convert`\
    \ an object of type Int64 to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n\
    \    ...\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpjqu4x5am.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqu4x5am.jl:23 [inlined]\n\
    \   [4] macro expansion\n   "
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i * factorial(i)\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials += factorial(i)\n\
    \        return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    f(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp29b04cep.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29b04cep.jl:16\n\
    in expression starting at /tmp/tmp29b04cep.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i in 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n     \
    \   factorials\n    end\nend\n</cell>\n<code language=julia-1.0>\nf(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function f that takes n as a parameter, and returns\
    \ a vector of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts\
    \ from 1.\n    the factorial of i is the multiplication of the numbers from 1\
    \ to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f_i2zmi.jl:21\nin expression starting at\
    \ /tmp/tmp1f_i2zmi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0 \n\
    \        factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = push!(factorials, factorial(i))\n        return factorials\n    else\n   \
    \     factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ = push!(factorials, factorial(i))\n        return factorials\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a given number n.\nExample: \n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n15511210043330985984000000\n\
    >>> factorial(30)\n115792089237316195423570985008687907853269984665640564039457584007913129639935\n\
    >>> factorial(40)\n13462690145773120642912000000\n>>> factorial(50)\n184467440737095516160000000\n\
    >>> factorial(60)\n362880067194376370912000000\n>>> factorial(70)\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpuixcmsma.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuixcmsma.jl:16\n\
    in expression starting at /tmp/tmpuixcmsma.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials[i]\
    \ = factorials[i-1] * i\n        return factorials\n    else\n        factorials\
    \ = Vector{Int64}()\n        for i in 1:n\n            factorials[i] = factorials[i-1]\
    \ + i\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    f(5)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjg32thi9.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjg32thi9.jl:16\n\
    in expression starting at /tmp/tmpjg32thi9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorial=factorial(n-1)\n        Vector{Int64}(factorial)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpa7m0w6hp.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpa7m0w6hp.jl:23\n  Test threw exception\n\
    \  Expression: candidate(5) == [1, 2, 6, 24, 15]\n  UndefVarError: factorial not\
    \ defined\n  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7m0w6hp.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7m0w6hp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpa7m0w6hp.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n  UndefVarError: factorial not defined\n\
    \  Stacktrace:\n   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7m0w6hp.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7m0w6hp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpa7m0w6hp.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(1) == [1]\n  UndefVarError: factorial not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa7m0w6hp.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa7m0w6hp.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpa7m0w6hp.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(3) == [1, 2, 6]\n  UndefVarError: factorial not defined\n  Stacktrace:\n\
    \   [1] f(n::Int64)\n     @ Main /tmp/tmpa7m0w6hp.jl:14\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    f(5)\n</cell>\n<text>\nExercise 2\nWrite a function g(n::Int64) that returns the\
    \ factorial of n if n is even and sum from 1 to n otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexsbtj4d.jl:17\nin expression starting at\
    \ /tmp/tmpexsbtj4d.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorial(n)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer $n$ and returns the factorial of $n$\
    \ if $n$ is even and $n!$ if $n$ is odd.\nExample: \n>>> f(5)\n[1,2,6,24,15]\n\
    >>> f(3)\n[1,2,6,24]\n>>> f(4)\n[1,2,6,24]\n>>> f(6)\n[1,2,6,24]\n>>> f(8)\n[1,2,6,24,120]\n\
    >>> f(9)\n[1,2,6,24,120]\n>>> f(10)\n[1,2,6,24,120]\n>>> f(11)\n[1,2,6,24,120]\n\
    >>> f(12)\n[1,2,6,24,120]\n>>> f(13)\n[1,2,6,24,120]\n>>> f(14)\n[1,2,6,24,120]\n\
    >>> f(15)\n[1,2,6,24,120]\n>>> f(16)\n[1,2,6,24,120]\n>>> f(17)\n[1,2,6,24,120]\n\
    >>> f(18)\n[1,2,6,24,120]\n>>> f(19)\n[1,2,6,24,120]\n>>> f(20)\n[1,2,6,24,120]\n\
    >>> f(21)\n[1,2,6,24,120]\n>>> f(22)\n[1,2,6,24,120]\n>>> f(23)\n[1,2,6,24,120]\n\
    >>> f(24)\n[1,2,6,24,120]\n>>> f(25)\n[1,2,6,24,120]\n>>> f(26)\n[1,2,6,24,120]\n\
    >>> f(27)\n[1,2,6,24,120]\n>>> f(28)\n[1,2,6,24,120]\n>>> f(29)\n[1,2,6,24,120]\n\
    >>> f(30)\n[1,2,6,24,120]\n>>> f(31)\n[1,2,6,24,120]\n>>> f(32)\n[1,2,6,24,120]\n\
    >>> f(33)\n[1,2,6,24,120]\n>>> f(34)\n[1,2,6,24,120]\n>>> f(35)\n[1,2,6,24,120]\n\
    >>> f(36)\n[1,2,6,24,120]\n>>> f(37)\n[1,2,6,24,120]\n>>> f(38)\n[1,2,6,24,120]\n\
    >>> f(39)\n[1,2,6,24,120]\n>>> f(40)\n[1,2,6,24,120]\n>>> f(41)\n[1,2,6,24,120]\n\
    >>> f(42)\n[1,2,6,24,120]\n>>> f(4\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdubhvbhp.jl:17\nin expression starting at\
    \ /tmp/tmpdubhvbhp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = 1:n\n    else\n        factorials = 1:n-1\n    end\n    return\
    \ factorials\nend\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_5su3cve.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp_5su3cve.jl:23\n  Expression: candidate(5)\
    \ == [1, 2, 6, 24, 15]\n   Evaluated: [1, 2, 3, 4] == [1, 2, 6, 24, 15]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5su3cve.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5su3cve.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_5su3cve.jl:24\n  Expression: candidate(7) == [1, 2, 6, 24,\
    \ 15, 720, 28]\n   Evaluated: [1, 2, 3, 4, 5, 6] == [1, 2, 6, 24, 15, 720, 28]\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5su3cve.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5su3cve.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_5su3cve.jl:25\n  Expression: candidate(1) == [1]\n   Evaluated:\
    \ Int64[] == [1]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5su3cve.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5su3cve.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp_5su3cve.jl:26\n  Expression: candidate(3) == [1, 2, 6]\n\
    \   Evaluated: [1, 2] == [1, 2, 6]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_5su3cve.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_5su3cve.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    4      4\n"
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1\n     \
    \   [1]\n    else\n        factorials = f(n-1)\n        factorials[end-1] = factorials[end-1]\
    \ * n\n        factorials\n    end\nend\n</cell>\n<text>\nExercise 2\nImplement\
    \ the function g(n::Int64) that takes n as a parameter, and returns a vector of\
    \ size n, such that the value of the element at index i is the factorial of i\
    \ if i is odd and 0 otherwise.\n    i starts from 1.\n    the factorial of i is\
    \ the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 2, 6, 24, 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7zjn2e5.jl:19\nin expression starting at\
    \ /tmp/tmpy7zjn2e5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==1\n       \
    \ [1]\n    else\n        factorials = [1]\n        for i in 2:n\n            factorials\
    \ = factorials * (i-1)\n        end\n        factorials\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nf(5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer n and returns the factorial of n. \nExample: \n>>> f(5)\n\
    120\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1,\
    \ 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ajre0c_.jl:21\nin expression starting at\
    \ /tmp/tmp0ajre0c_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        end\n        return factorials\n    else\n        factorials =\
    \ Vector{Int64}()\n        for i in 1:n\n            factorials += i\n       \
    \ end\n        return factorials\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Implement the function g that takes n as a parameter, and returns a vector of\
    \ size n, such that the value of the element at index i is the factorial of i\
    \ if i is odd and 0 otherwise.\n    i starts from 1.\n    the factorial of i is\
    \ the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \    >>> g(5)\n    [1, 2, 6, 24, 0]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7)\
    \ == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9xuxbh4.jl:25\nin expression starting at\
    \ /tmp/tmpk9xuxbh4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials[i] = factorials[i-1]*i\n        end\n      \
    \  return factorials\n    end\nend\n</cell>\n<text>\nExercise 2\nImplement the\
    \ function g that takes n as a parameter, and returns a vector of size n, such\
    \ that the value of the element at index i is the factorial of i if i is odd and\
    \ -1 otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication\
    \ of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> g(5)\n\
    \    [1, -1, 6, -24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zo6_6c9.jl:21\nin expression starting at\
    \ /tmp/tmp4zo6_6c9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = Vector{Int64}()\n        for i in 1:n\n            factorials\
    \ += i\n        return factorials\n    else\n        factorials = Vector{Int64}()\n\
    \        for i in 1:n\n            factorials += i\n            factorials +=\
    \ n - i\n        return factorials\n    end\nend\n</code>\n<|/ a tags=julia,factorial\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgom2fs1v.jl:13 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgom2fs1v.jl:16\n\
    in expression starting at /tmp/tmpgom2fs1v.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        factorials = Vector{Int64}()\n        for\
    \ i = 1:n\n            factorials += i\n        end\n        factorials\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes two vectors as parameters\
    \ and returns a vector containing the element-wise product of the two vectors.\n\
    The element-wise product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\n\\mathbf{a} \\odot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\n\
    The dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n\
    $$\n\\mathbf{a} \\cdot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\nThe dot\
    \ product of $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\n\\mathbf{a} \\\
    cdot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\nThe dot product of $\\mathbf{a}$\
    \ and $\\mathbf{b}$ is defined as:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\mathbf{a}^\\\
    top \\mathbf{b}\n$$\nThe dot product of $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\n\
    The dot product of $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\n\\mathbf{a}\
    \ \\cdot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\nThe dot product of $\\\
    mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\n\\mathbf{a} \\cdot \\mathbf{b}\
    \ = \\mathbf{a}^\\top \\mathbf{b}\n$$\nThe dot product of $\\mathbf{a}$ and $\\\
    mathbf{b}$ is defined as:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\mathbf{a}^\\\
    top \\mathbf{b}\n$$\nThe dot product of $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\n\
    The dot product of $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\n\\mathbf{a}\
    \ \\cdot \\mathbf{b} = \\mathbf{a}^\\top \\mathbf{b}\n$$\nThe dot product of $\\\
    mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\n\\mathbf{a} \\cdot \\mathbf{b}\
    \ = \\mathbf{a}^\\top \\mathbf{b}\n$$\nThe dot product of $\\mathbf{a}$ and $\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucl0h0we.jl:21\nin expression starting at\
    \ /tmp/tmpucl0h0we.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = f(n-1)\n        factorials[end-1] = factorials[end-1]\
    \ + factorials[end]\n        factorials\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = f;\n\
    \t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6,\
    \ 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1,\
    \ 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc88uwwpm.jl:19\nin expression starting at\
    \ /tmp/tmpc88uwwpm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ return [1]\n    else\n        factorials = f(n-1)\n        factorials[1] = 1\n\
    \        for i in 2:n\n            factorials[i] = factorials[i-1]*i\n       \
    \ end\n        return factorials\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    f(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of n modulo m. \n    m is a prime number.\n    Example:\n    >>> f(5,2)\n  \
    \  [1, 2, 6, 24, 15]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf14v_xf.jl:22\nin expression starting at\
    \ /tmp/tmpyf14v_xf.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ [1]\n    else\n        factorials = f(n-1)\n        factorials = [factorials[i]\
    \ + factorials[i+1] for i in 1:length(factorials)]\n        factorials\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nf(5)\n</cell>\n<text>\nExercise 2\nImplement\
    \ the function g(n::Int64) that returns the factorial of n if n is even and the\
    \ sum of numbers from 1 to n otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1,\
    \ 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\t@test(candidate(3)\
    \ == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkga7j2lj.jl:19\nin expression starting at\
    \ /tmp/tmpkga7j2lj.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 1 \n    \
    \    [1]\n    else\n        factorials = [1]\n        for i = 2 to n\n       \
    \     factorials = factorials * (i - 1)\n        end\n        factorials\n   \
    \ end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the factorial\
    \ of a given number.\nusing Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5)\
    \ == [1, 2, 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\
    \t@test(candidate(1) == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc61dtis7.jl:15 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc61dtis7.jl:15\n\
    in expression starting at /tmp/tmpc61dtis7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n % 2 == 0\n \
    \       factorials = 1:n\n    else\n        factorials = 1:n-1\n    end\n    return\
    \ factorials\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer $n$ and returns the factorial of $n$ if $n$ is even or the sum of numbers\
    \ from 1 to $n$ otherwise.\nExample: \n$$ f(5) = 1, 2, 6, 24, 15$$\nusing Test\n\
    \n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2, 6, 24, 15])\n\
    \t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1) == [1])\n\
    \t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia572jlp.jl:18\nin expression starting at\
    \ /tmp/tmpia572jlp.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n==0\n       \
    \ Vector{Int64}()\n    else\n        Vector{Int64}((n-1)*f(n-1))\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ the factorial of $n$ if $n$ is even or the sum of numbers from 1 to $n$ otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5a_low_0.jl:17\nin expression starting at\
    \ /tmp/tmp5a_low_0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Implement the function f that takes n as a parameter,\n    and\
    \ returns a vector of size n, such that the value of the element at index i is\
    \ the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\
    \    i starts from 1.\n    the factorial of i is the multiplication of the numbers\
    \ from 1 to i (1 * 2 * ... * i).\n    Example:\n    >>> f(5)\n    [1, 2, 6, 24,\
    \ 15]\n    \"\"\"\nfunction f(n::Int64)::Vector{Int64} \n    if n == 0\n     \
    \   return [1]\n    else\n        factorials = [1]\n        for i in 1:n\n   \
    \         factorials = factorials * (i + 1)\n        end\n        return factorials\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nf(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = f;\n\t@test(candidate(5) == [1, 2,\
    \ 6, 24, 15])\n\t@test(candidate(7) == [1, 2, 6, 24, 15, 720, 28])\n\t@test(candidate(1)\
    \ == [1])\n\t@test(candidate(3) == [1, 2, 6])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpup349f8p.jl:21\nin expression starting at\
    \ /tmp/tmpup349f8p.jl:21\n"
  stdout: ''
