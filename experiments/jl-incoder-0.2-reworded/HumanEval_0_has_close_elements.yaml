name: HumanEval_0_has_close_elements
language: jl
prompt: "\"\"\" Check if in given vector of numbers, are any two numbers closer to\
  \ each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0],\
  \ 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
  \    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0,\
  \ 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95)\
  \ == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
  \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
  end\n"
completions: ["    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] > threshold\n            return true\n\
    \        end\n        i = i + 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a vector has all elements equal, given\
    \ threshold.\n    >>> has_all_elements([1.0, 2.0, 3.0], 0.5)\n    false\n    >>>\
    \ has_all_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n    \"\"\"",
  "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while i <\
    \ length(numbers_sorted)\n        if numbers_sorted[i] == numbers_sorted[i+1]\n\
    \            i += 1\n        else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n                return true\n            else\n               \
    \ i += 1\n            end\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nhas_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\
    \ \n    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers_sorted)\n        if numbers_sorted[i] == numbers_sorted[i+1]\n\
    \            i += 1\n        else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n                return true\n            else\n               \
    \ i += 1\n            end\n        end\n    end\n    \n    return false\nend",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while\
    \ i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n        \
    \    return true\n        end\n        \n        i -= 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.4>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers) - 1\n    \n    while i < j\n       \
    \ if numbers[i] == numbers[j]\n            i += 1\n            j --\n        elseif\
    \ abs(numbers[i] - numbers[j]) <= threshold\n            i += 1\n        else\n\
    \            j --\n        end\n    end\n    \n    return i == j\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if abs(n - numbers[1]) < threshold\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    for n in numbers\n        if abs(n - threshold) < threshold\n       \
    \     return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    numbers = sort(numbers)\n    \n    for n in\
    \ numbers\n        if abs(n - numbers[end-1]) < threshold\n            return\
    \ true\n        end\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a vector contains any element that is equal\
    \ to given value.\n    >>> has_element_equal_to(Vector{Float64}([1.0, 2.0, 3.0]),\
    \ 2.0)\n    true\n    >>> has_element_equal_to(Vector{Float64}([1.0, 2.0, 3.0]),\
    \ 3.0)\n    false\n    \"\"\"", "    \n    distances = Vector{Float64}(length(numbers))\n\
    \    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    return any(distances <= 0)\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - threshold) < abs(numbers_sorted[end] - threshold), numbers_sorted)\n\
    \    \n    if index_of_closest == length(numbers_sorted)\n        return false\n\
    \    else\n        return true\n    end\nend\n</cell>\n<text>\nThe function above\
    \ checks if any two numbers are closer to each other than the given threshold.\
    \ If so, it returns true. Otherwise, it returns false.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for number in numbers_sorted\n        if number - threshold < numbers_sorted[1]\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 2\n    while i <= length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        end\n        i += 1\n   \
    \ end\n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return false\n\
    \    end\n    \n    idx1 = 1\n    idx2 = length(numbers)\n    \n    while idx1\
    \ < idx2\n        if numbers[idx1] - numbers[idx2] < threshold\n            return\
    \ true\n        end\n        \n        if numbers[idx1] - numbers[idx2] > threshold\n\
    \            return false\n        end\n        \n        idx1 += 1\n        idx2\
    \ -= 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nhas_close_elements",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers.\n>>> sum_square_elements([1.0, 2.0, 3.0])\n\
    25.0\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n\
    144.8\n>>> sum_square_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\n144.8\n>>> sum_square_elements([1.0,\
    \ 2.", "    \n    numbers_sorted = sort(numbers)\n    \n    i = numbers_sorted.length\
    \ - 1\n    \n    while i >= 0\n        if numbers_sorted[i] == numbers_sorted[i\
    \ + 1]\n            return true\n        i -= 1\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if a number is evenly divisible\
    \ by another number.", "    \n    numbers_sorted = sort(numbers)\n    \n    closest_number\
    \ = numbers_sorted[1]\n    \n    for number in numbers_sorted[2:end]\n       \
    \ if abs(number - closest_number) < threshold\n            return true\n     \
    \   else\n            closest_number = number\n        end\n    end\n    \n  \
    \  return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and a threshold and returns a vector of booleans indicating\
    \ whether each number in the vector is closer to its neighbors than the threshold.",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    closest_index = findfirst(x -> abs(x - threshold)\
    \ < abs(numbers_sorted[end] - threshold), numbers_sorted)\n    \n    return closest_index\
    \ != nothing\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a vector that are less than a given threshold.", " \
    \   \n    distances = Vector{Float64}(length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ distances[1] < distances[2]\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of numbers and a threshold and returns a list of numbers that\
    \ have a distance of less than the threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] -\
    \ numbers[i-1] > threshold\n            return true\n        end\n        i +=\
    \ 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nThe function has_close_elements\
    \ checks if there are any two numbers in the vector numbers that are closer to\
    \ each other than the given threshold (0.5 in this case).", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    index_of_first_element = findfirst(numbers_sorted\
    \ .< threshold)\n    index_of_last_element = findlast(numbers_sorted .> threshold)\n\
    \    \n    if index_of_first_element == index_of_last_element\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a vector has all elements of a given set.\
    \ \nFor example, given [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven\
    \ [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\n\
    Given [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return\
    \ false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3],\
    \ return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven\
    \ [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\n\
    Given [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return\
    \ true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3],\
    \ return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven\
    \ [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\n\
    Given [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return\
    \ false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3],\
    \ return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven\
    \ [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\n\
    Given [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return\
    \ true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3],\
    \ return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven\
    \ [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3], return true.\n\
    Given [1,2,3], return false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return\
    \ false.\nGiven [1,2,3], return true.\nGiven [1,2,3], return false.\nGiven [1,2,3],\
    \ return true.\nGiven [1,2,3], return ", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = findfirst(numbers_sorted .< threshold)\n    \n    if index_of_closest == nothing\n\
    \        return false\n    else\n        return true\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a vector has all elements\
    \ of a given set. \nFor example, given vector = [1, 2, 3, 4] and set = [1, 2,\
    \ 3], the function should return true.\nGiven vector = [1, 2, 3, 4] and set =\
    \ [1, 2, 4], the function should return false.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        if numbers[i]\
    \ - numbers[i-1] > threshold\n            return true\n        end\n        \n\
    \        i = i + 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n \
    \   \n    while i < j\n        if numbers[i] == numbers[j]\n            i += 1\n\
    \            j += 1\n        elseif abs(numbers[i] - numbers[j]) < threshold\n\
    \            i += 1\n        else\n            j += 1\n        end\n    end\n\
    \    \n    return i == j\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes an array of numbers and returns the sum of the squares of the numbers.\n\
    \    >>> square_sum([1.0, 2.0, 3.0])\n    25.0\n    >>> square_sum([1.0, 2.8,\
    \ 3.0, 4.0, 5.0, 2.0])\n    25.0\n    \"\"\"", "    \n    distances = Vector{Float64}(undef,\
    \ length(numbers))\n    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i]\
    \ - threshold)\n    end\n    \n    return any(distances <= 0)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes in a list of numbers and a threshold\
    \ and returns a list of numbers that exceed the threshold.\nFor example, given\
    \ a list of numbers and a threshold of 0.2, your function should return [2.0,\
    \ 3.0].\nHint: Use a for loop and a conditional statement.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n    \n    while i\
    \ < j\n        if numbers[i] == numbers[j] \n            i += 1\n            j\
    \ += 1\n        elseif abs(numbers[i] - numbers[j]) < threshold\n            i\
    \ += 1\n        else\n            j += 1\n        end\n    end\n    \n    return\
    \ i == j\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[1:end-1]\n        if abs(numbers[n] - numbers[n-1])\
    \ < threshold\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if abs(n - numbers[1]) < threshold\n    \
    \        return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes in a list of numbers and returns the sum\
    \ of the numbers in the list. \nIf the list is empty, return 0.\nIf the list has\
    \ one number, return that number.\nIf the list has two numbers, return the sum\
    \ of the two numbers.\nIf the list has three numbers, return the sum of the first\
    \ two numbers, then add the third.\nIf the list has four numbers, return the sum\
    \ of the first three numbers, then add the third.\nIf the list has five numbers,\
    \ return the sum of the first four numbers, then add the third.\nIf the list has\
    \ six numbers, return the sum of the first five numbers, then add the third.\n\
    If the list has seven numbers, return the sum of the first six numbers, then add\
    \ the third.\nIf the list has eight numbers, return the sum of the first seven\
    \ numbers, then add the third.\nIf the list has nine numbers, return the sum of\
    \ the first eight numbers, then add the third.\nIf the list has ten numbers, return\
    \ the sum of the first nine numbers, then add the third.\nIf the list has eleven\
    \ numbers, return the sum of the first ten numbers, then add the third.\nIf the\
    \ list has twelve numbers, return the sum of the first eleven numbers, then add\
    \ the third.\nIf the list has thirteen numbers, return the sum of the first twelve\
    \ numbers, then add the third.\nIf the list has fourteen numbers, return the sum\
    \ of the first thirteen numbers, then add the third.\nIf the list has fifteen\
    \ numbers, return the sum of the first fourteen numbers, then add the third.\n\
    If the list has sixteen numbers, return the sum of the first fifteen numbers,\
    \ then add the third.\nIf the list has seventeen numbers, return the sum of the\
    \ first sixteen numbers, then add the third.\nIf the list has eighteen numbers,\
    \ return the sum of the first seventeen numbers, then add the third.\nIf the list\
    \ has nineteen numbers, return the sum of the first eighteen numbers, then add\
    \ the third.\nIf the list has twenty numbers, return the sum of the first nineteen\
    \ numbers, then add the third.\nIf the list has thirty numbers, return the sum\
    \ of the first twenty numbers, then add the third.\nIf the list has fourty numbers,\
    \ return the sum of the first thirty numbers, then add the third.\nIf the list\
    \ has fifty numbers, return the sum of the first fourty numbers, then add the\
    \ third.\nIf the list has sixty number", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n\
    \        if abs(n - numbers[1]) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers.\n\
    >>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n\
    25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>> sumsq([1,2,3])\n25\n>>>\
    \ sumsq([1,2,3])\n25\n>>> sumsq([", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    idx = 0\n    while idx < length(numbers_sorted)\n        if numbers_sorted[idx]\
    \ - numbers_sorted[idx - 1] > threshold\n            return true\n        else\n\
    \            idx += 1\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n          \
    \  return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Let's test our function with some examples:", "    \n    for n in numbers\n  \
    \      if abs(n - threshold) < threshold\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nNow let's test our function",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and a threshold and returns a vector of booleans indicating\
    \ which numbers are closer to each other than the threshold.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 1\n    \
    \    if numbers[i-1] == numbers[i-2]\n            return true\n        end\n \
    \       i = i-1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n \
    \   \n    while i < j\n        if numbers[i] == numbers[j] \n            i +=\
    \ 1\n            j += 1\n        else\n            if abs(numbers[i] - numbers[j])\
    \ < threshold\n                i += 1\n            else\n                j +=\
    \ 1\n            end\n        end\n    end\n    \n    return i == j\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    index_of_closest = find_closest_index(numbers_sorted, threshold)\n    \n\
    \    if index_of_closest == length(numbers_sorted)\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a list of numbers and a threshold and returns the number of numbers\
    \ in the list that are less than the threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] -\
    \ numbers[i-1] < threshold\n            return true\n        end\n        i +=\
    \ 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem 7\nImplement\
    \ the function is_palindrome(numbers::Vector{Float64})::Bool that checks if a\
    \ given vector of numbers is palindrome. \nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA palindrome is a word, number, or\
    \ other sequence of characters that reads the same backward as forward.\nA palindrome\
    \ is a word, number, or other sequence of characters that reads the same backward\
    \ as forward.\nA palindrome is a word, number, or other sequence of characters\
    \ that reads the same backward as forward.\nA p", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return false\n    end\n    \n    idx1\
    \ = 1\n    idx2 = length(numbers)\n    \n    while idx1 < idx2\n        if abs(numbers[idx1]\
    \ - numbers[idx2]) < threshold\n            return true\n        end\n       \
    \ \n        if numbers[idx1] > numbers[idx2]\n            idx1 += 1\n        else\n\
    \            idx2 -= 1\n        end\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if abs(n - numbers[end-1]) < threshold\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a vector has all unique elements. \nFor example\
    \ [1, 1, 2] has all unique elements and returns true.\nFor example [1, 2, 3] has\
    \ all unique elements and returns false.\nFor example [1, 2, 3, 3] has all unique\
    \ elements and returns true.\nFor example [1, 1, 2, 3] has all unique elements\
    \ and returns false.\nFor example [1, 1, 2, 2, 3] has all unique elements and\
    \ returns false.\nFor example [1, 1, 2, 2, 3, 3] has all unique elements and returns\
    \ false.\nFor example [1, 1, 2, 2, 3, 3, 3] has all unique elements and returns\
    \ false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3] has all unique elements and returns\
    \ true.\nFor example [1, 1, 2, 2, 3, 3, 3, 3, 3] has all unique elements and returns\
    \ false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3, 3, 3] has all unique elements and\
    \ returns false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3] has all unique\
    \ elements and returns false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]\
    \ has all unique elements and returns false.\nFor example [1, 1, 2, 2, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3] has all unique elements and returns false.\nFor example [1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] has all unique elements and returns\
    \ false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] has\
    \ all unique elements and returns false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] has all unique elements and returns false.\n\
    For example [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] has\
    \ all unique elements and returns false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] has all unique elements and returns\
    \ false.\nFor example [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3] has all unique elements and returns false.\nFor example\
    \ [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3] has all unique elements and returns false.\nFor example [1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3] has all unique elements and returns false.\nFor example [1,\
    \ 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3] has all unique elements and returns false.\nFor example\
    \ [1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3] has all unique elements and returns\
    \ false.\nFor example [1, 1, 2, 2, 3, 3, ", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers) - 1\n    \n    while i < j\n       \
    \ if numbers[i] + threshold < numbers[j] + threshold\n            i += 1\n   \
    \     elseif numbers[j] + threshold < numbers[i] + threshold\n            j -=\
    \ 1\n        else\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nNow let's test our function with some examples:",
  "    \n    for n in numbers\n        if abs(n - threshold) < threshold\n       \
    \     return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take in a vector of numbers and a threshold\
    \ and will return a vector of booleans indicating which numbers are closer to\
    \ each other than the given threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if abs(n - numbers[1]) < threshold\n    \
    \        return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    j = length(numbers)\n    \n    while i < j\n        if numbers[i] == numbers[j]\
    \ \n            i += 1\n            j += 1\n        else\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                i += 1\n            else\n      \
    \          j += 1\n            end\n        end\n    end\n    \n    return i ==\
    \ j\nend\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is in a given vector of numbers.\nThe function should return true if the number\
    \ is in the vector and false otherwise.\nThe function should work for any type\
    \ of vector and any type of number.", "    \n    numbers = sort(numbers)\n   \
    \ \n    for n in numbers\n        if abs(n - numbers[1]) < threshold\n       \
    \     return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a list of numbers and a threshold and\
    \ returns the number of elements in the list that are greater than or equal to\
    \ the threshold.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n\
    \    \n    while i < j\n        if numbers[i] == numbers[j] \n            i +=\
    \ 1\n            j += 1\n        else\n            if abs(numbers[i] - numbers[j])\
    \ < threshold\n                return true\n            else\n               \
    \ i += 1\n            end\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if a number is\
    \ evenly divisible by another number. \nFor example, 5 is evenly divisible by\
    \ 3, because 3 goes into 5 evenly. \nWrite a function that returns true if a number\
    \ is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5 is evenly divisible\
    \ by 3, because 3 goes into 5 evenly. \nWrite a function that returns true if\
    \ a number is evenly divisible by another number. \nFor example, 5", "    \n \
    \   numbers_sorted = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] > threshold\n    \
    \        return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a vector of numbers and a threshold\
    \ and returns the number of numbers in the vector that are less than the threshold.",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n@test has_close_elements([1.0,\
    \ 2.0, 3.0], 0.5)\n@test has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the mean of a vector\
    \ of numbers.", "    \n    numbers = sort(numbers)\n    \n    for n in numbers\n\
    \        if abs(n - numbers[1]) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes in a list of numbers and returns the sum of the numbers in the list.\
    \ \nIf the list is empty, return 0.\nIf the list has one element, return that\
    \ element.\nIf the list has two or more elements, return the sum of the two elements\
    \ in the list.\nIf the list has more than two elements, raise an error.", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n      \
    \  \n        if numbers[i] - numbers[i-1] > threshold\n            return true\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a vector has all\
    \ unique elements. \nFor example [1, 1, 2] has all unique elements.", "    \n\
    \    numbers_sorted = sort(numbers)\n    \n    index_of_first_element = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_first_element == nothing\n        return\
    \ false\n    end\n    \n    index_of_second_element = findfirst(numbers_sorted\
    \ .> threshold)\n    \n    if index_of_second_element == nothing\n        return\
    \ false\n    end\n    \n    if index_of_first_element == index_of_second_element\n\
    \        return false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)-1\
    \ do\n        if numbers[i+1] - numbers[i] < threshold then\n            return\
    \ true\n        end\n        i = i + 1\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    for n in numbers\n        if abs(n - numbers[end]) > (threshold * length(numbers))\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will return the number of elements in\
    \ a vector that are greater than a given threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] -\
    \ numbers[i-1] > threshold\n            return true\n        end\n        i =\
    \ i + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers.\n    >>> square_sum([1.0, 2.0, 3.0])\n    25.0\n    >>> square_sum([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0])\n    25.0\n    \"\"\"", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for number in numbers_sorted\n        if number - threshold < numbers_sorted[1]\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    distances = zeros(Float64, length(numbers))\n\
    \    for (i,n) in enumerate(numbers)\n        distances[i] = abs(n - threshold)\n\
    \    end\n    \n    return any(distances <= 1)\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a vector of numbers and a threshold and returns\
    \ a vector of booleans indicating which numbers are closer to each other than\
    \ the threshold.\nHint: Use has_close_elements(numbers, threshold) to solve this\
    \ problem.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i - 1] < threshold\n            return true\n\
    \        end\n        i = i + 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that takes in a list of numbers and returns the number\
    \ of elements in the list that are less than or equal to 5", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        if numbers_sorted[i] == numbers_sorted[i+1]\n            i\
    \ += 1\n        else\n            \n            if abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n                return true\n            else\n               \
    \ i += 1\n            end\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nLet's try it out on some examples:", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j += 1\n        elseif numbers[i]\
    \ - threshold < numbers[j] - threshold\n            i += 1\n        else\n   \
    \         j += 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if abs(n - numbers[end-1]) < threshold\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<text>\nNow let's\
    \ try it out on some random vectors:", "    \n    numbers = sort(numbers)\n  \
    \  \n    for n in numbers\n        if abs(n - numbers[1]) < threshold\n      \
    \      return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    The function above is called in the following cell to check whether a vector has\
    \ any two numbers closer to each other than the given threshold.", "    \n   \
    \ distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    has_close_elements\
    \ = false\n    for i in 1:length(numbers)\n        if distances[i] <= distances[i\
    \ - 1]\n            has_close_elements = true\n            break\n        end\n\
    \    end\n    \n    return has_close_elements\nend\n</cell>\n<text>\nNow let's\
    \ test our function", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = findfirst(numbers_sorted .< threshold)\n    \n    if index_of_closest == nothing\n\
    \        return false\n    else\n        return true\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a vector has all elements\
    \ of a given set. For example, given [1,2,3], return true.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 1\n    \
    \    \n        if numbers[i-1] == numbers[i-2]\n            return true\n    \
    \    end\n        \n        i -= 1\n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    \n    while i < length(numbers)\n        \n        j = i + 1\n      \
    \  \n        while j < length(numbers)\n            \n            if abs(numbers[i]\
    \ - numbers[j]) < threshold\n                return true\n            \n     \
    \       j += 1\n        end\n        \n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and a threshold and returns a vector of booleans indicating whether\
    \ each element in the vector is closer to each other than the given threshold.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] > threshold\n            \n            if numbers[i\
    \ + 1] > threshold\n                \n                return true\n          \
    \  \n            else\n                \n                return false\n      \
    \      \n            end\n            \n        else\n            \n         \
    \   if numbers[i + 1] < threshold\n                \n                return true\n\
    \            \n            else\n                \n                return false\n\
    \            \n            end\n            \n        end\n        \n        i\
    \ = i + 1\n        \n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    for n in numbers\n        if abs(n - threshold) < threshold\n       \
    \     return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i = i + 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that will return the median of a given vector\
    \ of numbers.\nThe median is the number in the middle of a sorted list of numbers.\n\
    The median is defined as the value separating the higher half of a sorted list\
    \ of numbers from the lower half.\nThe median is defined as the value that exists\
    \ between the two middle values of two sorted lists of numbers.\nThe median is\
    \ defined as the value that exists between the two middle values of two sorted\
    \ lists of numbers.\nThe median is defined as the value that exists between the\
    \ two middle values of two sorted lists of numbers.\nThe median is defined as\
    \ the value that exists between the two middle values of two sorted lists of numbers.\n\
    The median is defined as the value that exists between the two middle values of\
    \ two sorted lists of numbers.\nThe median is defined as the value that exists\
    \ between the two middle values of two sorted lists of numbers.\nThe median is\
    \ defined as the value that exists between the two middle values of two sorted\
    \ lists of numbers.\nThe median is defined as the value that exists between the\
    \ two middle values of two sorted lists of numbers.\nThe median is defined as\
    \ the value that exists between the two middle values of two sorted lists of numbers.\n\
    The median is defined as the value that exists between the two middle values of\
    \ two sorted lists of numbers.\nThe median is defined as the value that exists\
    \ between the two middle values of two sorted lists of numbers.\nThe median is\
    \ defined as the value that exists between the two middle values of two sorted\
    \ lists of numbers.\nThe median is defined as the value that exists between the\
    \ two middle values of two sorted lists of numbers.\nThe median is defined as\
    \ the value that exists between the two middle values of two sorted lists of numbers.\n\
    The median is defined as the value that exists between the two middle values of\
    \ two sorted lists of numbers.\nThe median is defined as the value that exists\
    \ between the two middle values of two sorted lists of numbers.\nThe median is\
    \ defined as the value that exists between the two middle values of two sorted\
    \ lists of numbers.\nThe median is defined as the value that exists between the\
    \ two middle values of two sorted lists of numbers.\nThe median is defined as\
    \ the value that exists between the two middle values of two sorted lists of numbers.\n\
    The median is defined as the value that exists between the two middle values of\
    \ two sorted lists of numbers.\nThe median is defined as the value that exists\
    \ between the two middle values of two sorted lists of numbers.\nThe median is\
    \ defined as the value that exists between the two middle values of two sorted\
    \ lists of numbers.\nThe median is defined as the value that exists between the\
    \ two middle values of two sorted lists of ", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if abs(n - numbers[end]) > (threshold * length(numbers))\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    distances = Vector{Float64}(undef, length(numbers))\n\
    \    for i in 1:length(numbers)\n        distances[i] = abs(numbers[i] - threshold)\n\
    \    end\n    \n    return any(distances <= distances[end])\nend\n</cell>\n<text>\n\
    The function has_close_elements checks if any two numbers are closer to each other\
    \ than the given threshold. For example, if the threshold is 0.5, then any two\
    \ numbers that are closer to each other than the threshold will be considered\
    \ as true.", "    \n    numbers_sorted = sort(numbers)\n    \n    if length(numbers_sorted)\
    \ < 2\n        return false\n    end\n    \n    threshold = sort(threshold)\n\
    \    \n    if length(threshold) < 2\n        return false\n    end\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(numbers_sorted\
    \ .< threshold)\n    \n    if index_of_closest == nothing\n        return false\n\
    \    else\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    if length(numbers) < 2\n        return\
    \ false\n    end\n    \n    idx1 = 1\n    idx2 = length(numbers)\n    \n    while\
    \ idx1 < idx2\n        if numbers[idx1] - numbers[idx2] < threshold\n        \
    \    return true\n        end\n        \n        if numbers[idx1] - numbers[idx2]\
    \ > threshold\n            return false\n        end\n        \n        idx1 +=\
    \ 1\n        idx2 -= 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n\
    \        if numbers_sorted[index] - numbers_sorted[index-1] < threshold\n    \
    \        return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a vector of numbers and a threshold and\
    \ returns a vector of booleans indicating whether each number in the vector is\
    \ greater than or equal to the threshold.", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    index_of_closest = findfirst(x -> abs(x - threshold) < abs(numbers_sorted[end]\
    \ - threshold), numbers_sorted)\n    \n    return index_of_closest != nothing\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that takes in a vector of numbers\
    \ and a threshold and returns a vector of booleans indicating whether each number\
    \ in the vector is greater than or equal to the threshold.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j += 1\n        elseif numbers[i]\
    \ - numbers[j] < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the number of\
    \ elements that are less than or equal to each other.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        i =\
    \ i - 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will return the number of elements in a vector that are less than\
    \ a given threshold.", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = findfirst(numbers_sorted .< threshold)\n    \n    if index_of_closest == nothing\n\
    \        return false\n    else\n        return index_of_closest == 1\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ in a given vector.\n    >>> is_in_vector([1.0, 2.0, 3.0], 2.0)\n    true\n \
    \   >>> is_in_vector([1.0, 2.0, 3.0], 4.0)\n    false\n    \"\"\"", "    \n  \
    \  numbers = sort(numbers)\n    \n    for n in numbers\n        if abs(n - numbers[1])\
    \ < threshold\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 2: Implement the function has_close_elements!\n\
    Implement the function has_close_elements! which modifies the given vector in-place\
    \ to return true if the given vector has any two numbers closer to each other\
    \ than the given threshold.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers\n        if abs(n\
    \ - numbers[1]) < threshold\n            return true\n        end\n    end\n \
    \   return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n    \
    \    \n        if numbers[i] - numbers[i-1] > threshold\n            return true\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nThe function above checks if any two numbers in the vector are\
    \ closer to each other than the given threshold. Let's test it on a few examples:",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - threshold) < abs(numbers_sorted[end] - threshold), numbers_sorted)\n\
    \    \n    return index_of_closest == nothing\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes in a vector of numbers and returns the mean of the\
    \ numbers. If the vector is empty return 0.0.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 2\n    while i < length(numbers)\n        if numbers[i] - numbers[i\
    \ - 1] < threshold\n            return true\n        else\n            i += 1\n\
    \        end\n    end\n    return false\nend\n</cell>\n<text>\nThe function has_close_elements\
    \ checks if there are any two numbers in the given vector that are closer to each\
    \ other than the given threshold. If so, it returns true. Otherwise, it returns\
    \ false.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n    while\
    \ i < j\n        if numbers[i] == numbers[j] \n            i += 1\n          \
    \  j += 1\n        else\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            else\n                i += 1\n     \
    \           j += 1\n            end\n        end\n    end\n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for index in 2:length(numbers_sorted)\n        if numbers_sorted[index-1]\
    \ - numbers_sorted[index] < threshold\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Let's test our function by checking if any two numbers are closer to each other\
    \ than 0.5:", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n       \
    \ if abs(numbers[1] - n) < threshold\n            return true\n        end\n \
    \   end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) -\
    \ 1\n    \n    while i < j\n        if numbers[i] + threshold < numbers[j] + threshold\n\
    \            return true\n        end\n        if numbers[j] + threshold < numbers[i]\
    \ + threshold\n            return false\n        end\n        i += 1\n       \
    \ j -= 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that checks if a vector has all elements equal, given threshold.\n\
    \    >>> has_all_elements([1.0, 2.0, 3.0], 0.5)\n    false\n    >>> has_all_elements([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n    \"\"\"", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers_sorted)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers_sorted)\n\
    \            \n            if numbers_sorted[j] - numbers_sorted[i] < threshold\n\
    \                return false\n            \n            j += 1\n        end\n\
    \        \n        i += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes in a vector of numbers and a threshold\
    \ and returns the number of numbers in the vector that are closer to each other\
    \ than the threshold.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n\
    \    while i < length(numbers)-1 do\n        if numbers[i+1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n        i = i + 1\n    end\n   \
    \ return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n      \
    \  \n        j = i + 1\n        \n        while j < length(numbers)\n        \
    \    \n            if abs(numbers[i] - numbers[j]) < threshold\n             \
    \   return true\n            \n            j += 1\n            \n        end\n\
    \        \n        i += 1\n        \n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.3>", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    for index in 1:length(numbers_sorted)\n        if numbers_sorted[index] -\
    \ numbers_sorted[index-1] > threshold\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers.\nThe function should only take in vectors of numbers and return a number.",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Now let's test our function", "    \n    numbers = sort(numbers)\n    \n    i\
    \ = 0\n    \n    while i < length(numbers)\n        \n        j = i + 1\n    \
    \    \n        while j < length(numbers)\n            \n            if numbers[j]\
    \ - numbers[i] <= threshold\n                return true\n            \n     \
    \       j += 1\n        end\n        \n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a list\
    \ of numbers and returns the sum of the numbers in the list.\n    >>> sum([1,\
    \ 2, 3, 4])\n    10\n    \"\"\"", "    \n    numbers = sort(numbers)\n    \n \
    \   for n in numbers\n        if abs(n - numbers[end-1]) < threshold\n       \
    \     return true\n        end\n    end\n    return false\nend\n</cell>\n<text>\n\
    Let's try it out!", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j\
    \ = length(numbers) - 1\n    \n    while i < j\n        if numbers[i] + threshold\
    \ < numbers[j] + threshold\n            return true\n        else\n          \
    \  i += 1\n            j = i\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes in a list of numbers and\
    \ returns the number of elements in the list that are greater than or equal to\
    \ 50. \n>>> count_greater_than_or_equal_to(numbers::Vector{Float64})\n3\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90])\n5\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100])\n0\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110])\n1\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\n2\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130])\n3\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140])\n4\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150])\n5\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160])\n6\n>>>\
    \ count_greater_than_or_equal_to([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110,\
    \ 120, 130, 140, 150, 160, 170])\n7\n>>> count_greater_than_or_equal_to([10, 20,\
    \ 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180])\n\
    8\n>>> count_greater_than_or_equal_to([10, 20, 30, 40, 50, 60, 70, 80, 90, 100,\
    \ 110, 120, 130, 140, 150, 160, 170, 180, 190])\n9\n>>> count_greater_than_or_equal_to([10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180,\
    \ 190, 200])\n10\n>>> count_greater_than_or_equal_to([10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210", " \
    \   \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n       \
    \ if abs(numbers[1] - n) < threshold\n            return true\n        end\n \
    \   end\n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of numbers and a threshold and returns a vector of booleans\
    \ indicating which numbers are closer to each other than the given threshold.",
  "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    \n    while idx < length(numbers)\n\
    \        if abs(numbers[idx] - numbers[idx+1]) < threshold\n            return\
    \ true\n        end\n        idx += 1\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ vector that are less than a given threshold.\nFor example, if the threshold\
    \ is 0.5, then the following should return 2:", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers_sorted)\n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            if abs(numbers_sorted[i]\
    \ - numbers_sorted[i+1]) < threshold\n                return true\n          \
    \  end\n        end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    distances = zeros(length(numbers))\n    for i = 1:length(numbers)\n \
    \       distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ any(distances <= 1)\nend\n</cell>\n<text>\nLet's test it on some examples:",
  "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n    \n    while i <\
    \ length(numbers_sorted)\n        if numbers_sorted[i] == numbers_sorted[i+1]\n\
    \            i += 1\n        else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n                return true\n            else\n               \
    \ i += 1\n            end\n        end\n    end\n    \n    return false\nend",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(abs(numbers_sorted\
    \ - threshold) < 1e-6)\n    \n    if index_of_closest == nothing\n        return\
    \ false\n    else\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - threshold) < abs(numbers_sorted[end] - threshold), numbers_sorted)\n\
    \    \n    if index_of_closest == length(numbers_sorted)\n        return false\n\
    \    else\n        return true\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i += 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n        if\
    \ abs(numbers[1] - n) < threshold\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a given vector that are greater than a given threshold.",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - threshold) < abs(numbers_sorted[end] - threshold), numbers_sorted)\n\
    \    \n    if index_of_closest == nothing\n        return false\n    else\n  \
    \      return true\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    numbers = sort(numbers)\n    \n    idx = 0\n    while idx < length(numbers)\n\
    \        if numbers[idx] - numbers[idx - 1] > threshold\n            return true\n\
    \        end\n        idx += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    The function has_close_elements takes in a list of numbers and a threshold and\
    \ returns a boolean indicating whether or not any two numbers in the list are\
    \ closer to each other than the given threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)-1 do\n        if numbers[i+1]\
    \ - numbers[i] < threshold then\n            return true\n        end\n      \
    \  i = i + 1\n    end\n    \n    return false\nend\n</cell>\n<text>\nThe function\
    \ has_close_elements takes two arguments: numbers and threshold. The first argument\
    \ is a vector of numbers, the second argument is a threshold value. Let's see\
    \ how it works.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n\
    \    while i < length(numbers)\n        if numbers[i] - numbers[i-1] < threshold\n\
    \            return true\n        end\n        i = i + 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nThe function has_close_elements checks if any two\
    \ numbers are closer to each other than the given threshold. For example, if the\
    \ given threshold is 0.3, then any two numbers that are closer to each other than\
    \ the threshold will be considered as true.", "    \n    numbers = sort(numbers)\n\
    \    \n    threshold = sort(threshold)\n    \n    i = length(numbers)\n    \n\
    \    while i > 0\n        \n        if numbers[i-1] == numbers[i]\n          \
    \  return true\n        end\n        \n        i -= 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nThe function has_close_elements checks if any two\
    \ numbers are closer to each other than the given threshold. In the case where\
    \ two numbers are equally close to each other, the function returns true.", " \
    \   \n    for n in numbers\n        if abs(n - threshold) < threshold\n      \
    \      return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers_sorted = sort(numbers)\n    \n    i\
    \ = 0\n    \n    while i < length(numbers_sorted)\n        \n        if numbers_sorted[i]\
    \ > threshold\n            \n            i += 1\n            \n        else\n\
    \            \n            if numbers_sorted[i+1] - numbers_sorted[i] < threshold\n\
    \                \n                return true\n            \n            else\n\
    \                \n                i += 1\n            \n            end\n   \
    \         \n        end\n        \n    end\n    \n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i =\
    \ 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i] ==\
    \ numbers[j] \n            i += 1\n            j += 1\n        elseif abs(numbers[i]\
    \ - numbers[j]) < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return j == length(numbers)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a number is in a given vector.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = length(numbers)\n    \n    while i > 1\n      \
    \  if numbers[i-1] - numbers[i] > threshold\n            return true\n       \
    \ end\n        i = i - 1\n    end\n    return false\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ numbers in the list. \nIf the list is empty, return 0.", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and a threshold and returns a new vector with only the numbers that\
    \ have a value greater than the threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if n == numbers[1]\n            return true\n\
    \        end\n    end\n    return false\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[2:end]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given vector\
    \ has all elements equal, false otherwise.\nHint: use all?", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers\n        if abs(n - numbers[end-1])\
    \ < threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted =\
    \ sort(numbers)\n    \n    index_of_closest = findfirst(numbers_sorted .< threshold)\n\
    \    \n    if index_of_closest == nothing\n        return false\n    else\n  \
    \      return true\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a vector has all elements equal, given that all elements are\
    \ unique.\n    >>> has_all_elements([1, 2, 3])\n    true\n    >>> has_all_elements([1,\
    \ 2, 3, 1])\n    false\n    >>> has_all_elements([1, 2, 3, 1])\n    false\n  \
    \  \"\"\"", "    \n    numbers = sort(numbers)\n    \n    i = 2\n    \n    while\
    \ i < length(numbers)\n        if abs(numbers[i] - numbers[i-1]) < threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a vector has\
    \ any elements equal to given value.\n    >>> has_any_element([1.0, 2.0, 3.0],\
    \ 2.0)\n    true\n    >>> has_any_element([1.0, 2.0, 3.0], 3.0)\n    false\n \
    \   \"\"\"", "    \n    numbers = sort(numbers)\n    \n    for n in numbers[2:end]\n\
    \        if abs(numbers[1] - n) < threshold\n            return true\n       \
    \ end\n    end\n    return false\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a vector has all unique elements. \nThe function should return\
    \ true if the vector has all unique elements and false otherwise.\nThe function\
    \ should work for both vectors of numbers and vectors of strings.\nThe function\
    \ should work for vectors of any length.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    numbers_sorted = sort(numbers)\n    \n\
    \    i = 0\n    \n    while i < length(numbers_sorted)\n        \n        if numbers_sorted[i]\
    \ == numbers_sorted[i+1]\n            i += 1\n        else\n            \n   \
    \         if abs(numbers_sorted[i] - numbers_sorted[i+1]) < threshold\n      \
    \          return true\n            end\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and a threshold and returns a vector of booleans indicating whether\
    \ each number is closer to each other than the given threshold.", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n    \
    \    \n        if numbers[i] > threshold\n            return false\n        end\n\
    \        \n        if numbers[i] < threshold\n            return true\n      \
    \  end\n        \n        i = i + 1\n    end\n    \n    return true\nend\n</cell>\n\
    <text>\nThe function has_close_elements takes two arguments: a vector of numbers\
    \ and a threshold. The function returns true if the vector has any two numbers\
    \ closer to each other than the given threshold. Otherwise, it returns false.",
  "    \n    distances = Vector{Float64}(undef, length(numbers))\n    for i in 1:length(numbers)\n\
    \        distances[i] = abs(numbers[i] - threshold)\n    end\n    \n    return\
    \ distances.min < distances.max\nend\n</cell>\n<text>\nExercise 3: Implement the\
    \ function has_close_elements!() which modifies the given vector of numbers in\
    \ place. \n    \n    has_close_elements!(numbers::Vector{Float64}, threshold::Float64)::Bool\n\
    \    \n    numbers[2] = 2.0\n    numbers[3] = 4.0\n    numbers[4] = 5.0\n    numbers[5]\
    \ = 2.0\n    \n    return true\nend\nTest your function using some example numbers\
    \ and thresholds.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n\
    \    while i < length(numbers)\n        if numbers[i] - numbers[i-1] < threshold\n\
    \            return false\n        end\n        i += 1\n    end\n    \n    return\
    \ true\nend\n</cell>\n<text>\nThe function above checks if any two numbers are\
    \ closer to each other than the given threshold. Let's see how it works.", " \
    \   \n    numbers_sorted = sort(numbers)\n    \n    index_of_first_element = findfirst(numbers_sorted\
    \ .< threshold)\n    index_of_last_element = findlast(numbers_sorted .> threshold)\n\
    \    \n    if index_of_first_element == index_of_last_element\n        return\
    \ true\n    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if n == numbers[1]\n            return true\n\
    \        end\n    end\n    \n    return false\nend\n</cell>\n<text>\nProblem 4\n\
    Write a function that returns the number of elements in a vector that satisfy\
    \ a given condition.", "    \n    numbers = sort(numbers)\n    \n    i = 0\n \
    \   \n    while i < length(numbers)\n        if numbers[i] - numbers[i-1] < threshold\n\
    \            return false\n        end\n        i += 1\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    if length(numbers) < 2\n        return false\n    end\n    \n    idx\
    \ = 1\n    while idx <= length(numbers)\n        if numbers[idx] - numbers[idx\
    \ - 1] > threshold\n            return true\n        end\n        idx += 1\n \
    \   end\n    return false\nend", "    \n    numbers_sorted = sort(numbers)\n \
    \   \n    closest_number = numbers_sorted[1]\n    \n    for number in numbers_sorted[2:end]\n\
    \        if abs(number - closest_number) < threshold\n            return true\n\
    \        else\n            closest_number = number\n        end\n    end\n   \
    \ return false\nend\n</cell>\n<text>\nThe function above checks if any two numbers\
    \ are closer to each other than the given threshold. Let's see how it works.",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - numbers_sorted[1]) < threshold, numbers_sorted)\n    \n    if index_of_closest\
    \ == length(numbers_sorted)\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        else\n            i += 1\n   \
    \     end\n    end\n    return false\nend\n</cell>\n<text>\nNow let's test our\
    \ function with some numbers:", "    \n    for n in numbers\n        if abs(n\
    \ - threshold) < threshold\n            return true\n        end\n    end\n  \
    \  return false\nend", "    \n    numbers = sort(numbers)\n    \n    i = 0\n \
    \   \n    while i < length(numbers)\n        \n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        \n        i = i +\
    \ 1\n    end\n    \n    return false\nend", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        j = i\
    \ + 1\n        \n        while j < length(numbers)\n            \n           \
    \ if numbers[j] - numbers[i] < threshold\n                return false\n     \
    \       \n            j += 1\n            \n        end\n        \n        i +=\
    \ 1\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n      \
    \  if numbers[i] - numbers[i-1] > threshold\n            return true\n       \
    \ end\n        i = i + 1\n    end\n    return false\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given threshold.", "    \n    numbers_sorted = sort(numbers)\n \
    \   \n    index_of_first_element = findfirst(numbers_sorted .< threshold)\n  \
    \  \n    if index_of_first_element == nothing\n        return false\n    end\n\
    \    \n    index_of_last_element = findlast(numbers_sorted .> threshold)\n   \
    \ \n    if index_of_last_element == nothing\n        return false\n    end\n \
    \   \n    if index_of_first_element > index_of_last_element\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that checks if a vector contains any element that is closer to zero\
    \ than a given threshold.\nThe function should return true if the vector contains\
    \ any element that is closer to zero than a given threshold, and false otherwise.\n\
    The function should work for any type of vector, for example a vector of numbers\
    \ or a vector of strings.\nThe function should work for vectors of any length\
    \ (including zero).\nThe function should work for vectors of any type (including\
    \ strings).", "    \n    numbers = sort(numbers)\n    \n    idx = 0\n    while\
    \ idx < length(numbers)\n        if abs(numbers[idx] - numbers[idx + 1]) < threshold\n\
    \            return true\n        else\n            idx += 1\n        end\n  \
    \  end\n    return false\nend", "    \n    numbers = sort(numbers)\n    \n   \
    \ threshold = sort(threshold)\n    \n    if length(numbers) < length(threshold)\
    \ \n        return false\n    end\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        if numbers[i] - threshold[i] < threshold[i+1]\n            return true\n\
    \        end\n        i += 1\n    end\n    \n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a vector has all elements\
    \ equal, given threshold.\n    >>> has_all_elements([1.0, 2.0, 3.0], 0.5)\n  \
    \  false\n    >>> has_all_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    true\n\
    \    \"\"\"", "    \n    numbers_sorted = sort(numbers)\n    \n    i = 0\n   \
    \ \n    while i < length(numbers_sorted)\n        if numbers_sorted[i] == numbers_sorted[i+1]\n\
    \            i += 1\n        else\n            if abs(numbers_sorted[i] - numbers_sorted[i+1])\
    \ < threshold\n                return true\n            end\n        end\n   \
    \ end\n    \n    return false\nend\n</cell>\n<text>\nExercise 2.2\nWrite a function\
    \ that takes in a vector of numbers and a threshold and returns a vector of booleans\
    \ indicating whether each number in the vector is closer to each other than the\
    \ given threshold.", "    \n    numbers = sort(numbers)\n    \n    i = 2\n   \
    \ while i < length(numbers)\n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        i += 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers\
    \ and a threshold and returns a vector of booleans indicating whether each number\
    \ in the vector is closer to its neighbors than the threshold.", "    \n    for\
    \ n in numbers\n        if abs(n - threshold) < threshold\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] - numbers[i-1] > threshold\n            return\
    \ true\n        end\n        \n        i = i + 1\n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    \n    while i < length(numbers)\n        \n        j = i\
    \ + 1\n        \n        while j < length(numbers)\n            \n           \
    \ if numbers[j] - numbers[i] < threshold\n                return false\n     \
    \       \n            j += 1\n        end\n        \n        i += 1\n    end\n\
    \    \n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ checks if a vector has all elements of a given set. \nFor example the set [1,2,3]\
    \ has all elements of the vector [1,2,3,4,5,6,7,8,9,10].\nThe set [1,2,3] has\
    \ all elements of the vector [1,2,3,4,5,6,7,8,9,10,11].\nThe set [1,2,3] has all\
    \ elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12].\nThe set [1,2,3] has all\
    \ elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13].\nThe set [1,2,3] has\
    \ all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14].\nThe set [1,2,3]\
    \ has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15].\nThe set\
    \ [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23].\n\
    The set [1,2,3] has all elements of the vector [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,",
  "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest = findfirst(x\
    \ -> abs(x - threshold) < abs(numbers_sorted[end] - threshold), numbers_sorted)\n\
    \    \n    return index_of_closest == nothing\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a vector has all elements equal to given\
    \ value.\n    >>> has_all_elements([1.0, 2.0, 3.0], 2.0)\n    true\n    >>> has_all_elements([1.0,\
    \ 2.0, 3.0], 3.0)\n    false\n    \"\"\"", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers[1:end-1]\n        if abs(numbers[1] - n) < threshold\n\
    \            return true\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 0\n    \n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i = i + 1\n    end\n\
    \    return false\nend\n</cell>\n<text>\nProblem 7\nImplement a function that\
    \ takes in a list of numbers and returns the sum of the numbers in the list.\n\
    \    >>> sum([1, 2, 3, 4])\n    10\n    \"\"\"", "    \n    numbers_sorted = sort(numbers)\n\
    \    \n    for n in numbers_sorted\n        if abs(n - numbers_sorted[1]) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    for\
    \ n in numbers\n        if abs(n - numbers[end-1]) < threshold\n            return\
    \ true\n        end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers) - 1\n\
    \    \n    while i < j\n        if numbers[i] == numbers[j] \n            i +=\
    \ 1\n            j -- \n        elseif abs(numbers[i] - numbers[j]) < threshold\n\
    \            i += 1\n        else\n            j -- \n        end\n    end\n \
    \   \n    return i == j\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ checks if a vector has all elements equal, given threshold.\n    >>> has_all_elements([1.0,\
    \ 2.0, 3.0], 0.5)\n    false\n    >>> has_all_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"", "    \n    numbers = sort(numbers)\n    \n\
    \    i = 2\n    while i <= length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers\
    \ = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n        if\
    \ numbers[i] - numbers[i - 1] > threshold\n            return true\n        end\n\
    \        i = i + 1\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] > threshold\n            return true\n \
    \       end\n        i = i + 1\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 1\n        if numbers[i-1] - numbers[i] > threshold\n   \
    \         return true\n        end\n        i = i - 1\n    end\n    return false\n\
    end\n</cell>\n<text>\nThe function has_close_elements takes two arguments: numbers\
    \ and threshold. numbers is a vector of numbers and threshold is a number that\
    \ defines a threshold for two numbers to be considered close to each other. has_close_elements\
    \ returns true if the given vector has any two numbers that are closer to each\
    \ other than the given threshold, otherwise it returns false. For example, has_close_elements([1.0,\
    \ 2.0, 3.0], 0.5) returns false because there is no number in the given vector\
    \ that is closer to 0.5 than any other number. has_close_elements([1.0, 2.8, 3.0,\
    \ 4.0, 5.0, 2.0], 0.3) returns true because there is a number in the given vector\
    \ that is closer to 0.3 than any other number.", "    \n    distances = zeros(length(numbers))\n\
    \    for n in numbers\n        distances[n] = abs(n - threshold)\n    end\n  \
    \  \n    return any(distances <= 1)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of numbers and a threshold and returns a vector\
    \ of booleans indicating which numbers are closer to each other than the threshold.",
  "    \n    numbers = sort(numbers)\n    \n    i = 2\n    while i < length(numbers)\n\
    \        if abs(numbers[i] - numbers[i-1]) < threshold\n            return true\n\
    \        end\n        i += 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3: Implement the function has_close_elements!() which modifies the given\
    \ vector in-place to return true if the given vector has any two numbers closer\
    \ to each other than the given threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    while i < length(numbers)\n        if numbers[i] - numbers[i-1]\
    \ > threshold\n            return true\n        end\n        i += 1\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.3>", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers\n        if abs(n - numbers[1])\
    \ < threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a vector\
    \ of numbers and a threshold and returns the number of numbers in the vector that\
    \ are closer to each other than the threshold.", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 0\n        if numbers[i-1] == numbers[i]\n            i -=\
    \ 1\n        else\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers = sort(numbers)\n\
    \    \n    for n in numbers\n        if abs(n - numbers[end-1]) < threshold\n\
    \            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a vector contains any element\
    \ that is closer to zero than a given threshold.", "    \n    numbers_sorted =\
    \ sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n        if numbers_sorted[index]\
    \ - numbers_sorted[index-1] < threshold\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<text>\nNow let's test our function\
    \ with some examples:", "    \n    numbers_sorted = sort(numbers)\n    \n    index_of_closest\
    \ = findfirst(x -> abs(x - threshold) < abs(numbers_sorted[end] - threshold),\
    \ numbers_sorted)\n    \n    if index_of_closest == nothing\n        return false\n\
    \    else\n        return true\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a vector of numbers and a threshold and returns a vector\
    \ of booleans indicating whether each element in the vector is greater than the\
    \ threshold.\nHint: use the has_close_elements function you created earlier.",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    while i < length(numbers)\n\
    \        if numbers[i] - numbers[i-1] < threshold\n            return true\n \
    \       end\n        i = i + 1\n    end\n    return false\nend", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers\n        if abs(n - numbers[1])\
    \ < threshold\n            return true\n        end\n    end\n    return false\n\
    end\n</cell>\n<text>\nLet's test the function by comparing it to our previous\
    \ results:", "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while\
    \ i < length(numbers)\n        \n        if numbers[i] - numbers[i-1] > threshold\n\
    \            return true\n        end\n        \n        i = i + 1\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 1\nWrite a function that\
    \ takes in a list of numbers and a threshold and returns a new list containing\
    \ only the numbers that have a difference greater than the threshold.", "    \n\
    \    numbers = sort(numbers)\n    \n    i = length(numbers)\n    \n    while i\
    \ >= 2\n        if numbers[i] - numbers[i-1] < threshold\n            return true\n\
    \        end\n        i -= 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers, ignoring any numbers that\
    \ are less than 0.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers, ignoring any numbers that are less than\
    \ 0 and that are greater than or equal to 0.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers, ignoring any numbers\
    \ that are less than 0 and that are greater than or equal to 0 and that are equal\
    \ to 0.\nWrite a function that takes a vector of numbers and returns the sum of\
    \ the squares of the numbers, ignoring any numbers that are less than 0 and that\
    \ are greater than or equal to 0 and that are equal to 0 and that are less than\
    \ 0.\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers, ignoring any numbers that are less than 0 and that are\
    \ greater than or equal to 0 and that are equal to 0 and that are less than 0\
    \ and that are greater than or equal to 0.\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers, ignoring any numbers\
    \ that are less than 0 and that are greater than or equal to 0 and that are equal\
    \ to 0 and that are less than 0 and that are greater than or equal to 0 and that\
    \ are equal to 0.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers, ignoring any numbers that are less than\
    \ 0 and that are greater than or equal to 0 and that are equal to 0 and that are\
    \ less than 0 and that are greater than or equal to 0 and that are equal to 0\
    \ and that are less than 0 and that are greater than or equal to 0.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers,\
    \ ignoring any numbers that are less than 0 and that are greater than or equal\
    \ to 0 and that are equal to 0 and that are less than 0 and that are greater than\
    \ or equal to 0 and that are equal to 0 and that are less than 0 and that are\
    \ greater than or equal to 0 and that are equal to 0.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers, ignoring\
    \ any numbers that are less than 0 and that are greater than or equal to 0 and\
    \ that are equal to 0 and that are less than 0 and that are greater than or equal\
    \ to 0 and that are equal to 0 and that are less than 0 and that are greater than\
    \ or equal to 0 and that are equal to 0 and that are less than 0 and that are\
    \ greater than or equal to 0.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers, ignoring any numbers that\
    \ are less than 0 and that are greater than or equal to 0 and that are equal to\
    \ 0 and that are less than 0 and that are greater than or equal to 0 and that\
    \ are equal to 0 and that are less than 0 and that are greater than or equal to\
    \ 0 and that are equal to 0 and that are less than 0 and that are greater than\
    \ or equal to 0.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers, ignoring any numbers that are less than\
    \ 0 and that are greater than or equal to 0 and that are ", "    \n    numbers\
    \ = sort(numbers)\n    \n    for n in numbers[2:end]\n        if abs(numbers[1]\
    \ - n) < threshold\n            return true\n        end\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nNow let's test our function with some test cases:",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        j = i + 1\n        \n        while j < length(numbers)\n  \
    \          \n            if numbers[j] - numbers[i] < threshold\n            \
    \    return false\n            \n            j += 1\n        end\n        \n \
    \       i += 1\n    end\n    \n    return true\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns true if the given vector has all elements equal,\
    \ false otherwise.\n>>> all_elements_equal([1.0, 2.0, 3.0])\ntrue\n>>> all_elements_equal([1.0,\
    \ 2.0, 3.0, 4.0])\nfalse\n>>> all_elements_equal([1.0, 2.0, 3.0, 4.0, 5.0])\n\
    true\n>>> all_elements_equal([1.0, 2.8, 3.0, 4.0, 5.0, 2.0])\nfalse\n>>> all_elements_equal([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.1, 2.2])\nfalse\n>>> all_elements_equal([1.0, 2.8, 3.0,\
    \ 4.0, 5.0, 2.1, 2.2, 2.3])\nfalse\n>>> all_elements_equal([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.1, 2.2, 2.3, 2.4])\nfalse\n>>> all_elements_equal([1.0, 2.8, 3.0, 4.0,\
    \ 5.0, 2.1, 2.2, 2.3, 2.4, 2.5])\nfalse\n>>> all_elements_equal([1.0, 2.8, 3.0,\
    \ 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6])\nfalse\n>>> all_elements_equal([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7])\nfalse\n>>> all_elements_equal([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8])\nfalse\n>>> all_elements_equal([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])\nfalse\n>>>\
    \ all_elements_equal([1.0, 2.8, 3.0, 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7,\
    \ 2.8, 2.9, 3.0])\nfalse\n>>> all_elements_equal([1.0, 2.8, 3.0, 4.0, 5.0, 2.1,\
    \ 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1])\nfalse\n>>> all_elements_equal([1.0,\
    \ 2.8, 3.0, 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1, 3.2])\n\
    false\n>>> all_elements_equal([1.0, 2.8, 3.0, 4.0, 5.0, 2.1, 2.2, 2.3, 2.4, 2.5,\
    \ 2.6, ", "    \n    numbers = sort(numbers)\n    \n    if length(numbers) < 2\n\
    \        return false\n    end\n    \n    idx1 = 1\n    idx2 = length(numbers)\n\
    \    \n    while idx1 < idx2\n        if numbers[idx1] == numbers[idx2]\n    \
    \        idx1 += 1\n            idx2 -= 1\n        elseif numbers[idx1] > numbers[idx2]\n\
    \            idx2 -= 1\n        else\n            idx1 += 1\n            idx2\
    \ -= 1\n        end\n    end\n    \n    return numbers[idx1] < threshold\nend\n\
    </cell>\n<text>\nThe function has_close_elements checks if two numbers are closer\
    \ to each other than the given threshold. Let's test it with the function has_close_elements:",
  "    \n    numbers = sort(numbers)\n    \n    i = 0\n    j = length(numbers)\n \
    \   \n    while i < j\n        if numbers[i] == numbers[j] \n            i +=\
    \ 1\n            j += 1\n        elseif numbers[i] - threshold < numbers[j] \n\
    \            i += 1\n        elseif numbers[i] - threshold > numbers[j] \n   \
    \         j += 1\n        else\n            return true\n        end\n    end\n\
    \    \n    return false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and a threshold and returns the number of numbers\
    \ in the vector that are closer to each other than the threshold.", "    \n  \
    \  numbers = sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] > threshold \n            \n            if numbers[i\
    \ + 1] > threshold \n                \n                return true\n         \
    \   \n            end\n            \n        elseif numbers[i] < threshold \n\
    \            \n            if numbers[i - 1] < threshold \n                \n\
    \                return true\n            \n            end\n            \n  \
    \      end\n        \n        i = i + 1\n        \n    end\n    \n    return false\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    numbers = sort(numbers)\n\
    \    \n    i = length(numbers)\n    \n    while i > 1\n        \n        if numbers[i-1]\
    \ - numbers[i] > threshold\n            return true\n        end\n        \n \
    \       i = i - 1\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    numbers =\
    \ sort(numbers)\n    \n    i = 0\n    \n    while i < length(numbers)\n      \
    \  \n        if numbers[i] - numbers[i-1] > threshold\n            return true\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    for n in numbers\n        if abs(n\
    \ - threshold) < threshold\n            return true\n        end\n    end\n  \
    \  return false\nend\n</cell>\n<code language=julia-1.5>", "    \n    numbers_sorted\
    \ = sort(numbers)\n    \n    for index in 1:length(numbers_sorted)\n        if\
    \ numbers_sorted[index] - numbers_sorted[index-1] > threshold\n            return\
    \ true\n        end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n    while i >\
    \ 1\n        if numbers[i-1] - numbers[i] > threshold\n            return true\n\
    \        end\n        i -= 1\n    end\n    return false\nend\n</cell>\n<text>\n\
    has_close_elements", "    \n    numbers = sort(numbers)\n    \n    i = 0\n   \
    \ \n    while i < length(numbers)\n        \n        j = i + 1\n        \n   \
    \     while j < length(numbers)\n            \n            if abs(numbers[i] -\
    \ numbers[j]) < threshold\n                return true\n            \n       \
    \     j += 1\n        end\n        \n        i += 1\n    end\n    \n    return\
    \ false\nend\n</cell>\n<text>\nProblem 4\nWrite a function that takes in a vector\
    \ of numbers and a threshold and returns the number of elements in the vector\
    \ that are greater than or equal to the threshold.", "    \n    numbers = sort(numbers)\n\
    \    \n    i = 0\n    j = length(numbers)\n    \n    while i < j\n        if numbers[i]\
    \ == numbers[j] \n            i += 1\n            j += 1\n        elseif numbers[i]\
    \ - numbers[j] < threshold\n            i += 1\n        else\n            j +=\
    \ 1\n        end\n    end\n    \n    return i == j\nend\n</cell>\n<text>\nProblem\
    \ 4\nImplement the function find_closest_element which takes as input a vector\
    \ of numbers and a threshold and returns the closest element in the vector to\
    \ the given threshold.", "    \n    numbers = sort(numbers)\n    \n    i = length(numbers)\n\
    \    \n    while i > 1\n        \n        if numbers[i-1] - numbers[i] > threshold\n\
    \            return true\n        end\n        \n        i -= 1\n    end\n   \
    \ \n    return false\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
