language: jl
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n  \
    \      if arr[i] != arr[i+1] \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsk080og9.jl:18\nin expression starting at /tmp/tmpsk080og9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return len\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnf2_uee.jl:89\nin expression starting at\
    \ /tmp/tmpgnf2_uee.jl:89\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i\
    \ >= 0 || j >= 0 || k >= 0\n        \n        if arr[i] == arr[j]\n          \
    \  smallest_change = smallest_change + 1\n            \n            if i == 0\n\
    \                k = j\n            elseif j == 0\n                k = i\n   \
    \         else\n                k = i - 1\n                j = j - 1\n       \
    \     end\n        else\n            smallest_change = smallest_change + 1\n \
    \           \n            if i == 0\n                k = j\n            elseif\
    \ j == 0\n                k = i\n            else\n                k = i - 1\n\
    \                j = j - 1\n            end\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a binary tree, find the lowest\
    \ common ancestor (LCA) of two given nodes in the tree. \nThe lowest common ancestor\
    \ is defined between two nodes p and q as the lowest node in T that has both p\
    \ and q as descendants (where we allow a node to be a descendant of itself).\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplajvy03c.jl:47\nin expression starting at\
    \ /tmp/tmplajvy03c.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr)\
    \ - 1\n        \n        if arr[i] > arr[j]\n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[i] + k\n            arr[j] = arr[j] - k\n    \
    \        arr[k] = arr[k] - k\n            \n        end\n        \n        if\
    \ arr[i] < arr[j]\n            smallest_change = smallest_change + 1\n       \
    \     arr[i] = arr[i] - k\n            arr[j] = arr[j] + k\n            arr[k]\
    \ = arr[k] + k\n        end\n        \n        if arr[i] > arr[j]\n          \
    \  smallest_change = smallest_change + 1\n            arr[i] = arr[i] - k\n  \
    \          arr[j] = arr[j] + k\n            arr[k] = arr[k] - k\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0421axx.jl:45\nin expression starting at\
    \ /tmp/tmpw0421axx.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gfambrt.jl:26\nin expression starting at\
    \ /tmp/tmp4gfambrt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if x != reverse(arr)\n            smallest_change = smallest_change -\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19z_ag9_.jl:27\nin expression starting at\
    \ /tmp/tmp19z_ag9_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr)\
    \ - 1\n        \n        if arr[i] > arr[j]\n            smallest_change = k\n\
    \            k = k - 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = k\n            k = k - 1\n        else\n            smallest_change = k\n\
    \            k = k - 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_4r7ja3.jl:34\nin expression starting at\
    \ /tmp/tmpk_4r7ja3.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 ||\
    \ j >= 0 || k >= 0; i--, j--, k++ \n        \n        if arr[i] != arr[j] \n \
    \           smallest_change = k\n            break\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyhtf_j66.jl:18\nin expression starting at /tmp/tmpyhtf_j66.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for x in arr\n        if x != largest\n            count +=\
    \ 1\n            if diff == 0\n                count += 1\n            else\n\
    \                count += diff / x\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_inebtx.jl:30\nin expression starting at\
    \ /tmp/tmp2_inebtx.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ != arr[j]\n            smallest_change = smallest_change + 1\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp76s0ob.jl:26\nin expression starting at\
    \ /tmp/tmpxp76s0ob.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n    \n  \
    \  if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid+3]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+3]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+3:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return 1 + smallest_change(arr[mid+2:end])\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+3]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return 1 + smallest_change(arr[mid+4:end])\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp74ke1ru3.jl:1\nin expression starting at /tmp/tmp74ke1ru3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change =\
    \ smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp38pdgnib.jl:16\nin expression starting at /tmp/tmp38pdgnib.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len == 0 \n        return 0\n    \n    min = len\n   \
    \ \n    for i = len - 1; i>=0; i--\n        if arr[i] != reverse(arr[i])\n   \
    \         min = i\n            break\n    end\n    \n    return min\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcrhyp4ol.jl:22\nin expression starting at /tmp/tmpcrhyp4ol.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    \n    if len == 1 \n        return\
    \ 1 \n    \n    if arr[len-1] == arr[len-2] \n        return 0 \n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicw_i7bt.jl:1\nin expression starting at /tmp/tmpicw_i7bt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-i)\n        end\n   \
    \ end\n    return smallest_change\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns true if the given string is a palindrome and false if not.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yxcep3h.jl:24\nin expression starting at\
    \ /tmp/tmp0yxcep3h.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        smallest_change = smallest_change\
    \ if arr[i] > arr[length(arr)-i] else 0\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a vector of integers\
    \ and returns the number of unique elements in the vector. \nFor example, given\
    \ [1,2,2,3], return 3.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpuvhmyzdg.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuvhmyzdg.jl:18\n\
    in expression starting at /tmp/tmpuvhmyzdg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are greater than the average\
    \ of the vector. For example, if the vector is [10, 20, 30, 40, 50, 60, 70, 80],\
    \ then the average is 55.5, so the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcgkef_dr.jl:18\nin expression starting at /tmp/tmpcgkef_dr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t7l6gq7.jl:89\nin expression starting at\
    \ /tmp/tmp2t7l6gq7.jl:89\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i]\
    \ != arr[i+1] \n            smallest_change = 1 + smallest_change \n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyfehbf9f.jl:18\nin expression starting at /tmp/tmpyfehbf9f.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    smallest_change\
    \ = Inf \n    \n    for i = len to 1 \n        \n        if arr[i] != reverse(arr[i])\
    \ \n            \n            if smallest_change > i - 1 \n                smallest_change\
    \ = i - 1 \n            \n        end \n    end \n    \n    return smallest_change\
    \ \nend \n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2, 3, 5, 4,\
    \ 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers, find the\
    \ minimum number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpkr7m8w0h.jl:23 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkr7m8w0h.jl:23\n\
    in expression starting at /tmp/tmpkr7m8w0h.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpnxi22t8s.jl:17 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnxi22t8s.jl:17\n\
    in expression starting at /tmp/tmpnxi22t8s.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, arr[i] + arr[i + 1])\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjr7vxnxr.jl:18\nin expression starting at /tmp/tmpjr7vxnxr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i]\
    \ != arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnx2nrxk6.jl:18\nin expression starting at /tmp/tmpnx2nrxk6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2iy1de11.jl:1\nin expression starting at /tmp/tmp2iy1de11.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for el in arr\n        if el == smallest || el == largest\n\
    \            count += 1\n        elseif el == diff\n            count += 1\n \
    \       elseif el == diff + 1\n            count += 1\n        elseif el == diff\
    \ - 1\n            count += 1\n        elseif el == diff + 2\n            count\
    \ += 1\n        elseif el == diff - 2\n            count += 1\n        elseif\
    \ el == diff + 3\n            count += 1\n        elseif el == diff - 3\n    \
    \        count += 1\n        elseif el == diff + 4\n            count += 1\n \
    \       elseif el == diff - 4\n            count += 1\n        elseif el == diff\
    \ + 5\n            count += 1\n        elseif el == diff - 5\n            count\
    \ += 1\n        elseif el == diff + 6\n            count += 1\n        elseif\
    \ el == diff - 6\n            count += 1\n        elseif el == diff + 7\n    \
    \        count += 1\n        elseif el == diff - 7\n            count += 1\n \
    \       elseif el == diff + 8\n            count += 1\n        elseif el == diff\
    \ - 8\n            count += 1\n        elseif el == diff + 9\n            count\
    \ += 1\n        elseif el == diff - 9\n            count += 1\n        elseif\
    \ el == diff + 10\n            count += 1\n        elseif el == diff - 10\n  \
    \          count += 1\n        elseif el == diff + 11\n            count += 1\n\
    \        elseif el == diff - 11\n            count += 1\n        elseif el ==\
    \ diff + 12\n            count += 1\n        elseif el == diff - 12\n        \
    \    count += 1\n        elseif el == diff + 13\n            count += 1\n    \
    \    elseif el == diff - 13\n            count += 1\n        elseif el == diff\
    \ + 14\n            count += 1\n        elseif el == diff - 14\n            count\
    \ += 1\n        elseif el == diff + 15\n            count += 1\n        elseif\
    \ el == diff - 15\n            count += 1\n        elseif el == diff + 16\n  \
    \          count += 1\n        elseif el == diff - 16\n            count += 1\n\
    \        elseif el == diff + 17\n            count += 1\n        elseif el ==\
    \ diff - 17\n            count += 1\n        elseif el == diff + 18\n        \
    \    count += 1\n        elseif el == diff - 18\n            count += 1\n    \
    \    elseif el == diff + 19\n            count += 1\n        elseif el == diff\
    \ - 19\n            count += 1\n        elseif el == diff + 20\n            count\
    \ += 1\n        elseif el == diff - 20\n            count += 1\n        elseif\
    \ el == diff + 21\n            count += 1\n        elseif el == diff - 21\n  \
    \          count += 1\n        else\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpuwhd2u9y.jl:106\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuwhd2u9y.jl:1\n\
    in expression starting at /tmp/tmpuwhd2u9y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9q6istj.jl:1\nin expression starting at /tmp/tmps9q6istj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 7: Find the longest palindromic substring of a given string.\nGiven a\
    \ string, find the longest palindromic substring in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5bn3qkk.jl:23\nin expression starting at\
    \ /tmp/tmpv5bn3qkk.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ vector of integers and returns the number of elements that need to be changed\
    \ to make the vector palindromic. For example, if the vector is [1, 2, 3, 5, 4,\
    \ 7, 9, 6], then your function should return 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptsv5idw3.jl:18\nin expression starting at /tmp/tmptsv5idw3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 ||\
    \ j >= 0 || k >= 0\n        \n        if i == 0\n            smallest_change =\
    \ j\n        elseif j == 0\n            smallest_change = i\n        elseif k\
    \ == 0\n            smallest_change = i\n        else\n            if arr[i] >\
    \ arr[j]\n                smallest_change = i\n            elseif arr[j] > arr[k]\n\
    \                smallest_change = j\n            else\n                smallest_change\
    \ = k\n            end\n        end\n        \n        if smallest_change == 0\n\
    \            break\n        end\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0gb7yw8.jl:43\nin expression starting at\
    \ /tmp/tmpv0gb7yw8.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ = arr[j] + 1\n            arr[j] = arr[i]\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7pzyglk.jl:26\nin expression starting at\
    \ /tmp/tmpc7pzyglk.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = len\n    \n   \
    \ for i = len to 1 \n        if arr[i] != reverse(arr[i]) \n            min =\
    \ i - 1 \n            break\n        end\n    end\n    \n    return min\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the number\
    \ of elements in the vector that are greater than the average of the vector. For\
    \ example, if the vector is [10, 20, 30, 40, 50, 60, 70, 80], then the function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvyya62cu.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvyya62cu.jl:22\n\
    in expression starting at /tmp/tmpvyya62cu.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kz4t1uc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kz4t1uc.jl:1\n\
    in expression starting at /tmp/tmp2kz4t1uc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3glthyq.jl:18\nin expression starting at /tmp/tmpg3glthyq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    smallest_change = len\n\
    \    \n    for i = len - 1; i>=0; i-- \n        if arr[i] != reverse(arr[i]) \n\
    \            smallest_change = i \n            break\n        end\n    end\n \
    \   return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3wbn6ptm.jl:22\nin expression starting at /tmp/tmp3wbn6ptm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnr45drps.jl:29\nin expression starting at\
    \ /tmp/tmpnr45drps.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[len] == arr[len-1] \n        return\
    \ 0 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid+1:end]) + 1 \n    \n    if arr[mid] == arr[mid+1] \n\
    \        return smallest_change(arr[mid-1:end]) + 1 \n    \n    if arr[mid] ==\
    \ arr[mid-1] \n        return smallest_change(arr[mid+1:end]) + 1 \n    \n   \
    \ if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end]) +\
    \ 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wp5mel5.jl:1\nin expression starting at /tmp/tmp9wp5mel5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns39bzoi.jl:30\nin expression starting at\
    \ /tmp/tmpns39bzoi.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvf72ntup.jl:18\nin expression starting at /tmp/tmpvf72ntup.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for el in arr\n        if\
    \ el == largest\n            changes += 1\n            largest = el\n        elseif\
    \ el == smallest\n            changes += 1\n            smallest = el\n      \
    \  else\n            changes += 2\n        end\n    end\n    \n    return changes\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ruypui8.jl:37\nin expression starting at\
    \ /tmp/tmp6ruypui8.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    min = Inf\
    \ \n    \n    for i = len to 1 \n        if arr[i] < arr[len-i] \n           \
    \ min = i - 1 \n            break \n        else \n            min = i \n    \
    \    end \n    end \n    \n    if min == 0 \n        return 0 \n    else \n  \
    \      return min \n    end \nend \n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a given value appears in a given vector. For example, given\
    \ [1, 1, 2, 2], return 3.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpraaicpbg.jl:23 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpraaicpbg.jl:23\n\
    in expression starting at /tmp/tmpraaicpbg.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2iy1de11.jl:1\nin expression starting at /tmp/tmp2iy1de11.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nfs7za8.jl:26\nin expression starting at\
    \ /tmp/tmp_nfs7za8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uckhmil.jl:1\nin expression starting at /tmp/tmp0uckhmil.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1l0qncs4.jl:19 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1l0qncs4.jl:19\n\
    in expression starting at /tmp/tmp1l0qncs4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1ts86vl.jl:25\nin expression starting at\
    \ /tmp/tmpg1ts86vl.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nThe second function\
    \ smallest_change is called in the function smallest_change to find the minimum\
    \ number of elements needed to make the vector palindromic. The function reverse()\
    \ reverses a vector. reverse([1, 2, 3, 4, 3, 2, 2]) returns [3, 2, 1]. reverse([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) returns [5, 4, 7, 9, 6].\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl8dwh56w.jl:18\nin expression starting at /tmp/tmpl8dwh56w.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    else\n        changes = 0\n        for el in arr\n    \
    \        if el == largest\n                el = smallest\n                changes\
    \ += 1\n            end\n        end\n        return changes\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 7: Find the longest palindromic substring in arr\nGiven a vector arr of strings,\
    \ find the longest palindromic substring in arr. Return an empty string if there\
    \ is no such substring. For example, given arr = [ \"abba\", \"aba\", \"abc\"\
    , \"abba\", \"aba\", \"abc\", \"abba\" ], the longest palindromic substring is\
    \ \"abba\".\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t\
    @test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4,\
    \ 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnj_p23r.jl:31\nin expression starting at\
    \ /tmp/tmpqnj_p23r.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    end\n    mid = len/2\n    left = arr[mid]\n\
    \    right = arr[mid+1]\n    if left == right\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    if left > right\n        return smallest_change(arr[mid+1:mid+2])\n\
    \    end\n    return smallest_change(arr[mid+1:end])\nend\nsmallest_change(arr)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns the\
    \ number of characters in that string that are not alphanumeric.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: arr not defined\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp27_8pnnw.jl:30\nin expression starting at /tmp/tmp27_8pnnw.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    if len == 1 \n        return arr[1] -\
    \ arr[0]\n    if arr[1] < arr[0] \n        return smallest_change(arr[1..end-1])\
    \ + arr[1] - arr[0]\n    else \n        return smallest_change(arr[1..end-1])\
    \ + arr[1] - arr[0]\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ true if the given string is a palindrome, false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ajnza67.jl:25\nin expression starting at\
    \ /tmp/tmp1ajnza67.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ = arr[j] + 1\n            arr[j] = arr[i]\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuohlhhj3.jl:28\nin expression starting at\
    \ /tmp/tmpuohlhhj3.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        \n    \
    \    if arr[i] > arr[j]\n            smallest_change = smallest_change + 1\n \
    \           arr[i] -= 1\n            arr[j] += 1\n        elseif arr[i] < arr[j]\n\
    \            smallest_change = smallest_change + 1\n            arr[j] -= 1\n\
    \            arr[i] += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcyet6hcu.jl:33\nin expression starting at\
    \ /tmp/tmpcyet6hcu.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n    \n  \
    \  smallest_change = len\n    \n    for i = len to 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i \n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbnfve__9.jl:24 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbnfve__9.jl:24\n\
    in expression starting at /tmp/tmpbnfve__9.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are greater than or equal\
    \ to 50. Test your function on a few examples.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4uj6bexr.jl:18\nin expression starting at /tmp/tmp4uj6bexr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    smallest_change = Int64(0)\n\
    \    \n    for i = len-1 downto 1 \n        smallest_change = min(smallest_change,\
    \ length(arr) - i)\n        if arr[i] != reverse(arr[i:])\n            smallest_change\
    \ += 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Problem 3\nGiven a vector arr of integers, find the minimum number of elements\
    \ that\nneed to be changed to make the vector palindromic. A palindromic vector\
    \ is a vector that\nis read the same backwards and forwards. In one change, you\
    \ can change one element to any other element.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv00fxmar.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv00fxmar.jl:22\n\
    in expression starting at /tmp/tmpv00fxmar.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptogvodf3.jl:18\nin expression starting at /tmp/tmptogvodf3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kz4t1uc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kz4t1uc.jl:1\n\
    in expression starting at /tmp/tmp2kz4t1uc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 ||\
    \ j >= 0 || k >= 0; i--, j--, k++\n        if arr[i] != arr[j]\n            smallest_change\
    \ = k\n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5yvb5c7e.jl:18\nin expression starting at /tmp/tmp5yvb5c7e.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for el in arr\n        if\
    \ el == largest\n            largest = el\n        elseif el == smallest\n   \
    \         smallest = el\n        else\n            changes += 1\n        end\n\
    \    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same\
    \ backwards and forward. For example, 321 is a palindrome while 321421 is a palindrome\
    \ but 12321 is not a palindrome.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe1tpa0fs.jl:35\nin expression starting at\
    \ /tmp/tmpe1tpa0fs.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i\
    \ >= 0 || j >= 0 || k >= 0; i--, j--, k++\n        if arr[i] != arr[j]\n     \
    \       smallest_change = k\n            break\n        end\n    end\n    \n \
    \   return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcl1sacas.jl:19\nin expression starting at /tmp/tmpcl1sacas.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = 1, 0\n        if arr[i] != arr[j]\n\
    \            smallest_change = j\n        end\n        j += 1\n    end\n    \n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8ycstnm.jl:19\nin expression starting at\
    \ /tmp/tmpo8ycstnm.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 4\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are less than the mean\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb70bg09y.jl:26\nin expression starting at\
    \ /tmp/tmpb70bg09y.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3glthyq.jl:18\nin expression starting at /tmp/tmpg3glthyq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns true if the given\
    \ string is a palindrome and false otherwise. For example, given \"A man, a plan,\
    \ a canal: Panama\", your function should return true.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeibmq9sq.jl:18\nin expression starting at /tmp/tmpeibmq9sq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    i = 0\n    j = len - 1\n    while\
    \ i < j\n        if arr[i] > arr[j]\n            arr[i] -= 1\n        else\n \
    \           arr[j] -= 1\n        end\n        i += 1\n        j -= 1\n    end\n\
    \    \n    return len\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5,\
    \ 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpreabj8sn.jl:33\nin expression starting at\
    \ /tmp/tmpreabj8sn.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvvwto6ha.jl:17 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvvwto6ha.jl:17\n\
    in expression starting at /tmp/tmpvvwto6ha.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    \n    if\
    \ arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t7l6gq7.jl:89\nin expression starting at\
    \ /tmp/tmp2t7l6gq7.jl:89\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpknolyb4k.jl:17 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpknolyb4k.jl:17\n\
    in expression starting at /tmp/tmpknolyb4k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    end\n    \n    smallest_change\
    \ = Int64(len) \n    \n    for i = 1:len\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i \n            break\n        end\n    end\n \
    \   \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0_z_8j3k.jl:32\nin expression starting at\
    \ /tmp/tmp0_z_8j3k.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = smallest_change + 1\n    \
    \    else \n            smallest_change = smallest_change - 1\n        end\n \
    \   end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuje6q15f.jl:18\nin expression starting at /tmp/tmpuje6q15f.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxl85kgv.jl:26\nin expression starting at\
    \ /tmp/tmphxl85kgv.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len == 0 \n        return 0 \n    \n    min = 1 \n   \
    \ \n    for i = len-1 downto 1 \n        if arr[i] > arr[i-1] \n            min\
    \ = min + 1 \n        else \n            min = min \n        end \n    end \n\
    \    return min \nend \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpmn75ztie.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmn75ztie.jl:22\n\
    in expression starting at /tmp/tmpmn75ztie.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1 downto 1 \n        if arr[i] !=\
    \ reverse(arr[i]) \n            smallest_change = i\n            break\n     \
    \   end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1qi8czzb.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1qi8czzb.jl:18\n\
    in expression starting at /tmp/tmp1qi8czzb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that need to be changed to make\
    \ the vector palindromic. For example, given [1,2,3,4,5,6,7], you should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zpi835c.jl:24\nin expression starting at\
    \ /tmp/tmp4zpi835c.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i]\
    \ != reverse(arr[i+1])\n            smallest_change = i\n            break\n \
    \       end\n    end\n    \n    return smallest_change\nend\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9nh_nykc.jl:19\nin expression starting at /tmp/tmp9nh_nykc.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp611xy6d4.jl:1\nin expression starting at /tmp/tmp611xy6d4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    \n    min = Int.(ceil.(log2(len)))\n\
    \    \n    changes = 0\n    \n    for i = 1:len\n        if arr[i] != reverse(arr[i])\n\
    \            changes += 1\n        end\n    end\n    \n    return changes\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbinhcpx.jl:31\nin expression starting at\
    \ /tmp/tmpgbinhcpx.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        if arr[i] != reverse(arr[i])\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvqa4cp_o.jl:17 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvqa4cp_o.jl:17\n\
    in expression starting at /tmp/tmpvqa4cp_o.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt1b0bbrv.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpt1b0bbrv.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt1b0bbrv.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt1b0bbrv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt1b0bbrv.jl:32\n  Expression: candidate([1, 2, 3, 4, 3, 2,\
    \ 2]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt1b0bbrv.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt1b0bbrv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt1b0bbrv.jl:35\n  Expression: candidate([1, 2, 3, 2, 1]) ==\
    \ 0\n   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt1b0bbrv.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt1b0bbrv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt1b0bbrv.jl:36\n  Expression: candidate([3, 1, 1, 3]) == 0\n\
    \   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt1b0bbrv.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt1b0bbrv.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpt1b0bbrv.jl:37\n  Expression: candidate([1]) == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the number of elements in the vector that are less than\
    \ the mean of the vector.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjjfzhg0.jl:24\nin expression starting at\
    \ /tmp/tmpsjjfzhg0.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    if len == 0 \n        return 0 \n    \n    min = Inf \n \
    \   \n    for i = len to 1 \n        if arr[i] > arr[len-i] \n            min\
    \ = i - 1 \n            break \n        else \n            min = i \n        end\
    \ \n    end \n    \n    return min \nend \n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a vector is a palindrome. For example, \n[1,2,3,4,5,6,7,8,9,10,11,12]\
    \ is a palindrome while [1,2,3,4,5,6,7,8,9,10,11,12] is not a palindrome.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9k2mudnk.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9k2mudnk.jl:22\n\
    in expression starting at /tmp/tmp9k2mudnk.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcjs8n3ps.jl:18\nin expression starting at /tmp/tmpcjs8n3ps.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6zik6_0q.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmp6zik6_0q.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError: no method\
    \ matching reverse(::Int64)\n  Closest candidates are:\n    reverse(!Matched::Tuple)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:485\n    reverse(!Matched::Pair{A,\
    \ B}) where {A, B} at /shared/centos7/julia/1.7.3/share/julia/base/pair.jl:48\n\
    \    reverse(!Matched::Union{SubString{String}, String}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6zik6_0q.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6zik6_0q.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zik6_0q.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6zik6_0q.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  MethodError: no method matching reverse(::Int64)\n\
    \  Closest candidates are:\n    reverse(!Matched::Tuple) at /shared/centos7/julia/1.7.3/share/julia/base/tuple.jl:485\n\
    \    reverse(!Matched::Pair{A, B}) where {A, B} at /shared/centos7/julia/1.7.3/share/julia/base/pair.jl:48\n\
    \    reverse(!Matched::Union{SubString{String}, String}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/substring.jl:166\n\
    \    ...\n  Stacktrace:\n   [1] smallest_change(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6zik6_0q.jl:19\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6zik6_0q.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zik6_0q.jl:31\ntest set:\
    \ Error During Test at /tmp/tmp6zik6_0q.jl:34\n  Test threw exception\n  Expression:\
    \ candid"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2far1emo.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp2far1emo.jl:31\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2far1emo.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2far1emo.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2far1emo.jl:32\n  Expression: candidate([1, 2, 3, 4, 3, 2,\
    \ 2]) == 1\n   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2far1emo.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2far1emo.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2far1emo.jl:35\n  Expression: candidate([1, 2, 3, 2, 1]) ==\
    \ 0\n   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2far1emo.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2far1emo.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2far1emo.jl:36\n  Expression: candidate([3, 1, 1, 3]) == 0\n\
    \   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2far1emo.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2far1emo.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp2far1emo.jl:37\n  Expression: candidate([1]) == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    min = Int.(arr[1])\n    max = Int.(arr[len-1])\n\
    \    \n    for i = 2:len-1\n        if arr[i] > max \n            max = arr[i]\n\
    \        elseif arr[i] < min \n            min = arr[i]\n        end\n    end\n\
    \    \n    return min - max\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nThe function smallest_change is now\
    \ implemented in the file smallest_change.jl.\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1k7vt73p.jl:32\nin expression starting at\
    \ /tmp/tmp1k7vt73p.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    change = largest - smallest\n    \n    if change\
    \ == 1\n        return 1\n    \n    if change == -1\n        return -1\n    \n\
    \    change = change / 2\n    \n    if change == 1\n        return smallest_change(arr[smallest:largest])\
    \ + 1\n    \n    if change == -1\n        return smallest_change(arr[largest:smallest])\
    \ + 1\n    \n    return smallest_change(arr[smallest:largest]) + 1\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 7\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ldrod3q.jl:39\nin expression starting at\
    \ /tmp/tmp6ldrod3q.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] -= 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] -= 1\n  \
    \      elseif arr[i] == arr[j]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhpfwy2a.jl:34\nin expression starting at\
    \ /tmp/tmpjhpfwy2a.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    smallest_change = 0\n    for i = len - 1; i >= 0; i--\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \ end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv4iezduw.jl:17\nin expression starting at /tmp/tmpv4iezduw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for el in arr\n        if el == largest\n            count\
    \ += 1\n        elseif el == smallest\n            count -= 1\n        else\n\
    \            if el > largest\n                count += diff + 1\n            elseif\
    \ el < smallest\n                count -= diff + 1\n            else\n       \
    \         count += 1\n            end\n        end\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 3\nGiven a vector arr of integers, find the minimum\
    \ number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7kc3hy4.jl:36\nin expression starting at\
    \ /tmp/tmpo7kc3hy4.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3glthyq.jl:18\nin expression starting at /tmp/tmpg3glthyq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate =\
    \ smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy9zbe4f1.jl:18\nin expression starting at /tmp/tmpy9zbe4f1.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = Int.(ceil(Int.(len/2)))\
    \ \n    \n    for i = min to len-1 \n        if arr[i] != reverse(arr[i]) \n \
    \           min = i \n            break \n        end \n    end \n    return min\
    \ \nend \n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4,\
    \ 7, 9, 6])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers, find the\
    \ minimum number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzf4s2l_1.jl:22 expected \"\
    end\", got \"len\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzf4s2l_1.jl:22\n\
    in expression starting at /tmp/tmpzf4s2l_1.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = smallest_change + 1\n    \
    \        arr[i+1] = arr[i]\n            arr[i] = arr[i+1]\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb3jp6g8f.jl:18\nin expression starting at /tmp/tmpb3jp6g8f.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n    else\n\
    \        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a vector is a palindrome. For example,\
    \ \n    smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) should return true.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrv9s1ek.jl:27\nin expression starting at\
    \ /tmp/tmprrv9s1ek.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:mid+2])\n\
    \    end\n    \n    if arr[mid] == arr[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7luddj1v.jl:1\nin expression starting at /tmp/tmp7luddj1v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = min(smallest_change, length(arr) - i)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi1cp97se.jl:18\nin expression starting at /tmp/tmpi1cp97se.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpboqau39t.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpboqau39t.jl:18\n\
    in expression starting at /tmp/tmpboqau39t.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n    else\n\
    \        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Problem 7\nA palindromic number reads the same backwards and forward. For example,\
    \ 321 is a palindromic number while 321421 is a not. Find the sum of all palindromic\
    \ numbers less than one million. The answer can't be over 2 million.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycya4hte.jl:27\nin expression starting at\
    \ /tmp/tmpycya4hte.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = arr[1]\n    \n\
    \    for i = 2:len\n        if arr[i] < min \n            min = arr[i] \n    \
    \    end\n    end\n    \n    if min == arr[len] \n        return 0 \n    end\n\
    \    \n    count = 0\n    for i = len-1:-1:1\n        if arr[i] > min \n     \
    \       arr[i] = min \n            count += 1\n        end\n    end\n    \n  \
    \  return count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_qrcvac.jl:42\nin expression starting at\
    \ /tmp/tmp1_qrcvac.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i+1\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same\
    \ backwards and forward. For example, 321, 132, 213, 321, 132, 213.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiy_9ttdu.jl:18\nin expression starting at /tmp/tmpiy_9ttdu.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dwged0x.jl:108\nin expression starting at\
    \ /tmp/tmp6dwged0x.jl:108\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i]) \n            smallest_change = i\n            break\n     \
    \   end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that takes a vector of integers and returns the number of elements\
    \ in the vector that are less than the average of the vector. For example, if\
    \ the vector is [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\
    \ 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, \nusing Test\n\n\
    @testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5,\
    \ 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfw85wk2v.jl:18\nin expression starting at /tmp/tmpfw85wk2v.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcjs8n3ps.jl:18\nin expression starting at /tmp/tmpcjs8n3ps.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 \n        smallest_change = smallest_change\
    \ + 1 if arr[i] != reverse(arr[i]) \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 7: Find the longest palindromic substring in arr\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqpbb5nbq.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqpbb5nbq.jl:18\n\
    in expression starting at /tmp/tmpqpbb5nbq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1xgfpwrp.jl:17\nin expression starting at /tmp/tmp1xgfpwrp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nQuestion 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements in the vector that need to be\
    \ changed to make the vector palindromic. A palindromic vector is a vector that\
    \ is read the same backwards and forwards. In one change, you can change one element\
    \ to any other element.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_qgbznlt.jl:18\nin expression starting at /tmp/tmp_qgbznlt.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp123ocoli.jl:17\nin expression starting at /tmp/tmp123ocoli.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3eq109s.jl:26\nin expression starting at\
    \ /tmp/tmpi3eq109s.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a vector of integers, find the\
    \ smallest number of steps to make all elements equal, where a step is one element\
    \ removed. \nFor example, given [10, 20, 30, 40, 50, 60, 70], return [1, 2, 2,\
    \ 2, 3, 3].\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t\
    @test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4,\
    \ 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jc57rcg.jl:26\nin expression starting at\
    \ /tmp/tmp_jc57rcg.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-i)\n        end\n   \
    \ end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3,\
    \ 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbga7sj9_.jl:24\nin expression starting at\
    \ /tmp/tmpbga7sj9_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4l5go6bx.jl:18\nin expression starting at /tmp/tmp4l5go6bx.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1]\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qqzsa7y.jl:16\nin expression starting at /tmp/tmp7qqzsa7y.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-i)\n        end\n   \
    \ end\n    return smallest_change\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmppow_shnu.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmppow_shnu.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppow_shnu.jl:16\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppow_shnu.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmppow_shnu.jl:28\ntest set:\
    \ Error During Test at /tmp/tmppow_shnu.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmppow_shnu.jl:16\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmppow_shnu.jl:30 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level sco"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return largest\n    \n    changes = 0\n    \n    for el in arr\n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = largest\n        end\n        \n    \
    \    if el == largest\n            el = smallest\n        end\n        \n    \
    \    if el == smallest\n            el = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8e53vhz.jl:1\nin expression starting at /tmp/tmp_8e53vhz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp61uzaeu9.jl:18\nin expression starting at /tmp/tmp61uzaeu9.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = length(arr)\
    \ - 1\n        while i >= 0 && j >= 0 && k >= 0\n            if arr[i] > arr[j]\n\
    \                arr[i] -= 1\n                smallest_change += 1\n         \
    \   elseif arr[j] > arr[k]\n                arr[j] -= 1\n                smallest_change\
    \ += 1\n            elseif arr[k] > arr[i]\n                arr[k] -= 1\n    \
    \            smallest_change += 1\n            else\n                i -= 1\n\
    \                j -= 1\n                k -= 1\n            end\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5c_t26ix.jl:39\nin expression starting at\
    \ /tmp/tmp5c_t26ix.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate =\
    \ smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4epitexw.jl:26\nin expression starting at\
    \ /tmp/tmp4epitexw.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kz4t1uc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kz4t1uc.jl:1\n\
    in expression starting at /tmp/tmp2kz4t1uc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    largest = maximum(arr)\n    smallest_change = largest\n    for el in\
    \ arr\n        if el == largest\n            smallest_change = smallest_change\
    \ + 1\n        elseif el == smallest_change\n            smallest_change = smallest_change\
    \ + 1\n        else\n            smallest_change = smallest_change + 1\n     \
    \   end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers whose elements are the sum of the\
    \ squares of the original elements in the vector. For example, if the input vector\
    \ is [4, 9, 16, 25], then the output vector should be [16, 49, 64, 81]. Make sure\
    \ your function works with vectors of different lengths.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdzbnii_.jl:29\nin expression starting at\
    \ /tmp/tmppdzbnii_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyjl4njc.jl:29\nin expression starting at\
    \ /tmp/tmpoyjl4njc.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] != arr[i+1]\
    \ \n            smallest_change = i\n            break\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qqzsa7y.jl:16\nin expression starting at /tmp/tmp7qqzsa7y.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = minimum(arr)\n    smallest_change = minimum(smallest_change, length(arr)-smallest_change)\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 7\nA palindromic number reads\
    \ the same both ways. The largest palindrome made from the product of two 2-digit\
    \ numbers is 9009 = 91 x 99.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7xvufy5.jl:19\nin expression starting at\
    \ /tmp/tmpk7xvufy5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    changes = 0\n    \n    for el in arr\n        if\
    \ el == largest\n            changes += 1\n            largest = el\n        elseif\
    \ el == smallest\n            changes += 1\n            smallest = el\n      \
    \  else\n            changes += 1\n            largest = el\n            smallest\
    \ = el\n        end\n    end\n    \n    return changes\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplj06quj9.jl:39\nin expression starting at\
    \ /tmp/tmplj06quj9.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    if arr[0] != arr[len-1] \n        return 0\
    \ \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return\
    \ smallest_change(arr[mid+1:end]) \n    \n    return smallest_change(arr[mid+1:end-1])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkto5ml3d.jl:34\nin expression starting at\
    \ /tmp/tmpkto5ml3d.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    min = Int.(floor(Int.(len/2)))\n\
    \    max = Int.(ceil(Int.(len/2)))\n    \n    if arr[min] == arr[max]\n      \
    \  return min + 1\n    \n    if arr[min] > arr[max]\n        min = Int.(floor(Int.(len/2)))\n\
    \        max = Int.(ceil(Int.(len/2)))\n    end\n    \n    mid = Int.(floor(Int.(len/2)))\n\
    \    \n    while min < max\n        if arr[mid] == arr[min]\n            min =\
    \ Int.(min + 1)\n        elseif arr[mid] > arr[min]\n            max = Int.(ceil(Int.(len/2)))\n\
    \        elseif arr[mid] < arr[min]\n            min = Int.(floor(Int.(len/2)))\n\
    \        end\n        mid = Int.(floor(Int.(len/2)))\n    end\n    \n    if arr[mid]\
    \ == arr[min]\n        return min + 1\n    else\n        return min\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxw3o79k.jl:49\nin expression starting at\
    \ /tmp/tmpmxw3o79k.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    \n    if len ==\
    \ 1 \n        return 1 \n    \n    mid = len/2\n    \n    if arr[mid] == arr[mid-1]\
    \ \n        return smallest_change(arr[mid-1:mid+1])\n    \n    if arr[mid] ==\
    \ arr[mid+1] \n        return smallest_change(arr[mid-1:mid])\n    \n    if arr[mid]\
    \ == arr[mid-1] \n        return smallest_change(arr[mid+1:mid])\n    \n    if\
    \ arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid+1:mid])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:mid-1])\n\
    \    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:mid+1])\n\
    \    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55wye8aw.jl:1\nin expression starting at /tmp/tmp55wye8aw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyvrf805.jl:1\nin expression starting at /tmp/tmpdyvrf805.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    if largest == smallest\n        return largest\n    \n    largest =\
    \ largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    if\
    \ largest == smallest\n        return largest\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    if largest ==\
    \ smallest\n        return largest\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    if largest == smallest\n \
    \       return largest\n    \n    largest = largest * 10 + largest\n    smallest\
    \ = smallest * 10 + smallest\n    \n    if largest == smallest\n        return\
    \ largest\n    \n    largest = largest * 10 + largest\n    smallest = smallest\
    \ * 10 + smallest\n    \n    if largest == smallest\n        return largest\n\
    \    \n    largest = lar\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqoyytmj8.jl:1\nin expression starting at /tmp/tmpqoyytmj8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kz4t1uc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kz4t1uc.jl:1\n\
    in expression starting at /tmp/tmp2kz4t1uc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nQuestion 3\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are odd.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqu76_p9j.jl:26\nin expression starting at\
    \ /tmp/tmpqu76_p9j.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] >\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmx07zkde.jl:18\nin expression starting at /tmp/tmpmx07zkde.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i >= 0 &&\
    \ j >= 0; i--, j--, k++\n        if arr[i] != arr[j]\n            smallest_change\
    \ = k\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprhje0f0l.jl:18\nin expression starting at /tmp/tmprhje0f0l.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 1 \n        while\
    \ i >= 0 && j >= 0 \n            if arr[i] > arr[j] \n                arr[i] -=\
    \ 1\n                smallest_change += 1\n            elseif arr[i] < arr[j]\
    \ \n                arr[j] -= 1\n                smallest_change += 1\n      \
    \      else\n                i -= 1\n                j -= 1\n            end\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps469xi77.jl:35\nin expression starting at\
    \ /tmp/tmps469xi77.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        if a < arr[end-1]\n            smallest_change\
    \ = smallest_change + 1\n        else\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpxjld3_xf.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpxjld3_xf.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 8 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjld3_xf.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjld3_xf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxjld3_xf.jl:34\n  Expression: candidate([1, 2, 3, 4, 3, 2,\
    \ 2]) == 1\n   Evaluated: 7 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjld3_xf.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjld3_xf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxjld3_xf.jl:35\n  Expression: candidate([1, 4, 2]) == 1\n\
    \   Evaluated: 3 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjld3_xf.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjld3_xf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxjld3_xf.jl:36\n  Expression: candidate([1, 4, 4, 2]) == 1\n\
    \   Evaluated: 4 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjld3_xf.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjld3_xf.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpxjld3_xf.jl:37\n  Expression: candidate([1, 2, 3, 2, 1]) ==\
    \ 0\n   Evaluated: 5 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 "
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[i-1]\
    \ then\n            smallest_change = i\n            break\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a vector of integers and returns the number of elements in the vector that are\
    \ greater than the element at index 1. For example, if the vector is [5, 3, 7,\
    \ 9, 1, 3, 6, 4] then your function should return 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp_ebgrru7.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ebgrru7.jl:18\n\
    in expression starting at /tmp/tmp_ebgrru7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    smallest = len\n    largest = len\n    \n    for i = len to 1 \n        if\
    \ arr[i] > arr[largest] \n            largest = i\n        else if arr[i] < arr[smallest]\
    \ \n            smallest = i\n        end\n    end\n    \n    if smallest == largest\
    \ \n        return 0 \n    else \n        return smallest - largest \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp8neetanr.jl:19 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8neetanr.jl:19\n\
    in expression starting at /tmp/tmp8neetanr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Inf \n    \n    for i = length(arr) - 1 downto 1 \n        if arr[i] > arr[i\
    \ + 1] \n            smallest_change = i \n            break \n        end \n\
    \    end \n    \n    return smallest_change \nend \n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nQuestion 3\nWrite a function that returns an\
    \ array of integers such that each element of the array is equal to the sum of\
    \ the first and last elements of the original array. For example, if arr = [1,\
    \ 2, 3, 4], the function should return [3, 7, 11, 15].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpb2hrtz7e.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb2hrtz7e.jl:18\n\
    in expression starting at /tmp/tmpb2hrtz7e.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for i = length(arr) - 1, j = 1, k = 1\n        while i >= k\n     \
    \       if arr[i] < arr[j]\n                arr[i] -= 1\n                smallest_change\
    \ += 1\n            else\n                arr[j] -= 1\n                smallest_change\
    \ += 1\n            end\n            j += 1\n            k += 1\n        end\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.3>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.3>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2, 3,\
    \ 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2,\
    \ 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.3>\nsmallest_change([1, 2,\
    \ 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of elements that need to be changed to make\
    \ the vector palindromic. For example, given [1, 2, 3, 5, 4, 7, 9, 6], it should\
    \ return 4.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t\
    @test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4,\
    \ 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9djztbfe.jl:31\nin expression starting at\
    \ /tmp/tmp9djztbfe.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    smallest_change = 0\n    \n    for i = len - 1; i >= 0; i--\n        if arr[i]\
    \ != reverse(arr[i])\n            smallest_change = i\n            break\n   \
    \ end\n    return smallest_change\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8l4tvcu.jl:18\nin expression starting at /tmp/tmpc8l4tvcu.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    left = 0\n\
    \    right = mid\n    \n    while left < right\n        if arr[left] > arr[right]\n\
    \            right -= 1\n        else\n            left += 1\n        end\n  \
    \  end\n    \n    if arr[left] > arr[right]\n        left -= 1\n    end\n    \n\
    \    return left - right\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie3sv4yk.jl:38\nin expression starting at\
    \ /tmp/tmpie3sv4yk.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a vector is a palindrome. For example, \npalindrome([1,\
    \ 2, 3]) should return true.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqk9xik3l.jl:18\nin expression starting at /tmp/tmpqk9xik3l.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptogvodf3.jl:18\nin expression starting at /tmp/tmptogvodf3.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for x in arr\n        if x == largest || x == smallest\n \
    \           count += 1\n        else\n            if x != largest && x != smallest\n\
    \                if x != largest - diff\n                    count += 1\n    \
    \            elseif x != smallest + diff\n                    count += 1\n   \
    \         end\n        end\n    end\n    return count\nend\nsmallest_change(arr::Vector{Int64})\
    \ = smallest_change(arr)\nsmallest_change(arr::Vector{Int64}...) = smallest_change(arr)\n\
    smallest_change(arr::Array{Int64}) = smallest_change(arr)\nsmallest_change(arr::Array{Int64}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T})\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T}...) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector{T,N}) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M}) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector{T,N,M}...) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O})\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O}...) = smallest_change(arr)\n\
    smallest_change(arr::AbstractVector{T,N,M,O,P}) = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q}) =\
    \ smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q}...) =\
    \ smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q,R}) =\
    \ smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,N,M,O,P,Q,R}...)\
    \ = smallest_change(arr)\nsmallest_change(arr::AbstractVector{T,\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_37zy1g.jl:56\nin expression starting at\
    \ /tmp/tmpj_37zy1g.jl:56\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = minimum(length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8i_x50ve.jl:24\nin expression starting at\
    \ /tmp/tmp8i_x50ve.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len == 0 \n        return 0 \n    end\n    \n  \
    \  mid = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid+1] \n        return smallest_change(arr[mid-1:end])\
    \ + 1 \n    end\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid+1:end])\
    \ + 1 \n    end\n\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjvrq7ihj.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjvrq7ihj.jl:1\n\
    in expression starting at /tmp/tmpjvrq7ihj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    mid = len/2\n    \n    if arr[mid]\
    \ == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n    else\n  \
    \      return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a string and returns the number of\
    \ characters in the string that are not letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvpdss_q.jl:27\nin expression starting at\
    \ /tmp/tmpbvpdss_q.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] >\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmx07zkde.jl:18\nin expression starting at /tmp/tmpmx07zkde.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] > arr[i+1] \n            smallest_change = i\n            break\n   \
    \     end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvf72ntup.jl:18\nin expression starting at /tmp/tmpvf72ntup.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    smallest_change = 0\n    if len == 0 \n        return smallest_change\n \
    \   \n    if arr[len-1] == arr[len-2]\n        smallest_change = len\n    else\n\
    \        smallest_change = smallest_change(arr[len-1:-1:1]) + len\n    end\n \
    \   return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ou40bll.jl:27\nin expression starting at\
    \ /tmp/tmp9ou40bll.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ = arr[i] + arr[j]\n            arr[j] = arr[i] - arr[j]\n            arr[i]\
    \ = arr[i] - arr[j]\n        end\n    end\n    \n    return smallest_change\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 3 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp5fa0q75s.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmp5fa0q75s.jl:33\n  Expression: candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fa0q75s.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fa0q75s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5fa0q75s.jl:34\n  Expression: candidate([1, 2, 3, 4, 3, 2,\
    \ 2]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fa0q75s.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fa0q75s.jl:32\ntest set: Test\
    \ Failed at /tmp/tmp5fa0q75s.jl:36\n  Expression: candidate([1, 4, 4, 2]) == 1\n\
    \   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fa0q75s.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fa0q75s.jl:32\ntest set: Error\
    \ During Test at /tmp/tmp5fa0q75s.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1]) == 0\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] smallest_change(arr::Vector{Int64})\n     @ Main /tmp/tmp5fa0q75s.jl:18\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5fa0q75s.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5fa0q75s.jl:32\ntest set: "
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return 0\n    end\n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jngnf6_.jl:1\nin expression starting at /tmp/tmp3jngnf6_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest == smallest\n\
    \        return 0\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5,\
    \ 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfzte_p7x.jl:1\nin expression starting at /tmp/tmpfzte_p7x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    \n    smallest = arr[1]\n    \n    for\
    \ i = 2 to len\n        if arr[i] < smallest \n            smallest = arr[i]\n\
    \        end\n    end\n    \n    return len - smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of times a given element appears in a given\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjwlqyhcy.jl:21 expected \"\
    end\", got \"len\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjwlqyhcy.jl:21\n\
    in expression starting at /tmp/tmpjwlqyhcy.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    largest = maximum(arr)\n    smallest_change = largest\n    for el in\
    \ arr\n        if el == largest\n            smallest_change = el\n        elseif\
    \ el == smallest_change\n            smallest_change = el\n        else\n    \
    \        smallest_change = el\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 7\nGiven a vector arr of integers, find the minimum number\
    \ of elements that\nneed to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\nis read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22va1cl1.jl:29\nin expression starting at\
    \ /tmp/tmp22va1cl1.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    \n    if len == 1 \n        return\
    \ 1 \n    \n    if arr[len-1] == arr[len-2] \n        return 0 \n    \n    mid\
    \ = len/2\n    \n    if arr[mid] == arr[mid-1] \n        return smallest_change(arr[mid-1:-1:1])\
    \ + 1 \n    \n    return smallest_change(arr[mid-1:-1:1]) + smallest_change(arr[mid+1:len])\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vc09k2_.jl:33\nin expression starting at\
    \ /tmp/tmp3vc09k2_.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2kz4t1uc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kz4t1uc.jl:1\n\
    in expression starting at /tmp/tmp2kz4t1uc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len <= 1\n        return 0\n    end\n    \n    mid = len/2\n   \
    \ \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5rvahrc.jl:105\nin expression starting at\
    \ /tmp/tmpu5rvahrc.jl:105\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i+1\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe950s67f.jl:18\nin expression starting at /tmp/tmpe950s67f.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        else\n            smallest_change = smallest_change\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 8\nA palindromic number reads the same\
    \ both ways. The largest palindrome made from the product of two 2-digit numbers\
    \ is 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4g77b1fg.jl:26\nin expression starting at\
    \ /tmp/tmp4g77b1fg.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = Int64(0)\n    \n    for i = length(arr) - 1, j = length(arr) - 1, k = 0; i\
    \ >= 0 || j >= 0 || k >= 0; i--, j--, k++\n        smallest_change = minimum(smallest_change,\
    \ arr[i] + arr[j] + arr[k])\n    end\n    \n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n\
    </cell>\n<text>\nThe function above is called a recursive function, and is often\
    \ used to solve a problem. Recursive functions can have many base cases. In this\
    \ case, the base case is when there are no elements in the array that need to\
    \ be changed. In this case, the function returns 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) ==\
    \ 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4,\
    \ 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3,\
    \ 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppv9sxao6.jl:18\nin expression starting at /tmp/tmppv9sxao6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    \n    if len == 1 \n        return\
    \ 1 \n    \n    if arr[len] == arr[len-1] \n        return smallest_change(arr[len-1:len])\
    \ + 1 \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiehaqud6.jl:1\nin expression starting at /tmp/tmpiehaqud6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = minimum(length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpnlqdmw.jl:23\nin expression starting at\
    \ /tmp/tmpxpnlqdmw.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ arr[i+1] \n            smallest_change = i\n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3glthyq.jl:18\nin expression starting at /tmp/tmpg3glthyq.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n\
    \            smallest_change = smallest_change + 1\n            arr[i] -= 1\n\
    \            arr[j] += 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] += 1\n  \
    \      else\n            smallest_change = smallest_change + 1\n        end\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_h6_qcj.jl:31\nin expression starting at\
    \ /tmp/tmp9_h6_qcj.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] < arr[length(arr)-i]\
    \ then\n            smallest_change = i\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp89mfn_yl.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89mfn_yl.jl:18\n\
    in expression starting at /tmp/tmp89mfn_yl.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != reverse(arr[i]) \n            smallest_change = i\n            break\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a vector arr of integers, find\
    \ the minimum number of elements that\nneed to be changed to make the vector palindromic.\
    \ A palindromic vector is a vector that\nis read the same backwards and forwards.\
    \ In one change, you can change one element to any other element.\nusing Test\n\
    \n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3,\
    \ 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqrdf2_24.jl:18\nin expression starting at /tmp/tmpqrdf2_24.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len == 0 \n        return 0 \n    \n    smallest_change = len\n\
    \    \n    for i = len-1 downto 1 \n        if arr[i] > arr[i-1] \n          \
    \  smallest_change = i \n            break \n    \n    return smallest_change\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpof9n_vqr.jl:22 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpof9n_vqr.jl:22\n\
    in expression starting at /tmp/tmpof9n_vqr.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid+1] == arr[mid+2]\n  \
    \      return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid]\
    \ == arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid-2]\n    \
    \    return smallest_change(arr[mid+2:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid-2]\n        return smallest_change(arr[mid+2:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+1]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid-2]\n    \
    \    return smallest_change(arr[mid+2:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+1]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+2]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid+3:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1] && arr[mid] == arr[mid+2]\n    \
    \    return smallest_change(arr[mid+3:end])\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1] && arr[mid] == arr[mid+2]\n        return smallest_change(arr[mid\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns0czjhg.jl:1\nin expression starting at /tmp/tmpns0czjhg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid-1:mid+1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1i3hq2_.jl:29\nin expression starting at\
    \ /tmp/tmpm1i3hq2_.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] -= 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] -= 1\n  \
    \      else\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] -= 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r3mp_6m.jl:36\nin expression starting at\
    \ /tmp/tmp6r3mp_6m.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, arr[i] + arr[i + 1])\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0y9p9xqx.jl:17\nin expression starting at /tmp/tmp0y9p9xqx.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = minimum(smallest_change, length(arr) - i - 1) \n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyk_m5_34.jl:17\nin expression starting at /tmp/tmpyk_m5_34.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid:end])\n\
    \    end\n    \n\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa120e1in.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa120e1in.jl:1\n\
    in expression starting at /tmp/tmpa120e1in.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i]\
    \ > arr[j]\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] += 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] += 1\n  \
    \      elseif arr[i] == arr[j]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes in a list of integers and returns\
    \ a list of all unique permutations of the integers. A permutation is a way of\
    \ rearranging elements of a list without changing the order of the elements. For\
    \ example:\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyv861mj.jl:34\nin expression starting at\
    \ /tmp/tmpoyv861mj.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nProblem 9\nA palindromic number reads the same both ways. The largest\
    \ palindrome made from the product of two 2-digit numbers is 9009 = 91 x 99.\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp4a0zzf.jl:26\nin expression starting at\
    \ /tmp/tmpzp4a0zzf.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = Int64(0)\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-i)\n        end\n   \
    \ end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegrfbw_a.jl:24\nin expression starting at\
    \ /tmp/tmpegrfbw_a.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len < 2\n        return 0\n    \n    smallest_change = Int64(0)\n    \n\
    \    for i = len - 1\n        smallest_change = minimum(smallest_change, change(arr[i],\
    \ arr[len-i]))\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<text>\n\
    Problem 3\nGiven a vector of integers, find the minimum number of elements that\n\
    need to be changed to make the vector palindromic. A palindromic vector is a vector\
    \ that\nis read the same backwards and forwards. In one change, you can change\
    \ one element to any other element.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ajc1dbr.jl:27\nin expression starting at\
    \ /tmp/tmp3ajc1dbr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = minimum(arr)\n    smallest_change = minimum(smallest_change, length(arr))\n\
    \    return smallest_change\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_6i0miag.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp_6i0miag.jl:24\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n  MethodError: objects\
    \ of type Int64 are not callable\n  Maybe you forgot to use an operator such as\
    \ *, ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp_6i0miag.jl:16\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_6i0miag.jl:24 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp_6i0miag.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp_6i0miag.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n  MethodError: objects of type Int64\
    \ are not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] minimum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:705\n \
    \  [4] minimum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:705\n   [5] smallest_change(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp_6i0miag.jl:16\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp_6i0miag.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level sco"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0 \n    end\n    \n    min = len\n    \n   \
    \ for i = len-1:-1:1\n        if arr[i] > arr[len-i] \n            min = i\n \
    \           break\n        end\n    end\n    \n    if min == len\n        return\
    \ 0 \n    end\n    \n    min = len\n    \n    for i = len-1:-1:1\n        if arr[i]\
    \ < arr[len-i] \n            min = i\n            break\n        end\n    end\n\
    \    \n    if min == len\n        return 0 \n    end\n    \n    return min\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vmiyaou.jl:48\nin expression starting at\
    \ /tmp/tmp3vmiyaou.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        if arr[i] !=\
    \ reverse(arr[i+1])\n            smallest_change = i\n            break\n    \
    \    end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1xgfpwrp.jl:17\nin expression starting at /tmp/tmp1xgfpwrp.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8js0byzd.jl:24\nin expression starting at\
    \ /tmp/tmp8js0byzd.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    \n    if len < 2\n        return 0\n    end\n    \n    mid = len/2\n    \n\
    \    if arr[mid] == arr[mid-1]\n        return 1 + smallest_change(arr[mid+1:end])\n\
    \    else\n        return smallest_change(arr[mid+1:end])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n\
    <text>\nThe longest increasing subsequence\nGiven a vector arr of integers, find\
    \ the longest increasing subsequence. An increasing subsequence is a subsequence\
    \ of arr that is ordered in ascending order. An increasing subsequence is also\
    \ called a longest increasing subsequence.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacpy5324.jl:29\nin expression starting at\
    \ /tmp/tmpacpy5324.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n            break\n        end\n    end\n  \
    \  \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyy7i0vri.jl:27\nin expression starting at\
    \ /tmp/tmpyy7i0vri.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if x == reverse(arr)[1]\n            return smallest_change\n       \
    \ end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the\
    \ number of times a given element appears in a given vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7,\
    \ 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2,\
    \ 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
    \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0i91hl22.jl:26\nin expression starting at\
    \ /tmp/tmp0i91hl22.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    smallest_change = 0\n    \n    for i = len-1 downto 1 \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<text>\n\
    Problem 7: smallest_change\nWrite a function that takes in a vector of integers\
    \ and returns the minimum number of elements that\nneed to be changed to make\
    \ the vector palindromic. A palindromic vector is a vector that is\nread the same\
    \ backwards and forwards. In one change, you can change one element to any other\
    \ element.\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvfhg2wb0.jl:18 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvfhg2wb0.jl:18\n\
    in expression starting at /tmp/tmpvfhg2wb0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnxk6fjbr.jl:18\nin expression starting at /tmp/tmpnxk6fjbr.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    if len == 0 \n        return 0\n    end\n    \n    if arr[len-1] == arr[len-2]\n\
    \        return len\n    end\n    \n    mid = len/2\n    \n    if arr[mid] ==\
    \ arr[mid-1]\n        return len\n    end\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid-1]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid+1]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid+2]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid-2]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid-1]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+1]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid-2]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid-1]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid+1]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid-2]\n        return len\n    end\n    \n    if arr[mid] == arr[mid-1]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid+1]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid-2]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid-1]\n        return len\n    end\n    \n    if arr[mid] == arr[mid+1]\n\
    \        return len\n    end\n    \n    if arr[mid] == arr[mid+2]\n        return\
    \ len\n    end\n    \n    if arr[mid] == arr[mid+2]\n        return len\n    end\n\
    \    \n    if arr[mid] == arr[mid-2]\n        return len\n    end\n    \n    if\
    \ arr[mid] == arr[mid-1]\n        return len\n    end\n    \n    if arr[mid] ==\
    \ arr[mid+1]\n        return len\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppinpq5ji.jl:1\nin expression starting at /tmp/tmppinpq5ji.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    smallest_change\
    \ = 0\n    for i = length(arr) - 1, j = length(arr) - 2\n        if arr[i] > arr[j]\n\
    \            smallest_change = smallest_change + 1\n            arr[i] -= 1\n\
    \            arr[j] -= 1\n        elseif arr[i] < arr[j]\n            smallest_change\
    \ = smallest_change + 1\n            arr[j] -= 1\n            arr[i] -= 1\n  \
    \      else\n            smallest_change = smallest_change + 1\n            arr[i]\
    \ -= 1\n            arr[j] -= 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of palindromic\
    \ permutations of a given string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1,\
    \ 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xrpnd07.jl:33\nin expression starting at\
    \ /tmp/tmp5xrpnd07.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change\
    \ = smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 5, 4, 7, 9,\
    \ 6])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of\
    \ integers and returns the number of elements in the vector that are greater than\
    \ or equal to 50. For example:\nusing Test\n\n@testset begin\n\ncandidate = smallest_change;\n\
    \t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3,\
    \ 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1,\
    \ 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3,\
    \ 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) ==\
    \ 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9jneehav.jl:18\nin expression starting at /tmp/tmp9jneehav.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    len\
    \ = length(arr)\n    \n    if len < 2\n        return len\n    end\n    \n   \
    \ mid = len/2\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(arr[mid+1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid+1]\n        return smallest_change(arr[mid-1:end])\n\
    \    end\n    \n    if arr[mid] == arr[mid-1]\n        return smallest_change(\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xn1x7ll.jl:108\nin expression starting at\
    \ /tmp/tmp7xn1x7ll.jl:108\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if\
    \ arr[i] != arr[i+1] \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
    \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\
    \t@test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t\
    @test(candidate([1, 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\
    \t@test(candidate([1]) == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0w776v8.jl:18\nin expression starting at /tmp/tmpf0w776v8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers, find the minimum number of\
    \ elements that\n    need to be changed to make the vector palindromic. A palindromic\
    \ vector is a vector that\n    is read the same backwards and forwards. In one\
    \ change, you can change one element to any other element.\n\n    For example:\n\
    \    >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n    4\n    >>> smallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n    1\n    >>> smallest_change([1, 2, 3, 2, 1])\n    0\n\
    \    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64 \n    len = length(arr)\n\
    \    i = 0\n    while i < len\n        if arr[i] != reverse(arr[i])\n        \
    \    i += 1\n        else\n            i += 1\n        end\n    end\n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = smallest_change;\n\t@test(candidate([1, 2, 3, 5, 4, 7, 9, 6]) == 4)\n\
    \t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t@test(candidate([1, 4, 2]) ==\
    \ 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1, 2, 3, 2, 1])\
    \ == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1]) == 0)\n\
    \t@test(candidate([0, 1]) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27ygb8d0.jl:26\nin expression starting at\
    \ /tmp/tmp27ygb8d0.jl:26\n"
  stdout: ''
