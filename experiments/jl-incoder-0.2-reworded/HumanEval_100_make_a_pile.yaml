name: HumanEval_100_make_a_pile
language: jl
prompt: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    The first level has n stones.\n    The number of stones in the\
  \ next level is:\n        - the next odd number if n is odd.\n        - the next\
  \ even number if n is even.\n    Return the number of stones in each level in a\
  \ vector, where element at index\n    i represents the number of stones in the level\
  \ (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction\
  \ make_a_pile(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
  \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
  \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
  \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
completions: ["    if n % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2)\
    \ + make_a_pile(n/2+1) + make_a_pile(n/2+2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd+odd\n        return odd\nend\n</cell>\n\
    <code language=julia-1.3>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n  \
    \  else\n        make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n / 2)\
    \ + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        ",
  "    if n==1 \n        return [1]\n    else if n==2 \n        return [1, 1]\n  \
    \  else \n        odd = make_a_pile(n-1)\n        even = make_a_pile(n-2)\n  \
    \      odd[1] = odd[1] + even[1]\n        odd[2] = odd[2] + even[2]\n        return\
    \ odd\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile of n levels. \nFor example, given\
    \ n = 4, there are four ways to arrange the 4 stones in a pile of 4 levels:",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2))+[n\
    \ % 2]\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ an integer n and returns the number of ways to arrange n stones in a pile.",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n\
    \    \n    if n % 2 == 0 \n        push!(pile, n / 2)\n    else\n        push!(pile,\
    \ n / 2 + 1)\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function called count_stones\
    \ that takes as input a vector of integers and returns the number of stones in\
    \ the pile.", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n  \
    \  \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\n        push!(pile,n+1)\n\
    \    else\n        push!(pile,n-1)\n    end\n    \n    return pile\nend", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n / 2) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n\
    <text>\nExercise 2\nWrite a function make_a_pile(n::Int64)::Vector{Int64} that\
    \ returns the number of stones in each level in a vector, where element at index\
    \ i represents the number of stones in the level (i+1).", "    if n == 0 \n  \
    \      Vector{Int64}()\n    elseif n % 2 == 0 \n        make_a_pile(n / 2)\n \
    \   else\n        make_a_pile(n / 2) + make_a_pile((n / 2) * (n / 2))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2)\
    \ |> push!(make_a_pile(n % 2)) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n / 2)\n    pile[end] = n % 2 == 0 ? n : n + 1\n\
    \    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\n    else\n\
    \        make_a_pile(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd = n%2\n        even = n/2\n       \
    \ pile = make_a_pile(even) + make_a_pile(odd)\n        return pile\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}() \n \
    \   else \n        pile = make_a_pile(n-1)\n        if mod(n,2)==1 \n        \
    \    push!(pile,n+1)\n        else \n            push!(pile,n-1)\n        end\n\
    \        return pile\n    end\nend\n</cell>\n<code language=julia-1.4>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a positive integer n and\
    \ returns the number of ways to make a pile of n levels of stones.", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n  \
    \      push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the number\
    \ of ways to arrange n stones in a pile.", "    if n % 2 == 0 \n        odds =\
    \ n\n        evens = n - odds\n    else \n        odds = n - 1\n        evens\
    \ = n + 1\n    \n    pile = Vector{Int64}(undef, evens)\n    pile[1] = odds\n\
    \    \n    for i = 2:evens\n        pile[i] = pile[i-1] + pile[i-2]\n    end\n\
    \    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make a pile of n levels of stones.", "   \
    \ if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n  \
    \      push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a positive integer n and returns the number of ways to arrange\
    \ the n stones in a pile of n levels. \nFor example, for n = 4, there are 4 ways\
    \ to arrange the 4 stones in a pile:", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        \n        if odd \n            odd=make_a_pile(odd)\n\
    \        else\n            odd=make_a_pile(odd)\n        end\n        \n     \
    \   if even \n            even=make_a_pile(even)\n        else\n            even=make_a_pile(even)\n\
    \        end\n        \n        \n        return odd+even\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange n stones in a pile.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        return odd+even\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to form a pile of\
    \ n stones.", "    if n==1 \n        return [1]\n    else \n        odds = make_a_pile(n-1)\n\
    \        evens = make_a_pile(n-2)\n        return odds + evens\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ make a pile of n levels of stones.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n / 2) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2))+[n % 2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(4) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(5) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(6)\
    \ == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(7) == [3,\
    \ 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(8) == [3, 5]\n\
    </cell>\n<code language=julia-1.0>\n@assert make_a_pile(9) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.0>\n@assert make_a_pile(10) == [3, 5]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(11) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(12) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(13)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(14) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(15) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(16) == [3, 5]\n\
    </cell>\n<code language=julia-1.0>\n@assert make_a_pile(17) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.0>\n@assert make_a_pile(18) == [3, 5]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(19) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(20) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(21)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(22) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(23) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(24", "    if n ==\
    \ 1 \n        return [1]\n    \n    pile = make_a_pile(n / 2)\n    pile = pile\
    \ + [n mod 2 ? 2 : 1]\n    \n    return pile\nend", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0\
    \ ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make n piles of stones.", "    if n==1 \n\
    \        return [1]\n    else \n        odd = make_a_pile(n-1)\n        even =\
    \ make_a_pile(n-2)\n        odd[end] = odd[end] + even[end]\n        return odd\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(5)\n</cell>\n<code\
    \ language=julia-1.0>", "    if n == 1 \n        return [1]\n    else \n     \
    \   odd = n % 2\n        even = n / 2\n        pile = make_a_pile(even) + make_a_pile(odd)\n\
    \        return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make n piles of stones.", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(n / 2) ++ [n % 2 ==\
    \ 0 ? n : 2 * n]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ stones in a pile of n stones.", "    if n==0 \n        Vector{Int64}() \n  \
    \  else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 == 0 ?\
    \ n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of levels of stones needed to make\
    \ a pile of n stones.", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2), n//2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes as input a positive integer n and returns the number of ways to arrange\
    \ the n stones in a pile of n levels. \nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    \nExamples:\n    >>> make_a_pile(3)\n\
    \    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 8, 12, 16]\n    >>> make_a_pile(5)\n\
    \    [5, 10, 15, 20, 25]\n    >>> make_a_pile(6)\n    [6, 12, 18, 24, 30]\n  \
    \  >>> make_a_pile(7)\n    [7, 14, 21, 28, 35, 42]\n    >>> make_a_pile(8)\n \
    \   [8, 16, 24, 32, 40, 48]\n    >>> make_a_pile(9)\n    [9, 18, 27, 36, 45, 52,\
    \ 60]\n    >>> make_a_pile(10)\n    [10, 20, 30, 40, 50, 60, 70]\n    >>> make_a_pile(11)\n\
    \    [11, 22, 33, 44, 55, 66, 76, 81]\n    >>> make_a_pile(12)\n    [12, 24, 36,\
    \ 48, 60, 72, 84, 90]\n    >>> make_a_pile(13)\n    [13, 26, 39, 52, 65, 78, 92,\
    \ 105]\n    >>> make_a_pile(14)\n    [14, 28, 42, 56, 70, 84, 101, 118, 135]\n\
    \    >>> make_a_pile(15)\n    [15, 30, 45, 60, 75, 90, 115, 130, 150]\n    >>>\
    \ make_a_pile(16)\n    [16, 32, 48, 64, 80, 96, 112, 128, 144, 160]\n    >>> make_a_pile(17)\n\
    \    [17, 34, 51, 67, 85, 103, 121, 143, 161, 178]\n    >>> make_a_pile(18)\n\
    \    [18, 36, 54, 70, 92, 108, 126, 150, 176, 193]\n    >>> make_a_pile(19)\n\
    \    [19, 38, 57, 74, 100, 116, 134, 152, 180, 207, 225]\n    >>> make_a_pile(20)\n\
    \    [20, 40, 60, 78, 104, 122, 140, 158, 186, 213, 240]\n    >>> make_a_pile(21)\n\
    \    [21, 42, 64, 82, 106, 127, 148, 164, 192, 235, 252]\n    >>> make_a_pile(22)",
  "    if n == 0 \n        Vector{Int64}()\n    elseif n % 2 == 1\n        make_a_pile(n\
    \ / 2)\n    else\n        make_a_pile(n / 2) + make_a_pile(n / 2)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange n stones.", "    if n==0 \n      \
    \  return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_or_even = if n%2==0 \n                        :+\n   \
    \                     :+\n                    else \n                        :+\n\
    \                        :+\n                    end\n        pile = make_a_pile(n-1)\n\
    \        push!(pile, odd_or_even)\n        return pile\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? 1 : 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to make a\
    \ pile of n levels of stones.", "    if n == 1 \n        return [1]\n    \n  \
    \  pile = make_a_pile(n / 2)\n    pile = [i + 1 for i in pile]\n    pile = [i\
    \ + 1 for i in pile]\n    \n    if n % 2 == 1 \n        pile = [i + 1 for i in\
    \ pile]\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile of\
    \ n levels. \nFor example, if the input is 3, the output should be [1, 1, 2, 2,\
    \ 3, 3]. \nThe function should return an array of length n. \nThe function should\
    \ return nothing if the input is 0 or less.", "    if n==0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\n        push!(pile,n+1)\n\
    \    else\n        push!(pile,n-1)\n    end\n    \n    return pile\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        return odd+even\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n==1 \n        return [1]\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        return odd\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time make_a_pile(100000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to write n stones in a pile.", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n%2==0 \n        Vector{Int64}(make_a_pile(n-1)[end-1]+2)\n\
    \    else\n        Vector{Int64}(make_a_pile(n-1)[end-1]+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n  \
    \  else \n        make_a_pile(n/2) + [(n+1)/2]\nend", "    if n == 0 \n      \
    \  Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile.", "    if n==1 \n    \
    \    return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n % 2 == 1 \n        make_a_pile(n-1)\n    else\n        make_a_pile(n-1)+[(n+1)%2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n    \n\
    \    pile = make_a_pile(n / 2)\n    pile[end] = n % 2 == 0 ? 1 : 2\n    return\
    \ pile\nend", "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange n items in an array. For example, given n = 4, the function\
    \ should return [1, 1, 2, 2, 3, 3].", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0\n        return make_a_pile(n / 2) + [n / 2]\n    else\n\
    \        return make_a_pile(n / 2) + [n / 2]\nend", "    if n % 2 == 0 \n    \
    \    odds = n\n        evens = n - odds\n    else \n        odds = n - 1\n   \
    \     evens = n\n    return Vector{Int64}(odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile.", " \
    \   if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n div 2)\
    \ + [n mod 2]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to make n piles.",
  "    if n == 1 \n        return [1]\n    else \n        odd = n % 2\n        even\
    \ = n / 2\n        \n        if odd \n            odd_pile = make_a_pile(odd)\n\
    \            even_pile = make_a_pile(even)\n            \n            odd_pile\
    \ = odd_pile + even_pile\n            \n            return odd_pile\n        else\
    \ \n            even_pile = make_a_pile(even)\n            \n            even_pile\
    \ = even_pile + odd_pile\n            \n            return even_pile\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to make n piles of stones.", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(10)\n</cell>\n<text>\n\
    Exercise: Write a function that takes an integer n and returns the number of levels\
    \ in the pile.", "    if n == 0 \n        return Vector{Int64}()\n    \n    pile\
    \ = make_a_pile(n - 1)\n    \n    if n % 2 == 1\n        push!(pile, n / 2)\n\
    \    else\n        push!(pile, n / 2 + 1)\n    end\n    \n    return pile\nend\n\
    </cell>\n<code language=julia-1.3>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\n\
    Write a function that takes a positive integer n and returns the number of ways\
    \ to make n piles of n levels of stones.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n    end\nend", "    if n == 0 \n \
    \       Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a positive integer n and returns the number of ways\
    \ to arrange the n stones in a pile.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n / 2)\n    pile = pile + [n mod 2]\n    \n    return\
    \ pile\nend", "    if n==0 \n        return Vector{Int64}()\n    else if n==1\
    \ \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        return odd+even\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n    \n\
    \    pile = make_a_pile(n-1)\n    \n    if n % 2 == 1\n        push!(pile, n /\
    \ 2)\n    else\n        push!(pile, n / 2 + 1)\n    end\n    \n    return pile\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2)).*(ceil(n/2))+make_a_pile(n-ceil(n\
    \ / 2))\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of ways to make n piles.", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function called make_a_pile_from_file that\
    \ reads a file containing n lines of integers separated by spaces and returns\
    \ a vector of n elements.", "    if n==0 \n        return Vector{Int64}()\n  \
    \  \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1 \n        push!(pile,n+1)\n\
    \    else \n        push!(pile,n-1)\n    end\n    \n    return pile\nend", " \
    \   if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2))\n\
    \        push!(make_a_pile(n%2),n)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer n and returns the number of ways to arrange\
    \ the stones in a pile of n stones.", "    if n % 2 == 0 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = n\n        evens[end]\
    \ = n\n        return odds + evens\n    else\n        odds = make_a_pile(n / 2)\n\
    \        evens = make_a_pile(n / 2)\n        odds[end] = n\n        evens[end]\
    \ = n\n        return odds\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 1 \n        return [1]\n    \n    pile = make_a_pile(n / 2)\n    pile[1]\
    \ = pile[1] + n % 2 == 0 ? 1 : 0\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ n and returns the number of ways to make n piles of stones.", "    if n==1 \n\
    \        return [1]\n    \n    evens = make_a_pile(n/2)\n    odds = make_a_pile(n-evens)\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odds = odds[2:end]\n\
    \    \n    evens = evens[2:end]\n    odds = odds[2:end]\n    \n    evens = evens[2:end]\n\
    \    odds = odds[2:end]\n    \n    evens = evens[2:end]\n    odd", "    if n %\
    \ 2 == 1 \n        make_a_pile(n / 2)\n    else \n        make_a_pile(n / 2) +\
    \ make_a_pile((n / 2) + 1)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange n\
    \ stones.", "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n\
    \        push!(make_a_pile(n-1),n%2==0?1:0)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to make n piles.", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n : n + 1]\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time make_a_pile(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes as input a positive integer n and returns\
    \ the number of ways to arrange n stones in a pile of n levels. \nThe first level\
    \ has n stones.\nThe number of stones in the next level is:\n        - the next\
    \ odd number if n is odd.\n        - the next even number if n is even.\n    \n\
    Examples:\n    >>> make_n_piles(3)\n    [3, 5, 7]\n    >>> make_n_piles(4)\n \
    \   [4, 6, 8, 10]\n    >>> make_n_piles(5)\n    [5, 10, 15, 20, 25]\n    >>> make_n_piles(6)\n\
    \    [6, 12, 18, 24, 30]\n    >>> make_n_piles(7)\n    [7, 14, 21, 28, 35, 40]\n\
    \    >>> make_n_piles(8)\n    [8, 16, 24, 32, 40, 48]\n    >>> make_n_piles(9)\n\
    \    [9, 18, 27, 36, 45, 54, 63, 72]\n    >>> make_n_piles(10)\n    [10, 20, 30,\
    \ 40, 50, 60, 70, 80]\n    >>> make_n_piles(11)\n    [11, 22, 33, 44, 55, 66,\
    \ 77, 88, 99]\n    >>> make_n_piles(12)\n    [12, 24, 36, 48, 60, 72, 84, 96,\
    \ 111]\n    >>> make_n_piles(13)\n    [13, 25, 37, 49, 61, 73, 85, 97, 121]\n\
    \    >>> make_n_piles(14)\n    [14, 26, 38, 50, 62, 74, 86, 99, 122, 140]\n  \
    \  >>> make_n_piles(15)\n    [15, 27, 39, 51, 63, 75, 87, 99, 123, 140, 150]\n\
    \    >>> make_n_piles(16)\n    [16, 28, 40, 52, 64, 76, 88, 100, 132, 140, 150]\n\
    \    >>> make_n_piles(17)\n    [17, 29, 41, 53, 65, 77, 89, 101, 133, 140, 150]\n\
    \    >>> make_n_piles(18)\n    [18, 30, 42, 54, 66, 78, 90, 102, 134, 140, 150]\n\
    \    >>> make_n_piles(19)\n    [19, 31, 43, 55, 67, 79, 91, 103, 135, 140, 150]\n\
    \    >>> make_n_piles(20)\n    [20, 32, 44, 56, 68, 80, 92, 104, 136, ", "   \
    \ if n == 0 \n        return Vector{Int64}()\n    else \n        odd_or_even =\
    \ if n % 2 == 0 \n                        :+ 2\n                        :+ 1 \n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n                  \
    \      :+ 1\n                        :+ 1\n                        :+ 1\n    \
    \                    :+ 1\n                        :+ 1\n                    \
    \    :+ 1\n                        :+ 1\n                        :+ 1\n      \
    \                  :+ 1\n                        :+ 1\n                      \
    \  :+ 1\n                        :+ 1\n                        :+ 1\n        \
    \                :+ 1\n                        :+ 1\n                        :+\
    \ 1\n                        :+ 1\n                        :+ 1\n            \
    \            :+ 1\n                        :+ 1\n                        :+ 1\n\
    \                        :+ 1\n                        :+ 1\n                \
    \        :+ 1\n                        :+ 1\n                        :+ 1\n  \
    \                      :+ 1\n                        :+ 1\n", "    if n==0 \n\
    \        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n   \
    \     push!(make_a_pile(n-1),n%2==0?n+1:n+1)\n    end\nend", "    if n==0 \n \
    \       return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd = n%2\n        even = n/2\n        pile = make_a_pile(even)\
    \ + make_a_pile(odd)\n        return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make n piles.", "    if n == 0 \n\
    \        Vector{Int64}()\n    else\n        make_a_pile(n - 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\n\
    Write a function that takes an integer n and returns the number of levels of stones\
    \ needed to make a pile. For example, make_a_pile(3) should return [3, 5, 7].",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2)\
    \ |> push!(make_a_pile(n / 2)) \n    end\nend", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=n%2\n        even=n-1\n        pile=make_a_pile(odd)\n       \
    \ push!(pile,even)\n        return pile\nend", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) .+ [n % 2 == 0 ? n : n + 2]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called make_a_pile_from_list that takes in a list of integers\
    \ and returns a pile of those integers.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else if n%2==0 \n   \
    \     return make_a_pile(n-1)+make_a_pile(n-2)\n    else \n        return make_a_pile(n-1)+make_a_pile(n-2)+make_a_pile(n-3)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else if n%2==0 \n   \
    \     return make_a_pile(n-1)+make_a_pile(n+1)\n    else \n        return make_a_pile(n-1)+make_a_pile(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n\
    </cell>\n<text>\nExercise 4\nWrite a function called make_a_pile_from_list that\
    \ takes as input a vector of integers and returns the same vector as in Exercise\
    \ 3.", "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2))\n\
    \        push!(make_a_pile(n%2), n)\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a positive integer n and returns the number of levels\
    \ of stones needed to make n piles.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2]\nend", "    if n==1 \n       \
    \ return [1]\n    else if n==2 \n        return [1, 1]\n    else \n        odds\
    \ = make_a_pile(n-1)\n        evens = make_a_pile(n-2)\n        odds[end-1] =\
    \ odds[end-1] + evens[end-1]\n        evens[end-1] = evens[end-1] + odds[end-1]\n\
    \        return odds + evens\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0 ?\
    \ n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n div 2)\n    \n    if n % 2 == 1 \n        push!(pile,\
    \ n div 2)\n    else \n        push!(pile, n div 2)\n        push!(pile, n div\
    \ 2)\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}()\n    elseif n % 2 == 0 \n        make_a_pile(n\
    \ / 2)\n    else\n        make_a_pile(n / 2) + make_a_pile(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to make a pile of n levels of stones.", "    if n==0 \n     \
    \   Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),\
    \ n%2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of ways to arrange n stones in a pile of n levels of stones.", " \
    \   if n % 2 == 0 \n        make_a_pile(n / 2)\n    else\n        make_a_pile(n\
    \ / 2) + [n mod 2]\n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n / 2)\n    \n    if n % 2 == 1 \n        push!(pile,\
    \ n / 2)\n    else \n        push!(pile, n / 2 + 1)\n    end\n    \n    return\
    \ pile\nend", "    if n==1 \n        return [1]\n    \n    pile = make_a_pile(n-1)\n\
    \    \n    if mod(n,2)==1 \n        pile = pile:+2\n    else\n        pile = pile:+3\n\
    \    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of ways to make a pile of n levels of stones.", " \
    \   if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n  \
    \      even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an integer n and returns the number of levels of stones needed to\
    \ make a pile. For example, make_a_pile(3) should return [3, 5, 7].", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else \n        if n % 2 == 0 \n\
    \            evens = make_a_pile(n / 2)\n            odds = make_a_pile(n / 2)\n\
    \            odds[end] = odds[end] + evens[end]\n            return odds\n   \
    \     else \n            evens = make_a_pile(n / 2)\n            odds = make_a_pile(n\
    \ / 2)\n            evens[end] = evens[end] + odds[end]\n            return evens\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer\
    \ n and returns the number of ways to make n piles.", "    if n % 2 == 0 \n  \
    \      make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) + (n % 2 == 0 ? 1 : 0)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes an integer n and returns the number of ways to make a pile\
    \ of n levels of stones.", "    if n==0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(ceil(n/2)).*(ceil(n/2))+make_a_pile(floor(n/2)).*(floor(n/2))\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile. For\
    \ example, given n = 4, there are four ways to arrange the stones in a pile:",
  "    if n == 0 \n        return Vector{Int64}() \n    else \n        pile = make_a_pile(n\
    \ div 2) \n        push!(pile, n mod 2) \n        return pile \nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a positive integer n and returns the number of levels\
    \ of stones needed to form a pile of n stones.", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n / 2)) |> push!(make_a_pile(n\
    \ / 2)) \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function called make_a_pile_with_odd_numbers that\
    \ takes a positive integer n and returns a vector where element at index i represents\
    \ the number of stones in the level (i+1).", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2))+[ceil(n%2)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes as input a positive integer n and returns\
    \ the number of ways to make a pile of n levels of stones.", "    if n==0 \n \
    \       Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))+[(n%2==0)?n:n+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : 2 * n) \n    end\nend", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 1 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2] + make_a_pile(n / 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a positive integer n and returns the number of levels of\
    \ stones needed to make a pile of n stones.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd::Int64\
    \ = if n%2==1 \n            n \n        else \n            n-1\n        even::Int64\
    \ = if n%2==0 \n            n \n        else \n            n-1\n        \n   \
    \     pile = make_a_pile(odd)\n        push!(pile, even)\n        return pile\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend", "    if n==0 \n\
    \        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes an integer n and returns the number of levels in the pile. For example,\
    \ make_a_pile(3) should return [3, 5, 7].", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + make_a_pile(n/2 + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer n and returns the number of ways to arrange\
    \ the n stones in a pile. For example, for n = 4, there are 4 ways to arrange\
    \ the 4 stones in a pile:", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n\
    \ % 2 == 1 \n        odds = make_a_pile(n / 2)\n        odds[end] = odds[end]\
    \ + 1\n        return odds\n    else\n        evens = make_a_pile(n / 2)\n   \
    \     evens[end] = evens[end] + 1\n        return evens\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes an integer n and returns the number\
    \ of ways to arrange n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes in a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile.", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3,\
    \ 5, 7]\n</cell>\n<text>\nExercise\nWrite a function that takes an integer n and\
    \ returns the number of ways to make a pile of n levels of stones.", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd+odd\n        return odd\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code language=julia-1.5>", "  \
    \  if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ div 2)\n    \n    if n % 2 == 0 \n        push!(pile, n div 2)\n    else \n\
    \        push!(pile, n div 2 + 1)\n    end\n    \n    return pile\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a positive integer n and returns the number of stones in\
    \ the first level of a pile. For example, make_a_pile(4) should return [3, 5,\
    \ 7].", "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ / 2)\n    \n    if n % 2 == 1 \n        push!(pile, n / 2)\n    else \n    \
    \    push!(pile, n / 2 + 1)\n    end\n    \n    return pile\nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        return\
    \ odd+even\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n      \
    \  return Vector{Int64}()\n    else if n % 2 == 1\n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else\n        return make_a_pile(n / 2) + [n / 2]\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 1\n      \
    \  return make_a_pile(n / 2) + [n / 2]\n    else\n        return make_a_pile(n\
    \ / 2) + [n / 2]\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n  \
    \      Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),\
    \ ceil(n/2))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile of n levels of stones.", "    if n % 2 == 0 \n        odds = n\n \
    \       evens = n - odds\n    else \n        odds = n - 1\n        evens = n\n\
    \    return Vector{Int64}(undef, odds, evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to partition\
    \ the integers 1...n into two non-empty subsets.", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd_n = if n % 2 == 0 \n            n \n        else \n          \
    \  n - 1\n        even_n = if n % 2 == 1 \n            n \n        else \n   \
    \         n - 2\n        \n        pile = make_a_pile(odd_n) + make_a_pile(even_n)\n\
    \        return pile\nend", "    if n==0 \n        return Vector{Int64}()\n  \
    \  else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n-1\n        pile=make_a_pile(odd)\n        push!(pile,even)\n \
    \       return pile\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile.", "    if n == 0 \n        return Vector{Int64}()\n    \n\
    \    pile = make_a_pile(n div 2)\n    pile[end] = n mod 2\n    return pile\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}()\n    elseif n==1 \n        Vector{Int64}(1)\n\
    \    elseif n%2 == 1 \n        Vector{Int64}(n, n)\n    else\n        Vector{Int64}(n,\
    \ n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n   \
    \     Vector{Int64}() \n    else \n        make_a_pile(n div 2) + [n mod 2]\n\
    \    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make n piles.", "    if n==0 \n\
    \        Vector{Int64}()\n    elseif n==1 \n        Vector{Int64}(1)\n    elseif\
    \ n==2 \n        Vector{Int64}(2, 3)\n    elseif n==3 \n        Vector{Int64}(3,\
    \ 5, 7)\n    elseif n==4 \n        Vector{Int64}(7, 11, 13, 17, 19)\n    elseif\
    \ n==5 \n        Vector{Int64}(11, 17, 23, 29, 31, 37)\n    elseif n==6 \n   \
    \     Vector{Int64}(17, 23, 29, 37, 41, 43, 47)\n    elseif n==7 \n        Vector{Int64}(23,\
    \ 29, 37, 47, 53, 59, 61, 67)\n    elseif n==8 \n        Vector{Int64}(29, 37,\
    \ 47, 53, 59, 61, 67, 71, 73)\n    elseif n==9 \n        Vector{Int64}(37, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83)\n    elseif n==10 \n        Vector{Int64}(47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    elseif n==11 \n        Vector{Int64}(53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103)\n    elseif n==12 \n        Vector{Int64}(59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113)\n    elseif n==13 \n\
    \        Vector{Int64}(61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127)\n    elseif n==14 \n        Vector{Int64}(67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131)\n    elseif n==15 \n        Vector{Int64}(71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 135)\n    elseif n==16\
    \ \n        Vector{Int64}(73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131,\
    \ 135, 139)\n    elseif n==17 \n        Vector{Int64}(79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 135, 139, 143)\n    elseif n==18 \n        Vector{Int",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) ==\
    \ [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function that takes as input\
    \ a positive integer n and returns the number of stones in the pile of n levels.\
    \ \nThe first level has n stones.\nThe number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\nReturn -1 if the input is not positive.", "    if n % 2 == 0 \n\
    \        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange n stones in a pile of n levels. \nThe first level has n stones.\n\
    The number of stones in the next level is:\n        - the next odd number if n\
    \ is odd.\n        - the next even number if n is even.\n    Return the number\
    \ of ways to arrange n stones in a pile of n levels.", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n\
    \ : n + 1]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n+1:n)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>", "    if n == 0 \n     \
    \   return Vector{Int64}() \n    \n    pile = make_a_pile(n div 2)\n    \n   \
    \ if n % 2 == 1 \n        push!(pile, n div 2)\n    else \n        push!(pile,\
    \ n div 2 + 1)\n    end\n    \n    return pile \nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of stones in the pile of n levels of stones.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of levels of stones needed to make n stones.", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else \n        odd=n%2\n        if\
    \ odd==0 \n            even=n/2\n        else \n            even=n//2\n      \
    \  \n        return make_a_pile(even)+make_a_pile(odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile.", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n %\
    \ 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ stones in a pile of n stones.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\nend\n\
    </cell>\n<code language=julia-1.4>", "    if n==1 \n        return [1]\n    \n\
    \    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1 \n        pile = pile:+2\n\
    \    else \n        pile = pile:+3\n    end\n    \n    return pile\nend", "  \
    \  if n==1 \n        return [1]\n    else \n        odds = make_a_pile(n-1)\n\
    \        evens = make_a_pile(n-2)\n        odds[end] = odds[end] + evens[end]\n\
    \        return odds\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the stones in a pile of n stones.",
  "    if n % 2 == 0 \n        make_a_pile(n / 2)\n    else \n        make_a_pile((n\
    \ / 2) + 1)\nend", "    if n == 0 \n        return Vector{Int64}()\n    \n   \
    \ if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n   \
    \     return make_a_pile(n / 2) + [n / 2 + 1]\nend", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n+1:n)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the first level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the second level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the third level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the fourth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the fifth level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the sixth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the seventh level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the eighth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the ninth level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the tenth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the eleventh level of the pile. \nWrite a function that\
    \ takes a positive integer n and returns the number of stones in the twelfth level\
    \ of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the thirteenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the fourteenth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the fifteenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the sixteenth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the seventeenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the eighteenth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the nineteenth level of the pile. \nWrite a function\
    \ that takes a positive integer n and returns the number of stones in the twentieth\
    \ level of the pile. \nWrite a function that takes a positive integer n and returns\
    \ the number of stones in the twenty-first level of the pile. \nWrite ", "   \
    \ if n==0 \n        return Vector{Int64}() \n    else \n        make_a_pile(n-1)\n\
    \        push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a positive integer n\
    \ and returns the number of ways to make a pile of n levels of stones.", "   \
    \ if n == 1 \n        return [1]\n    \n    if n % 2 == 1 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    \n    return make_a_pile(n / 2) + [n / 2]\nend", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else \n        make_a_pile(n-1)\n\
    \        push!(make_a_pile(n-1), n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes as input a positive integer n and returns\
    \ the number of ways to arrange n stones in a pile.", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile of n levels of stones.", "    if n % 2 == 0 \n\
    \        make_a_pile(n / 2)\n    else \n        make_a_pile(n / 2) + [n mod 2]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of stones in a pile.", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==1 \n       \
    \ return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+[odd[n-1]]\n        even=even+[even[n-1]]\n        return odd+even\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to make a pile of n levels of stones.", "    if n==0 \n     \
    \   return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_or_even = if n%2==0 \n            1 \n        else \n\
    \            0\n        pile = make_a_pile(n-1)\n        push!(pile, odd_or_even)\n\
    \        return pile\nend\n</cell>\n<code language=julia-1.0>", "    if n==0 \n\
    \        return Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n    \n   \
    \ if n%2 == 1\n        push!(pile, (n+1)/2)\n    else\n        push!(pile, (n+1)/2)\n\
    \    end\n    \n    return pile\nend", "    if n % 2 == 0 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n\
    \        evens[end] = evens[end] + odds[end]\n        return odds\n    else\n\
    \        evens = make_a_pile(n / 2)\n        odds = make_a_pile(n / 2)\n     \
    \   evens[end] = evens[end] + odds[end]\n        odds[end] = odds[end] + evens[end]\n\
    \        return evens\n    end\nend\n</cell>\n<code language=julia-1.0>", "  \
    \  if n % 2 == 0 \n        make_a_pile(n / 2)\n    else\n        make_a_pile(n\
    \ / 2) + [n mod 2]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_n = n%2\n        even_n = n//2\n        pile = make_a_pile(odd_n)\
    \ + make_a_pile(even_n)\n        if odd_n==1 \n            return pile\n     \
    \   else \n            return pile+Vector{Int64}(odd_n)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ / 2)\n    pile = pile + [n mod 2]\n    \n    return pile\nend", "    if n ==\
    \ 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n / 2) + [n % 2 ==\
    \ 0 ? n : n % 2 == 1 ? n + 1 : n + 2]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n   \
    \     push!(make_a_pile(n-1), n%2==0 ? n+1 : n-1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to make a pile of n levels of stones.", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n==1 \n        return [1]\n    else \n        odd::Int64 = if n%2==0 then n/2\
    \ else n-1\n        even::Int64 = if n%2==1 then n/2 else n-1\n        pile =\
    \ make_a_pile(odd)\n        push!(pile, even)\n        return pile\nend\n</cell>\n\
    <code language=julia-1.0>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile of n levels. \nFor example, for n = 4, there\
    \ are four ways to arrange the 4 stones in a pile:", "    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes as input a positive integer n and returns the number of\
    \ ways to make n piles of stones.", "    if n % 2 == 0 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n\
    \        return odds\n    else\n        evens = make_a_pile(n / 2)\n        odds\
    \ = make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n        return\
    \ evens\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile.", "    if n % 2 == 0 \n        make_a_pile(n/2)\n    else \n    \
    \    make_a_pile(n/2) + [(n+1)/2]\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    return odd+even\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n div 2), n mod 2) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the number of\
    \ levels of stones needed to make n stones.", "    if n==1 \n        return [1]\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+odd\n        even=even+even\n        odd=odd+odd\n        even=even+even\n\
    \        return odd+even\nend\n</cell>\n<code language=julia-1.3>", "    if n==0\
    \ \n        Vector{Int64}()\n    elseif n==1 \n        Vector{Int64}(1)\n    elseif\
    \ n==2 \n        Vector{Int64}(1, 2)\n    elseif n==3 \n        Vector{Int64}(1,\
    \ 3)\n    elseif n==4 \n        Vector{Int64}(2, 3)\n    elseif n==5 \n      \
    \  Vector{Int64}(2, 4)\n    elseif n==6 \n        Vector{Int64}(3, 4)\n    elseif\
    \ n==7 \n        Vector{Int64}(3, 5)\n    elseif n==8 \n        Vector{Int64}(4,\
    \ 5)\n    elseif n==9 \n        Vector{Int64}(4, 6)\n    elseif n==10 \n     \
    \   Vector{Int64}(6, 6)\n    elseif n==11 \n        Vector{Int64}(6, 7)\n    elseif\
    \ n==12 \n        Vector{Int64}(7, 7)\n    elseif n==13 \n        Vector{Int64}(7,\
    \ 8)\n    elseif n==14 \n        Vector{Int64}(8, 8)\n    elseif n==15 \n    \
    \    Vector{Int64}(8, 9)\n    elseif n==16 \n        Vector{Int64}(9, 9)\n   \
    \ elseif n==17 \n        Vector{Int64}(9, 10)\n    elseif n==18 \n        Vector{Int64}(10,\
    \ 10)\n    elseif n==19 \n        Vector{Int64}(10, 11)\n    elseif n==20 \n \
    \       Vector{Int64}(11, 11)\n    elseif n==21 \n        Vector{Int64}(11, 12)\n\
    \    elseif n==22 \n        Vector{Int64}(12, 12)\n    elseif n==23 \n       \
    \ Vector{Int64}(12, 13)\n    elseif n==24 \n        Vector{Int64}(13, 13)\n  \
    \  elseif n==25 \n        Vector{Int64}(13, 14)\n    elseif n==26 \n        Vector{Int64}(14,\
    \ 14)\n    elseif n==27 \n        Vector{Int64}(14, 15)\n    elseif n==28 \n \
    \       Vector{Int64}(15, 15)\n    elseif n==29 \n        Vector{Int64}(15, 16)\n\
    \    elseif n==30 \n        Vector{Int64}(16, 16)\n    elseif n==31 \n       \
    \ Vector{Int64}(16, 17)\n    elseif n==32 \n        Vector{Int64}(17, 17)\n  \
    \  elseif n==33 \n        Vector{Int64}(17, 18)\n    elseif n==34 ", "    if n\
    \ == 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n - 1) \n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer n and\
    \ returns the number of ways to arrange n stones in a pile.", "    if n % 2 ==\
    \ 0 \n        make_a_pile(n/2)\n    else \n        make_a_pile(n/2) + make_a_pile(n/2+1)\
    \ \nend\n</code>\n<|/ a tags=recursion,julia |>\n<| a tags=recursion,julia |>\n\
    <code>", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of stones in a pile\
    \ of n levels given an input of n as an integer.", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0\
    \ ? n+1 : n) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to make a\
    \ pile of n levels of stones.", "    if n % 2 == 1 \n        odds = make_a_pile(n\
    \ / 2)\n        evens = make_a_pile(n / 2)\n        odds[end] = odds[end] + evens[end]\n\
    \        evens[end] = evens[end] - odds[end]\n        return odds + evens\n  \
    \  else\n        odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n\
    \        odds[end] = odds[end] + evens[end]\n        evens[end] = evens[end] -\
    \ odds[end]\n        return odds\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}() \n    else \n        pile = make_a_pile(n-1)\
    \ \n        push!(pile, n%2) \n        return pile \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns a vector with n elements, where each element is the sum of the\
    \ elements at each level of the pile. For example, if the pile has 3 levels, then\
    \ the vector returned should have 6 elements.", "    if n % 2 == 0 \n        odds\
    \ = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n        odds[end]\
    \ = odds[end] + evens[end]\n        return odds\n    else \n        evens = make_a_pile(n\
    \ / 2)\n        odds = make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n\
    \        return evens\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile of n levels. \nFor example, given n = 4, the function should return\
    \ [1, 1, 2, 2, 3, 3].", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n\
    \ : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ / 2)\n    pile = pile + [n mod 2]\n    \n    return pile\nend", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n     \
    \   push!(make_a_pile(n mod 2), n div 2) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to make a pile of n levels of stones.", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1,2)\n\
    \    elseif n==3 \n        Vector{Int64}(1,3,5)\n    elseif n==4 \n        Vector{Int64}(1,3,5,7)\n\
    \    elseif n==5 \n        Vector{Int64}(1,3,5,7,9)\n    elseif n==6 \n      \
    \  Vector{Int64}(1,3,5,7,9,11)\n    elseif n==7 \n        Vector{Int64}(1,3,5,7,9,11,13)\n\
    \    elseif n==8 \n        Vector{Int64}(1,3,5,7,9,11,13,15)\n    elseif n==9\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17)\n    elseif n==10 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19)\n\
    \    elseif n==11 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21)\n    elseif\
    \ n==12 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23)\n    elseif n==13\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25)\n    elseif n==14\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27)\n    elseif n==15\
    \ \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29)\n    elseif\
    \ n==16 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31)\n\
    \    elseif n==17 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33)\n\
    \    elseif n==18 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35)\n\
    \    elseif n==19 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37)\n\
    \    elseif n==20 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39)\n\
    \    elseif n==21 \n        Vector{Int64}(1,3,5,7,9,11,13,15,17,", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n     \
    \   push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 1\n        return make_a_pile(n / 2) + [n / 2]\n    else\n\
    \        return make_a_pile(n / 2) + [n / 2]\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n   \
    \     push!(make_a_pile(n-1),n%2==0?n-1:n+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to make a pile of n levels of stones.", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer n and returns the number of ways to arrange the n stones in\
    \ a pile.", "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n\
    \        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n  \
    \      even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd+odd\n    \
    \    return odd\n    end\nend\n</cell>\n<code language=julia-1.3>", "    if n\
    \ % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + make_a_pile(n/2\
    \ + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n % 2 == 0 \n        odds\
    \ = n / 2\n        evens = n - odds\n        pile = Vector{Int64}(undef, odds\
    \ + evens)\n        pile[1::2] = odds\n        pile[2::2] = evens\n        return\
    \ pile\n    else\n        odds = n / 2\n        evens = n - odds\n        pile\
    \ = Vector{Int64}(undef, odds + evens)\n        pile[1::2] = odds\n        pile[2::2]\
    \ = evens\n        return pile\n    end\nend", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n % 2 == 0 \n        pile = make_a_pile(n / 2)\n\
    \        push!(pile, n / 2)\n        return pile\n    else \n        pile = make_a_pile(n\
    \ / 2)\n        push!(pile, n / 2)\n        push!(pile, n / 2)\n        return\
    \ pile\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) |> push!(make_a_pile(n % 2 == 0 ? n : n\
    \ / 2))\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a positive integer n and returns the number of levels of stones needed to make\
    \ a pile of n stones.", "    if n==0 \n        return Vector{Int64}()\n    else\
    \ if n==1 \n        return Vector{Int64}(1)\n    else \n        odd::Int64 = if\
    \ n%2==1 \n            n \n        else \n            n \n        even::Int64\
    \ = if n%2==0 \n            n \n        else \n            n \n        pile =\
    \ make_a_pile(odd) + make_a_pile(even)\n        return pile\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1\
    \ : 2) \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n mod 2) \n  \
    \      push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile.", "    if n==0 \n        Vector{Int64}()\n    elseif n==1 \n    \
    \    Vector{Int64}(1)\n    elseif n==2 \n        Vector{Int64}(1, 2)\n    elseif\
    \ n==3 \n        Vector{Int64}(1, 3, 5, 7)\n    elseif n==4 \n        Vector{Int64}(1,\
    \ 4, 6, 8)\n    elseif n==5 \n        Vector{Int64}(1, 5, 10, 15)\n    elseif\
    \ n==6 \n        Vector{Int64}(1, 6, 15, 20)\n    elseif n==7 \n        Vector{Int64}(1,\
    \ 7, 21, 35)\n    elseif n==8 \n        Vector{Int64}(1, 8, 36, 70)\n    elseif\
    \ n==9 \n        Vector{Int64}(1, 9, 105, 210)\n    elseif n==10 \n        Vector{Int64}(1,\
    \ 10, 220, 400)\n    elseif n==11 \n        Vector{Int64}(1, 11, 401, 800)\n \
    \   elseif n==12 \n        Vector{Int64}(1, 12, 801, 1600)\n    elseif n==13 \n\
    \        Vector{Int64}(1, 13, 1601, 3200) \n    elseif n==14 \n        Vector{Int64}(1,\
    \ 14, 3201, 6400)\n    elseif n==15 \n        Vector{Int64}(1, 15, 6401, 12800)\n\
    \    elseif n==16 \n        Vector{Int64}(1, 16, 12801, 25600)\n    elseif n==17\
    \ \n        Vector{Int64}(1, 17, 25601, 51200)\n    elseif n==18 \n        Vector{Int64}(1,\
    \ 18, 51211, 102400)\n    elseif n==19 \n        Vector{Int64}(1, 19, 102501,\
    \ 204800)\n    elseif n==20 \n        Vector{Int64}(1, 20, 204111, 409600)\n \
    \   elseif n==21 \n        Vector{Int64}(1, 21, 405011, 819200)\n    elseif n==22\
    \ \n        Vector{Int64}(1, 22, 819011, 1638400)\n    elseif n==23 \n       \
    \ Vector{Int64}(1, 23, 1638011, 3276800)\n    elseif n==24 \n        Vector{Int64}(1,\
    \ 24, 3277011, 6553600)\n    elseif n==25 \n        Vector{Int64}(1, 25, 6553601,\
    \ 13107200)\n    elseif n==26 \n        Vector{Int64}(1, 26, 13107211, 26214400)\n\
    \    elseif n==27 \n        Vector{Int", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to make n piles.", "    if n==0 \n        return Vector{Int64}()\n \
    \   else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd = n%2\n\
    \        even = n/2\n        pile = make_a_pile(odd)\n        push!(pile, even)\n\
    \        return pile\nend", "    if n == 0 \n        Vector{Int64}()\n    else\n\
    \        make_a_pile(n - 1) + (n % 2 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n % 2 == 0 \n        make_a_pile(n\
    \ / 2)\n    else\n        make_a_pile(n / 2) + [n mod 2]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n % 2 == 0 \n        odds = n\n        evens\
    \ = n - odds\n    else \n        odds = n - 1\n        evens = n + 1\n    return\
    \ Vector{Int64}(undef, evens, odds)\nend\n</cell>\n<code language=julia-1.0>\n\
    make_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function called make_a_pile_from_list\
    \ that takes as input a list of stones and returns the same pile. \nThe function\
    \ should return a vector of length equal to the length of the input list.", " \
    \   if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n  \
    \      even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        return odd+even\n    end\nend\n</cell>\n\
    <code language=julia-1.3>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
