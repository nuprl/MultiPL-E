name: HumanEval_100_make_a_pile
language: jl
prompt: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    The first level has n stones.\n    The number of stones in the\
  \ next level is:\n        - the next odd number if n is odd.\n        - the next\
  \ even number if n is even.\n    Return the number of stones in each level in a\
  \ vector, where element at index\n    i represents the number of stones in the level\
  \ (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction\
  \ make_a_pile(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
  \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
  \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
  \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
completions: ["    if n % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2)\
    \ + make_a_pile(n/2+1) + make_a_pile(n/2+2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd+odd\n        return odd\nend\n</cell>\n\
    <code language=julia-1.3>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n  \
    \  else\n        make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n / 2)\
    \ + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even\
    \ = if n%2==0 then \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then\
    \ \"even\" else \"odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"\
    odd\"\n        odd_or_even = if n%2==0 then \"even\" else \"odd\"\n        ",
  "    if n==1 \n        return [1]\n    else if n==2 \n        return [1, 1]\n  \
    \  else \n        odd = make_a_pile(n-1)\n        even = make_a_pile(n-2)\n  \
    \      odd[1] = odd[1] + even[1]\n        odd[2] = odd[2] + even[2]\n        return\
    \ odd\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile of n levels. \nFor example, given\
    \ n = 4, there are four ways to arrange the 4 stones in a pile of 4 levels:",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2))+[n\
    \ % 2]\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ an integer n and returns the number of ways to arrange n stones in a pile.",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n\
    \    \n    if n % 2 == 0 \n        push!(pile, n / 2)\n    else\n        push!(pile,\
    \ n / 2 + 1)\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function called count_stones\
    \ that takes as input a vector of integers and returns the number of stones in\
    \ the pile.", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n  \
    \  \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\n        push!(pile,n+1)\n\
    \    else\n        push!(pile,n-1)\n    end\n    \n    return pile\nend", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n / 2) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n\
    <text>\nExercise 2\nWrite a function make_a_pile(n::Int64)::Vector{Int64} that\
    \ returns the number of stones in each level in a vector, where element at index\
    \ i represents the number of stones in the level (i+1).", "    if n == 0 \n  \
    \      Vector{Int64}()\n    elseif n % 2 == 0 \n        make_a_pile(n / 2)\n \
    \   else\n        make_a_pile(n / 2) + make_a_pile((n / 2) * (n / 2))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2)\
    \ |> push!(make_a_pile(n % 2)) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n / 2)\n    pile[end] = n % 2 == 0 ? n : n + 1\n\
    \    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\n    else\n\
    \        make_a_pile(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd = n%2\n        even = n/2\n       \
    \ pile = make_a_pile(even) + make_a_pile(odd)\n        return pile\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}() \n \
    \   else \n        pile = make_a_pile(n-1)\n        if mod(n,2)==1 \n        \
    \    push!(pile,n+1)\n        else \n            push!(pile,n-1)\n        end\n\
    \        return pile\n    end\nend\n</cell>\n<code language=julia-1.4>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a positive integer n and\
    \ returns the number of ways to make a pile of n levels of stones.", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n  \
    \      push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer n and returns the number\
    \ of ways to arrange n stones in a pile.", "    if n % 2 == 0 \n        odds =\
    \ n\n        evens = n - odds\n    else \n        odds = n - 1\n        evens\
    \ = n + 1\n    \n    pile = Vector{Int64}(undef, evens)\n    pile[1] = odds\n\
    \    \n    for i = 2:evens\n        pile[i] = pile[i-1] + pile[i-2]\n    end\n\
    \    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make a pile of n levels of stones.", "   \
    \ if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n  \
    \      push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a positive integer n and returns the number of ways to arrange\
    \ the n stones in a pile of n levels. \nFor example, for n = 4, there are 4 ways\
    \ to arrange the 4 stones in a pile:", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=n%2\n\
    \        even=n%2==0\n        \n        if odd \n            odd=make_a_pile(odd)\n\
    \        else\n            odd=make_a_pile(odd)\n        end\n        \n     \
    \   if even \n            even=make_a_pile(even)\n        else\n            even=make_a_pile(even)\n\
    \        end\n        \n        \n        return odd+even\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange n stones in a pile.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        return odd+even\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to form a pile of\
    \ n stones.", "    if n==1 \n        return [1]\n    else \n        odds = make_a_pile(n-1)\n\
    \        evens = make_a_pile(n-2)\n        return odds + evens\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(3)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ make a pile of n levels of stones.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n / 2) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2))+[n % 2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(4) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(5) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(6)\
    \ == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(7) == [3,\
    \ 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(8) == [3, 5]\n\
    </cell>\n<code language=julia-1.0>\n@assert make_a_pile(9) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.0>\n@assert make_a_pile(10) == [3, 5]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(11) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(12) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(13)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(14) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(15) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(16) == [3, 5]\n\
    </cell>\n<code language=julia-1.0>\n@assert make_a_pile(17) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.0>\n@assert make_a_pile(18) == [3, 5]\n</cell>\n<code language=julia-1.0>\n\
    @assert make_a_pile(19) == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(20) == [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(21)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(22) ==\
    \ [3, 5]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(23) == [3, 5,\
    \ 7]\n</cell>\n<code language=julia-1.0>\n@assert make_a_pile(24", "    if n ==\
    \ 1 \n        return [1]\n    \n    pile = make_a_pile(n / 2)\n    pile = pile\
    \ + [n mod 2 ? 2 : 1]\n    \n    return pile\nend", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2==0\
    \ ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make n piles of stones.", "    if n==1 \n\
    \        return [1]\n    else \n        odd = make_a_pile(n-1)\n        even =\
    \ make_a_pile(n-2)\n        odd[end] = odd[end] + even[end]\n        return odd\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(5)\n</cell>\n<code\
    \ language=julia-1.0>", "    if n == 1 \n        return [1]\n    else \n     \
    \   odd = n % 2\n        even = n / 2\n        pile = make_a_pile(even) + make_a_pile(odd)\n\
    \        return pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make n piles of stones.", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(n / 2) ++ [n % 2 ==\
    \ 0 ? n : 2 * n]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ stones in a pile of n stones.", "    if n==0 \n        Vector{Int64}() \n  \
    \  else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 == 0 ?\
    \ n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of levels of stones needed to make\
    \ a pile of n stones.", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2), n//2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes as input a positive integer n and returns the number of ways to arrange\
    \ the n stones in a pile of n levels. \nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n        - the next odd number if n is odd.\n\
    \        - the next even number if n is even.\n    \nExamples:\n    >>> make_a_pile(3)\n\
    \    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 8, 12, 16]\n    >>> make_a_pile(5)\n\
    \    [5, 10, 15, 20, 25]\n    >>> make_a_pile(6)\n    [6, 12, 18, 24, 30]\n  \
    \  >>> make_a_pile(7)\n    [7, 14, 21, 28, 35, 42]\n    >>> make_a_pile(8)\n \
    \   [8, 16, 24, 32, 40, 48]\n    >>> make_a_pile(9)\n    [9, 18, 27, 36, 45, 52,\
    \ 60]\n    >>> make_a_pile(10)\n    [10, 20, 30, 40, 50, 60, 70]\n    >>> make_a_pile(11)\n\
    \    [11, 22, 33, 44, 55, 66, 76, 81]\n    >>> make_a_pile(12)\n    [12, 24, 36,\
    \ 48, 60, 72, 84, 90]\n    >>> make_a_pile(13)\n    [13, 26, 39, 52, 65, 78, 92,\
    \ 105]\n    >>> make_a_pile(14)\n    [14, 28, 42, 56, 70, 84, 101, 118, 135]\n\
    \    >>> make_a_pile(15)\n    [15, 30, 45, 60, 75, 90, 115, 130, 150]\n    >>>\
    \ make_a_pile(16)\n    [16, 32, 48, 64, 80, 96, 112, 128, 144, 160]\n    >>> make_a_pile(17)\n\
    \    [17, 34, 51, 67, 85, 103, 121, 143, 161, 178]\n    >>> make_a_pile(18)\n\
    \    [18, 36, 54, 70, 92, 108, 126, 150, 176, 193]\n    >>> make_a_pile(19)\n\
    \    [19, 38, 57, 74, 100, 116, 134, 152, 180, 207, 225]\n    >>> make_a_pile(20)\n\
    \    [20, 40, 60, 78, 104, 122, 140, 158, 186, 213, 240]\n    >>> make_a_pile(21)\n\
    \    [21, 42, 64, 82, 106, 127, 148, 164, 192, 235, 252]\n    >>> make_a_pile(22)",
  "    if n == 0 \n        Vector{Int64}()\n    elseif n % 2 == 1\n        make_a_pile(n\
    \ / 2)\n    else\n        make_a_pile(n / 2) + make_a_pile(n / 2)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange n stones.", "    if n==0 \n      \
    \  return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_or_even = if n%2==0 \n                        :+\n   \
    \                     :+\n                    else \n                        :+\n\
    \                        :+\n                    end\n        pile = make_a_pile(n-1)\n\
    \        push!(pile, odd_or_even)\n        return pile\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange the n stones in a pile.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\n   \
    \ end\nend\n</cell>\n<code language=julia-1.3>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? 1 : 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes as input a positive integer n and returns the number of ways to make a\
    \ pile of n levels of stones.", "    if n == 1 \n        return [1]\n    \n  \
    \  pile = make_a_pile(n / 2)\n    pile = [i + 1 for i in pile]\n    pile = [i\
    \ + 1 for i in pile]\n    \n    if n % 2 == 1 \n        pile = [i + 1 for i in\
    \ pile]\n    end\n    \n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile of\
    \ n levels. \nFor example, if the input is 3, the output should be [1, 1, 2, 2,\
    \ 3, 3]. \nThe function should return an array of length n. \nThe function should\
    \ return nothing if the input is 0 or less.", "    if n==0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n-1)\n    \n    if mod(n,2)==1\n        push!(pile,n+1)\n\
    \    else\n        push!(pile,n-1)\n    end\n    \n    return pile\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        return odd+even\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n==1 \n        return [1]\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        return odd\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time make_a_pile(100000);\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to write n stones in a pile.", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1 \n        Vector{Int64}(1)\n    elseif n%2==0 \n        Vector{Int64}(make_a_pile(n-1)[end-1]+2)\n\
    \    else\n        Vector{Int64}(make_a_pile(n-1)[end-1]+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
