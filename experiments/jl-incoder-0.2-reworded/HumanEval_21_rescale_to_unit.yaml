name: HumanEval_21_rescale_to_unit
language: jl
prompt: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
  \ transform to that vector,\n    such that the smallest number will become 0 and\
  \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
  \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
completions: ["    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector of\
    \ numbers and returns a vector of numbers that have been rescaled so that they\
    \ have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n  \
    \  rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit\
    \ and takes as input a vector of numbers and returns a vector of numbers. You\
    \ can see that the function above is very similar to the function rescale_to_unit\
    \ in the previous section. Let's see how it works.", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function below\
    \ takes a vector of numbers and returns a vector of numbers that have been scaled\
    \ to the unit interval (0,1).", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend", "    rescaled = numbers .- minimum(numbers)\n    rescaled\
    \ ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<code language=julia-1.4>",
  "    rescale_to_unit_helper(numbers, 0.0, 1.0)\nend", "    rescaled = numbers .-\
    \ minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n</cell>\n<text>\nExercise\nWrite a function that will apply a linear\
    \ transform to a vector of numbers, such that the smallest number will become\
    \ 0 and the largest will become 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers.map(x->x/minimum(numbers))\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a vector of numbers and returns the same vector but\
    \ with each number multiplied by a constant factor.\nFor example, given [1.0,\
    \ 2.0, 3.0, 4.0, 5.0], the function should return [2.0, 4.0, 6.0, 8.0, 10.0].",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise 3: Implement the function rescale_from_unit, which will take\
    \ a vector of numbers (of at least two elements) and return a rescaled vector\
    \ of numbers, such that the smallest number will become 0 and the largest will\
    \ become 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    rescaled = numbers .- minimum\n    rescaled ./= maximum - minimum\n    return\
    \ rescaled\nend\n</cell>\n<text>\nNow let's try it out on some random vectors:",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers\
    \ - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n<text>\n\
    The function rescale_to_unit takes as input a vector of numbers and returns a\
    \ vector of numbers. \nThe function rescale_to_unit rescales the numbers in the\
    \ vector such that they fall between 0 and 1.\nThe function rescale_to_unit does\
    \ not change the original vector.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers, and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3: Implement a function that\
    \ performs a linear transform on a vector of numbers, such that the smallest number\
    \ will become 0 and the largest will become 1\nHint: Use Julia's built-in min\
    \ and max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<code language=julia-1.3>\n# Test the\
    \ function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers\
    \ that have been rescaled so that they have unit length.", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    rescaled = minimum + maximum * (numbers -\
    \ minimum) / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<code language=julia-1.5>",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers =\
    \ numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function rescale_to_unit takes as input a vector of numbers, and returns a\
    \ vector of numbers that have been rescaled so that they lie between 0 and 1.",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers =\
    \ numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum) /\
    \ (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled = minimum + maximum * (numbers - minimum) / (maximum - minimum)\n\
    \    return rescaled\nend\n</cell>\n<text>\nNow let's try it out on some random\
    \ numbers:", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    \n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers\
    \ ./ maximum)\n    \n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function above is called rescale_to_unit. Let's see how it works.", "    minimum\
    \ = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers - minimum)\
    \ / (maximum - minimum)\n    return numbers\nend\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes as input a vector of numbers, and returns a vector of\
    \ numbers that have been rescaled so that they have unit length. For example,\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) returns [0.0, 0.25, 0.5, 0.75, 1.0].",
  "    rescale_to_unit(numbers, 0.0, 1.0)\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    minimum = minimum(numbers)\n    maximum\
    \ = maximum(numbers)\n    rescaled = numbers .- minimum\n    rescaled ./= maximum\
    \ - minimum\n    return rescaled\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of numbers and returns the mean of the numbers. \nThe mean\
    \ of a set of numbers is defined as the sum of all numbers divided by the number\
    \ of numbers. \nThe mean of an empty set is undefined.\nThe mean of a set of numbers\
    \ is defined as the sum of all numbers divided by the number of numbers. \nThe\
    \ mean of an empty set is undefined.\nThe mean of a set of numbers is defined\
    \ as the sum of all numbers divided by the number of numbers. \nThe mean of an\
    \ empty set is undefined.\nThe mean of a set of numbers is defined as the sum\
    \ of all numbers divided by the number of numbers. \nThe mean of an empty set\
    \ is undefined.\nThe mean of a set of numbers is defined as the sum of all numbers\
    \ divided by the number of numbers. \nThe mean of an empty set is undefined.\n\
    The mean of a set of numbers is defined as the sum of all numbers divided by the\
    \ number of numbers. \nThe mean of an empty set is undefined.\nThe mean of a set\
    \ of numbers is defined as the sum of all numbers divided by the number of numbers.\
    \ \nThe mean of an empty set is undefined.\nThe mean of a set of numbers is defined\
    \ as the sum of all numbers divided by the number of numbers. \nThe mean of an\
    \ empty set is undefined.\nThe mean of a set of numbers is defined as the sum\
    \ of all numbers divided by the number of numbers. \nThe mean of an empty set\
    \ is undefined.\nThe mean of a set of numbers is defined as the sum of all numbers\
    \ divided by the number of numbers. \nThe mean of an empty set is undefined.\n\
    The mean of a set of numbers is defined as the sum of all numbers divided by the\
    \ number of numbers. \nThe mean of an empty set is undefined.\nThe mean of a set\
    \ of numbers is defined as the sum of all numbers divided by the number of numbers.\
    \ \nThe mean of an empty set is undefined.\nThe mean of a set of numbers is defined\
    \ as the sum of all numbers divided by the number of numbers. \nThe mean of an\
    \ empty set is undefined.\nThe mean of a set of numbers is defined as the sum\
    \ of all numbers divided by the number of numbers. \nThe mean of an empty set\
    \ is undefined.\nThe mean of a set of numbers is defined as the sum of all numbers\
    \ divided by the number of numbers. \nThe mean of an empty set is undefined.\n\
    The mean of a set of numbers is defined as the sum of all numbers divided by the\
    \ number of numbers. \nThe mean of an empty set is undefined.\nThe mean of a set\
    \ of numbers is defined as the sum of all numbers divided by the number of numbers.\
    \ \nThe mean of an empty set is undefined.\nThe mean of a set of numbers is defined\
    \ as the ", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nExercise: Write a function that will apply a linear\
    \ transform to a vector of numbers, such that the smallest number will become\
    \ 0 and the largest will become 1\nHint: Use minimum and maximum", "    minimum\
    \ = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers = numbers\
    \ .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum) / (maximum\
    \ - minimum)\n    rescaled_numbers .= minimum + maximum\n    \n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nNow let's try it out on some random numbers:", "    minimum\
    \ = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers = numbers\
    \ .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum - 0.5) .* maximum\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# TEST\
    \ rescale_to_unit\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise 3: Implement the function rescale_from_unit,\
    \ which will apply a linear transform to the given vector, such that the smallest\
    \ number will become 0 and the largest will become 1.", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.4>", "    rescaled\
    \ = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return\
    \ rescaled\nend\n</cell>\n<text>\nNow let's try it out on some random vectors:",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescale_to_unit_helper(numbers,\
    \ 0.0, 1.0)\nend", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= (rescaled_numbers ./\
    \ maximum(rescaled_numbers)) .* maximum([minimum(numbers), 1])\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit.\
    \ Let's see how it works.", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled_numbers = numbers - minimum\n    rescaled_numbers = rescaled_numbers\
    \ / maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers =\
    \ numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum) /\
    \ (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers\
    \ ./ maximum - 1.0) .* maximum\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Let's try it out!", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Let's try it out on some random numbers:", "    rescaled_numbers = numbers .-\
    \ minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (rescaled_numbers ./ maximum - 1.0) .* maximum\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# TEST rescale_to_unit\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nThe function\
    \ below takes a vector of numbers and returns a vector of numbers that have been\
    \ scaled so that the\nsmallest number will become 0 and the largest will become\
    \ 1.", "    rescale_to_unit(numbers, 0.0, 1.0)\nend", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled = minimum + maximum * (numbers - minimum)\
    \ / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nThe function rescale_to_unit\
    \ takes as input a vector of numbers and returns a vector of numbers that have\
    \ been rescaled so that the smallest number becomes 0 and the largest becomes\
    \ 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers) - minimum(rescaled_numbers)\n    return rescaled_numbers\n\
    end", "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in an array of numbers and returns the\
    \ sum of the squares of the numbers.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend", "    rescaled = numbers .- minimum(numbers)\n    rescaled\
    \ ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<text>\nNow let's\
    \ try it out on some random numbers:", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers.map(x -> x\
    \ / minimum(numbers))\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # TEST Rescale To Unit (5b)\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\
    \ == [0.0, 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of numbers and returns a vector of numbers that has all\
    \ values between 0 and the maximum absolute value of the original vector.", " \
    \   rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\
    \ \u2248 [0.0, 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a vector of numbers and returns a vector of numbers that have\
    \ been scaled to be between 0 and 1\nThe function should take in a vector of numbers\
    \ and return a vector of numbers that have been scaled to be between 0 and 1\n\
    The function should take in a vector of numbers and return a vector of numbers\
    \ that have been scaled to be between 0 and 1\nThe function should take in a vector\
    \ of numbers and return a vector of numbers that have been scaled to be between\
    \ 0 and 1\nThe function should take in a vector of numbers and return a vector\
    \ of numbers that have been scaled to be between 0 and 1\nThe function should\
    \ take in a vector of numbers and return a vector of numbers that have been scaled\
    \ to be between 0 and 1\nThe function should take in a vector of numbers and return\
    \ a vector of numbers that have been scaled to be between 0 and 1\nThe function\
    \ should take in a vector of numbers and return a vector of numbers that have\
    \ been scaled to be between 0 and 1\nThe function should take in a vector of numbers\
    \ and return a vector of numbers that have been scaled to be between 0 and 1\n\
    The function should take in a vector of numbers and return a vector of numbers\
    \ that have been scaled to be between 0 and 1\nThe function should take in a vector\
    \ of numbers and return a vector of numbers that have been scaled to be between\
    \ 0 and 1\nThe function should take in a vector of numbers and return a vector\
    \ of numbers that have been scaled to be between 0 and 1\nThe function should\
    \ take in a vector of numbers and return a vector of numbers that have been scaled\
    \ to be between 0 and 1\nThe function should take in a vector of numbers and return\
    \ a vector of numbers that have been scaled to be between 0 and 1\nThe function\
    \ should take in a vector of numbers and return a vector of numbers that have\
    \ been scaled to be between 0 and 1\nThe function should take in a vector of numbers\
    \ and return a vector of numbers that have been scaled to be between 0 and 1\n\
    The function should take in a vector of numbers and return a vector of numbers\
    \ that have been scaled to be between 0 and 1\nThe function should take in a vector\
    \ of numbers and return a vector of numbers that have been scaled to be between\
    \ 0 and 1\nThe function should take in a vector of numbers and return a vector\
    \ of numbers that have been scaled to be between 0 and 1\nThe function should\
    \ take in a vector of numbers and return a vector of numbers that have been scaled\
    \ to be between 0 and 1\nThe function should take in a vector of numbers and return\
    \ a vector of numbers that have been scaled to be between 0 and 1\nThe function\
    \ should take in a vector of numbers and return a vector of numbers that have\
    \ been scaled to be between 0 and 1\nThe function should take in a vector of numbers\
    \ and return a vector of numbers that have been scaled to be between 0 and 1\n\
    The function should take in a vector of numbers and return a vector of number",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ as input a vector of numbers and outputs a vector of numbers that is 1 if the\
    \ number is greater than or equal to 0.5 and 0 otherwise.", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Let's\
    \ test it out\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise:\
    \ Implement the function rescale_to_unit_vector(numbers::Vector{Float64}) which\
    \ takes as input a vector of numbers and returns a vector of the same length where\
    \ each number has been rescaled to a unit vector.", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    rescaled_numbers = numbers .- minimum\n \
    \   rescaled_numbers .= (maximum - minimum) / maximum\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2: Implement\
    \ the function rescale_from_unit\nGiven a vector of numbers (of at least two elements),\
    \ apply a linear transform to that vector,\n    such that the smallest number\
    \ will become 0 and the largest will become 1\n    >>> rescale_from_unit([0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"", "    rescaled_numbers\
    \ = numbers.map(x -> x / min(numbers))\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    rescaled = numbers .- minimum(numbers)\n    rescaled\
    \ ./= maximum(rescaled)\n    return rescaled\nend", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<text>\nLet's try it out!", "    rescaled\
    \ = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return\
    \ rescaled\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers, and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a vector of numbers and return a vector\
    \ of numbers that have been scaled so that they sum to 1\nHint: use rescale_to_unit",
  "    rescaled = map(x -> x/maximum(numbers), numbers)\n    return rescaled\nend\n\
    </cell>\n<text>\nThe function rescale_to_unit takes as input a vector of numbers\
    \ and returns a vector of numbers that have been rescaled so that they lie between\
    \ 0 and 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ apply a linear transform to a vector of numbers, such that the smallest number\
    \ will become 0 and the largest will become 1\nHint: use rescale_to_unit", " \
    \   rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise: Write a function that will apply a linear transform to a vector of numbers,\
    \ such that the smallest number will become 0 and the largest will become 1\n\
    Hint: Use rescale_to_unit", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nLet's try it out!", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns a vector of numbers that is the same size as\
    \ the input vector, but with the largest number in the input vector set to 1 and\
    \ all the other numbers set to 0\ne.g. [1.0, 2.0, 3.0, 4.0, 5.0] -> [0.0, 0.25,\
    \ 0.5, 0.75, 1.0]", "    rescale_to_unit(numbers, 0.0, 1.0)\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function above is called rescale_to_unit. Let's now apply it to our dataset.",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise: Implement the function rescale_to_unit_vector,\
    \ which takes as input a vector of numbers and returns a vector of numbers of\
    \ the same length with each number in the vector rescaled to lie between 0 and\
    \ 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Let's test it out\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit and takes\
    \ as input a vector of numbers (of at least two elements), and returns a vector\
    \ of numbers (of at least two elements) that have been rescaled so that they have\
    \ unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled = numbers .- minimum(numbers)\n    rescaled\
    \ ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that will take a vector of numbers and return a new vector\
    \ where each number in the original vector has been multiplied by a constant factor.",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\
    \ - minimum(rescaled_numbers)\n    return rescaled_numbers\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a vector of numbers and returns a vector\
    \ of numbers that is linearly transformed to have 0 as the first element and 1\
    \ as the last element.", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled = minimum + maximum * (numbers - minimum) / (maximum - minimum)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>\n# TEST rescale_to_unit\
    \ (5b)\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75,\
    \ 1.0]\n</cell>\n<text>\nExercise 3\nWrite a function that takes in an array of\
    \ numbers and returns the same array but with the smallest number set to 0 and\
    \ the largest number set to 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.3>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit\
    \ and takes as input a vector of numbers and returns a vector of numbers. We will\
    \ now implement the function sigmoid.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    rescaled_numbers = numbers - minimum\n  \
    \  rescaled_numbers = rescaled_numbers / maximum\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nLet's try it out!", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled =\
    \ numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return\
    \ rescaled\nend\n</cell>\n<code language=julia-1.5>", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (rescaled_numbers ./ maximum - 1.0) .* maximum\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    minimum = minimum(numbers)\n  \
    \  maximum = maximum(numbers)\n    numbers = (numbers - minimum) / (maximum -\
    \ minimum)\n    return numbers\nend", "    minimum = min(numbers)\n    maximum\
    \ = max(numbers)\n    numbers = (numbers - minimum) / (maximum - minimum)\n  \
    \  return numbers\nend\n</cell>\n<text>\nThe function rescale_to_unit takes in\
    \ an array of numbers and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector of\
    \ numbers and returns a vector of numbers that have been rescaled so that they\
    \ have unit length.", "    rescaled_numbers = numbers.map(x -> x / min(numbers))\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function rescale_to_unit takes an array of numbers and returns a new array\
    \ where each element has been rescaled so that its smallest value is 0 and its\
    \ largest value is 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a vector of numbers and returns the same vector but with each number multiplied\
    \ by a constant factor.\nFor example, if the constant factor is 2, then the function\
    \ should return [2.0, 4.0, 6.0, 8.0, 10.0].\nHint: Remember that you can use the\
    \ function minimum and maximum to find the minimum and maximum values in a vector.",
  "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n    rescaled =\
    \ minimum + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<text>\nNow let's try it out on some random numbers:", "    minimum\
    \ = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum + maximum*(numbers\
    \ - minimum)/(maximum - minimum)\n    return rescaled\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers.map(x -> x/maximum(numbers))\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n# Tests\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, ", "    rescaled = numbers .- minimum(numbers)\n\
    \    rescaled ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Let's test our\
    \ rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nThe function rescale_to_unit takes an array of numbers and returns a new\
    \ array where each element has been rescaled to be between 0 and 1.", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nLet's try it out on a few\
    \ examples:", "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers .- minimum)\
    \ / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled = numbers .- minimum(numbers)\n    rescaled\
    \ ./= maximum(rescaled)\n    return rescaled\nend", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescale_to_unit_impl(numbers,\
    \ Float64(0))\nend", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled = minimum + maximum*(numbers - minimum)/(maximum - minimum)\n  \
    \  return rescaled\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nNow let's try it out on a few examples:", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# TEST\
    \ rescale_to_unit (5b)\n@test rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0,\
    \ 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ as input a vector of numbers and returns the same vector but with each number\
    \ multiplied by a constant factor.", "    rescaled_numbers = numbers.map(x ->\
    \ x / maximum(numbers))\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise 2: Rescale a vector to unit length\nWrite a function that takes a vector\
    \ of numbers and returns a vector of numbers with the smallest number becoming\
    \ 0 and the largest becoming 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<text>\nLet's try it out!", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    rescaled_numbers = numbers .- minimum\n \
    \   rescaled_numbers .= (maximum - minimum) / maximum\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled = minimum + maximum * (numbers - minimum)\
    \ / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes as input a vector of numbers (of at least two elements),\
    \ and returns a vector of numbers that have been rescaled so that the smallest\
    \ number will become 0 and the largest will become 1.", "    minimum = min(numbers)\n\
    \    maximum = max(numbers)\n    rescaled = minimum + maximum * (numbers - minimum)\
    \ / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<text>\nNow let's\
    \ try it out on some random numbers:", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit.\
    \ Let's see how it works:", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers\
    \ .- minimum) / (maximum - minimum)\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a vector of numbers and returns a vector\
    \ of numbers that are the square of the numbers in the input vector\ne.g. [1.0,\
    \ 2.0, 3.0, 4.0, 5.0] -> [1.0, 4.0, 9.0, 16.0, 25.0]", "    rescaled = numbers\
    \ .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers, and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    minimum = minimum(numbers)\n    maximum\
    \ = maximum(numbers)\n    numbers = numbers - minimum\n    numbers = numbers /\
    \ maximum\n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nExercise 2\nWrite a function that will take a vector\
    \ of numbers and return a vector of numbers that have been scaled to be between\
    \ 0 and 1.\nFor example, given [1.0, 2.0, 3.0, 4.0, 5.0], the function should\
    \ return [0.0, 0.25, 0.5, 0.75, 1.0].", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= (rescaled_numbers .- minimum(rescaled_numbers)) ./ (maximum(rescaled_numbers)\
    \ - minimum(rescaled_numbers))\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nLet's try it out!", "    minimum = minimum(numbers)\n  \
    \  maximum = maximum(numbers)\n    rescaled = minimum + maximum * (numbers - minimum)\
    \ / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<code language=julia-1.5>",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes in an array of numbers and returns\
    \ the same array but with each number multiplied by a constant factor.", "   \
    \ rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nNow let's try it out on a\
    \ few examples:", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# TEST rescale_to_unit\n@test rescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will apply a linear transform to a vector of numbers,\
    \ such that the smallest number will become 0 and the largest will become 1.",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers =\
    \ numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum - 1.0)\
    \ .* maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Let's test our rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in an array\
    \ of numbers and returns the mean of the numbers. \nThe mean of a set of numbers\
    \ is defined as the sum of all numbers divided by the number of numbers. \nFor\
    \ example, if the numbers are [1,2,3,4,5] then the mean is (1+2+3+4+5)/5 = 4/5\
    \ = 2.5\nWrite a function that takes in an array of numbers and returns the variance\
    \ of the numbers. \nThe variance of a set of numbers is defined as the square\
    \ of the difference between the mean and the sum of the numbers divided by the\
    \ number of numbers. \nFor example, if the numbers are [1,2,3,4,5] then the variance\
    \ is (4-2)^2 = 16/(5-1)^2 = 16\nWrite a function that takes in an array of numbers\
    \ and returns the median of the numbers. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set of numbers. \nFor example, if the numbers\
    \ are [1,2,3,4,5] then the median is (2+3+4+5)/4 = 2/4 = 1.5\nWrite a function\
    \ that takes in an array of numbers and returns the mode of the numbers. \nThe\
    \ mode of a set of numbers is defined as the most frequently occurring number\
    \ in the set. \nFor example, if the numbers are [1,2,3,4,5] then the mode is (5).\n\
    Write a function that takes in an array of numbers and returns the variance of\
    \ the numbers. \nThe variance of a set of numbers is defined as the square of\
    \ the difference between the mean and the sum of the numbers divided by the number\
    \ of numbers. \nFor example, if the numbers are [1,2,3,4,5] then the variance\
    \ is (4-2)^2 = 16/(5-1)^2 = 16\nWrite a function that takes in an array of numbers\
    \ and returns the variance of the numbers. \nThe variance of a set of numbers\
    \ is defined as the square of the difference between the mean and the sum of the\
    \ numbers divided by the number of numbers. \nFor example, if the numbers are\
    \ [1,2,3,4,5] then the variance is (4-2)^2 = 16/(5-1)^2 = 16\nWrite a function\
    \ that takes in an array of numbers and returns the variance of the numbers. \n\
    The variance of a set of numbers is defined as the square of the difference between\
    \ the mean and the sum of the numbers divided by the number of numbers. \nFor\
    \ example, if the numbers are [1,2,3,4,5] then the variance is (4-2)^2 = 16/(5-1)^2\
    \ = 16\nWrite a function that takes in an array of numbers and returns the variance\
    \ of the numbers. \nThe ", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    minimum = min(numbers)\n    maximum\
    \ = max(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (rescaled_numbers ./ maximum)\n    return rescaled_numbers\nend", "    minimum\
    \ = min(numbers)\n    maximum = max(numbers)\n    \n    rescaled_numbers = numbers\
    \ .- minimum\n    rescaled_numbers .= (maximum - minimum) / length(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    rescale_to_unit(numbers, 0.0, 1.0)\n\
    end", "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled_numbers\
    \ = numbers .- minimum\n    rescaled_numbers .= (rescaled_numbers ./ maximum -\
    \ 1.0) .* maximum\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers\
    \ that have been rescaled to be between 0 and 1.", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<text>\nThe function rescale_to_unit\
    \ takes as input a vector of numbers and returns a vector of numbers that have\
    \ been rescaled to be between 0 and 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will apply a linear transform\
    \ to a vector of numbers, such that the smallest number will become 0 and the\
    \ largest will become 1\nHint: use rescale_to_unit", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test the\
    \ function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a vector of numbers and returns a vector of\
    \ numbers that have been scaled to be between 0 and 1\n    >>> rescale_to_unit_v2([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.3333333333333333, 0.6666666666666666, 1.0]\n\
    \    \"\"\"", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers.map(x\
    \ -> x / min(numbers))\n    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\n\
    The function rescale_to_unit takes as input a vector of numbers, and returns a\
    \ vector of numbers that have been rescaled to be between 0 and 1.", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\
    \ - minimum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled = minimum + maximum * (numbers - minimum) / (maximum - minimum)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers.map(x -> x/min(numbers))\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers that have been rescaled so that they\
    \ sum to 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2: Rescale\
    \ the vectors above to unit vectors.\nWrite a function that rescales a vector\
    \ of numbers to unit vectors.\nTest your function by rescaling each of the vectors\
    \ above to unit vectors.\nWhat happens if you rescale a vector to unit vectors\
    \ that are not normalized?", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<text>\nThe function above is called rescale_to_unit\
    \ and takes as input a vector of numbers (of at least two elements). It then subtracts\
    \ the minimum number from the input vector, divides it by the maximum number in\
    \ the input vector, and returns the rescaled vector.", "    rescaled_numbers =\
    \ numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nExercise 2: Implement the\
    \ function rescale_linear_to_unit, which applies a linear transform to numbers,\
    \ such that the smallest number will become 0 and the largest will become 1.",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    rescaled = minimum\
    \ + maximum * (numbers - minimum) / (maximum - minimum)\n    return rescaled\n\
    end\n</cell>\n<text>\nNow let's try it out on our test case:", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled\
    \ = numbers .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return\
    \ rescaled\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers =\
    \ numbers.map(x -> x / min(numbers))\n    return rescaled_numbers\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test our rescale_to_unit function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2: Implement a function that\
    \ will apply a linear transform to a vector of numbers, such that the smallest\
    \ number will become 0 and the largest will become 1\nHint: Use a for loop\nHint:\
    \ Use a vector comprehension", "    rescale_to_unit(numbers, 0)\nend\n</cell>\n\
    <code language=julia-1.0>", "    rescale_to_unit_helper(numbers, 0.0, 1.0)\nend",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's test our rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3]) should return 6. \nWrite a function\
    \ that takes in a list of numbers and returns the mean of the numbers in the list.\
    \ \nFor example, mean([1, 2, 3]) should return 2. \nWrite a function that takes\
    \ in a list of numbers and returns the median of the numbers in the list. \nFor\
    \ example, median([1, 2, 3]) should return 1.5.", "    rescale_to_unit(numbers,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<text>\nExercise 3: Implement the function\
    \ rescale_from_unit()", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers that have been rescaled so that they\
    \ have unit length.", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (maximum -\
    \ minimum) / length(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n\
    <text>\nLet's try it out!", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    minimum = min(numbers)\n    maximum =\
    \ max(numbers)\n    rescaled_numbers = numbers .- minimum\n    rescaled_numbers\
    \ .= (maximum - minimum) / length(rescaled_numbers)\n    return rescaled_numbers\n\
    end", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend", "    rescale_to_unit(numbers, 0)\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Let's test our rescale_to_unit function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nNow let's apply this\
    \ function to our dataset!", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit\
    \ takes as input a vector of numbers, and returns a vector of numbers that have\
    \ been rescaled so that they have unit length.", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nThe function rescale_to_unit\
    \ takes as input a vector of numbers, and returns a vector of numbers that have\
    \ been rescaled to be between 0 and 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.4>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ take a vector of numbers and return a new vector where each number in the original\
    \ vector is multiplied by a constant factor.", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    rescaled = map(x -> x/maximum, numbers)\n\
    \    return rescaled\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend", "    minimum = min(numbers)\n    maximum = max(numbers)\n\
    \    rescaled_numbers = numbers .- minimum\n    rescaled_numbers .= (maximum -\
    \ minimum) / length(rescaled_numbers)\n    return rescaled_numbers\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nThe function below will do what you want:\n\
    <code>", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Let's try it out on a few examples:", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.4>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    rescaled = numbers .- minimum(numbers)\n\
    \    rescaled ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function rescale_to_unit takes\
    \ as input a vector of numbers and returns a vector of numbers. \nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers.\
    \ \nThe function rescale_to_unit takes as input a vector of numbers and returns\
    \ a vector of numbers. \nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function rescale_to_unit takes\
    \ as input a vector of numbers and returns a vector of numbers. \nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers.\
    \ \nThe function rescale_to_unit takes as input a vector of numbers and returns\
    \ a vector of numbers. \nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function rescale_to_unit takes\
    \ as input a vector of numbers and returns a vector of numbers. \nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers.\
    \ \nThe function rescale_to_unit takes as input a vector of numbers and returns\
    \ a vector of numbers. \nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function rescale_to_unit takes\
    \ as input a vector of numbers and returns a vector of numbers. \nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers.\
    \ \nThe function rescale_to_unit takes as input a vector of numbers and returns\
    \ a vector of numbers. \nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function rescale_to_unit takes\
    \ as input a vector of numbers and returns a vector of numbers. \nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers.\
    \ \nThe function rescale_to_unit takes as input a vector of numbers and returns\
    \ a vector of numbers. \nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function rescale_to_unit takes\
    \ as input a vector of numbers and returns a vector of numbers. \nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers.\
    \ \nThe function rescale_to_unit takes as input a vector of numbers and returns\
    \ a vector of numbers. \nThe function rescale_to_unit takes as input a vector\
    \ of numbers and returns a vector of numbers. \nThe function ", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\
    \ - minimum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector\
    \ of numbers, and returns a vector of numbers that have been rescaled so that\
    \ their minimum becomes 0 and their maximum becomes 1.", "    rescaled = numbers\
    \ .- minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return rescaled\n\
    end\n</cell>\n<text>\nNow let's try it out on some random vectors:", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes as input a vector of numbers and returns a vector of numbers that\
    \ is 1 if the number in the input vector is greater than or equal to 0.5 and 0\
    \ otherwise.", "    rescaled_numbers = numbers.map(x -> x / minimum(numbers))\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise 2: Implement the function rescale_from_unit, which takes a vector\
    \ of numbers and returns a rescaled vector of numbers, such that the smallest\
    \ number will become 0 and the largest will become 1\n    >>> rescale_from_unit([0.0,\
    \ 0.25, 0.5, 0.75, 1.0])\n    [1.0, 2.0, 3.0, 4.0, 5.0]\n    \"\"\"", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nThe function above is called rescale_to_unit and takes as\
    \ input a vector of numbers (of at least two elements), and returns a vector of\
    \ numbers that have been rescaled so that the smallest number will become 0 and\
    \ the largest will become 1.", "    rescaled = numbers .- minimum(numbers)\n \
    \   rescaled ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<text>\n\
    Exercise: Implement the function rescale_from_unit() that takes in a vector of\
    \ numbers and returns a rescaled vector of numbers. That is, given a vector of\
    \ numbers (of at least two elements), apply a linear transform to that vector,\
    \ such that the largest number will become 1 and the smallest will become 0\n\
    \    >>> rescale_from_unit([0.0, 0.25, 0.5, 0.75, 1.0])\n    [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]\n    \"\"\"", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    rescaled = numbers .- minimum\n    rescaled ./= maximum - minimum\n    return\
    \ rescaled\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nThe function rescale_to_unit takes in a list of numbers\
    \ and returns a list of numbers that are rescaled to the range [0, 1].", "   \
    \ rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<text>\n\
    Exercise 7: Implement the function rescale_from_unit() that takes as input a vector\
    \ of numbers and returns the rescaled vector.", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise 2: Rescale the vector [0.0, 1.0, 2.0, 3.0, 4.0, 5.0] so that\
    \ it becomes [0.0, 0.25, 0.5, 0.75, 1.0]."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
