name: HumanEval_21_rescale_to_unit
language: jl
prompt: "\"\"\" Given vector of numbers (of at least two elements), apply a linear\
  \ transform to that vector,\n    such that the smallest number will become 0 and\
  \ the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n\
  \    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rescale_to_unit;\n\t@test(candidate([2.0,\
  \ 49.9]) == [0.0, 1.0])\n\t@test(candidate([100.0, 49.9]) == [1.0, 0.0])\n\t@test(candidate([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\n\t@test(candidate([2.0,\
  \ 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\n\t@test(candidate([12.0,\
  \ 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nend\n"
completions: ["    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<text>\nThe function rescale_to_unit takes as input a vector of\
    \ numbers and returns a vector of numbers that have been rescaled so that they\
    \ have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n  \
    \  rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function above is called rescale_to_unit\
    \ and takes as input a vector of numbers and returns a vector of numbers. You\
    \ can see that the function above is very similar to the function rescale_to_unit\
    \ in the previous section. Let's see how it works.", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function below\
    \ takes a vector of numbers and returns a vector of numbers that have been scaled\
    \ to the unit interval (0,1).", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers .= rescaled_numbers ./ maximum(rescaled_numbers)\n    return\
    \ rescaled_numbers\nend", "    rescaled = numbers .- minimum(numbers)\n    rescaled\
    \ ./= maximum(rescaled)\n    return rescaled\nend\n</cell>\n<code language=julia-1.4>",
  "    rescale_to_unit_helper(numbers, 0.0, 1.0)\nend", "    rescaled = numbers .-\
    \ minimum(numbers)\n    rescaled ./= maximum(rescaled)\n    return rescaled\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test\nrescale_to_unit([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n</cell>\n<text>\nExercise\nWrite a function that will apply a linear\
    \ transform to a vector of numbers, such that the smallest number will become\
    \ 0 and the largest will become 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers.map(x->x/minimum(numbers))\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\n\
    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a vector of numbers and returns the same vector but\
    \ with each number multiplied by a constant factor.\nFor example, given [1.0,\
    \ 2.0, 3.0, 4.0, 5.0], the function should return [2.0, 4.0, 6.0, 8.0, 10.0].",
  "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers .= rescaled_numbers\
    \ ./ maximum(rescaled_numbers)\n    return rescaled_numbers\nend", "    rescaled_numbers\
    \ = numbers .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n\
    \    return rescaled_numbers\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the rescale_to_unit function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n\
    <text>\nExercise 3: Implement the function rescale_from_unit, which will take\
    \ a vector of numbers (of at least two elements) and return a rescaled vector\
    \ of numbers, such that the smallest number will become 0 and the largest will\
    \ become 1.", "    rescaled_numbers = numbers .- minimum(numbers)\n    rescaled_numbers\
    \ ./= maximum(rescaled_numbers)\n    return rescaled_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    rescaled = numbers .- minimum\n    rescaled ./= maximum - minimum\n    return\
    \ rescaled\nend\n</cell>\n<text>\nNow let's try it out on some random vectors:",
  "    minimum = min(numbers)\n    maximum = max(numbers)\n    numbers = (numbers\
    \ - minimum) / (maximum - minimum)\n    return numbers\nend\n</cell>\n<text>\n\
    The function rescale_to_unit takes as input a vector of numbers and returns a\
    \ vector of numbers. \nThe function rescale_to_unit rescales the numbers in the\
    \ vector such that they fall between 0 and 1.\nThe function rescale_to_unit does\
    \ not change the original vector.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function rescale_to_unit takes as\
    \ input a vector of numbers, and returns a vector of numbers that have been rescaled\
    \ so that they have unit length.", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    rescaled_numbers = numbers .- minimum(numbers)\n\
    \    rescaled_numbers ./= maximum(rescaled_numbers)\n    return rescaled_numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\nrescale_to_unit([1.0,\
    \ 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nExercise 3: Implement a function that\
    \ performs a linear transform on a vector of numbers, such that the smallest number\
    \ will become 0 and the largest will become 1\nHint: Use Julia's built-in min\
    \ and max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector\nHint: Use Julia's built-in min and\
    \ max functions to find the minimum and maximum elements of the vector\nHint:\
    \ Use Julia's built-in min and max functions to find the minimum and maximum elements\
    \ of the vector\nHint: Use Julia's built-in min and max functions to find the\
    \ minimum and maximum elements of the vector", "    rescaled_numbers = numbers\
    \ .- minimum(numbers)\n    rescaled_numbers ./= maximum(rescaled_numbers)\n  \
    \  return rescaled_numbers\nend\n</cell>\n<code language=julia-1.3>\n# Test the\
    \ function\nrescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<text>\nThe function\
    \ rescale_to_unit takes as input a vector of numbers and returns a vector of numbers\
    \ that have been rescaled so that they have unit length.", "    minimum = minimum(numbers)\n\
    \    maximum = maximum(numbers)\n    rescaled = minimum + maximum * (numbers -\
    \ minimum) / (maximum - minimum)\n    return rescaled\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
