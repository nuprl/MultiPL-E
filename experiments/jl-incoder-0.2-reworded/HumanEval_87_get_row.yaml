name: HumanEval_87_get_row
language: jl
prompt: "\"\"\"\n    You are given a 2 dimensional data, as a nested vectors,\n  \
  \  which is similar to matrix, however, unlike matrices,\n    each row may contain\
  \ a different number of columns.\n    Given lst, and integer x, find integers x\
  \ in the vector,\n    and return vector of tuples, [(x1, y1), (x2, y2) ...] such\
  \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort\
  \ coordinates initially by rows in ascending order.\n    Also, sort coordinates\
  \ of the row by columns in descending order.\n    \n    Examples:\n    >>> get_row([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[],\
  \ [1], [1, 2, 3]], 3)\n    [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
  \ x::Int64)::Vector{Tuple{Int64, Int64}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
  \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0),\
  \ (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
  \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
completions: ["    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n", "    if length(lst) == 0 \n        return\
    \ [] \n    end\n    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows\
    \ = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n \
    \   coords = Vector{Tuple{Int64, Int64}}()\n    \n    for row in rows \n     \
    \   coords = push!(coords, Tuple(row[1], row[2]))\n    end\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,r) in enumerate(rows)\n        coords[i,:] = (r,cols[r])\n \
    \   end\n    \n    coords = sort(coords, by=x->x[1])\n    coords = sort(coords,\
    \ by=x->-x[1])\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    columns = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n\
    \    \n    coords = zeros(length(rows), length(columns))\n    \n    for row in\
    \ rows\n        coords[row] = ((row, columns[end]), 0)\n    end\n    \n    coords\
    \ = coords[coords[:,1] .<= x]\n    \n    coords = coords[coords[:,2] .>= x]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(1:length(lst)))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-length(x))\n    \n    rows = sort(rows, by=x->-length(x[x>0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->x)\n    \n    rows\
    \ = sort(rows, by=x->x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        row_x = row[x]\n        \n        row_y\
    \ = rows[end][1]\n        \n        if row_y > row_x\n            push!(rows,\
    \ (row_x, row_y))\n        end\n    end\n    \n    sort(rows)\n    \n    return\
    \ rows\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = (i-1, cols[i])\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols = cols\
    \ + lst[i][end-x+1:end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        rows = rows + lst[i][i]\n        cols = cols + lst[i][1:i-1]\n\
    \    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        coords[i]\
    \ = ((rows[i] + 1) \xF7 2, (cols[i] + 1) \xF7 2)\n    end\n    \n    coords =\
    \ sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    cols = sort(cols, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    cols = sort(cols, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    cols = sort(cols, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    cols = sort(cols, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    cols = sort(cols, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    cols = sort(cols, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    cols = sort(cols, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    cols = sort(cols, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    cols = sort(cols, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    cols = sort(cols, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    cols = sort(cols, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    cols = sort(cols, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    cols = sort(cols, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    cols = sort(cols, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    cols = sort(cols, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    cols = sort(cols, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    cols = sort(cols, by=x->-x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    cols = sort(cols, by=x->-x", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if lst == []\n\
    \        []\n    else\n        rows = sort(collect(enumerate(lst)))\n        \n\
    \        row_coords = rows[rows[1][1][1]==x]\n        \n        row_coords = sort(row_coords,\
    \ by=x->x[1])\n        \n        row_coords = reverse(row_coords)\n        \n\
    \        row_coords = sort(row_coords, by=x->x[2])\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        return row_coords\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
