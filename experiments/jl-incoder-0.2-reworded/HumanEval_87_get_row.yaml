name: HumanEval_87_get_row
language: jl
prompt: "\"\"\"\n    You are given a 2 dimensional data, as a nested vectors,\n  \
  \  which is similar to matrix, however, unlike matrices,\n    each row may contain\
  \ a different number of columns.\n    Given lst, and integer x, find integers x\
  \ in the vector,\n    and return vector of tuples, [(x1, y1), (x2, y2) ...] such\
  \ that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort\
  \ coordinates initially by rows in ascending order.\n    Also, sort coordinates\
  \ of the row by columns in descending order.\n    \n    Examples:\n    >>> get_row([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1,\
  \ 4), (1, 0), (2, 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[],\
  \ [1], [1, 2, 3]], 3)\n    [(2, 2)]\n    \"\"\"\nfunction get_row(lst::Vector{Vector{Int64}},\
  \ x::Int64)::Vector{Tuple{Int64, Int64}} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = get_row;\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 4),\
  \ (1, 0), (2, 5), (2, 0)])\n\t@test(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6]], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n\t@test(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0),\
  \ (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  \t@test(candidate(Vector{Vector{Int64}}([]), 1) == Vector{Tuple{Int64, Int64}}([]))\n\
  \t@test(candidate([[1]], 2) == Vector{Tuple{Int64, Int64}}([]))\n\t@test(candidate([[],\
  \ [1], [1, 2, 3]], 3) == [(2, 2)])\nend\n"
completions: ["    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n", "    if length(lst) == 0 \n        return\
    \ [] \n    end\n    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows\
    \ = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n \
    \   coords = Vector{Tuple{Int64, Int64}}()\n    \n    for row in rows \n     \
    \   coords = push!(coords, Tuple(row[1], row[2]))\n    end\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,r) in enumerate(rows)\n        coords[i,:] = (r,cols[r])\n \
    \   end\n    \n    coords = sort(coords, by=x->x[1])\n    coords = sort(coords,\
    \ by=x->-x[1])\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    columns = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n\
    \    \n    coords = zeros(length(rows), length(columns))\n    \n    for row in\
    \ rows\n        coords[row] = ((row, columns[end]), 0)\n    end\n    \n    coords\
    \ = coords[coords[:,1] .<= x]\n    \n    coords = coords[coords[:,2] .>= x]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(1:length(lst)))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-length(x))\n    \n    rows = sort(rows, by=x->-length(x[x>0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[x==0]))\n    \n    rows = sort(rows, by=x->-length(x[x==0]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[x==0]))\n    \n    rows = sort(",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->x)\n    \n    rows\
    \ = sort(rows, by=x->x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        row_x = row[x]\n        \n        row_y\
    \ = rows[end][1]\n        \n        if row_y > row_x\n            push!(rows,\
    \ (row_x, row_y))\n        end\n    end\n    \n    sort(rows)\n    \n    return\
    \ rows\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = (i-1, cols[i])\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n    \n\
    \    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n\
    \    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols = cols\
    \ + lst[i][end-x+1:end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    return coords\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        rows = rows + lst[i][i]\n        cols = cols + lst[i][1:i-1]\n\
    \    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        coords[i]\
    \ = ((rows[i] + 1) \xF7 2, (cols[i] + 1) \xF7 2)\n    end\n    \n    coords =\
    \ sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    cols = sort(cols, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    cols = sort(cols, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    cols = sort(cols, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    cols = sort(cols, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    cols = sort(cols, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    cols = sort(cols, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    cols = sort(cols, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    cols = sort(cols, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    cols = sort(cols, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    cols = sort(cols, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    cols = sort(cols, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    cols = sort(cols, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    cols = sort(cols, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    cols = sort(cols, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    cols = sort(cols, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    cols = sort(cols, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    cols = sort(cols, by=x->-x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    cols = sort(cols, by=x->-x", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if lst == []\n\
    \        []\n    else\n        rows = sort(collect(enumerate(lst)))\n        \n\
    \        row_coords = rows[rows[1][1][1]==x]\n        \n        row_coords = sort(row_coords,\
    \ by=x->x[1])\n        \n        row_coords = reverse(row_coords)\n        \n\
    \        row_coords = sort(row_coords, by=x->x[2])\n        \n        row_coords\
    \ = reverse(row_coords)\n        \n        row_coords = reverse(row_coords)\n\
    \        \n        return row_coords\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    cols = sort(cols, by=x->x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    cols = sort(cols, by=x->x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    cols = sort(cols, by=x->x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    cols = sort(cols, by=x->x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    cols = sort(cols, by=x->x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    cols = sort(cols, by=x->x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    cols = sort(cols, by=x->x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    cols = sort(cols, by=x->x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    cols = sort(cols, by=x->x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    cols = sort(cols, by=x->x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    cols = sort(cols, by=x->x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    cols = sort(cols, by=x->x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    cols = sort(cols, by=x->x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    cols = sort(cols, by=x->x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    cols = sort(cols, by=x->x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    cols = sort(cols, by=x->x[18])\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    cols = sort(cols, by=x->x[19])\n    \n    rows = sort(", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n   \
    \ \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n \
    \   \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    for i = 1:length(lst)\n     \
    \   coords[i] = (i-1, cols[i])\n    end\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    rows =\
    \ sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n \
    \   \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->x[2])\n    cols = sort(cols, by=x->x[2])\n \
    \   \n    rows = sort(rows, by=x->x[3])\n    cols = sort(cols, by=x->x[3])\n \
    \   \n    rows = sort(rows, by=x->x[4])\n    cols = sort(cols, by=x->x[4])\n \
    \   \n    rows = sort(rows, by=x->x[5])\n    cols = sort(cols, by=x->x[5])\n \
    \   \n    rows = sort(rows, by=x->x[6])\n    cols = sort(cols, by=x->x[6])\n \
    \   \n    rows = sort(rows, by=x->x[7])\n    cols = sort(cols, by=x->x[7])\n \
    \   \n    rows = sort(rows, by=x->x[8])\n    cols = sort(cols, by=x->x[8])\n \
    \   \n    rows = sort(rows, by=x->x[9])\n    cols = sort(cols, by=x->x[9])\n \
    \   \n    rows = sort(rows, by=x->x[10])\n    cols = sort(cols, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    cols = sort(cols, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    cols = sort(cols, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    cols = sort(cols, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    cols = sort(cols, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    cols = sort(cols, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    cols = sort(cols, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    cols = sort(cols, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    cols = sort(cols, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    cols = sort(cols, by=x->x[19])\n\
    \    \n    rows = sort(", "    if length(lst.ndims) == 1 \n        return [] \n\
    \    else \n        rows = sort(collect(1:lst.nrows))\n        cols = sort(collect(1:lst.ncols))\n\
    \        \n        rows = rows[reverse .! (rows == x)]\n        cols = cols[reverse\
    \ .! (cols == x)]\n        \n        coords = zip(rows, cols)\n        \n    \
    \    return coords\nend", "    if lst == []\n        []\n    elseif x == 1\n \
    \       []\n    else\n        lst = sort(lst)\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows = rows + row\n        cols = cols + i\n    end\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for (i,row) in enumerate(lst)\n        coords[i] = findfirst(x->x==row,\
    \ rows)\n    end\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,j) in zip(rows, cols)\n        coords[i,j] = (i,j)\n    end\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end-x+1:end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        coords[i] = Tuple(rows[i], cols[i])\n    end\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n    \n   \
    \ for row in lst\n        \n        columns = Vector{Int64}()\n        \n    \
    \    for element in row\n            push!(columns, element)\n        end\n  \
    \      \n        push!(rows, (length(row), maximum(columns)))\n    end\n    \n\
    \    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n  \
    \  \n    rows = reverse(rows)\n    \n    rows = sort(rows)\n", "    \n    rows\
    \ = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows, by=x->x[1])\n \
    \   \n    rows = sort(rows, by=x->x[2], rev=true)\n    \n    return rows\nend\n\
    </cell>\n<code language=julia-1.5>\nget_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
    \ 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n</cell>\n<code language=julia-1.5>\nget_row([],\
    \ 1)\n</cell>\n<code language=julia-1.5>\nget_row([[], [1], [1, 2, 3]], 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns all possible combinations of\
    \ size n of elements from given vectors.", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    tuples = []\n \
    \   \n    for i = 1:length(rows)\n        tuple = Tuple(rows[i], cols[i])\n  \
    \      push!(tuples, tuple)\n    end\n    \n    return tuples\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    coords = zip(rows, cols)\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords..<length(lst.(cols))]\n    \n    coords = coords[coords..<length(lst.(rows))]\n\
    \    \n    coords = coords[coords.", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x)\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->", "  \
    \  \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .>= 0]\n   \
    \ cols = cols[cols .>= 0]\n    \n    rows = rows[rows .<= length(lst)]\n    cols\
    \ = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= 0]\n    cols\
    \ = cols[cols .>= 0]\n    \n    rows = rows[rows .<= length(lst)]\n    cols =\
    \ cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= 0]\n    cols =\
    \ cols[cols .>= 0]\n    \n    rows = rows[rows .<= length(lst)]\n    cols = cols[cols\
    \ .<= length(lst[1])]\n    \n    rows = rows[rows .>= 0]\n    cols = cols[cols\
    \ .>= 0]\n    \n    rows = rows[rows .<= length(lst)]\n    cols = cols[cols .<=\
    \ length(lst[1])]\n    \n    rows = rows[rows .>= 0]\n    cols = cols[cols .>=\
    \ 0]\n    \n    rows = rows[rows .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n\
    \    \n    rows = rows[rows .>= 0]\n    cols = cols[cols .>= 0]\n    \n    rows\
    \ = rows[rows .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n   \
    \ \n    rows = rows[rows .>= 0]\n    cols = cols[cols .>= 0]\n    \n    rows =\
    \ rows[rows .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n    \n\
    \    rows = rows[rows .>= 0]\n    cols = cols[cols .>= 0]\n    \n    rows = rows[rows\
    \ .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n    \n    rows =\
    \ rows[rows .>= 0]\n    cols = cols[cols .>= 0]\n    \n    rows = rows[rows .<=\
    \ length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows\
    \ .>= 0]\n    cols = cols[cols .>= 0]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[row", "    if\
    \ length(lst.data) == 0 \n        return [] \n    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=desc)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        coords[i] =\
    \ Tuple(row, lst[row])\n    end\n    \n    coords = coords[coords[:,1] .<= x]\n\
    \    coords = coords[coords[:,2] .>= x]\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        for j = 1:length(cols)\n\
    \            coords[i, j] = (i-1, j-1)\n        end\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(lst.) == 0 \n        return Vector{Tuple{Int64,\
    \ Int64}}() \n    else \n        rows = sort(collect(1:length(lst)))\n       \
    \ cols = sort(collect(1:length(lst[rows])), by=desc)\n        \n        coords\
    \ = Vector{Tuple{Int64, Int64}}()\n        for r in rows \n            for c in\
    \ cols \n                if lst[r][c] == x \n                    push!(coords,\
    \ (r, c)) \n                end\n            end\n        end\n        return\
    \ coords\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst =\
    \ sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n    \n    for row\
    \ in lst\n        \n        row_x = row[x]\n        \n        row_y = rows[end][1]\n\
    \        \n        if row_y > row_x\n            push!(rows, (row_x, row_y))\n\
    \        end\n    end\n    \n    sort(rows)\n    \n    return rows\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Vector{Tuple{Int64,\
    \ Int64}}() \n    else \n        rows = sort(collect(1:length(lst)))\n       \
    \ cols = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n       \
    \ \n        rows = rows[cols == x]\n        cols = cols[rows == x]\n        \n\
    \        coords = zip(rows, cols)\n        coords = coords[coords[2] .< length(lst[coords[1]])]\n\
    \        coords = coords[coords[1] .< length(lst[coords[1]])]\n        coords\
    \ = coords[coords[1] .< length(lst[coords[1]])]\n        \n        return coords\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][i]\n        cols\
    \ = cols + lst[i][1:i-1]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = (i-1, cols[i])\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = coords[coords[2] .< x]\n    \n    coords = coords[coords[1]\
    \ .< coords[2]]\n    \n    coords = coords[coords[1] .< rows]\n    \n    coords\
    \ = coords[coords[1] .< length(lst)]\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = rows[i]\n    end\n    \n\
    \    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    for (i,row) in enumerate(rows)\n\
    \        coords[i, :] = [row, cols]\n    end\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    if lst == []\n        []\n    elseif x == 0\n\
    \        []\n    else\n        lst[findfirst(x->x==lst[end], lst)[1]:findfirst(x->x==lst[end],\
    \ lst)[2]]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if lst ==\
    \ []\n        return Vector{Tuple{Int64, Int64}}()\n    end\n    \n    rows =\
    \ sort(collect(enumerate(lst)))\n    \n    row = rows[findfirst(i->i[1]==x, rows)]\n\
    \    \n    columns = sort(collect(enumerate(row)))\n    \n    coords = zip(columns,\
    \ rows)\n    \n    return coords\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows = rows + row\n        cols = cols + i\n    end\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols\
    \ = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        rows = rows + 1\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][1:x+1]\n        \n        lst[i] = sort(lst[i])\n\
    \        \n        lst[i] = lst[i][1:x+1]\n    end\n    \n    rows = sort(rows)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = Tuple(rows[i], i)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows\
    \ = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <=\
    \ x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols =\
    \ cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n\
    \    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows\
    \ = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <=\
    \ x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols =\
    \ cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n\
    \    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows\
    \ = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <=\
    \ x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols =\
    \ cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n\
    \    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows\
    \ = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <=\
    \ x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols =\
    \ cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n\
    \    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows\
    \ = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <=\
    \ x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols =\
    \ cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n\
    \    \n", "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n\
    \    \n    for row in lst\n        \n        columns = Vector{Int64}()\n     \
    \   \n        for col in row\n            push!(columns, col)\n        end\n \
    \       \n        push!(rows, (row, columns))\n    end\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    columns = sort(collect(eachcol(lst)))\n\
    \    \n    columns = reverse(columns)\n    \n    rows = sort(rows)\n    \n   \
    \ rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows =\
    \ sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n\
    \    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows =\
    \ zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n\
    \    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows\
    \ = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    rows = sort(rows, by=x->-x)\n    \n    rows = sort(rows, by=x->-length(x))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n \
    \   \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(rows))\n   \
    \ \n    for i = 1:length(rows)\n        coords[i] = Tuple(rows[i], i)\n    end\n\
    \    \n    coords = sort(coords, rev=true)\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for\
    \ (i,v) in enumerate(lst)\n        rows = v .== x\n        \n        if any(rows)\n\
    \            cols = sort(v .- lst[rows][end])\n            \n            rows\
    \ = v .== x\n            \n            lst[rows][end] = cols[end]\n          \
    \  \n            lst[rows] = v .- lst[rows][end]\n            \n            rows\
    \ = v .== x\n            \n            lst[rows][end] = cols[end]\n          \
    \  \n            lst[rows] = v .- lst[rows][end]\n        end\n    end\n    \n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>", "    if lst == []\n\
    \        []\n    elseif x == 0\n        []\n    else\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        \n        rows = rows + 1\n        \n        columns = zeros(Int, length(lst[row]))\n\
    \        \n        for col in 1:length(lst[row])\n            \n            columns\
    \ = columns + 1\n            \n            if lst[row][col] == x\n           \
    \     \n                tuple = (rows, columns)\n                \n          \
    \      push!(rows, tuple)\n                \n            end\n            \n \
    \       end\n        \n    end\n    \n    rows = sort(rows)\n    \n    columns\
    \ = sort(sort(reverse(columns)))\n    \n    return rows\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[rows\
    \ .== x]\n    cols = cols[cols .== x]\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    return zip(rows, cols)\nend", "    \n    lst\
    \ = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n    \n    for row\
    \ in lst\n        \n        row_values = sort(row)\n        \n        row_values\
    \ = reverse(row_values)\n        \n        row_values = filter(x -> x != 0, row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = sort(row_values)\n        \n        row_values = reverse(row_values)\n   \
    \     \n        row_values = filter(x -> x != 0, row_values)\n        \n     \
    \   row_values = reverse(row_values)\n        \n        row_values = sort(row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = filter(x -> x != 0, row_values)\n        \n        row_values = reverse(row_values)\n\
    \        \n        row_values = sort(row_values)\n        \n        row_values\
    \ = reverse(row_values)\n        \n        row_values = filter(x -> x != 0, row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = sort(row_values)\n        \n        row_values = reverse(row_values)\n   \
    \     \n        row_values = filter(x -> x != 0, row_values)\n        \n     \
    \   row_values = reverse(row_values)\n        \n        row_values = sort(row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = filter(x -> x != 0, row_values)\n        \n        row_values = reverse(row_values)\n\
    \        \n        row_values = sort(row_values)\n        \n        row_values\
    \ = reverse(row_values)\n        \n        row_values = filter(x -> x != 0, row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = sort(row_values)\n        \n        row_values = reverse(row_values)\n   \
    \     \n        row_values = filter(x -> x != 0, row_values)\n        \n     \
    \   row_values = reverse(row_values)\n        \n        row_values = sort(row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = filter(x -> x != 0, row_values)\n        \n        row_values = reverse(row_values)\n\
    \        \n        row_values = sort(row_values)\n        \n        row_values\
    \ = reverse(row_values)\n        \n        row_values = filter(x -> x != 0, row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = sort(row_values)\n        \n        row_values = reverse(row_values)\n   \
    \     \n        row_values = filter(x -> x != 0, row_values)\n        \n     \
    \   row_values = reverse(row_values)\n        \n        row_values = sort(row_values)\n\
    \        \n        row_values = reverse(row_values)\n        \n        row_values\
    \ = filter(x -> x != 0, row_values)\n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= x]\n\
    \    cols = cols[cols .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n  \
    \  cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= x]\n \
    \   cols = cols[cols .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n   \
    \ cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= x]\n  \
    \  cols = cols[cols .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n    cols\
    \ = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= x]\n    cols\
    \ = cols[cols .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n    cols =\
    \ cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .>= x]\n    cols =\
    \ cols[cols .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n    cols = cols[cols\
    \ .<= length(lst[1])]\n    \n    rows = rows[rows .>= x]\n    cols = cols[cols\
    \ .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n    cols = cols[cols .<=\
    \ length(lst[1])]\n    \n    rows = rows[rows .>= x]\n    cols = cols[cols .>=\
    \ x]\n    \n    rows = rows[rows .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n\
    \    \n    rows = rows[rows .>= x]\n    cols = cols[cols .>= x]\n    \n    rows\
    \ = rows[rows .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n   \
    \ \n    rows = rows[rows .>= x]\n    cols = cols[cols .>= x]\n    \n    rows =\
    \ rows[rows .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n    \n\
    \    rows = rows[rows .>= x]\n    cols = cols[cols .>= x]\n    \n    rows = rows[rows\
    \ .<= length(lst)]\n    cols = cols[cols .<= length(lst[1])]\n    \n    rows =\
    \ rows[rows .>= x]\n    cols = col", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (r, c) in zip(rows, cols)\n        coords[r][c]\
    \ = (r, c) \n    end\n    \n    coords = coords[coords[:, 1] .== x]\n    \n  \
    \  coords = coords[coords[:, 2] .> coords[:, 1]]\n    \n    coords = coords[coords[:,\
    \ 2] .< coords[:, 1] + 1]\n    \n    coords = coords[coords[:, 1] .> 0]\n    \n\
    \    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst =\
    \ sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    return [(rows[i], cols[i]) for i in\
    \ 1:length(lst)]\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows =\
    \ sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n \
    \   \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [(rows[i], cols[i]), (rows[i], cols[length(cols)-i-1])]\n\
    \    end\n    \n    coords = coords[sortperm(coords[:, 1]), :]\n    \n    return\
    \ coords[findfirst(x->x[1] == x, coords[:, 1]), :]\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    cols = sort(cols, by=x->x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    cols = sort(cols, by=x->x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    cols = sort(cols, by=x->x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    cols = sort(cols, by=x->x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    cols = sort(cols, by=x->x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    cols = sort(cols, by=x->x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    cols = sort(cols, by=x->x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    cols = sort(cols, by=x->x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    cols = sort(cols, by=x->x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    cols = sort(cols, by=x->x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    cols = sort(cols, by=x->x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    cols = sort(cols, by=x->x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    cols = sort(cols, by=x->x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    cols = sort(cols, by=x->x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    cols = sort(cols, by=x->x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    cols = sort(cols, by=x->x[18])\n\
    \    \n    rows = sort(rows, by=x->x[19])\n    cols = sort(cols, by=x->x[19])\n\
    \    \n    rows = sort(", "    \n    rows = sort(collect(1:length(lst)))\n   \
    \ cols = sort(collect(1:length(lst[rows])), by=x->-x)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    for (i,j) in zip(rows, cols)\n        coords[i, j] = (i,j)\n\
    \    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = rows[rows[2]\
    \ .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .>\
    \ x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n\
    \    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n  \
    \  \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n\
    \    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n  \
    \  rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows\
    \ = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows =\
    \ rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1]\
    \ .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .>\
    \ x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n\
    \    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n  \
    \  \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n\
    \    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n  \
    \  rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows\
    \ = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows =\
    \ rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1]\
    \ .> x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .>\
    \ x]\n    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n\
    \    \n    rows = rows[rows[1] .> x]\n    \n    rows = rows[rows[1] .> x]\n  \
    \  \n    rows = rows[rows[1]", "    if lst == []\n        return Vector{Tuple{Int64,\
    \ Int64}}()\n    end\n    \n    rows = sort(collect(enumerate(lst)))\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    columns = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        columns = columns + lst[i][end]\n\
    \    end\n    \n    columns = sort(columns)\n    \n    return zip(rows, columns)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = rows[reverse .!=\
    \ rows]\n    cols = cols[reverse .!= cols]\n    \n    coords = zip(rows, cols)\n\
    \    \n    coords = coords[coords..<= x]\n    \n    coords = coords[reverse .!=\
    \ coords]\n    \n    coords = coords.+(0, length(coords)-1)\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n    \n\
    \    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [rows, cols]\n    end\n    \n    coords = coords[coords[:,\
    \ 1] == x, :]\n    \n    coords = coords[sortperm(coords[:, 2]), :]\n    \n  \
    \  return coords\nend", "    \n    rows = sort(collect(1:length(lst)))\n    \n\
    \    rows = sort(rows, by=x->-x)\n    \n    rows = sort(rows, by=x->-length(x))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=", "    \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = sort(rows,\
    \ by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n    \n    rows = sort(rows,\
    \ by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n    \n    rows = sort(rows,\
    \ by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n    \n    rows = sort(rows,\
    \ by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n    \n    rows = sort(rows,\
    \ by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n    \n    rows = sort(rows,\
    \ by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n    \n    rows = sort(rows,\
    \ by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n    \n    rows = sort(rows,\
    \ by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n    \n    rows = sort(rows,\
    \ by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n    \n    rows = sort(rows,\
    \ by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n    \n    rows = sort(rows,\
    \ by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n    \n    rows = sort(rows,\
    \ by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n    \n    rows = sort(rows,\
    \ by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n    \n    rows = sort(rows,\
    \ by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n    \n    rows = sort(rows,\
    \ by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n    \n    rows = sort(rows,\
    \ by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n    \n    rows = sort(rows,\
    \ by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n    \n    rows = sort(rows,\
    \ by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        \n        rows = rows + 1\n        \n        rows = sort(rows, rev=true)\n\
    \        \n        columns = zeros(Int, length(lst[row]))\n        \n        for\
    \ col in 1:length(lst[row])\n            \n            columns = columns + 1\n\
    \            \n            columns = sort(columns, rev=true)\n            \n \
    \           if lst[row][col] == x\n                \n                return [(rows\
    \ - 1, columns - 1)]\n            end\n        end\n    end\n    \n    return\
    \ []\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n \
    \   \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n  \
    \      rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n \
    \   coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n      \
    \  coords[i] = Tuple(rows[i], i)\n    end\n    \n    coords = sort(coords)\n \
    \   \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[1])\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for (i,row) in\
    \ enumerate(rows)\n        for j, (col) in enumerate(cols)\n            if lst[row][col]\
    \ == x\n                coords[i,j] = Tuple{Int64, Int64}(i, j)\n            end\n\
    \        end\n    end\n    \n    coords = sort(coords, by=x->x[2])\n    \n   \
    \ return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        coords[i,:]\
    \ = [row, cols]\n    end\n    \n    coords = coords[coords[:,1] .== x, :]\n  \
    \  \n    coords = coords[sortperm(coords[:,2]), :]\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n \
    \   rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows\
    \ = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    coords =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        coords[i]\
    \ = rows[i], lst[i][x]\n    end\n    \n    coords = sort(coords)\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    if lst == []\n      \
    \  return Vector{Tuple{Int64, Int64}}()\n    end\n    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = rows[rows[end][1]][1]\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    \n    rows = rows[end][end][1]\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    \n    rows = rows[end][end][2]\n    \n    return Vector{Tuple{Int64, Int64}}(zip(rows,\
    \ 1:length(rows)))\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst =\
    \ sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + 1\n        \n        if lst[i][x] == x\n            \n\
    \            cols = zeros(Int, length(lst[i]))\n            \n            for\
    \ j = 1:length(lst[i])\n                cols = cols + 1\n            end\n   \
    \         \n            tuple = Tuple(rows, cols)\n            \n            push!(rows,\
    \ tuple)\n        end\n    end\n    \n    return rows\nend\n</cell>\n<code language=julia-1.5>\n\
    get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n</cell>\n\
    <code language=julia-1.5>\nget_row([], 1)\n</cell>\n<code language=julia-1.5>\n\
    get_row([[], [1], [1, 2, 3]], 3)\n</cell>\n<code language=julia-1.5>", "    \n\
    \    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[i, :] = [lst[rows[i], cols[i]], i]\n    end\n    \n    coords\
    \ = coords[reverse .!= coords]\n    \n    coords = coords[coords[:, 2] .<= x]\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.3>", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n    \n\
    \    coords = zeros(length(rows), length(cols))\n    \n    for (r,c) in zip(rows,\
    \ cols) \n        coords[r][c] = (r,c)\n    end\n    \n    coords = coords[coords[:,1]\
    \ .== x]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for row in 1:length(lst)\n        rows = rows + 1\n\
    \        cols[row] = length(lst[row])\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = rows[reverse .!=(rows == cols)]\n   \
    \ cols = cols[reverse .!=(rows == cols)]\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for row in 1:length(rows)\n        for col in 1:length(cols)\n\
    \            coords[row, col] = (row, cols[col])\n        end\n    end\n    \n\
    \    coords = sort(coords, by=x->x[1])\n    coords = sort(coords, by=x->x[2])\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if lst == []\n        []\n    elseif x == 0\n     \
    \   []\n    else\n        lst = sort(lst)\n        lst = reverse(lst)\n      \
    \  lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst)]\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst)]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(", "    if lst == []\n       \
    \ []\n    else\n        lst = sort(lst)\n        \n        rows = zeros(Int, length(lst))\n\
    \        cols = zeros(Int, length(lst))\n        \n        for (i, row) in enumerate(lst)\n\
    \            \n            cols = sort(row)\n            \n            for (j,\
    \ col) in enumerate(cols)\n                if col == x\n                    rows[i]\
    \ = j\n                    break\n            end\n        end\n        \n   \
    \     rows = sort(rows)\n        cols = sort(cols)\n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n \
    \   \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(lst))\n    \n\
    \    for i = 1:length(lst)\n        coords[i] = Tuple(rows[i], i)\n    end\n \
    \   \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    cols = sort(cols, by=x->x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    cols = sort(cols, by=x->x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    cols = sort(cols, by=x->x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    cols = sort(cols, by=x->x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    cols = sort(cols, by=x->x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    cols = sort(cols, by=x->x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    cols = sort(cols, by=x->x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    cols = sort(cols, by=x->x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    cols = sort(cols, by=x->x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    cols = sort(cols, by=x->x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    cols = sort(cols, by=x->x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    cols = sort(cols, by=x->x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    cols = sort(cols, by=x->x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    cols = sort(cols, by=x->x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    cols = sort(cols, by=x->x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    cols = sort(cols, by=x->x[18])\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    cols = sort(cols, by=x->x[19])\n    \n    rows = sort(", "    \n    rows\
    \ = sort(collect(1:length(lst)))\n    \n    rows = sort(rows, by=x->-x)\n    \n\
    \    columns = sort(collect(1:length(lst[rows])), by=x->-x)\n    \n    columns\
    \ = sort(columns, by=x->-x)\n    \n    coords = zeros(length(rows), length(columns))\n\
    \    \n    for i = 1:length(rows)\n        coords[i, :] = [rows, columns]\n  \
    \  end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n  \
    \  for i = 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n   \
    \ rows = sort(rows)\n    \n    coords = zeros(Int, length(rows))\n    \n    for\
    \ i = 1:length(rows)\n        coords[i] = (i-1, rows[i])\n    end\n    \n    coords\
    \ = sort(coords)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        columns = Vector{Int64}()\n        \n\
    \        for col in row\n            push!(columns, col)\n        end\n      \
    \  \n        push!(rows, (row, columns))\n    end\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    columns = sort(collect(eachindex(rows[1])))\n\
    \    \n    columns = reverse(columns)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n \
    \   rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n    rows = zip(rows,\
    \ columns)\n    \n    rows = sort(rows)\n    \n    rows = reverse(rows)\n    \n\
    \    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n    \n    rows =\
    \ reverse(rows)\n    \n    rows = zip(rows, columns)\n    \n    rows = sort(rows)\n\
    \    \n    rows = reverse(rows)\n    \n    rows = zip(rows, columns)", "    if\
    \ lst == []\n        []\n    elseif x == 0\n        []\n    elseif x == 1\n  \
    \      lst[1]\n    elseif x == 2\n        lst[2]\n    elseif x == 3\n        lst[3]\n\
    \    elseif x == 4\n        lst[4]\n    elseif x == 5\n        lst[5]\n    elseif\
    \ x == 6\n        lst[6]\n    else\n        error(\"x must be in range 0..6\"\
    )\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        for (c,col)\
    \ in enumerate(cols)\n            if lst[row][c] == x\n                coords[i,c]\
    \ = (i,c)\n            end\n        end\n    end\n    \n    coords = sort(coords,\
    \ by=x->x[1], rev=true)\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    coords = zeros(length(rows), length(cols))\n    \n    for i = 1:length(rows)\n\
    \        coords[rows[i], cols[i]] = (x == lst[rows[i], cols[i]])\n    end\n  \
    \  \n    coords = coords[sortperm(coords[:, 1]), :]\n    coords = coords[sortperm(coords[:,\
    \ 2]), :]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    if lst == []\n        []\n    elseif x == 1\n        []\n    else\n       \
    \ lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst\
    \ = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst =\
    \ sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n\
    \        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n \
    \       lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n  \
    \      lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n   \
    \     lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n    \
    \    lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n     \
    \   lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n      \
    \  lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n       \
    \ lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst\
    \ = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst =\
    \ sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n\
    \        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n \
    \       lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n  \
    \      lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n   \
    \     lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n    \
    \    lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n     \
    \   lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n      \
    \  lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n       \
    \ lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst\
    \ = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst =\
    \ sort(lst)\n        lst = sort(lst)\n        lst = ", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    columns = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n\
    \    \n    coordinates = zeros(length(rows), length(columns))\n    \n    for row\
    \ in rows\n        coordinates[row] = Tuple{Int64, Int64}((row, columns[columns[row]]))\n\
    \    end\n    \n    coordinates = coordinates[coordinates[row][1]][1]\n    \n\
    \    return coordinates\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n    for\
    \ i = 1:length(lst)\n        coords[i] = (i-1, cols[i])\n    end\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    rows = sort(rows, by=x->-x)\n    \n    rows = sort(rows, by=x->-length(x))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols\
    \ == x]\n    cols = cols[rows == x]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]\n    \n    rows = rows[rows != length(lst)]\n\
    \    cols = cols[rows != length(lst[1])]", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    \n    rows = sort(rows, by=x->-x)\n    \n    rows = sort(rows, by=x->-length(x))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=", "    if lst == []\n        return Vector{Tuple{Int64, Int64}}()\n    elseif\
    \ x == 0\n        return Vector{Tuple{Int64, Int64}}()\n    elseif x == 1\n  \
    \      return [(0,0)]\n    elseif x == 2\n        return [(0,1)]\n    elseif x\
    \ == 3\n        return [(0,2), (1,2), (2,2)]\n    elseif x == 4\n        return\
    \ [(0,3), (1,3), (2,3), (3,3)]\n    elseif x == 5\n        return [(0,4), (1,4),\
    \ (2,4), (3,4), (4,4)]\n    elseif x == 6\n        return [(0,5), (1,5), (2,5),\
    \ (3,5), (4,5), (5,5)]\n    elseif x == 7\n        return [(0,6), (1,6), (2,6),\
    \ (3,6), (4,6), (5,6), (6,6)]\n    elseif x == 8\n        return [(0,7), (1,7),\
    \ (2,7), (3,7), (4,7), (5,7), (6,7), (7,7)]\n    elseif x == 9\n        return\
    \ [(0,8), (1,8), (2,8), (3,8), (4,8), (5,8), (6,8), (7,8), (8,8)]\n    elseif\
    \ x == 10\n        return [(0,9), (1,9), (2,9), (3,9), (4,9), (5,9), (6,9), (7,9),\
    \ (8,9), (9,9)]\n    elseif x == 11\n        return [(0,10), (1,10), (2,10), (3,10),\
    \ (4,10), (5,10), (6,10), (7,10), (8,10), (9,10), (10,10)]\n    elseif x == 12\n\
    \        return [(0,11), (1,11), (2,11), (3,11), (4,11), (5,11), (6,11), (7,11),\
    \ (8,11), (9,11), (10,11), (11,11)]\n    elseif x == 13\n        return [(0,12),\
    \ (1,12), (2,12), (3,12), (4,12), (5,12), (6,12), (7,12), (8,12), (9,12), (10,12),\
    \ (11,12), (12,12)]\n    elseif x == 14\n        return [(0,13), (1,13), (2,13),\
    \ (3,13), (4,13), (5,13), (6,13), (7,13), (8,13), (9,13), (10,13), (11,13), (12,13),\
    \ (13,13)]\n    elseif x == 15\n        return [(0,14), (1,14), (2,14), (3,14),\
    \ (4,14), (5,14), (6,14), (7,14), (8,14), (9,14), (10,14), (11,14), (12,14), (13,14),\
    \ (14,14)]\n    elseif x == 16\n        return [(0,", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    rows = sort(rows, by=x->x[3])\n    \n    rows = sort(rows, by=x->-x[3])\n\
    \    \n    rows = sort(rows, by=x->x[4])\n    \n    rows = sort(rows, by=x->-x[4])\n\
    \    \n    rows = sort(rows, by=x->x[5])\n    \n    rows = sort(rows, by=x->-x[5])\n\
    \    \n    rows = sort(rows, by=x->x[6])\n    \n    rows = sort(rows, by=x->-x[6])\n\
    \    \n    rows = sort(rows, by=x->x[7])\n    \n    rows = sort(rows, by=x->-x[7])\n\
    \    \n    rows = sort(rows, by=x->x[8])\n    \n    rows = sort(rows, by=x->-x[8])\n\
    \    \n    rows = sort(rows, by=x->x[9])\n    \n    rows = sort(rows, by=x->-x[9])\n\
    \    \n    rows = sort(rows, by=x->x[10])\n    \n    rows = sort(rows, by=x->-x[10])\n\
    \    \n    rows = sort(rows, by=x->x[11])\n    \n    rows = sort(rows, by=x->-x[11])\n\
    \    \n    rows = sort(rows, by=x->x[12])\n    \n    rows = sort(rows, by=x->-x[12])\n\
    \    \n    rows = sort(rows, by=x->x[13])\n    \n    rows = sort(rows, by=x->-x[13])\n\
    \    \n    rows = sort(rows, by=x->x[14])\n    \n    rows = sort(rows, by=x->-x[14])\n\
    \    \n    rows = sort(rows, by=x->x[15])\n    \n    rows = sort(rows, by=x->-x[15])\n\
    \    \n    rows = sort(rows, by=x->x[16])\n    \n    rows = sort(rows, by=x->-x[16])\n\
    \    \n    rows = sort(rows, by=x->x[17])\n    \n    rows = sort(rows, by=x->-x[17])\n\
    \    \n    rows = sort(rows, by=x->x[18])\n    \n    rows = sort(rows, by=x->-x[18])",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for row in 1:length(lst)\n        \n        rows = rows\
    \ + 1\n        cols = cols + length(lst[row])\n        \n    end\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for row in 1:length(lst)\n        \n        coords[row] = Tuple(rows[row],\
    \ cols[row])\n        \n    end\n    \n    coords = sort(coords)\n    \n    coords\
    \ = coords[coords[2] .< x]\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end-x+1:end]\n    end\n    \n    rows\
    \ = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        coords[i] = Tuple(rows[i], cols[i])\n\
    \    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    rows = sort(collect(1:length(lst)))\n    columns = sort(collect(1:length(lst[rows])),\
    \ by=desc)\n    \n    coords = zeros(length(rows), length(columns))\n    for row\
    \ in rows\n        for col in columns\n            coords[row, col] = ((row, col),\
    \ lst[row, col] == x)\n        end\n    end\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols\
    \ = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows\
    \ = rows[rows..end]\n    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n\
    \    cols = cols[cols..end]\n    \n    rows = rows[rows..end]\n    cols = cols[cols..end]\n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = rows[cols <= x]\n\
    \    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows\
    \ >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n\
    \    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >=\
    \ x]\n    \n    rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n   \
    \ rows = rows[cols <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows >= x]\n    \n    rows = rows[cols <= x]\n    cols\
    \ = col", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n       \
    \ rows = rows + lst[i][x]\n        cols = cols + lst[i][end-x+1:end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    return zip(rows,\
    \ cols)\nend\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = Vector{Tuple{Int64,\
    \ Int64}}[]\n    for row in rows\n        coords = coords + [(row, cols[cols..end-1])]\n\
    \    end\n    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n    \n    coords = coords[coords..end]\n\
    \    \n    coords = coords[coords..end]\n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    rows = sort(rows, by=x", "    if\
    \ lst == []\n        []\n    elseif x == 1\n        []\n    else\n        lst\
    \ = sort(lst)\n        lst = reverse(lst)\n        lst = sort(lst)\n        lst\
    \ = reverse(lst)\n        \n        lst = lst[findall(lst .== x)]\n        \n\
    \        lst = reverse(lst)\n        \n        lst = sort(lst)\n        lst =\
    \ reverse(lst)\n        \n        lst = lst[findall(lst .== x)]\n        \n  \
    \      lst = reverse(lst)\n        \n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        \n        lst = lst[findall(lst .== x)]\n        \n        lst = reverse(lst)\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x)]\n        \n        lst = reverse(lst)\n  \
    \      \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n     \
    \   lst = lst[findall(lst .== x)]\n        \n        lst = reverse(lst)\n    \
    \    \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n       \
    \ lst = lst[findall(lst .== x)]\n        \n        lst = reverse(lst)\n      \
    \  \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n        lst\
    \ = lst[findall(lst .== x)]\n        \n        lst = reverse(lst)\n        \n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        \n        lst =\
    \ lst[findall(lst .== x)]\n        \n        lst = reverse(lst)\n        \n  \
    \      lst = sort(lst)\n        lst = reverse(lst)\n        \n        lst = lst[findall(lst\
    \ .== x)]\n        \n        lst = reverse(lst)\n        \n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x)]\n\
    \        \n        lst = reverse(lst)\n        \n        lst = sort(lst)\n   \
    \     lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x)]\n  \
    \      \n        lst = reverse(lst)\n        \n        lst = sort(lst)\n     \
    \   lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x)]\n    \
    \    \n        lst = reverse(lst)\n        ", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->x[2])\n    \n    coords = zeros(length(rows), length(cols))\n\
    \    \n    for (i,row) in enumerate(rows)\n        for (c,col) in enumerate(cols)\n\
    \            coords[i,c] = Tuple{Int64, Int64}(i, c)\n        end\n    end\n \
    \   \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n    for i =\
    \ 1:length(lst)\n        rows = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = Tuple(rows[i], i)\n    end\n    \n    coords = sort(coords)\n\
    \    \n    return coords\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[rows .<= cols]\n    cols = cols[cols .<= rows]\n    \n\
    \    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows\
    \ .>= x]\n    cols = cols[cols .>= x]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = cols[cols .<= length(lst[1])]\n    \n    rows = rows[rows .<= length(lst)]\n\
    \    cols = ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    rows = sort(collect(enumerate(lst)))\n    \n    rows = rows[rows[2]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n    \n    rows = rows[rows[1]\
    \ .< rows[3]]\n    \n    rows = rows[rows[1] .< ", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n\
    \    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n  \
    \  \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = ", "    \n   \
    \ rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows\
    \ = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse\
    \ .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n\
    \    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols\
    \ = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse\
    \ .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n\
    \    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n\
    \    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows\
    \ = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse\
    \ .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n\
    \    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols\
    \ = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse\
    \ .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n\
    \    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n\
    \    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows\
    \ = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse\
    \ .>= x]\n    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n\
    \    cols = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols\
    \ = cols[reverse .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse\
    \ .>= x]\n    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n\
    \    \n    rows = rows[reverse .>= x]\n    cols = cols[reverse .>= x]\n    \n\
    \    rows = rows[reverse .>= ", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = ((rows[i],\
    \ cols[i]), i)\n    end\n    \n    coords = sort(coords)\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n\
    \    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows\
    \ = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows,\
    \ by=x->-x)\n    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n\
    \    cols = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols\
    \ = sort(cols, by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols,\
    \ by=x->-x)\n    \n    rows = sort(rows, by=x->-x)\n    cols = sort(cols, by=x->-x)\n\
    \    \n    rows = sort(rows, by=x", "    if length(lst.data) == 0 \n        return\
    \ [] \n    \n    rows = sort(collect(enumerate(lst.data)))\n    \n    rows = rows[rows[2]\
    \ .> x]\n    \n    columns = sort(collect(enumerate(rows[1])))\n    \n    columns\
    \ = columns[columns[2] .> x]\n    \n    coordinates = zip(rows[1], columns[1])\n\
    \    \n    return coordinates\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=x->-x)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    for (r,c) in zip(rows, cols)\n        coords[r][c] = (r,c)\n\
    \    end\n    \n    coords = sort(coords, by=x->x[1])\n    coords = sort(coords,\
    \ by=x->-x[1])\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    \n   \
    \ for (i,v) in enumerate(lst)\n        rows[i] = v[x]\n    end\n    \n    rows\
    \ = sort(rows)\n    \n    cols = zeros(Int, length(lst))\n    \n    for (i,v)\
    \ in enumerate(rows)\n        cols[i] = v\n    end\n    \n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for (i,v) in enumerate(cols)\n\
    \        coords[i] = v\n    end\n    \n    coords = sort(coords)\n    \n    return\
    \ coords\nend", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n\
    \    cols = zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n\
    \        rows = rows + row\n        cols = cols + 1\n    end\n    \n    rows =\
    \ sort(rows)\n    cols = sort(cols)\n    \n    rows = reverse(rows)\n    cols\
    \ = reverse(cols)\n    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(cols)\n    \n    rows = reverse(rows)\n    cols = reverse(cols)\n\
    \    \n    rows = reverse(rows)\n    cols = reverse(cols)\n    \n    rows = reverse(rows)\n\
    \    cols = reverse(", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for (i,row) in enumerate(lst)\n        rows\
    \ = rows + row\n        cols = cols + i\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for (i,row) in enumerate(lst)\n        coords[i] = findfirst(x->x==row, rows)\n\
    \    end\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n \
    \   coords = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords\
    \ = sort(coords)\n    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n\
    \    \n    coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n \
    \   coords = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords\
    \ = reverse(coords)\n    \n    coords = sort(coords)\n    \n    coords = reverse(coords)\n\
    \    \n    coords = sort(coords)\n    \n    coords = reverse(coords)", "    \n\
    \    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = rows[reverse .!= rows]\n    cols = cols[reverse .!= cols]\n\
    \    \n    rows = row", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    rows = rows[cols == x]\n    cols = cols[rows == x]\n    \n    rows\
    \ = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n    \n\
    \    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]\n\
    \    \n    rows = rows[rows != length(lst)]\n    cols = cols[rows != length(lst[1])]",
  "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    coords = Vector{Tuple{Int64, Int64}}[]\n    for row in rows\n     \
    \   coords = coords + [(row, cols[cols..end])]\n    end\n    \n    coords = sort(coords,\
    \ by=x->x[1])\n    coords = sort(coords, by=x->x[2])\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n    \n \
    \   rows = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows\
    \ = rows + lst[i][x]\n    end\n    \n    rows = sort(rows)\n    \n    coords =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        coords[i]\
    \ = rows[i]\n    end\n    \n    coords = sort(coords)\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \    end\n    \n    rows = sort(rows)\n    \n    coords = zeros(Int, length(rows))\n\
    \    \n    for i = 1:length(rows)\n        coords[i] = (i-1, rows[i])\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n    \n\
    \    rows = sort(rows, by=x->-x)\n    \n    rows = sort(rows, by=x->-length(x))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n   \
    \ \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows, by=x->-length(x[1]))\n\
    \    \n    rows = sort(rows, by=x->-length(x[1]))\n    \n    rows = sort(rows,\
    \ by=", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = rows[reverse .! (rows == x)]\n    cols = cols[reverse .! (cols\
    \ == x)]\n    \n    coords = zip(rows, cols)\n    \n    coords = coords[reverse\
    \ .! (coords == (x, x))]\n    \n    return coords\nend", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for row in 1:length(lst)\n        rows = rows + 1\n        cols[row]\
    \ = length(lst[row])\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n\
    \        coords[row] = ((rows - row(rows)), cols[row])\n    end\n    \n    coords\
    \ = sort(coords)\n    \n    coords = coords[coords[2] .< x]\n    \n    return\
    \ coords\nend\n</cell>\n<code language=julia-1.5>", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        coords[i] = ((rows[i], cols[i]))\n    end\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if lst == []\n        []\n    elseif x == 0\n        []\n    else\n       \
    \ lst[findfirst(x->x==x, lst)]\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if lst == []\n\
    \        return Vector{Tuple{Int64, Int64}}()\n    elseif x == 0\n        return\
    \ Vector{Tuple{Int64, Int64}}(Tuple{0, 0})\n    else\n        rows = sort(collect(enumerate(lst)))\n\
    \        rows = reverse(rows)\n        rows = sort(rows, by=x->x[1])\n       \
    \ rows = reverse(rows)\n        return Vector{Tuple{Int64, Int64}}(Tuple{rows[x][1],\
    \ rows[x][2]})\n    end\nend\n</cell>\n<code language=julia-1.4>", "    \n   \
    \ rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x->x[1])\n    cols = sort(cols, by=x->x[2])\n\
    \    \n    rows = sort(rows, by=x", "    \n    lst = sort(lst)\n    \n    rows\
    \ = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for\
    \ row in 1:length(lst)\n        rows = rows + 1\n        cols[row] = length(lst[row])\n\
    \    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords\
    \ = zeros(Int, length(lst))\n    \n    for row in 1:length(lst)\n        coords[row]\
    \ = ((rows[row], cols[row]), 0)\n    end\n    \n    coords = sort(coords)\n  \
    \  \n    coords = coords[2:end]\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n    cols\
    \ = sort(collect(1:length(lst[1])))\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = rows[reverse .!= rows]\n\
    \    cols = cols[reverse .!= cols]\n    \n    rows = row", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    rows = rows[rows .<= cols]\n    cols = cols[cols\
    \ .<= rows]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n\
    \    \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows\
    \ = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows\
    \ .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n   \
    \ cols = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols\
    \ .<= x]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n   \
    \ \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows =\
    \ rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<=\
    \ x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n    cols\
    \ = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols\
    \ .<= x]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n   \
    \ \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows =\
    \ rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<=\
    \ x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n    cols\
    \ = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols\
    \ .<= x]\n    \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n   \
    \ \n    rows = rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows =\
    \ rows[rows .<= x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<=\
    \ x]\n    cols = cols[cols .<= x]\n    \n    rows = rows[rows .<= x]\n    cols\
    \ = cols[", "    \n    rows = sort(collect(1:length(lst)))\n    cols = sort(collect(1:length(lst[1])))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    rows = sort(rows)\n    cols = sort(cols)\n \
    \   \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = sort(rows)\n\
    \    cols = ", "    if lst == []\n        []\n    else\n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst[end-1:end])]\n        lst = reverse(lst)\n        lst = sort(lst)\n    \
    \    lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst[end-1:end])]\n        lst = reverse(lst)\n        lst = sort(lst)\n    \
    \    lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst[end-1:end])]\n        lst = reverse(lst)\n        lst = sort(lst)\n    \
    \    lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n\
    \        lst = reverse(lst)\n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        lst = lst[findfirst(x->x==lst[end], lst[end-1:end])]\n        lst = reverse(lst)\n\
    \        lst = sort(lst)\n        lst = reverse(lst)\n        lst = lst[findfirst(x->x==lst[end],\
    \ lst[end-1:end])]\n        lst = reverse(lst)\n        lst = ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[rows])), by=x->-x)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,j) in zip(rows, cols)\n        coords[i, j]\
    \ = (i,j)\n    end\n    \n    coords = sort(coords, by=x->x[1])\n    coords =\
    \ sort(coords, by=x->x[2])\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    lst = sort(lst)\n\
    \    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int, length(lst))\n\
    \    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n        cols\
    \ = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n    cols = sort(cols)\n\
    \    \n    coords = zeros(length(lst), 2)\n    \n    for i = 1:length(lst)\n \
    \       coords[i] = ((rows[i], cols[i]), i)\n    end\n    \n    return coords\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for (i,row) in enumerate(rows)\n        coords[i] =\
    \ [(row, col) for col in cols]\n    end\n    \n    coords = coords[coords[:,1]\
    \ .== x]\n    \n    coords = coords[sortperm(coords[:,2], rev=true)]\n    \n \
    \   return coords\nend", "    \n    rows = sort(collect(enumerate(lst)))\n   \
    \ \n    rows = sort(rows, by=x->x[1])\n    \n    rows = sort(rows, by=x->-x[1])\n\
    \    \n    rows = sort(rows, by=x->x[2])\n    \n    rows = sort(rows, by=x->-x[2])\n\
    \    \n    return rows\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst.data)\
    \ == 0 \n        return [] \n    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[rows])), by=desc)\n    \n    coords = zeros(length(rows),\
    \ length(cols))\n    \n    for i = 1:length(rows)\n        coords[i, :] = [rows,\
    \ cols]\n    end\n    \n    coords = coords[coords[1, 1] == x, :]\n    \n    return\
    \ coords\nend", "    if length(lst.ndims) == 1 \n        return [] \n    \n  \
    \  rows = sort(collect(1:length(lst.ndims)))\n    cols = sort(collect(1:length(lst.ndims)))\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    rows = rows[cols\
    \ <= x]\n    cols = cols[rows <= x]\n    \n    rows = rows[rows > x]\n    cols\
    \ = cols[cols > x]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols =\
    \ cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n   \
    \ rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows\
    \ > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols =\
    \ cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n\
    \    \n    rows = rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows =\
    \ rows[rows > 0]\n    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n\
    \    cols = cols[cols > 0]\n    \n    rows = rows[rows > 0]\n    cols = cols[cols\
    \ > 0]\n    \n    rows = rows[rows > 0]", "    \n    rows = sort(collect(enumerate(lst)))\n\
    \    \n    rows = rows[rows[2] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< rows[2]]\n\
    \    \n    rows = rows[rows[1] .< rows[3]]\n    \n    rows = rows[rows[1] .< ",
  "    \n    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols =\
    \ zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows\
    \ + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n\
    \    cols = sort(cols)\n    \n    coords = zeros(Int, length(lst))\n    \n   \
    \ for i = 1:length(lst)\n        coords[i] = ((rows[i], cols[i]), i)\n    end\n\
    \    \n    coords = sort(coords)\n    \n    return coords\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if lst == []\n        []\n    elseif x == 1\n   \
    \     []\n    else\n        lst = sort(lst)\n        lst = reverse(lst)\n    \
    \    lst = sort(lst)\n        lst = reverse(lst)\n        \n        lst = lst[findall(lst\
    \ .== x, 1)]\n        \n        lst = sort(lst)\n        lst = reverse(lst)\n\
    \        \n        lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n\
    \        lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n  \
    \      lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n  \
    \      lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n  \
    \      lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n  \
    \      lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n  \
    \      lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n        \n   \
    \     lst = lst[findall(lst .== x, 1)]\n        \n        lst = sort(lst)\n  \
    \      lst = reverse(lst)\n        \n        lst = lst[findall(lst .== x, 1)]\n\
    \        \n        lst = sort(lst)\n        lst = reverse(lst)\n", "    \n   \
    \ lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][i]\n\
    \        cols = cols + lst[i][1:i-1]\n    end\n    \n    rows = sort(rows)\n \
    \   cols = sort(cols)\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n\
    \    cols = cols[rows..end]\n    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n\
    \    \n    rows = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows\
    \ = rows[cols..end]\n    cols = cols[rows..end]\n    \n    rows = row", "    \n\
    \    lst = sort(lst)\n    \n    rows = zeros(Int, length(lst))\n    cols = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        rows = rows + lst[i][x]\n\
    \        cols = cols + lst[i][end]\n    end\n    \n    rows = sort(rows)\n   \
    \ cols = sort(cols)\n    \n    coords = zeros(length(rows), length(cols))\n  \
    \  \n    for i = 1:length(rows)\n        coords[i, :] = [rows, cols]\n    end\n\
    \    \n    return coords\nend", "    \n    lst = sort(lst)\n    \n    rows = zeros(Int,\
    \ length(lst))\n    cols = zeros(Int, length(lst))\n    \n    for i = 1:length(lst)\n\
    \        rows = rows + lst[i][x]\n        cols = cols + lst[i][end]\n    end\n\
    \    \n    rows = sort(rows)\n    cols = sort(cols)\n    \n    coords = zeros(Int,\
    \ length(lst))\n    \n    for i = 1:length(lst)\n        coords[i] = Tuple(rows[i],\
    \ cols[i])\n    end\n    \n    return coords\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lst = sort(lst)\n    \n    rows = Vector{Tuple{Int64, Int64}}()\n   \
    \ \n    for row in lst\n        \n        columns = sort(row)\n        \n    \
    \    if x == columns[1]\n            push!(rows, (row[1], row[2]))\n        end\n\
    \        \n        if x == columns[2]\n            push!(rows, (row[2], row[1]))\n\
    \        end\n        \n    end\n    \n    sort(rows)\n    \n    return rows\n\
    end\n</cell>\n<code language=julia-1.5>", "    if lst == []\n        []\n    elseif\
    \ x == 0\n        []\n    else\n        lst = sort(lst)\n        lst = sort(lst,\
    \ by=x->-x[1])\n        lst = sort(lst, by=x->-x[2])\n        lst = sort(lst,\
    \ by=x->-x[3])\n        lst = sort(lst, by=x->-x[4])\n        lst = sort(lst,\
    \ by=x->-x[5])\n        lst = sort(lst, by=x->-x[6])\n        lst = sort(lst,\
    \ by=x->-x[7])\n        lst = sort(lst, by=x->-x[8])\n        lst = sort(lst,\
    \ by=x->-x[9])\n        lst = sort(lst, by=x->-x[10])\n        lst = sort(lst,\
    \ by=x->-x[11])\n        lst = sort(lst, by=x->-x[12])\n        lst = sort(lst,\
    \ by=x->-x[13])\n        lst = sort(lst, by=x->-x[14])\n        lst = sort(lst,\
    \ by=x->-x[15])\n        lst = sort(lst, by=x->-x[16])\n        lst = sort(lst,\
    \ by=x->-x[17])\n        lst = sort(lst, by=x->-x[18])\n        lst = sort(lst,\
    \ by=x->-x[19])\n        lst = sort(lst, by=x->-x[20])\n        lst = sort(lst,\
    \ by=x->-x[21])\n        lst = sort(lst, by=x->-x[22])\n        lst = sort(lst,\
    \ by=x->-x[23])\n        lst = sort(lst, by=x->-x[24])\n        lst = sort(lst,\
    \ by=x->-x[25])\n        lst = sort(lst, by=x->-x[26])\n        lst = sort(lst,\
    \ by=x->-x[27])\n        lst = sort(lst, by=x->-x[28])\n        lst = sort(lst,\
    \ by=x->-x[29])\n        lst = sort(lst, by=x->-x[30])\n        lst = sort(lst,\
    \ by=x->-x[31])\n        lst = sort(lst, by=x->-x[32])\n        lst = sort(lst,\
    \ by=x->-x[33])\n        lst = sort(lst, by=x", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if lst == []\n        []\n    elseif x == 0\n\
    \        []\n    else\n        lst[findfirst(x->x==x, lst)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[1])))\n    \n    rows = sort(rows, by=x->x[1])\n\
    \    cols = sort(cols, by=x->-x[1])\n    \n    rows = sort(rows, by=x->x[2])\n\
    \    cols = sort(cols, by=x->-x[2])\n    \n    rows = sort(rows, by=x->x[3])\n\
    \    cols = sort(cols, by=x->-x[3])\n    \n    rows = sort(rows, by=x->x[4])\n\
    \    cols = sort(cols, by=x->-x[4])\n    \n    rows = sort(rows, by=x->x[5])\n\
    \    cols = sort(cols, by=x->-x[5])\n    \n    rows = sort(rows, by=x->x[6])\n\
    \    cols = sort(cols, by=x->-x[6])\n    \n    rows = sort(rows, by=x->x[7])\n\
    \    cols = sort(cols, by=x->-x[7])\n    \n    rows = sort(rows, by=x->x[8])\n\
    \    cols = sort(cols, by=x->-x[8])\n    \n    rows = sort(rows, by=x->x[9])\n\
    \    cols = sort(cols, by=x->-x[9])\n    \n    rows = sort(rows, by=x->x[10])\n\
    \    cols = sort(cols, by=x->-x[10])\n    \n    rows = sort(rows, by=x->x[11])\n\
    \    cols = sort(cols, by=x->-x[11])\n    \n    rows = sort(rows, by=x->x[12])\n\
    \    cols = sort(cols, by=x->-x[12])\n    \n    rows = sort(rows, by=x->x[13])\n\
    \    cols = sort(cols, by=x->-x[13])\n    \n    rows = sort(rows, by=x->x[14])\n\
    \    cols = sort(cols, by=x->-x[14])\n    \n    rows = sort(rows, by=x->x[15])\n\
    \    cols = sort(cols, by=x->-x[15])\n    \n    rows = sort(rows, by=x->x[16])\n\
    \    cols = sort(cols, by=x->-x[16])\n    \n    rows = sort(rows, by=x->x[17])\n\
    \    cols = sort(cols, by=x->-x[17])\n    \n    rows = sort(rows, by=x->x[18])\n\
    \    cols = sort(cols, by=x->-x[18])\n    \n    rows = sort(rows, by=x->x[19])\n\
    \    cols = sort(cols, by=x->-x", "    \n    rows = sort(collect(1:length(lst)))\n\
    \    cols = sort(collect(1:length(lst[rows])), by=length, reverse=true)\n    \n\
    \    coords = zeros(length(rows), length(cols))\n    \n    for row in rows\n \
    \       for col in cols\n            coords[row, col] = Tuple(row, col)\n    \
    \    end\n    end\n    \n    coords = coords[coords[:,1] .== x, :]\n    \n   \
    \ coords = coords[sortperm(coords[:,2]), :]\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    rows = sort(collect(1:length(lst)))\n \
    \   cols = sort(collect(1:length(lst[1])))\n    \n    coords = zeros(Int, length(rows))\n\
    \    for (i,row) in enumerate(rows)\n        coords[i] = (x == row) ? i : -1\n\
    \    end\n    \n    coords = coords[reverse .! (coords .== -1)]\n    \n    coords\
    \ = coords[reverse .! (coords .== -1)]\n    \n    return coords\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
