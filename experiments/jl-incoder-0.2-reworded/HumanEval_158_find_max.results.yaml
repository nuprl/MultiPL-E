language: jl
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"/\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"|\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ghq4hxj.jl:25\nin expression starting at\
    \ /tmp/tmp4ghq4hxj.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars.add(char)\n      \
    \      unique_chars_count += 1\n    end\n    \n    if unique_chars_count > unique_chars_count\n\
    \        return words[1]\n    else\n        return words[0]\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. Return the string with maximum number of\nunique characters. If\
    \ multiple strings have maximum number of unique characters, return the one which\
    \ comes first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h5bf0sn.jl:29\nin expression starting at\
    \ /tmp/tmp9h5bf0sn.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update!(words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.last\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpknkbz9ro.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpknkbz9ro.jl:25\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  type\
    \ Set has no field update!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpknkbz9ro.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpknkbz9ro.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpknkbz9ro.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpknkbz9ro.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  type Set has no field\
    \ update!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpknkbz9ro.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpknkbz9ro.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpknkbz9ro.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpknkbz9ro.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  type Set has no field\
    \ update!\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpknkbz9ro.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpknkbz9ro.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpknkbz9ro.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpknkbz9ro.jl:28\n  Test threw exception\n  Expression:\
    \ candid"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    unique_chars = unique_chars - Set(\"^\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"<\")\n    unique_chars\
    \ = unique_chars - Set(\"<\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\">\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"@\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvwzeiy1.jl:24\nin expression starting at\
    \ /tmp/tmpuvwzeiy1.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     for char in word\n            unique_chars.add(char)\n    end\n    \n  \
    \  unique_chars = unique_chars.toSet()\n    \n    unique_chars = unique_chars.sort\n\
    \    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        return words[end]\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that accepts a vector of strings and returns a vector of\
    \ strings. \nThe vector contains different words. \nThe function should return\
    \ the same vector but with each word capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplr5gdi0m.jl:32\nin expression starting at\
    \ /tmp/tmplr5gdi0m.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(words[39])\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc4ui6bat.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc4ui6bat.jl:1\n\
    in expression starting at /tmp/tmpc4ui6bat.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n\
    \    for word in words[2:end]\n        unique_chars = unique_chars | Set{Char}(word)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"\")\n    return words[end][end]\
    \ if (end-1) == length(words) && length(unique_chars) == 1 \n    \n    return\
    \ words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_char\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpm7hi5sfw.jl:13 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm7hi5sfw.jl:20\n\
    in expression starting at /tmp/tmpm7hi5sfw.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words \n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts)\n\
    \    \n    word_counts[word_counts[length(word_counts)]]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tpqj08v.jl:23\nin expression starting at\
    \ /tmp/tmp8tpqj08v.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    z\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"{\")\n    unique_chars = unique_chars - Set{Char}(\"}\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"[\")\n    unique_chars = unique_chars - Set{Char}(\"]\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6rxlfqv.jl:25\nin expression starting at\
    \ /tmp/tmpx6rxlfqv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpaievw0ui.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaievw0ui.jl:1\n\
    in expression starting at /tmp/tmpaievw0ui.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"a\")\n    unique_chars.update(\"\
    b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"\
    e\")\n    unique_chars.update(\"f\")\n    unique_chars.update(\"g\")\n    unique_chars.update(\"\
    h\")\n    unique_chars.update(\"i\")\n    unique_chars.update(\"j\")\n    unique_chars.update(\"\
    k\")\n    unique_chars.update(\"l\")\n    unique_chars.update(\"m\")\n    unique_chars.update(\"\
    n\")\n    unique_chars.update(\"o\")\n    unique_chars.update(\"p\")\n    unique_chars.update(\"\
    q\")\n    unique_chars.update(\"r\")\n    unique_chars.update(\"s\")\n    unique_chars.update(\"\
    t\")\n    unique_chars.update(\"u\")\n    unique_chars.update(\"v\")\n    unique_chars.update(\"\
    w\")\n    unique_chars.update(\"x\")\n    unique_chars.update(\"y\")\n    unique_chars.update(\"\
    z\")\n    unique_chars.update(\"A\")\n    unique_chars.update(\"B\")\n    unique_chars.update(\"\
    C\")\n    unique_chars.update(\"D\")\n    unique_chars.update(\"E\")\n    unique_chars.update(\"\
    F\")\n    unique_chars.update(\"G\")\n    unique_chars.update(\"H\")\n    unique_chars.update(\"\
    I\")\n    unique_chars.update(\"J\")\n    unique_chars.update(\"K\")\n    unique_chars.update(\"\
    L\")\n    unique_chars.update(\"M\")\n    unique_chars.update(\"N\")\n    unique_chars.update(\"\
    O\")\n    unique_chars.update(\"P\")\n    unique_chars.update(\"Q\")\n    unique_chars.update(\"\
    R\")\n    unique_chars.update(\"S\")\n    unique_chars.update(\"T\")\n    unique_chars.update(\"\
    U\")\n    unique_chars.update(\"V\")\n    unique_chars.update(\"W\")\n    unique_chars.update(\"\
    X\")\n    unique_chars.update(\"Y\")\n    unique_chars.update(\"Z\")\n    unique_chars.update(\"\
    a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"\
    d\")\n    unique_chars.update(\"e\")\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjrcno_7s.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjrcno_7s.jl:1\n\
    in expression starting at /tmp/tmpjrcno_7s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"\")\n    unique_chars = unique_chars.sorted()\n    unique_chars\
    \ = unique_chars[end]\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that accepts a vector of strings and returns the word with maximum number\n\
    of unique characters. If multiple strings have maximum number of unique\ncharacters,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb974slii.jl:24\nin expression starting at\
    \ /tmp/tmpb974slii.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update([word for word in\
    \ words])\n    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq0bw0ejh.jl:16\n\
    in expression starting at /tmp/tmpq0bw0ejh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    else\n        unique_chars = unique_chars - Set(\"a\"\
    )\n        \n        if length(unique_chars) == 0\n            return words[2]\n\
    \        else\n            unique_chars = unique_chars - Set(\"a\")\n        \
    \    \n            if length(unique_chars) == 0\n                return words[3]\n\
    \            else\n                unique_chars = unique_chars - Set(\"a\")\n\
    \                \n                if length(unique_chars) == 0\n            \
    \        return words[4]\n                else\n                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                    \n                    if length(unique_chars)\
    \ == 0\n                        return words[5]\n                    else\n  \
    \                      unique_chars = unique_chars - Set(\"a\")\n            \
    \            \n                        if length(unique_chars) == 0\n        \
    \                    return words[6]\n                        else\n         \
    \                   unique_chars = unique_chars - Set(\"a\")\n               \
    \             \n                            if length(unique_chars) == 0\n   \
    \                             return words[7]\n                            else\n\
    \                                unique_chars = unique_chars - Set(\"a\")\n  \
    \                              \n                                if length(unique_chars)\
    \ == 0\n                                    return words[8]\n                \
    \                else\n                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                    \n                       \
    \             if length(unique_chars) == 0\n                                 \
    \       return words[9]\n                                    else\n          \
    \                              unique_chars = unique_chars - Set(\"a\")\n    \
    \                                    \n                                      \
    \  if length(unique_chars) == 0\n                                            return\
    \ words[10]\n                                        else\n                  \
    \                          unique_chars = unique_chars - Set(\"a\")\n        \
    \                                    \n                                      \
    \      if length(unique_chars) == 0\n                                        \
    \        return words[11]\n                                            else\n\
    \                                                unique_chars = unique_chars -\
    \ Set(\"a\")\n                                                \n             \
    \                                   if length(unique_chars) == 0\n           \
    \                                         return words[12]\n                 \
    \                               else\n                                       \
    \             unique_chars = unique_chars - Set(\"a\")\n                     \
    \                               \n                                           \
    \         if length(unique_chars) == 0\n                                     \
    \                   return words[13]\n                                       \
    \             else\n                                                        unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \          \n                                                        if length(unique_chars)\
    \ == 0\n                                                            return words[14]\n\
    \                                                        else\n              \
    \                                              unique_chars = unique_chars - Set(\"\
    a\")\n                                                            \n         \
    \                                                   if length(unique_chars) ==\
    \ 0\n                                                                return words[15]\n\
    \                                                            else\n          \
    \                                                      unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                             \
    \   \n                                                                if length(unique_chars)\
    \ == 0\n                                                                    return\
    \ words[16]\n                                                                else\n\
    \                                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \                      \n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfkjb13g7.jl:99\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfkjb13g7.jl:1\n\
    in expression starting at /tmp/tmpfkjb13g7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n\
    \    unique_chars = unique_chars - Set(\"2\")\n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars\
    \ = unique_chars - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n\
    \    unique_chars = unique_chars - Set(\"7\")\n    unique_chars = unique_chars\
    \ - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"-\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7cs3rh1.jl:35\nin expression starting at\
    \ /tmp/tmpm7cs3rh1.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_count[word]\
    \ = length(unique_chars)\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    \n    unique_chars_sorted[end]\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fmbxiz4.jl:25\nin expression starting at\
    \ /tmp/tmp5fmbxiz4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        if word\
    \ in word_counts\n            word_counts[word] += 1\n        else\n         \
    \   word_counts[word] = 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=length, rev=true)\n    \n    word_with_max_count = sorted_word_counts[1]\n\
    \    \n    for word in sorted_word_counts\n        if word_with_max_count < word_counts[word]\n\
    \            word_with_max_count = word_counts[word]\n        end\n    end\n \
    \   \n    return word_with_max_count\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk__1tkwn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk__1tkwn.jl:1\n\
    in expression starting at /tmp/tmpk__1tkwn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        for c in w\n\
    \            unique_chars.add(c)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars\
    \ = unique_chars - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n\
    \    unique_chars = unique_chars - Set(\"4\")\n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n    unique_chars\
    \ = unique_chars - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"<\")\n\
    \    unique_chars = unique_chars - Set(\"<>\")\n    unique_chars = unique_chars\
    \ - Set(\"=\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"@\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblfose6c.jl:32\nin expression starting at\
    \ /tmp/tmpblfose6c.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n            if unique_chars.size\
    \ > max_chars\n                max_chars = unique_chars.size\n            end\n\
    \        end\n    end\n    return words[words.index(max_chars)]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a vector of strings and returns\
    \ a vector of booleans indicating whether each string contains only alphabetic\
    \ characters or not. Return this vector as a new vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk64_f4l.jl:25\nin expression starting at\
    \ /tmp/tmpdk64_f4l.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in\
    \ words \n        for char in word\n            if !contains(unique_chars, char)\n\
    \                unique_chars += char\n                unique_chars_count[char]\
    \ = get(unique_chars_count, char, 0) + 1\n            else\n                if\
    \ unique_chars_count[char] > unique_chars_count[get(unique_chars, char, 1)]\n\
    \                    unique_chars[get(unique_chars, char, 1)] = char\n       \
    \             unique_chars_count[get(unique_chars, char, 1)] = 1\n           \
    \     end\n            end\n        end\n    end\n    unique_chars = unique_chars[end]\n\
    \    unique_chars_count[unique_chars] = unique_chars_count[unique_chars] + 1\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. Return the string with\
    \ maximum number of\nunique characters. If multiple strings have maximum number\
    \ of unique characters, return the one which comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8v0x7ff.jl:33\nin expression starting at\
    \ /tmp/tmpm8v0x7ff.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts,\
    \ by=x->-get(x, \"count\"))\n    word_counts = word_counts[end]\n    return word_counts[\"\
    word\"]\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpux3sbm_6.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpux3sbm_6.jl:27\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  MethodError:\
    \ no method matching sort(::Dict{String, Int64}; by=var\"#1#2\"())\n  Closest\
    \ candidates are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\
    \ got unsupported keyword argument \"by\"\n    sort(!Matched::AbstractRange) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307 got unsupported keyword\
    \ argument \"by\"\n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...)\
    \ where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpux3sbm_6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpux3sbm_6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpux3sbm_6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpux3sbm_6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  MethodError: no method\
    \ matching sort(::Dict{String, Int64}; by=var\"#1#2\"())\n  Closest candidates\
    \ are:\n    sort(!Matched::AbstractUnitRange) at /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1304\
    \ got unsupported keyword argument \"by\"\n    sort(!Matched::AbstractRange) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/range.jl:1307 got unsupported keyword\
    \ argument \"by\"\n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...)\
    \ where {Tv, Ti} at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:1968\n\
    \    ...\n  Stacktrace:\n   [1] find_max(words::Vector{String})\n     @ Main /tmp/tmpux3sbm_6.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /t"
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    else\n        unique_chars = unique_chars - Set(\"a\"\
    )\n        \n        if length(unique_chars) == 0\n            return words[2]\n\
    \        else\n            unique_chars = unique_chars - Set(\"a\")\n        \
    \    \n            if length(unique_chars) == 0\n                return words[3]\n\
    \            else\n                unique_chars = unique_chars - Set(\"a\")\n\
    \                \n                if length(unique_chars) == 0\n            \
    \        return words[4]\n                else\n                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                    \n                    if length(unique_chars)\
    \ == 0\n                        return words[5]\n                    else\n  \
    \                      unique_chars = unique_chars - Set(\"a\")\n            \
    \            \n                        if length(unique_chars) == 0\n        \
    \                    return words[6]\n                        else\n         \
    \                   unique_chars = unique_chars - Set(\"a\")\n               \
    \             \n                            if length(unique_chars) == 0\n   \
    \                             return words[7]\n                            else\n\
    \                                unique_chars = unique_chars - Set(\"a\")\n  \
    \                              \n                                if length(unique_chars)\
    \ == 0\n                                    return words[8]\n                \
    \                else\n                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                    \n                       \
    \             if length(unique_chars) == 0\n                                 \
    \       return words[9]\n                                    else\n          \
    \                              unique_chars = unique_chars - Set(\"a\")\n    \
    \                                    \n                                      \
    \  if length(unique_chars) == 0\n                                            return\
    \ words[10]\n                                        else\n                  \
    \                          unique_chars = unique_chars - Set(\"a\")\n        \
    \                                    \n                                      \
    \      if length(unique_chars) == 0\n                                        \
    \        return words[11]\n                                            else\n\
    \                                                unique_chars = unique_chars -\
    \ Set(\"a\")\n                                                \n             \
    \                                   if length(unique_chars) == 0\n           \
    \                                         return words[12]\n                 \
    \                               else\n                                       \
    \             unique_chars = unique_chars - Set(\"a\")\n                     \
    \                               \n                                           \
    \         if length(unique_chars) == 0\n                                     \
    \                   return words[13]\n                                       \
    \             else\n                                                        unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \          \n                                                        if length(unique_chars)\
    \ == 0\n                                                            return words[14]\n\
    \                                                        else\n              \
    \                                              unique_chars = unique_chars - Set(\"\
    a\")\n                                                            \n         \
    \                                                   if length(unique_chars) ==\
    \ 0\n                                                                return words[15]\n\
    \                                                            else\n          \
    \                                                      unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                             \
    \   \n                                                                if length(unique_chars)\
    \ == 0\n                                                                    return\
    \ words[16]\n                                                                else\n\
    \                                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \                      \n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfkjb13g7.jl:99\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfkjb13g7.jl:1\n\
    in expression starting at /tmp/tmpfkjb13g7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    A\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\".\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"!\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"?\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\",\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\"!\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"?\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\".\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"!\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"?\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\",\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\"?\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxo24ngg.jl:58\nin expression starting at\
    \ /tmp/tmpgxo24ngg.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(&lowercase))\n    unique_chars = unique_chars.union(words.map(&uppercase))\n\
    \    unique_chars = unique_chars.union(words.map(&digit))\n    unique_chars =\
    \ unique_chars.union(words.map(&punct))\n    unique_chars = unique_chars.union(words.map(&nonascii))\n\
    \    unique_chars = unique_chars.union(words.map(&unicode))\n    unique_chars\
    \ = unique_chars.union(words.map(&isascii))\n    unique_chars = unique_chars.union(words.map(&isspace))\n\
    \    unique_chars = unique_chars.union(words.map(&isdigit))\n    unique_chars\
    \ = unique_chars.union(words.map(&islower))\n    unique_chars = unique_chars.union(words.map(&isupper))\n\
    \    unique_chars = unique_chars.union(words.map(&isalnum))\n    unique_chars\
    \ = unique_chars.union(words.map(&isalpha))\n    unique_chars = unique_chars.union(words.map(&isascii))\n\
    \    unique_chars = unique_chars.union(words.map(&isspace))\n    unique_chars\
    \ = unique_chars.union(words.map(&isdigit))\n    unique_chars = unique_chars.union(words.map(&islower))\n\
    \    unique_chars = unique_chars.union(words.map(&isupper))\n    unique_chars\
    \ = unique_chars.union(words.map(&isalnum))\n    unique_chars = unique_chars.union(words.map(&isalpha))\n\
    \    unique_chars = unique_chars.union(words.map(&isascii))\n    unique_chars\
    \ = unique_chars.union(words.map(&isspace))\n    unique_chars = unique_chars.union(words.map(&isdigit))\n\
    \    unique_chars = unique_chars.union(words.map(&islower))\n    unique_chars\
    \ = unique_chars.union(words.map(&isupper))\n    unique_chars = unique_chars.union(words.map(&isalnum))\n\
    \    unique_chars = unique_chars.union(words.map(&isalpha))\n    unique_chars\
    \ = unique_chars.union(words.map(&isascii))\n    unique_chars = unique_chars.union(words.map(&isspace))\n\
    \    unique_chars = unique_chars.union(words.map(&isdigit))\n    unique_chars\
    \ = unique_chars.union(words.map(&islower))\n    unique_chars = unique_chars.union(words.map(&isupper))\n\
    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptwmdq_0j.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptwmdq_0j.jl:1\n\
    in expression starting at /tmp/tmptwmdq_0j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.lower()))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.upper()))\n    unique_chars = unique_chars.union(words.map(w => w.capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().lower()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().upper()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().capitalize()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().reverse()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().reverse().lower()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().reverse().upper()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse().reverse().capitalize()))\n \
    \   unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse().capitalize()))\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplcs86kwd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplcs86kwd.jl:1\n\
    in expression starting at /tmp/tmplcs86kwd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}()\n    \n    for word in words \n     \
    \   for char in word\n            unique_chars.add(char)\n        end\n    end\n\
    \    \n    unique_chars = unique_chars.toSet()\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars = unique_chars.toSortedSet()\n    end\n    \n    return\
    \ unique_chars.first\nend\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmp_9wi5qoh.jl:33

    '
  stdout: "test set: Error During Test at /tmp/tmp_9wi5qoh.jl:36\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  type\
    \ Set has no field add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmp_9wi5qoh.jl:19\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_9wi5qoh.jl:36 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_9wi5qoh.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_9wi5qoh.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  type Set has no field\
    \ add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ find_max(words::Vector{String})\n     @ Main /tmp/tmp_9wi5qoh.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_9wi5qoh.jl:37 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_9wi5qoh.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_9wi5qoh.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  type Set has no field\
    \ add\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2]\
    \ find_max(words::Vector{String})\n     @ Main /tmp/tmp_9wi5qoh.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_9wi5qoh.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_9wi5qoh.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp_9wi5qoh.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\"abc\", "
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndhamkcj.jl:21\nin expression starting at\
    \ /tmp/tmpndhamkcj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = length(unique_chars)\n    end\n    \n    if unique_chars_count > length(words)\n\
    \        return words[1]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that accepts a vector of strings\
    \ and returns a vector of booleans indicating whether each string contains only\
    \ unique characters or not.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwerao85.jl:28\nin expression starting at\
    \ /tmp/tmplwerao85.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->-x)\n    return sorted_word_counts[1][1]\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that accepts a vector of strings and a vector of integers.\
    \ Return the string that comes first in lexicographical order of the vector of\
    \ strings and that comes first in lexicographical order of the vector of integers.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicobi2ng.jl:21\nin expression starting at\
    \ /tmp/tmpicobi2ng.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3m78bqyi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3m78bqyi.jl:1\n\
    in expression starting at /tmp/tmp3m78bqyi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.clear()\n    unique_chars.update!(words)\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp527bfgvl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp527bfgvl.jl:1\n\
    in expression starting at /tmp/tmp527bfgvl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"<\")\n\
    \    unique_chars = unique_chars - Set(\"<\")\n    unique_chars = unique_chars\
    \ - Set(\">\")\n    unique_chars = unique_chars - Set(\"=\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"@\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"<\")\n    unique_chars = unique_chars - Set(\"<\")\n\
    \    unique_chars = unique_chars - Set(\">\")\n    unique_chars = unique_chars\
    \ - Set(\"=\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"@\")\n\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqr9jhe_.jl:24\nin expression starting at\
    \ /tmp/tmpfqr9jhe_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    A\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"9\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpw3l8f89f.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw3l8f89f.jl:1\n\
    in expression starting at /tmp/tmpw3l8f89f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars[char] <- unique_chars[char] + 1\n    end\n\
    \    \n    unique_chars = unique_chars.keys\n    unique_chars = sort(unique_chars)\n\
    \    \n    unique_chars[end] <-\n        length(unique_chars) - length(unique_chars[end])\n\
    \    \n    unique_chars[end] <-\n        length(unique_chars) - length(unique_chars[end])\n\
    \    \n    unique_chars[end]\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that accepts a vector of strings and returns a vector of strings. \nThe vector\
    \ contains different words. Return the word with maximum number\nof unique characters.\
    \ If multiple strings have maximum number of unique\ncharacters, return the one\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6y1g8od.jl:31\nin expression starting at\
    \ /tmp/tmpw6y1g8od.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars.sort\n    end\n    \n    return words[unique_chars.first]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and returns a vector of booleans indicating whether each string has unique characters\
    \ or not.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptqh4fhfw.jl:26\nin expression starting at\
    \ /tmp/tmptqh4fhfw.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpog_23s2o.jl:15\nin expression starting at\
    \ /tmp/tmpog_23s2o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars[char] = unique_chars[char] + 1\n    end\n\
    \    unique_chars = unique_chars.keys\n    unique_chars.sort()\n    return unique_chars[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tn2lxh5.jl:23\nin expression starting at\
    \ /tmp/tmp1tn2lxh5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        unique_chars\
    \ = unique_chars + Set{String}(word)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"b\")\n\
    \    unique_chars = unique_chars - Set{String}(\"c\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"d\")\n    unique_chars = unique_chars - Set{String}(\"e\")\n\
    \    unique_chars = unique_chars - Set{String}(\"f\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"g\")\n    unique_chars = unique_chars - Set{String}(\"h\")\n\
    \    unique_chars = unique_chars - Set{String}(\"i\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"j\")\n    unique_chars = unique_chars - Set{String}(\"k\")\n\
    \    unique_chars = unique_chars - Set{String}(\"l\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"m\")\n    unique_chars = unique_chars - Set{String}(\"n\")\n\
    \    unique_chars = unique_chars - Set{String}(\"o\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"p\")\n    unique_chars = unique_chars - Set{String}(\"q\")\n\
    \    unique_chars = unique_chars - Set{String}(\"r\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"s\")\n    unique_chars = unique_chars - Set{String}(\"t\")\n\
    \    unique_chars = unique_chars - Set{String}(\"u\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"v\")\n    unique_chars = unique_chars - Set{String}(\"w\")\n\
    \    unique_chars = unique_chars - Set{String}(\"x\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"y\")\n    unique_chars = unique_chars - Set{String}(\"z\")\n\
    \    unique_chars = unique_chars - Set{String}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"B\")\n    unique_chars = unique_chars - Set{String}(\"C\")\n\
    \    unique_chars = unique_chars - Set{String}(\"D\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"E\")\n    unique_chars = unique_chars - Set{String}(\"F\")\n\
    \    unique_chars = unique_chars - Set{\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu26a5lzx.jl:53\nin expression starting at\
    \ /tmp/tmpu26a5lzx.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    if unique_chars.size\
    \ == words.length\n        return words[end]\n    else \n        unique_chars\
    \ = unique_chars.sorted()\n        unique_chars.reverse()\n        for word in\
    \ words \n            if unique_chars.contains(word)\n                return word\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\"\
    , \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\"\
    , \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a vector of strings and returns a vector of strings. \nThe vector contains different\
    \ words. \nReturn the word with maximum number of unique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nwbowwp.jl:31\nin expression starting at\
    \ /tmp/tmp3nwbowwp.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph832n374.jl:57\nin expression starting at\
    \ /tmp/tmph832n374.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words \n        unique_chars = unique_chars | Set(word)\n   \
    \     if unique_chars.size > word_with_max_unique_chars.length\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuaiytwfv.jl:24\nin expression starting at\
    \ /tmp/tmpuaiytwfv.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for w in words\n       \
    \ for c in w\n            unique_chars.add(c)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"a\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp23po96ml.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp23po96ml.jl:1\n\
    in expression starting at /tmp/tmp23po96ml.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars.update([c for c in words[1]])\n\
    \    for w in words[2:end]\n        unique_chars.update([c for c in w])\n    return\
    \ words[1] if unique_chars.size == words[1].size else words[2]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and returns\
    \ a vector of booleans indicating whether each string contains only unique characters.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjxkuuaom.jl:16 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjxkuuaom.jl:18\n\
    in expression starting at /tmp/tmpjxkuuaom.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w[1]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[2]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[3]))\n    unique_chars = unique_chars.union(words.map(w => w[4]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[5]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[6]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[7]))\n    unique_chars = unique_chars.union(words.map(w => w[8]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[9]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[10]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[11]))\n    unique_chars = unique_chars.union(words.map(w => w[12]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[13]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[14]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[15]))\n    unique_chars = unique_chars.union(words.map(w => w[16]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[17]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[18]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[19]))\n    unique_chars = unique_chars.union(words.map(w => w[20]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[21]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[22]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[23]))\n    unique_chars = unique_chars.union(words.map(w => w[24]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[25]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[26]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[27]))\n    unique_chars = unique_chars.union(words.map(w => w[28]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[29]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplptes0b.jl:46\nin expression starting at\
    \ /tmp/tmpplptes0b.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    for word in unique_chars\n        if length(word)\
    \ == length(words[1])\n            return word\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a vector of strings and returns\
    \ a vector of strings. Each element of the returned vector is the word with maximum\
    \ number of unique characters. If the word has maximum number of unique characters,\
    \ return it without modifying the original vector. Otherwise return an empty string.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgti048l.jl:15\nin expression starting at\
    \ /tmp/tmpdgti048l.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for c\
    \ in word\n            unique_chars = unique_chars + c\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmphshdamif.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphshdamif.jl:1\n\
    in expression starting at /tmp/tmphshdamif.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Set()\n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = unique_chars_count + Set(word) \n    end\n    \n    if length(unique_chars)\
    \ == length(unique_chars_count)\n        return words[argmax(unique_chars_count)]\n\
    \    else\n        return words[argmax(unique_chars)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. Return the word with maximum number of unique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9dhdehe.jl:27\nin expression starting at\
    \ /tmp/tmpg9dhdehe.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    \n    unique_chars.max() \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and returns a vector of strings. \nThe vector contains\
    \ different words. \nReturn the word with maximum number of unique characters.\
    \ If multiple strings have maximum number of unique characters, return the one\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgao79dd.jl:15\nin expression starting at\
    \ /tmp/tmpcgao79dd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. Return the word with maximum number of unique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7m0gu97l.jl:21\nin expression starting at\
    \ /tmp/tmp7m0gu97l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n \
    \   unique_chars = unique_chars - Set(\"b\")\n    unique_chars = unique_chars\
    \ - Set(\"c\")\n    unique_chars = unique_chars - Set(\"d\")\n    unique_chars\
    \ = unique_chars - Set(\"e\")\n    unique_chars = unique_chars - Set(\"f\")\n\
    \    unique_chars = unique_chars - Set(\"g\")\n    unique_chars = unique_chars\
    \ - Set(\"h\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"j\")\n    unique_chars = unique_chars - Set(\"k\")\n\
    \    unique_chars = unique_chars - Set(\"l\")\n    unique_chars = unique_chars\
    \ - Set(\"m\")\n    unique_chars = unique_chars - Set(\"n\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"p\")\n\
    \    unique_chars = unique_chars - Set(\"q\")\n    unique_chars = unique_chars\
    \ - Set(\"r\")\n    unique_chars = unique_chars - Set(\"s\")\n    unique_chars\
    \ = unique_chars - Set(\"t\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    unique_chars = unique_chars - Set(\"v\")\n    unique_chars = unique_chars\
    \ - Set(\"w\")\n    unique_chars = unique_chars - Set(\"x\")\n    unique_chars\
    \ = unique_chars - Set(\"y\")\n    unique_chars = unique_chars - Set(\"z\")\n\
    \    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"B\")\n    unique_chars = unique_chars - Set(\"C\")\n    unique_chars\
    \ = unique_chars - Set(\"D\")\n    unique_chars = unique_chars - Set(\"E\")\n\
    \    unique_chars = unique_chars - Set(\"F\")\n    unique_chars = unique_chars\
    \ - Set(\"G\")\n    unique_chars = unique_chars - Set(\"H\")\n    unique_chars\
    \ = unique_chars - Set(\"I\")\n    unique_chars = unique_chars - Set(\"J\")\n\
    \    unique_chars = unique_chars - Set(\"K\")\n    unique_chars = unique_chars\
    \ - Set(\"L\")\n    unique_chars = unique_chars - Set(\"M\")\n    unique_chars\
    \ = unique_chars - Set(\"N\")\n    unique_chars = unique_chars - Set(\"O\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe9rchnat.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe9rchnat.jl:1\n\
    in expression starting at /tmp/tmpe9rchnat.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5k3pe0b4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5k3pe0b4.jl:1\n\
    in expression starting at /tmp/tmp5k3pe0b4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzezhrftu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzezhrftu.jl:1\n\
    in expression starting at /tmp/tmpzezhrftu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    for word in words \n        for char in\
    \ word\n            unique_chars.add(char)\n            unique_chars.delete(char.upper())\n\
    \            unique_chars.delete(char.lower())\n        end\n    end\n    unique_chars\
    \ = unique_chars.toSet()\n    unique_chars.sort!()\n    return words[unique_chars.last]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    Each integer represents the number of unique\
    \ characters in each string. \n    For example, if the first string has 5 unique\
    \ characters and the second string has 3 unique characters, \n    then the first\
    \ string has 5 unique characters and the second string has 3 unique characters.\
    \ \n    Write a function that returns the string with the maximum number of unique\
    \ characters. \n    For example, if the first string has 5 unique characters and\
    \ the second string has 3 unique characters, \n    then the first string has 5\
    \ unique characters and the second string has 3 unique characters. \n    Write\
    \ a function that returns the string with the maximum number of unique characters.\
    \ \n    For example, if the first string has 5 unique characters and the second\
    \ string has 3 unique characters, \n    then the first string has 5 unique characters\
    \ and the second string has 3 unique characters. \n    Write a function that returns\
    \ the string with the maximum number of unique characters. \n    For example,\
    \ if the first string has 5 unique characters and the second string has 3 unique\
    \ characters, \n    then the first string has 5 unique characters and the second\
    \ string has 3 unique characters. \n    Write a function that returns the string\
    \ with the maximum number of unique characters. \n    For example, if the first\
    \ string has 5 unique characters and the second string has 3 unique characters,\
    \ \n    then the first string has 5 unique characters and the second string has\
    \ 3 unique characters. \n    Write a function that returns the string with the\
    \ maximum number of unique characters. \n    For example, if the first string\
    \ has 5 unique characters and the second string has 3 unique characters, \n  \
    \  then the first string has 5 unique characters and the second string has 3 unique\
    \ characters. \n    Write a function that returns the string with the maximum\
    \ number of unique characters. \n    For example, if the first string has 5 unique\
    \ characters and the second string has 3 unique characters, \n    then the first\
    \ string has 5 unique characters and the second string has 3 unique characters.\
    \ \n    Write a function that returns the string with the maximum number of unique\
    \ characters. \n    For example, if the first string has 5 unique characters and\
    \ the second \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn13b8ose.jl:26\nin expression starting at\
    \ /tmp/tmpn13b8ose.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpgnt9s_2y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgnt9s_2y.jl:1\n\
    in expression starting at /tmp/tmpgnt9s_2y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"z\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp22pwc5mj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp22pwc5mj.jl:1\n\
    in expression starting at /tmp/tmp22pwc5mj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts,\
    \ by=x->-length(x))\n    word_counts = word_counts[end]\n    word_counts = word_counts[1]\n\
    \    return word_counts\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and returns a vector of strings. \nThe vector contains\
    \ different words. \nThe function should return the same vector but with words\
    \ sorted alphabetically.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawghcqdt.jl:23\nin expression starting at\
    \ /tmp/tmpawghcqdt.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars = unique_chars.sort\n    end\n    \n    return unique_chars[1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dojrg3i.jl:26\nin expression starting at\
    \ /tmp/tmp8dojrg3i.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update([w for w in words])\n\
    \    unique_chars.update([w[1:] for w in words])\n    unique_chars.update([w[2:]\
    \ for w in words])\n    unique_chars.update([w[3:] for w in words])\n    unique_chars.update([w[4:]\
    \ for w in words])\n    unique_chars.update([w[5:] for w in words])\n    unique_chars.update([w[6:]\
    \ for w in words])\n    unique_chars.update([w[7:] for w in words])\n    unique_chars.update([w[8:]\
    \ for w in words])\n    unique_chars.update([w[9:] for w in words])\n    unique_chars.update([w[10:]\
    \ for w in words])\n    unique_chars.update([w[11:] for w in words])\n    unique_chars.update([w[12:]\
    \ for w in words])\n    unique_chars.update([w[13:] for w in words])\n    unique_chars.update([w[14:]\
    \ for w in words])\n    unique_chars.update([w[15:] for w in words])\n    unique_chars.update([w[16:]\
    \ for w in words])\n    unique_chars.update([w[17:] for w in words])\n    unique_chars.update([w[18:]\
    \ for w in words])\n    unique_chars.update([w[19:] for w in words])\n    unique_chars.update([w[20:]\
    \ for w in words])\n    unique_chars.update([w[21:] for w in words])\n    unique_chars.update([w[22:]\
    \ for w in words])\n    unique_chars.update([w[23:] for w in words])\n    unique_chars.update([w[24:]\
    \ for w in words])\n    unique_chars.update([w[25:] for w in words])\n    unique_chars.update([w[26:]\
    \ for w in words])\n    unique_chars.update([w[27:] for w in words])\n    unique_chars.update([w[28:]\
    \ for w in words])\n    unique_chars.update([w[29:] for w in words])\n    unique_chars.update([w[31:]\
    \ for w in words])\n    unique_chars.update([w[32:] for w in words])\n    unique_chars.update([w[33:]\
    \ for w in words])\n    unique_chars.update([w[34:] for w in words])\n    unique_chars.update([w[35:]\
    \ for w in words])\n    unique_chars.update([w\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuxl_ivmu.jl:16\nin expression\
    \ starting at /tmp/tmpuxl_ivmu.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    else\n        return words[end]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tb5l6zb.jl:29\nin expression starting at\
    \ /tmp/tmp3tb5l6zb.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char\
    \ in word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    \n    if length(unique_chars) == length(words)\n        return words[end]\n\
    \    else\n        unique_chars = sort(unique_chars)\n        for word in words\n\
    \            if unique_chars[end] == words[end]\n                return words[end]\n\
    \            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bsx56hm.jl:32\nin expression starting at\
    \ /tmp/tmp9bsx56hm.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12l90ft2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12l90ft2.jl:1\n\
    in expression starting at /tmp/tmp12l90ft2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     unique_chars = unique_chars | Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n     \
    \   return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"a\"\
    )\n    \n    if length(unique_chars) == 0 \n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplavpt1ve.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplavpt1ve.jl:1\n\
    in expression starting at /tmp/tmplavpt1ve.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        for c in w\n\
    \            unique_chars = unique_chars + c\n    end\n    \n    if length(unique_chars)\
    \ == 0\n        return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n\
    \    \n    unique_chars = unique_chars[end]\n    \n    return unique_chars\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and returns a vector of strings. Each element of the returned vector should\
    \ contain the number of unique characters in that string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoeu7320s.jl:30\nin expression starting at\
    \ /tmp/tmpoeu7320s.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words\n  \
    \      for char in word\n            unique_chars <- unique_chars + char\n   \
    \     end\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdf2hjdl.jl:116\nin expression starting at\
    \ /tmp/tmpgdf2hjdl.jl:116\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = unique_chars_count + length(word)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[end]\n    else\n        \n        unique_chars_count\
    \ = length(words)\n        \n        for word in words\n            unique_chars\
    \ = unique_chars - Set(word)\n            unique_chars_count = unique_chars_count\
    \ - length(word)\n        end\n        \n        if unique_chars_count > length(words)\n\
    \            return words[end]\n        else\n            return words[end]\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_t71tb5.jl:40\nin expression starting at\
    \ /tmp/tmpn_t71tb5.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4_hz1zc.jl:55\nin expression starting at\
    \ /tmp/tmp_4_hz1zc.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi56ew2k7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi56ew2k7.jl:1\n\
    in expression starting at /tmp/tmpi56ew2k7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_counts = Dict()\n    for word in\
    \ words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_counts[length(unique_chars)]\
    \ = unique_chars_counts[length(unique_chars)] + 1\n    end\n    \n    unique_chars_counts\
    \ = Dict(unique_chars_counts)\n    \n    sorted_unique_chars = collect(unique_chars)\n\
    \    \n    sorted_unique_chars_counts = collect(unique_chars_counts)\n    \n \
    \   sorted_unique_chars_counts = sort_by(sorted_unique_chars_counts, :last)\n\
    \    \n    sorted_unique_chars_counts = reverse(sorted_unique_chars_counts)\n\
    \    \n    sorted_unique_chars_counts = reverse(sorted_unique_chars_counts)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0tnabz70.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0tnabz70.jl:1\n\
    in expression starting at /tmp/tmp0tnabz70.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts)\n\
    \    return word_counts[1][1]\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ accepts a vector of strings and returns a vector of strings. Each string in\
    \ the returned vector should contain one word from the input vector. \n    Each\
    \ word in the returned vector should contain maximum number of unique characters.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehp_2l4s.jl:21\nin expression starting at\
    \ /tmp/tmpehp_2l4s.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n\
    \    \n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    \n    unique_chars = unique_chars - Set(\"6\")\n    unique_chars\
    \ = unique_chars - Set(\"7\")\n    \n    unique_chars = unique_chars - Set(\"\
    8\")\n    unique_chars = unique_chars - Set(\"9\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    \n    unique_chars = unique_chars - Set(\"\
    [\")\n    unique_chars = unique_chars - Set(\"]\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    \n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    \n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    \n    unique_chars = unique_chars - Set(\"\
    +\")\n    unique_chars = unique_chars - Set(\"+\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\"+\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    \n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    \n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc82nkp3p.jl:40\nin expression starting at\
    \ /tmp/tmpc82nkp3p.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n\
    \    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    :\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    \n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    ;\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    ;\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp4gdbiqg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp4gdbiqg.jl:1\n\
    in expression starting at /tmp/tmpp4gdbiqg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm1bj50l8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm1bj50l8.jl:1\n\
    in expression starting at /tmp/tmpm1bj50l8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    unique_chars = unique_chars.toArray()\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdjx1xioe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdjx1xioe.jl:1\n\
    in expression starting at /tmp/tmpdjx1xioe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. Return the string with maximum number of\nunique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\
    \t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgip7if6.jl:21\nin expression starting at\
    \ /tmp/tmprgip7if6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_count = Dict{String, Int}()\n    for word in words\n        if !haskey(word_count,\
    \ word)\n            word_count[word] = 1\n        else\n            word_count[word]\
    \ += 1\n    end\n    \n    word_count = sort(word_count, by=x->length(x))\n  \
    \  word_count = reverse(sort(word_count, by=x->x[1]))\n    \n    word_count =\
    \ reverse(sort(word_count, by=x->x[1])) \n    \n    return word_count[1]\nend\n\
    </cell>\n<code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. Return the word with maximum number of unique characters.\
    \ If multiple strings have maximum number of unique characters, return the one\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3rfl762.jl:29\nin expression starting at\
    \ /tmp/tmpl3rfl762.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    \n    unique_chars.max() \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqzoinre.jl:15\nin expression starting at\
    \ /tmp/tmpkqzoinre.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w[1]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[2]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[3]))\n    unique_chars = unique_chars.union(words.map(w => w[4]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[5]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[6]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[7]))\n    unique_chars = unique_chars.union(words.map(w => w[8]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[9]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[10]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[11]))\n    unique_chars = unique_chars.union(words.map(w => w[12]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[13]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[14]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[15]))\n    unique_chars = unique_chars.union(words.map(w => w[16]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[17]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[18]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[19]))\n    unique_chars = unique_chars.union(words.map(w => w[20]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[21]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[22]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[23]))\n    unique_chars = unique_chars.union(words.map(w => w[24]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[25]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[26]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[27]))\n    unique_chars = unique_chars.union(words.map(w => w[28]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[29]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplptes0b.jl:46\nin expression starting at\
    \ /tmp/tmpplptes0b.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in\
    \ words \n        for char in word\n            if char in unique_chars\n    \
    \            unique_chars_count[char] += 1\n            else\n               \
    \ unique_chars.add(char)\n                unique_chars_count[char] = 1\n    end\n\
    \    unique_chars_count = sort(unique_chars_count)\n    unique_chars_count = unique_chars_count[end]\n\
    \    return words[end]\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1an4y85.jl:28\nin expression starting at\
    \ /tmp/tmpq1an4y85.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n\
    \    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars =\
    \ unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpopxzvvji.jl:15\nin expression starting at\
    \ /tmp/tmpopxzvvji.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars.toSet()\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        return find_max(unique_chars)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. \n    The vector contains different words.\
    \ Return the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfro5uxmf.jl:30\nin expression starting at\
    \ /tmp/tmpfro5uxmf.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"/\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g3iaqdu.jl:25\nin expression starting at\
    \ /tmp/tmp0g3iaqdu.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4_hz1zc.jl:55\nin expression starting at\
    \ /tmp/tmp_4_hz1zc.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}()\n    \n    for word in words\n      \
    \  for char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"a\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpmq983ttu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmq983ttu.jl:1\n\
    in expression starting at /tmp/tmpmq983ttu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        if !haskey(word_counts,\
    \ word)\n            word_counts[word] = 0\n        end\n        word_counts[word]\
    \ += 1\n    end\n    \n    word_counts = sort(word_counts, by=x->length(x))\n\
    \    \n    return word_counts[1][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. Each\
    \ string in the returned vector should contain the maximum number of unique characters.\
    \ If the number of unique characters is less than the length of the string, return\
    \ an empty string.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t\
    @test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20i6xq4j.jl:26\nin expression starting at\
    \ /tmp/tmp20i6xq4j.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v > 1])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == 1])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[maximum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[maximum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[maximum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[maximum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[maximum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[maximum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if \nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp58xp0w5z.jl:36\nin expression starting at /tmp/tmp58xp0w5z.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    unique_chars = unique_chars - Set(\"b\")\n    unique_chars =\
    \ unique_chars - Set(\"c\")\n    unique_chars = unique_chars - Set(\"d\")\n  \
    \  unique_chars = unique_chars - Set(\"e\")\n    unique_chars = unique_chars -\
    \ Set(\"f\")\n    unique_chars = unique_chars - Set(\"g\")\n    unique_chars =\
    \ unique_chars - Set(\"h\")\n    unique_chars = unique_chars - Set(\"i\")\n  \
    \  unique_chars = unique_chars - Set(\"j\")\n    unique_chars = unique_chars -\
    \ Set(\"k\")\n    unique_chars = unique_chars - Set(\"l\")\n    unique_chars =\
    \ unique_chars - Set(\"m\")\n    unique_chars = unique_chars - Set(\"n\")\n  \
    \  unique_chars = unique_chars - Set(\"o\")\n    unique_chars = unique_chars -\
    \ Set(\"p\")\n    unique_chars = unique_chars - Set(\"q\")\n    unique_chars =\
    \ unique_chars - Set(\"r\")\n    unique_chars = unique_chars - Set(\"s\")\n  \
    \  unique_chars = unique_chars - Set(\"t\")\n    unique_chars = unique_chars -\
    \ Set(\"u\")\n    unique_chars = unique_chars - Set(\"v\")\n    unique_chars =\
    \ unique_chars - Set(\"w\")\n    unique_chars = unique_chars - Set(\"x\")\n  \
    \  unique_chars = unique_chars - Set(\"y\")\n    unique_chars = unique_chars -\
    \ Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars =\
    \ unique_chars - Set(\"B\")\n    unique_chars = unique_chars - Set(\"C\")\n  \
    \  unique_chars = unique_chars - Set(\"D\")\n    unique_chars = unique_chars -\
    \ Set(\"E\")\n    unique_chars = unique_chars - Set(\"F\")\n    unique_chars =\
    \ unique_chars - Set(\"G\")\n    unique_chars = unique_chars - Set(\"H\")\n  \
    \  unique_chars = unique_chars - Set(\"I\")\n    unique_chars = unique_chars -\
    \ Set(\"J\")\n    unique_chars = unique_chars - Set(\"K\")\n    unique_chars =\
    \ unique_chars - Set(\"L\")\n    unique_chars = unique_chars - Set(\"M\")\n  \
    \  unique_chars = unique_chars - Set(\"N\")\n    unique_chars = unique_chars -\
    \ Set(\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8gmykzuf.jl:67\nin expression starting at\
    \ /tmp/tmp8gmykzuf.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words\n    \
    \    unique_chars = unique_chars ++ Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars |> Set\n    \n    if length(unique_chars) > length(words)\n \
    \       return words[end]\n    else\n        \n        unique_chars = unique_chars\
    \ |> Set\n        \n        unique_chars = unique_chars |> Set\n        \n   \
    \     if length(unique_chars) > length(words)\n            return words[end]\n\
    \        else\n            \n            unique_chars = unique_chars |> Set\n\
    \            \n            unique_chars = unique_chars |> Set\n            \n\
    \            if length(unique_chars) > length(words)\n                return words[end]\n\
    \            else\n                \n                unique_chars = unique_chars\
    \ |> Set\n                \n                unique_chars = unique_chars |> Set\n\
    \                \n                if length(unique_chars) > length(words)\n \
    \                   return words[end]\n                else\n                \
    \    \n                    unique_chars = unique_chars |> Set\n              \
    \      \n                    unique_chars = unique_chars |> Set\n            \
    \        \n                    if length(unique_chars) > length(words)\n     \
    \                   return words[end]\n                    else\n            \
    \            \n                        unique_chars = unique_chars |> Set\n  \
    \                      \n                        unique_chars = unique_chars |>\
    \ Set\n                        \n                        if length(unique_chars)\
    \ > length(words)\n                            return words[end]\n           \
    \             else\n                            \n                           \
    \ unique_chars = unique_chars |> Set\n                            \n         \
    \                   unique_chars = unique_chars |> Set\n                     \
    \       \n                            if length(unique_chars) > length(words)\n\
    \                                return words[end]\n                         \
    \   else\n                                \n                                unique_chars\
    \ = unique_chars |> Set\n                                \n                  \
    \              unique_chars = unique_chars |> Set\n                          \
    \      \n                                if length(unique_chars) > length(words)\n\
    \                                    return words[end]\n                     \
    \           else\n                                    \n                     \
    \               unique_chars = unique_chars |> Set\n                         \
    \           \n                                    unique_chars = unique_chars\
    \ |> Set\n                                    \n                             \
    \       if length(unique_chars) > length(words)\n                            \
    \            return words[end]\n                                    else\n   \
    \                                     \n                                     \
    \   unique_chars = unique_chars |> Set\n                                     \
    \   \n                                        unique_chars = unique_chars |> Set\n\
    \                                        \n                                  \
    \      if length(unique_chars) > length(words)\n                             \
    \               return words[end]\n                                        else\n\
    \                                            \n                              \
    \              unique_chars = unique_chars |> Set\n                          \
    \                  \n                                            unique_chars\
    \ = unique_chars |> Set\n                                            \n      \
    \                                      if length(unique_chars) > length(words)\n\
    \                                                return words[end]\n         \
    \                                   else\n                                   \
    \             \n                                                unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp8kqysp1s.jl:103\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8kqysp1s.jl:1\n\
    in expression starting at /tmp/tmp8kqysp1s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words\n    \
    \    for char in word\n            unique_chars.add(char)\n    end\n    \n   \
    \ unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpt42j28qg.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt42j28qg.jl:1\n\
    in expression starting at /tmp/tmpt42j28qg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,
    0 broken.

    in expression starting at /tmp/tmpwckz0b4t.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpwckz0b4t.jl:26\n  Test threw exception\n\
    \  Expression: candidate([\"name\", \"of\", \"string\"]) == \"string\"\n  type\
    \ Set has no field union\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpwckz0b4t.jl:15\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwckz0b4t.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwckz0b4t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpwckz0b4t.jl:27\n  Test threw exception\n  Expression:\
    \ candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\n  type Set has no field\
    \ union\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpwckz0b4t.jl:15\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwckz0b4t.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwckz0b4t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpwckz0b4t.jl:28\n  Test threw exception\n  Expression:\
    \ candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n  type Set has no field\
    \ union\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] find_max(words::Vector{String})\n     @ Main /tmp/tmpwckz0b4t.jl:15\n  \
    \ [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwckz0b4t.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwckz0b4t.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpwckz0b4t.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\""
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}()\n    if length(unique_chars) == 0\n        return words[1]\n\
    \    else\n        unique_chars = unique_chars - Set{String}()\n        unique_chars\
    \ = unique_chars - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n\
    \        unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpaq0a2rpz.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaq0a2rpz.jl:1\n\
    in expression starting at /tmp/tmpaq0a2rpz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Set()\n    for word in\
    \ words\n        unique_chars = unique_chars | Set(word)\n        unique_chars_count\
    \ = unique_chars_count | Set(length(unique_chars))\n    end\n    \n    if length(unique_chars)\
    \ == length(unique_chars_count)\n        return words[argmax(words)]\n    else\n\
    \        unique_chars_count = sort(unique_chars_count)\n        unique_chars =\
    \ sort(unique_chars)\n        \n        unique_chars_count = unique_chars_count[end]\n\
    \        unique_chars = unique_chars[end]\n        \n        if unique_chars_count\
    \ > length(unique_chars)\n            return words[argmax(words)]\n        else\n\
    \            return unique_chars\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. Return the\
    \ string that has the maximum number of occurrences of the integers in the vector.\
    \ For example, if the vector is [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"\
    d\"] and the integer vector is [1, 1, 2], the function should return \"c\".\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kvl_i7t.jl:37\nin expression starting at\
    \ /tmp/tmp5kvl_i7t.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        if !haskey(word_counts,\
    \ word)\n            word_counts[word] = 1\n        else\n            word_counts[word]\
    \ += 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=length, reverse=true)\n    \n    if length(sorted_word_counts) == 1\n   \
    \     return sorted_word_counts[1]\n    else\n        return sorted_word_counts[1][1]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. Return the string that comes first in lexicographical\
    \ order of the vector of strings and a vector of the integers that correspond\
    \ to the positions of the strings in the original vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3ts2anp.jl:30\nin expression starting at\
    \ /tmp/tmpi3ts2anp.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars[char] <- unique_chars[char] + 1\n    end\n\
    \    \n    unique_chars = unique_chars.keys\n    unique_chars = sort(unique_chars)\n\
    \    \n    unique_chars[end]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise: Write a function that\
    \ accepts a vector of strings and returns the word with maximum number of unique\
    \ characters. If the word has maximum number of unique characters, return the\
    \ first word in the lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoq3r7yy8.jl:25\nin expression starting at\
    \ /tmp/tmpoq3r7yy8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nqymtuh.jl:24\nin expression starting at\
    \ /tmp/tmp0nqymtuh.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmphou8e2j2.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphou8e2j2.jl:1\n\
    in expression starting at /tmp/tmphou8e2j2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpervtel6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpervtel6y.jl:1\n\
    in expression starting at /tmp/tmpervtel6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        return find_max(unique_chars)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. \n    The vector contains different words.\
    \ Return the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z8n8oaw.jl:27\nin expression starting at\
    \ /tmp/tmp1z8n8oaw.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq23c4umf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq23c4umf.jl:1\n\
    in expression starting at /tmp/tmpq23c4umf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp25esysp2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp25esysp2.jl:1\n\
    in expression starting at /tmp/tmp25esysp2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps9uwfdt5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps9uwfdt5.jl:1\n\
    in expression starting at /tmp/tmps9uwfdt5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     for char in word\n            unique_chars.add(char)\n    end\n    \n  \
    \  unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return \"z\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return \"_\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return \"%\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"&\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"&\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \")\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return \"+\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"=\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"=\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\";\")\n    \n    if length(unique_chars) == 0\n        return \";\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \":\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\",\")\n    \n    if length(unique_chars) == 0\n        return \",\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprj_ei7qe.jl:58\nin expression starting at\
    \ /tmp/tmprj_ei7qe.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words \n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(word_counts))\n\
    \    \n    word_with_max_count = sorted_word_counts[end]\n    \n    if length(sorted_word_counts)\
    \ > 1\n        word_with_max_count = sorted_word_counts[1]\n    end\n    \n  \
    \  return word_with_max_count\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and returns a vector of booleans indicating whether\
    \ each string contains at least one of the words in the input vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5j22ucfi.jl:29\nin expression starting at\
    \ /tmp/tmp5j22ucfi.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4_hz1zc.jl:55\nin expression starting at\
    \ /tmp/tmp_4_hz1zc.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words\n    \
    \    for char in word\n            unique_chars.add(char)\n        end\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2c0e4ysr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2c0e4ysr.jl:1\n\
    in expression starting at /tmp/tmp2c0e4ysr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        for c in w\n\
    \            unique_chars.add(c)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n    unique_chars\
    \ = unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"|\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"/\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6s5xj4j.jl:25\nin expression starting at\
    \ /tmp/tmpb6s5xj4j.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurz5j07_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurz5j07_.jl:1\n\
    in expression starting at /tmp/tmpurz5j07_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars = unique_chars + char\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"<\")\n\
    \    unique_chars = unique_chars - Set(\"<\")\n    unique_chars = unique_chars\
    \ - Set(\">\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"@\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    unique_chars = unique_chars - Set(\"^\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"|\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5lyohb_.jl:26\nin expression starting at\
    \ /tmp/tmp_5lyohb_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.max() \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that accepts a vector of strings and a vector of integers. \n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfbs1wx7.jl:15\nin expression starting at\
    \ /tmp/tmpgfbs1wx7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_4_hz1zc.jl:55\nin expression starting at\
    \ /tmp/tmp_4_hz1zc.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words \n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort!(word_counts,\
    \ by=x->-get(x, \"count\"))\n    word_counts[end][1]\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that accepts a vector of strings and a vector of integers.\
    \ \n    The vector contains different words. Return the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpipl2z58k.jl:21\nin expression starting at\
    \ /tmp/tmpipl2z58k.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars = unique_chars + char\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n\
    \    unique_chars = unique_chars - Set(\"2\")\n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars\
    \ = unique_chars - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n\
    \    unique_chars = unique_chars - Set(\"7\")\n    unique_chars = unique_chars\
    \ - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"/\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"|\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"^\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4cl16epy.jl:32\nin expression starting at\
    \ /tmp/tmp4cl16epy.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     for char in word\n            unique_chars.add(char)\n    end\n    \n  \
    \  unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpun2zqenq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpun2zqenq.jl:1\n\
    in expression starting at /tmp/tmpun2zqenq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj0w6epbc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj0w6epbc.jl:1\n\
    in expression starting at /tmp/tmpj0w6epbc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words\n    \
    \    for char in word\n            unique_chars.add(char)\n    end\n    \n   \
    \ unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsla04i_0.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsla04i_0.jl:1\n\
    in expression starting at /tmp/tmpsla04i_0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     for char in word\n            if !contains(unique_chars, char)\n       \
    \         unique_chars.add(char)\n            else\n                break\n  \
    \      end\n    end\n    \n    if length(unique_chars) > length(words)\n     \
    \   return words[findfirst(unique_chars)]\n    else\n        return words[findfirst(unique_chars)+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbmlyxe6.jl:32\nin expression starting at\
    \ /tmp/tmpnbmlyxe6.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. Return an array of integers containing the number\
    \ of unique characters in each string in the vector. \nThe function should return\
    \ an array of integers containing the number of unique characters in each string\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvjegjcy.jl:27\nin expression starting at\
    \ /tmp/tmpdvjegjcy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"A\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv6yqu5k.jl:66\nin expression starting at\
    \ /tmp/tmpnv6yqu5k.jl:66\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpog_23s2o.jl:15\nin expression starting at\
    \ /tmp/tmpog_23s2o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n\
    \    \n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    \n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars\
    \ = unique_chars - Set(\"5\")\n    \n    unique_chars = unique_chars - Set(\"\
    6\")\n    unique_chars = unique_chars - Set(\"7\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"-\")\n\
    \    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    (\")\n    unique_chars = unique_chars - Set(\")\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    \n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set('\"')\n    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\"-\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set('\"')\n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88ibulfy.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88ibulfy.jl:1\n\
    in expression starting at /tmp/tmp88ibulfy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp19kkwyat.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp19kkwyat.jl:1\n\
    in expression starting at /tmp/tmp19kkwyat.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpurz5j07_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpurz5j07_.jl:1\n\
    in expression starting at /tmp/tmpurz5j07_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    word_with_max_unique_chars = \"\"\n  \
    \  for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqw7wtex7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqw7wtex7.jl:1\n\
    in expression starting at /tmp/tmpqw7wtex7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        for char in word\n            unique_chars[char]\
    \ = unique_chars[char] + 1\n            if unique_chars[char] > word_with_max_unique_chars\n\
    \                word_with_max_unique_chars = char\n            end\n        end\n\
    \    end\n    return word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. \n\
    The vector contains different words. \nThe function should return the same vector\
    \ with each element replaced with its lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfxs8w14.jl:26\nin expression starting at\
    \ /tmp/tmpmfxs8w14.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptk5ha6pr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptk5ha6pr.jl:1\n\
    in expression starting at /tmp/tmptk5ha6pr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for w in words\n        for c in w\n\
    \            if !contains(unique_chars, c)\n                unique_chars.add(c)\n\
    \            else\n                break\n        end\n    end\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[findfirst(unique_chars)] \n    else\n\
    \        return words[findfirst(unique_chars, 1)]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezg5jsn1.jl:30\nin expression starting at\
    \ /tmp/tmpezg5jsn1.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe46e05nk.jl:21\nin expression starting at\
    \ /tmp/tmpe46e05nk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"z\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"&\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"=\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiha93dsh.jl:58\nin expression starting at\
    \ /tmp/tmpiha93dsh.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n\
    \    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbel4lu1d.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbel4lu1d.jl:1\n\
    in expression starting at /tmp/tmpbel4lu1d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n                end\n            end\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporylm1vd.jl:28\nin expression starting at\
    \ /tmp/tmporylm1vd.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts,\
    \ by=x->-length(x))\n    return word_counts[1][1]\nend\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.4>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. Return true\
    \ if the vector contains words that appear in both vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wj03656.jl:21\nin expression starting at\
    \ /tmp/tmp3wj03656.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars.update(*words)\n    unique_chars\
    \ = unique_chars.elements()\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\n    unique_chars = unique_chars[end]\n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n    unique_chars\
    \ = sort(unique_chars)\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0juvvszi.jl:15\nin expression starting at\
    \ /tmp/tmp0juvvszi.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words \n \
    \       for char in word\n            unique_chars <- unique_chars + char\n  \
    \      end\n    end\n    \n    if length(unique_chars) > length(words)\n     \
    \   \n        for word in words \n            for char in word\n             \
    \   unique_chars <- unique_chars - char\n            end\n        end\n    end\n\
    \    \n    unique_chars = unique_chars[end]\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[end]\n    end\n    \n    return words[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqic0mtb4.jl:40\nin expression starting at\
    \ /tmp/tmpqic0mtb4.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_len = 0\n    unique_chars_index\
    \ = 0\n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_len += 1\n            if unique_chars_len > unique_chars_index\n\
    \                unique_chars_index = unique_chars_len\n            end\n    \
    \    end\n    end\n    return words[unique_chars_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that accepts a vector of strings and a vector of integers. \nThe vector contains\
    \ different words. Return the word with maximum number\nof unique characters.\
    \ If multiple strings have maximum number of unique\ncharacters, return the one\
    \ which comes first in lexicographical order.\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpti3hmhao.jl:28\nin expression starting at\
    \ /tmp/tmpti3hmhao.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length).map(sort))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2pvi72p.jl:32\nin expression starting at\
    \ /tmp/tmpn2pvi72p.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words\n  \
    \      unique_chars |= Set(word)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n    unique_chars\
    \ = unique_chars - Set(\"i\")\n    unique_chars = unique_chars - Set(\"o\")\n\
    \    unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n    unique_chars\
    \ = unique_chars - Set(\"I\")\n    unique_chars = unique_chars - Set(\"O\")\n\
    \    unique_chars = unique_chars - Set(\"U\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars\
    \ = unique_chars - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n\
    \    unique_chars = unique_chars - Set(\"5\")\n    unique_chars = unique_chars\
    \ - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n    unique_chars\
    \ = unique_chars - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    unique_chars =\
    \ unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n  \
    \  unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars -\
    \ Set(\":\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars =\
    \ unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n  \
    \  unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars -\
    \ Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars =\
    \ unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n  \
    \  unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars -\
    \ Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars =\
    \ unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n  \
    \  unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars -\
    \ Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars =\
    \ unique_chars - Set(\"}\")\n    unique_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpusqtp5zc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpusqtp5zc.jl:1\n\
    in expression starting at /tmp/tmpusqtp5zc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for w in words\n        unique_chars = unique_chars\
    \ | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaelmlbm1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaelmlbm1.jl:1\n\
    in expression starting at /tmp/tmpaelmlbm1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for w in words\n        unique_chars\
    \ = unique_chars + Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9fe_nnfj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9fe_nnfj.jl:1\n\
    in expression starting at /tmp/tmp9fe_nnfj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavldkpfq.jl:47\nin expression starting at\
    \ /tmp/tmpavldkpfq.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi56ew2k7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi56ew2k7.jl:1\n\
    in expression starting at /tmp/tmpi56ew2k7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for w in words\n        unique_chars = unique_chars\
    \ | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"@\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"|\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"^\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbw9y2hi.jl:25\nin expression starting at\
    \ /tmp/tmpbbw9y2hi.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.elements()\n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ylwq19m.jl:21\nin expression starting at\
    \ /tmp/tmp6ylwq19m.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words\n        for char\
    \ in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    z\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"?\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"{\")\n    unique_chars = unique_chars - Set{Char}(\"}\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinr6zv6j.jl:25\nin expression starting at\
    \ /tmp/tmpinr6zv6j.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe05tyw6y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe05tyw6y.jl:1\n\
    in expression starting at /tmp/tmpe05tyw6y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict{Char,Int}()\n    for\
    \ word in words \n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count[char] = unique_chars_count[char] + 1\n    end\n\
    \    \n    unique_chars_sorted = unique_chars.sorted()\n    unique_chars_count\
    \ = unique_chars_count.sorted()\n    \n    unique_chars_count = unique_chars_count[unique_chars_sorted[1]]\n\
    \    \n    if unique_chars_count > unique_chars_sorted[1]\n        return unique_chars_sorted[1]\n\
    \    else\n        return unique_chars_sorted[1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0gi1wkd.jl:33\nin expression starting at\
    \ /tmp/tmpe0gi1wkd.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word\nusing Test\n\n@testset begin\n\n\
    candidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"\
    string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t\
    @test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5qexyea.jl:55\nin expression starting at\
    \ /tmp/tmpr5qexyea.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprj9ykxjg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprj9ykxjg.jl:1\n\
    in expression starting at /tmp/tmprj9ykxjg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"1\")\n    unique_chars = unique_chars\
    \ - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n    unique_chars\
    \ = unique_chars - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n\
    \    unique_chars = unique_chars - Set(\"6\")\n    unique_chars = unique_chars\
    \ - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n    unique_chars\
    \ = unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"@\")\n    unique_chars = unique_chars - Set(\"|\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9x0klroq.jl:31\nin expression starting at\
    \ /tmp/tmp9x0klroq.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        if !haskey(word_counts,\
    \ word)\n            word_counts[word] = 1\n        else\n            word_counts[word]\
    \ += 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    return sorted_word_counts[1][1]\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. Return the string that comes first in the lexicographical order of\
    \ the strings in the vector and the integer that comes first in the lexicographical\
    \ order of the integers in the vector. If multiple strings have the same number\
    \ of unique characters, return the one that comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1_4kezi.jl:26\nin expression starting at\
    \ /tmp/tmpn1_4kezi.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for w in words\n\
    \        unique_chars = unique_chars | Set(w)\n        unique_chars_count = unique_chars_count\
    \ + length(w)\n    end\n    \n    if unique_chars_count > length(words)\n    \
    \    return words[end]\n    end\n    \n    unique_chars_count\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise: Write a function that accepts a vector of strings and returns\
    \ a vector of strings. \n    Each string in the returned vector should contain\
    \ all the unique characters from all the strings in the input vector.\n    \n\
    \    >>> find_unique_chars([\"name\", \"of\", \"string\"])\n    [\"n\", \"o\"\
    , \"s\", \"t\", \"r\", \"i\", \"n\", \"a\", \"m\", \"g\"]\n    >>> find_unique_chars([\"\
    name\", \"enam\", \"game\"])\n    [\"n\", \"e\", \"a\", \"m\", \"g\"]\n    >>>\
    \ find_unique_chars([\"aaaaaaa\", \"bb\", \"cc\"])\n    [\"a\", \"b\", \"c\",\
    \ \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxjlifb2.jl:28\nin expression starting at\
    \ /tmp/tmpcxjlifb2.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words \n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts,\
    \ by=x->length(x))\n    \n    word_counts[word_counts[end][1]][1]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\"\
    , \"hh\", \"ii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\",\
    \ \"mm\", \"nn\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\"\
    , \"kk\", \"ll\", \"mm\", \"nn\", \"oo\"])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1v12bs3.jl:23\nin expression starting at\
    \ /tmp/tmpj1v12bs3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi56ew2k7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi56ew2k7.jl:1\n\
    in expression starting at /tmp/tmpi56ew2k7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.last\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that accepts a vector of strings and a vector of integers.\
    \ \n    The vector contains different words. Return the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8ktbjsm.jl:15\nin expression starting at\
    \ /tmp/tmpb8ktbjsm.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"/\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t8s6csc.jl:25\nin expression starting at\
    \ /tmp/tmp8t8s6csc.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in\
    \ words\n        for char in word\n            unique_chars << char\n        \
    \    unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ == 0\n        return \"\"\n    end\n    \n    if unique_chars_count == 1\n \
    \       return words[1]\n    end\n    \n    unique_chars = unique_chars.to_array()\n\
    \    unique_chars_count = unique_chars_count[1]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_chars)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars[2:end]\n    unique_chars_count\
    \ = unique_chars_count[2:end]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_chars)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars[2:end]\n    unique_chars_count\
    \ = unique_chars_count[2:end]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_chars)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars[2:end]\n    unique_chars_count\
    \ = unique_chars_count[2:end]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_char\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppxftidbq.jl:106\nin expression starting at\
    \ /tmp/tmppxftidbq.jl:106\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n \
    \   unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char\nusing Test\n\
    \n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\"\
    , \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    )\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi56ew2k7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi56ew2k7.jl:1\n\
    in expression starting at /tmp/tmpi56ew2k7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpalgdq3al.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpalgdq3al.jl:1\n\
    in expression starting at /tmp/tmpalgdq3al.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndxqzvys.jl:15\nin expression starting at\
    \ /tmp/tmpndxqzvys.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n            if unique_chars.size\
    \ > max_unique_chars\n                max_unique_chars = unique_chars.size\n \
    \           end\n        end\n    end\n    return words[max_unique_chars]\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwrdt423.jl:25\nin expression starting at\
    \ /tmp/tmpiwrdt423.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[2:end])\n    unique_chars = unique_chars.union(words[3:end])\n\
    \    unique_chars = unique_chars.union(words[4:end])\n    unique_chars = unique_chars.union(words[5:end])\n\
    \    unique_chars = unique_chars.union(words[6:end])\n    unique_chars = unique_chars.union(words[7:end])\n\
    \    unique_chars = unique_chars.union(words[8:end])\n    unique_chars = unique_chars.union(words[9:end])\n\
    \    unique_chars = unique_chars.union(words[10:end])\n    unique_chars = unique_chars.union(words[11:end])\n\
    \    unique_chars = unique_chars.union(words[12:end])\n    unique_chars = unique_chars.union(words[13:end])\n\
    \    unique_chars = unique_chars.union(words[14:end])\n    unique_chars = unique_chars.union(words[15:end])\n\
    \    unique_chars = unique_chars.union(words[16:end])\n    unique_chars = unique_chars.union(words[17:end])\n\
    \    unique_chars = unique_chars.union(words[18:end])\n    unique_chars = unique_chars.union(words[19:end])\n\
    \    unique_chars = unique_chars.union(words[20:end])\n    unique_chars = unique_chars.union(words[21:end])\n\
    \    unique_chars = unique_chars.union(words[22:end])\n    unique_chars = unique_chars.union(words[23:end])\n\
    \    unique_chars = unique_chars.union(words[24:end])\n    unique_chars = unique_chars.union(words[25:end])\n\
    \    unique_chars = unique_chars.union(words[26:end])\n    unique_chars = unique_chars.union(words[27:end])\n\
    \    unique_chars = unique_chars.union(words[28:end])\n    unique_chars = unique_chars.union(words[29:end])\n\
    \    unique_chars = unique_chars.union(words[31:end])\n    unique_chars = unique_chars.union(words[32:end])\n\
    \    unique_chars = unique_chars.union(words[33:end])\n    unique_chars = unique_chars.union(words[34:end])\n\
    \    unique_chars = unique_chars.union(words[35:end])\n    unique_chars = unique_chars.union(words[36:end])\n\
    \    unique_chars = unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo5_qvnzg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo5_qvnzg.jl:1\n\
    in expression starting at /tmp/tmpo5_qvnzg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n            if unique_chars.size\
    \ > max_unique_chars\n                max_unique_chars = unique_chars.size\n \
    \           end\n        end\n    end\n    return words[max_unique_chars]\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3n50ibs.jl:25\nin expression starting at\
    \ /tmp/tmpn3n50ibs.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars\
    \ = unique_chars - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n\
    \    unique_chars = unique_chars - Set(\"4\")\n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n    unique_chars\
    \ = unique_chars - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"@\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_char\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb1gqt53.jl:31\nin expression starting at\
    \ /tmp/tmpyb1gqt53.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words \n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(collect(word_counts))\n\
    \    word_counts[word_counts[length(word_counts)]]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yfbkjvm.jl:21\nin expression starting at\
    \ /tmp/tmp2yfbkjvm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi6iv_6fw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6iv_6fw.jl:1\n\
    in expression starting at /tmp/tmpi6iv_6fw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = Dict()\n    for word in\
    \ words\n        for char in word\n            if char in unique_chars\n     \
    \           unique_chars_count[char] += 1\n            else\n                unique_chars.add(char)\n\
    \                unique_chars_count[char] = 1\n    end\n    \n    unique_chars_sorted\
    \ = sort(unique_chars_count)\n    \n    unique_chars_sorted[end]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise\nWrite a function that accepts a vector of strings and returns\
    \ a vector of strings. \nThe vector contains different words. Return the word\
    \ with maximum number\nof unique characters. If multiple strings have maximum\
    \ number of unique\ncharacters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjodrrxso.jl:29\nin expression starting at\
    \ /tmp/tmpjodrrxso.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n        unique_chars_count =\
    \ length(unique_chars)\n    end\n    \n    if unique_chars_count > length(unique_chars)\n\
    \        return words[end]\n    else\n        unique_chars_count\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \nThe vector contains different words. Return the\
    \ word with maximum number\nof unique characters. If multiple strings have maximum\
    \ number of unique\ncharacters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r4_9_23.jl:27\nin expression starting at\
    \ /tmp/tmp4r4_9_23.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word\
    \ in words\n        unique_chars = unique_chars | Set(word)\n        if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. Return the string that has maximum number of unique characters\
    \ in the same position as in the vector of integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3pa40m00.jl:24\nin expression starting at\
    \ /tmp/tmp3pa40m00.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}()\n    word_with_max_unique_chars = \"\"\n  \
    \  for word in words \n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \nThe vector contains different words. Return the\
    \ word with maximum number of unique characters. If multiple strings have maximum\
    \ number of unique characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq85v8l0x.jl:27\nin expression starting at\
    \ /tmp/tmpq85v8l0x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzezhrftu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzezhrftu.jl:1\n\
    in expression starting at /tmp/tmpzezhrftu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyn8zc4m9.jl:24\nin expression starting at\
    \ /tmp/tmpyn8zc4m9.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[argmax(words)]\n    else\n        return words[argmax(words)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"\
    , \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2vis1k_.jl:27\nin expression starting at\
    \ /tmp/tmp_2vis1k_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars\
    \ = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\"\
    )\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoignvm52.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoignvm52.jl:1\n\
    in expression starting at /tmp/tmpoignvm52.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"\
    cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"\
    cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\",\
    \ \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    )\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"\
    ]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"\
    ]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38ntdyrl.jl:21\nin expression starting at\
    \ /tmp/tmp38ntdyrl.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars[char] <-unique_chars[char] + 1\n    end\n\
    \    \n    unique_chars = unique_chars[end]\n    \n    if unique_chars == length(unique_chars)\n\
    \        return words[end]\n    else\n        unique_chars = unique_chars[end]\n\
    \        \n        for word in words\n            if unique_chars == length(unique_chars)\n\
    \                return word\n            else\n                unique_chars =\
    \ unique_chars[end]\n            end\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkx4be29.jl:36\nin expression starting at\
    \ /tmp/tmpjkx4be29.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts,\
    \ by=x->length(x), rev=true)\n    word_counts[word_counts[end][1]][1]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuci0n152.jl:21\nin expression starting at\
    \ /tmp/tmpuci0n152.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n\
    \    unique_chars = unique_chars - Set(\"2\")\n    unique_chars = unique_chars\
    \ - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n    unique_chars\
    \ = unique_chars - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n\
    \    unique_chars = unique_chars - Set(\"7\")\n    unique_chars = unique_chars\
    \ - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp33sc4fki.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp33sc4fki.jl:1\n\
    in expression starting at /tmp/tmp33sc4fki.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\"\
    )\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89m4_ptm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp89m4_ptm.jl:1\n\
    in expression starting at /tmp/tmp89m4_ptm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    \n    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    ?\")\n    unique_chars = unique_chars - Set(\"!\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    \n    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    ?\")\n    unique_chars = unique_chars - Set(\"!\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    \n    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    ?\")\n    unique_chars = unique_chars - Set(\"!\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    \n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    \n    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5wxopa68.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5wxopa68.jl:1\n\
    in expression starting at /tmp/tmp5wxopa68.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set{String}()\n    \n    for word in words \n   \
    \     unique_chars = unique_chars + Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"b\")\n\
    \    unique_chars = unique_chars - Set(\"c\")\n    unique_chars = unique_chars\
    \ - Set(\"d\")\n    unique_chars = unique_chars - Set(\"e\")\n    unique_chars\
    \ = unique_chars - Set(\"f\")\n    unique_chars = unique_chars - Set(\"g\")\n\
    \    unique_chars = unique_chars - Set(\"h\")\n    unique_chars = unique_chars\
    \ - Set(\"i\")\n    unique_chars = unique_chars - Set(\"j\")\n    unique_chars\
    \ = unique_chars - Set(\"k\")\n    unique_chars = unique_chars - Set(\"l\")\n\
    \    unique_chars = unique_chars - Set(\"m\")\n    unique_chars = unique_chars\
    \ - Set(\"n\")\n    unique_chars = unique_chars - Set(\"o\")\n    unique_chars\
    \ = unique_chars - Set(\"p\")\n    unique_chars = unique_chars - Set(\"q\")\n\
    \    unique_chars = unique_chars - Set(\"r\")\n    unique_chars = unique_chars\
    \ - Set(\"s\")\n    unique_chars = unique_chars - Set(\"t\")\n    unique_chars\
    \ = unique_chars - Set(\"u\")\n    unique_chars = unique_chars - Set(\"v\")\n\
    \    unique_chars = unique_chars - Set(\"w\")\n    unique_chars = unique_chars\
    \ - Set(\"x\")\n    unique_chars = unique_chars - Set(\"y\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"B\")\n    unique_chars = unique_chars\
    \ - Set(\"C\")\n    unique_chars = unique_chars - Set(\"D\")\n    unique_chars\
    \ = unique_chars - Set(\"E\")\n    unique_chars = unique_chars - Set(\"F\")\n\
    \    unique_chars = unique_chars - Set(\"G\")\n    unique_chars = unique_chars\
    \ - Set(\"H\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"J\")\n    unique_chars = unique_chars - Set(\"K\")\n\
    \    unique_chars = unique_chars - Set(\"L\")\n    unique_chars = unique_chars\
    \ - Set(\"M\")\n    unique_chars = unique_chars - Set(\"N\")\n    unique_chars\
    \ = unique_char\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbnyxpkzl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbnyxpkzl.jl:1\n\
    in expression starting at /tmp/tmpbnyxpkzl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and returns\
    \ a vector of strings. Each element of the returned vector contains the number\
    \ of unique characters in the corresponding element of the original vector.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ypztg63.jl:21\nin expression starting at\
    \ /tmp/tmp9ypztg63.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    \n    unique_chars = Set()\n    \n    for word in words\n        for char\
    \ in word\n            unique_chars = unique_chars + char\n        end\n    end\n\
    \    \n    unique_chars = unique_chars |> Set\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        \n        unique_chars\
    \ = unique_chars |> Set\n        \n        for word in words\n            unique_chars\
    \ = unique_chars - word\n        end\n        \n        unique_chars = unique_chars\
    \ |> Set\n        \n        if length(unique_chars) == length(words)\n       \
    \     return words[1]\n        else\n            return words[end]\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. \n    The vector contains different words.\
    \ Return the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\
    \t@test(candidate([\"name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"\
    bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\"\
    )\n\t@test(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\")\n\t@test(candidate([\"we\", \"are\", \"gonna\", \"rock\"]) ==\
    \ \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"])\
    \ == \"nation\")\n\t@test(candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"\
    this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"play\", \"\
    play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjgrld5ef.jl:44\nin expression starting at\
    \ /tmp/tmpjgrld5ef.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}()\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{String}(\"A\")\n    unique_chars = unique_chars - Set{String}(\"\
    0\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String\nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or } in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82mzfm_e.jl:54\nin expression starting at\
    \ /tmp/tmp82mzfm_e.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    for word in words \n        for char in word\n\
    \            unique_chars.add(char)\n            unique_chars = unique_chars -\
    \ Set([char])\n    end\n    unique_chars = unique_chars - Set([\"\"])\n    unique_chars\
    \ = unique_chars - Set([\" \"])\n    unique_chars = unique_chars - Set([\",\"\
    ])\n    unique_chars = unique_chars - Set([\".\"])\n    unique_chars = unique_chars\
    \ - Set([\":\"])\n    unique_chars = unique_chars - Set([\"?\"])\n    unique_chars\
    \ = unique_chars - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"-\"\
    ])\n    unique_chars = unique_chars - Set([\"/\"])\n    unique_chars = unique_chars\
    \ - Set([\"\\\\\"])\n    unique_chars = unique_chars - Set([\"|\"])\n    unique_chars\
    \ = unique_chars - Set([\"<\"])\n    unique_chars = unique_chars - Set([\">\"\
    ])\n    unique_chars = unique_chars - Set([\"=\"])\n    unique_chars = unique_chars\
    \ - Set([\"+\"])\n    unique_chars = unique_chars - Set([\"*\"])\n    unique_chars\
    \ = unique_chars - Set([\"(\"])\n    unique_chars = unique_chars - Set([\")\"\
    ])\n    unique_chars = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars\
    \ - Set([\"$\"])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars\
    \ = unique_chars - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"\
    ])\n    unique_chars = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars\
    \ - Set([\"$\"])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars\
    \ = unique_chars - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"\
    ])\n    unique_chars = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars\
    \ - Set([\"$\"])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars\
    \ = unique_chars - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"\
    ])\n    unique_chars = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars\
    \ - Set([\"$\"])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars\
    \ = unique_chars - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"\
    ])\n    unique_chars = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars\
    \ - Set([\"\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ku0hrwo.jl:39\nin expression starting at\
    \ /tmp/tmp6ku0hrwo.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts)\n\
    \    word_counts[word_counts[end][1]][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that accepts a vector of strings and returns the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtzwdtjg.jl:21\nin expression starting at\
    \ /tmp/tmpxtzwdtjg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ |= Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = find_max;\n\t@test(candidate([\"name\", \"of\", \"string\"]) ==\
    \ \"string\")\n\t@test(candidate([\"name\", \"enam\", \"game\"]) == \"enam\")\n\
    \t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\t@test(candidate([\"\
    abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"play\", \"this\", \"game\"\
    , \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"we\", \"are\"\
    , \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\", \"is\"\
    , \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\t@test(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_p2o4fkk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_p2o4fkk.jl:1\n\
    in expression starting at /tmp/tmp_p2o4fkk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\
    \ \n        for char in word\n            unique_chars << char\n            unique_chars_count\
    \ += 1\n            if unique_chars_count > unique_chars_max\n               \
    \ unique_chars_max = unique_chars_count\n                unique_chars_word = word\n\
    \            end\n        end\n    end\n    return unique_chars_word\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\nusing Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4l_ux959.jl:28\nin expression starting at\
    \ /tmp/tmp4l_ux959.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
    \ contains different words. Return the word with maximum number\n    of unique\
    \ characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.\n\n    >>> find_max([\"\
    name\", \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\"\
    , \"game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    \    \"aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String\
    \ \n    unique_chars = Set{String}()\n    for word in words \n        for char\
    \ in word\n            unique_chars.add(char)\n            unique_chars.discard(char)\n\
    \            if unique_chars.size == word.length\n                return word\n\
    \            unique_chars.clear()\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that accepts a vector of strings and a vector of integers. \n\
    \    The vector contains different words. Return the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.\n\
    using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\",\
    \ \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) ==\
    \ \"aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) ==\
    \ \"b\")\n\t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplq_bmo6e.jl:24\nin expression starting at\
    \ /tmp/tmplq_bmo6e.jl:24\n"
  stdout: ''
