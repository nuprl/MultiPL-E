name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n <= m \n        rounded_avg = round(n/m)\n        rounded_avg\
    \ = string(rounded_avg)\n        rounded_avg = string(rounded_avg)\n        rounded_avg\
    \ = string(rounded_avg)\n        return rounded_avg\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.",
  "    if n == m \n        rounded_avg = n\n    else\n        rounded_avg = round(n/m\
    \ + 0.5)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \nThe function should take in a string\
    \ and return the number of characters in the string.\nExamples:\n>>> num_chars(\"\
    hello\")\n5\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n\
    9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld", "    if n\
    \ > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nExample: \n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n6.283185307179586e+307\n\
    >>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n5.66564090e+15\n\
    >>> factorial(100000)\n9.407803840e+14\n>>> factorial(1000000)\n1.84467447e+19\n\
    >>> factorial(10000000)\n2.302585092e+16\n>>> factorial(100000000)\n5.960464477e+12\n\
    >>> factorial(1000000000)\n1.8446744073709552e+19\n>>> factorial(10000000000)\n\
    3.36210314e+21\n>>> factorial(100000000000)\n6.283185307179586e+307\n>>> factorial(1000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(10000000000000)\n5.66564090e+15\n>>> factorial(100000000000000)\n\
    9.407803840e+14\n>>> factorial(1000000000000000)\n1.8446744073709552e+19\n>>>\
    \ factorial(10000000000000000)\n3.36210314e+21\n>>> factorial(100000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(1000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(10000000000000000000)\n3.36210314e+21\n>>> factorial(100000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(100000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(1000000000000000000000)\n3.36210314e+21\n>>> factorial(10000000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000000000000)\n1.8446744073709552e+19\n\
    >>> ", "    if n <= m\n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n <= m \n        rounded_avg =\
    \ round(n/m)*m \n        return String(rounded_avg) \n    else \n        rounded_avg\
    \ = -1\n        return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nThe Fibonacci numbers are the numbers in the\
    \ following pattern:", "    if n <= m \n        rounded_avg = round(n/m)*m \n\
    \        return String(rounded_avg) \n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of digits in an integer. \nExample: \n>>>\
    \ digits(123)\n3\n>>> digits(1234)\n4\n>>> digits(12345)\n5\n>>> digits(123456)\n\
    6\n>>> digits(1234567)\n7\n>>> digits(12345678)\n8\n>>> digits(123456789)\n9\n\
    >>> digits(1234567890)\n10\n>>> digits(12345678901)\n11\n>>> digits(123456789012)\n\
    12\n>>> digits(1234567890123)\n13\n>>> digits(12345678901234)\n14\n>>> digits(123456789012345)\n\
    15\n>>> digits(1234567890123456)\n16\n>>> digits(12345678901234567)\n17\n>>> digits(123456789012345678)\n\
    18\n>>> digits(1234567890123456789)\n19\n>>> digits(12345678901234567890)\n20\n\
    >>> digits(123456789012345678901)\n21\n>>> digits(1234567890123456789012)\n22\n\
    >>> digits(12345678901234567890123)\n23\n>>> digits(123456789012345678901234)\n\
    24\n>>> digits(1234567890123456789012345)\n25\n>>> digits(12345678901234567890123456)\n\
    26\n>>> digits(123456789012345678901234567)\n27\n>>> digits(1234567890123456789012345678)\n\
    28\n>>> digits(12345678901234567890123456789)\n29\n>>> digits(123456789012345678901234567890)\n\
    30\n>>> digits(1234567890123456789012345678901)\n31\n>>> digits(12345678901234567890123456789012)\n\
    32\n>>> digits(123456789012345678901234567890123)\n33\n>>> digits(1234567890123456789012345678901234)\n\
    34\n>>> digits(12345678901234567890123456789012345)\n35\n>>> digits(123456789012345678901234567890123456)\n\
    36\n>>> digits(1234567890123456789012345678901234567)\n37\n>>> digits(12345678901234567890123456789012345678)\n\
    38\n>>> digits(123456789012345678901234567890123456789)\n39\n>>> digits(1234567890123456789012345678901234567890)\n\
    40\n>>> ", "    if n>m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))*Int64(m)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string.", "    if n <= m \n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n    else\n \
    \       return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-", "    if m > n \n        return -1\n    else \n       \
    \ return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m, and returns the number of digits in n and m.", "    if\
    \ n <= m \n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ number of digits in an integer.", "    if n < m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = (n+m)/2\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(33)\n
  "    if n > m \n        then return -1\n    else \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return bin(rounded_avg)[2:]\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers and returns the sum of the integers \n    between them inclusive.\n\
    \    Example:\n    >>> sum_of_ints(1, 5)\n    6\n    >>> sum_of_ints(7, 5)\n \
    \   10\n    >>> sum_of_ints(10, 20)\n    30\n    >>> sum_of_ints(20, 33)\n   \
    \ 43\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer $n$ is defined as:\n$$\nn! = n \\times n-1 \\times\
    \ n-2 \\times ...\\times 2 \\times 1\n$$\nFor example, $5! = 5 \\times 4 \\times\
    \ 3 \\times 2 \\times 1 = 120$", "    if n <= m\n        return n\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell",
  "    if n <= m \n        rounded_avg = round(n / m) * m\n        return tostring(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two integers n and m and returns the number of digits in m that are less than\
    \ or equal to n.", "    if n <= m \n        rounded_avg = round(n/m)*m\n     \
    \   rounded_avg = rounded_avg.to_s(2)\n        return rounded_avg\n    else \n\
    \        return -1\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nExample: \n>>> digits(12345)\n5\n>>> digits(-12345)\n4\n>>>\
    \ digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-1234",
  "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n        return\
    \ Int64(bin(rounded_avg)[2:])\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    \"\"\"", "    if n >= m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = ceil(Int, (n + m) / 2)\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given number appears in a\
    \ given array. \nFor example, if the input is [1, 1, 2, 3], the function should\
    \ return 2.\nIf the input is [1, 1, 1, 2, 3], the function should return 3.\n\
    If the input is [1, 1, 1, 2, 3, 3], the function should return 4.\nIf the input\
    \ is [1, 1, 1, 2, 3, 3, 3], the function should return 5.", "    if n > m \n \
    \       rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n)\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.8864410051953125e+30\n\
    >>> factorial(40)\n1.8446744073709552e+19\n>>> factorial(50)\n5.1539790008544921e+51\n\
    >>> factorial(60)\n3.675589562225952e+120\n>>> factorial(70)\n2.590163934426229e+70\n\
    >>> factorial(80)\n1.2337254901960784e+80\n>>> factorial(90)\n5.208018493749478e+90\n\
    >>> factorial(100)\n2.334829670761726e+100\n>>> factorial(110)\n1.2337254901960784e+110\n\
    >>> factorial(120)\n5.208018493749478e+120\n>>> factorial(130)\n1.8446744073709552e+130\n\
    >>> factorial(140)\n3.675589562225952e+140\n>>> factorial(150)\n6.8864410051953125e+150\n\
    >>> factorial(160)\n1.8446744073709552e+160\n>>> factorial(170)\n3.675589562225952e+170\n\
    >>> factorial(180)\n6.8864410051953125e+180\n>>> factorial(190)\n1.8446744073709552e+190\n\
    >>> factorial(200)\n3.675589562225952e+200\n>>> factorial(210)\n6.8864410051953125e+210\n\
    >>> factorial(220)\n1.8446744073709", "    if n <= m\n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if m > n \n        return -1\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if n <= m\n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if n>m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    130767436800\n\
    \    >>> factorial(33)\n    130767436800\n    \"\"\"", "    if n <= m \n     \
    \   rounded_avg = round(n/m)*m \n        rounded_avg = string(rounded_avg)\n \
    \   else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a number. \nThe function should\
    \ accept a single argument and return the factorial of that number.\nThe factorial\
    \ of a number is defined as:", "    if n > m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n    end\n\
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    2432902008176640000\n    >>> factorial(33)\n\
    \    140737488355328\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(n/m)*m\n    rounded_avg = bin(rounded_avg)[2:]\n\
    \    return rounded_avg\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead\
    \ of `0b11010`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. `rounded_avg(-7,\
    \ 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c |>\nYes, it works\
    \ for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. `rounded_avg(-7, 5)` returns\
    \ `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| a\
    \ tags=python,python-3.x |>\n<code>\ndef rounded_avg(n,m):\n    if n>m:\n    \
    \    return -1\n    else:\n        return round(n/m)*m\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `rounded_avg(-7, 5)` returns\
    \ `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c\
    \ |>\nIt works for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead\
    \ of `0b11010`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef rounded_avg(n,m):\n \
    \   if n>m:\n        return -1\n    else:\n        return round(n/m)*m\n</code>\n\
    <|/ a tags=python,python-3.x |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c\
    \ |>\nIt works for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead\
    \ of `0b", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n   \
    \     rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nExample: \n\
    >>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n6.615941559566805e-324\n\
    >>> factorial(1000)\n1.7976931348623157e+308", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of digits in n. \nFor example, \n    digits(1) = 1\n\
    \    digits(123) = 2\n    digits(1234) = 3\n    digits(12345) = 4\n    digits(123456)\
    \ = 5\n    digits(1234567) = 6\n    digits(12345678) = 7\n    digits(123456789)\
    \ = 8\n    digits(1234567890) = 9\n    digits(12345678901) = 10\n    digits(123456789012)\
    \ = 11\n    digits(1234567890123) = 12\n    digits(12345678901234) = 13\n    digits(123456789012345)\
    \ = 14\n    digits(1234567890123456) = 15\n    digits(12345678901234567) = 16\n\
    \    digits(123456789012345678) = 17\n    digits(1234567890123456789) = 18\n \
    \   digits(12345678901234567890) = 19\n    digits(123456789012345678901) = 20\n\
    \    digits(1234567890123456789012) = 21\n    digits(12345678901234567890123)\
    \ = 22\n    digits(123456789012345678901234) = 23\n    digits(1234567890123456789012345)\
    \ = 24\n    digits(12345678901234567890123456) = 25\n    digits(123456789012345678901234567)\
    \ = 26\n    digits(1234567890123456789012345678) = 27\n    digits(12345678901234567890123456789)\
    \ = 28\n    digits(123456789012345678901234567890) = 29\n    digits(1234567890123456789012345678901)\
    \ = 30\n    digits(12345678901234567890123456789012) = 31\n    digits(123456789012345678901234567890123)\
    \ = 32\n    digits(1234567890123456789012345678901234) = 33\n    digits(12345678901234567890123456789012345)\
    \ = 34\n    digits(123456789012345678901234567890123456) = 35\n    digits(1234567890123456789012345678901234567)\
    \ = 36\n    digits(12345678901234567890123456789012345678) = 37\n    digits(123456789012345678901234567890123456789)\
    \ = 38\n    digits(1234567890123456789012345678901234567890) = 39\n    digits(12345678901234567890123456789012345678901)\
    \ = 40\n    digits(123456789012345678901234567890123456789012) = 41\n    digits(123456789",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = ceil(n\
    \ / m) * m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \n    For example, factorial(5) = 5 * 4 * 3\
    \ * 2 * 1 = 120\n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    2432902008176640000\n    >>> factorial(33)\n\
    \    140737488355328\n    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n    else \n        rounded_avg = -1\n    return rounded_avg\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,binary,rounding |>\nThe other answers here\
    \ are great, but I wanted to share my solution, which is more general:\n<code>",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = ceil(Int,\
    \ (n + m) / 2)\n    end\n    return rounded_avg\nend", "    if m > n \n      \
    \  return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    \"\"\"", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = ceil(Int, (n + m) / 2)\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg", "    if n <= m \n        return n\n    else \n        return -1\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer n and returns the number of digits\
    \ in the binary representation of n. \nExample: \n    >>> digits(1)\n    1\n \
    \   >>> digits(2)\n    1\n    >>> digits(3)\n    2\n    >>> digits(4)\n    2\n\
    \    >>> digits(5)\n    3\n    >>> digits(6)\n    3\n    >>> digits(7)\n    4\n\
    \    >>> digits(8)\n    4\n    >>> digits(9)\n    5\n    >>> digits(10)\n    5\n\
    \    >>> digits(11)\n    6\n    >>> digits(12)\n    6\n    >>> digits(13)\n  \
    \  7\n    >>> digits(14)\n    7\n    >>> digits(15)\n    8\n    >>> digits(16)\n\
    \    8\n    >>> digits(17)\n    9\n    >>> digits(18)\n    9\n    >>> digits(19)\n\
    \    10\n    >>> digits(20)\n    10\n    >>> digits(21)\n    11\n    >>> digits(22)\n\
    \    11\n    >>> digits(23)\n    12\n    >>> digits(24)\n    12\n    >>> digits(25)\n\
    \    13\n    >>> digits(26)\n    13\n    >>> digits(27)\n    14\n    >>> digits(28)\n\
    \    14\n    >>> digits(29)\n    15\n    >>> digits(30)\n    15\n    >>> digits(31)\n\
    \    16\n    >>> digits(32)\n    16\n    >>> digits(33)\n    17\n    >>> digits(34)\n\
    \    17\n    >>> digits(35)\n    18\n    >>> digits(36)\n    18\n    >>> digits(37)\n\
    \    19\n    >>> digits(38)\n    19\n    >>> digits(39)\n    20\n    >>> digits(40)\n\
    \    20\n    >>> digits(41)\n    21\n    >>> digits(42)\n    21\n    >>> digits(43)\n\
    \    22\n    >>> digits(44)\n    22\n    >>> digits(45)\n    23\n    >>> digits(46)\n\
    \    23\n    >>> digits(47)\n    24\n    >>> digits(48)\n    24\n    >>> digit",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    \n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in n. \nExample: \n>>> digits(10)\n4\n>>> digits(100)\n5\n>>> digits(1000)\n\
    6\n>>> digits(10000)\n7\n>>> digits(100000)\n8\n>>> digits(1000000)\n9\n>>> digits(10000000)\n\
    10\n>>> digits(100000000)\n11\n>>> digits(1000000000)\n12\n>>> digits(10000000000)\n\
    13\n>>> digits(100000000000)\n14\n>>> digits(1000000000000)\n15\n>>> digits(1000000000001)\n\
    16\n>>> digits(1000000000002)\n17\n>>> digits(1000000000003)\n18\n>>> digits(1000000000004)\n\
    19\n>>> digits(1000000000005)\n20\n>>> digits(1000000000006)\n21\n>>> digits(1000000000007)\n\
    22\n>>> digits(1000000000008)\n23\n>>> digits(1000000000009)\n24\n>>> digits(1000000000010)\n\
    25\n>>> digits(1000000000011)\n26\n>>> digits(1000000000012)\n27\n>>> digits(1000000000013)\n\
    28\n>>> digits(1000000000014)\n29\n>>> digits(1000000000015)\n30\n>>> digits(1000000000016)\n\
    31\n>>> digits(1000000000017)\n32\n>>> digits(1000000000018)\n33\n>>> digits(1000000000019)\n\
    34\n>>> digits(1000000000020)\n35\n>>> digits(1000000000021)\n36\n>>> digits(1000000000022)\n\
    37\n>>> digits(1000000000023)\n38\n>>> digits(1000000000024)\n39\n>>> digits(1000000000025)\n\
    40\n>>> digits(1000000000026)\n41\n>>> digits(1000000000027)\n42\n>>> digits(1000000000028)\n\
    43\n>>> digits(1000000000029)\n44\n>>> digits(1000000000030)\n45\n>>> digits(1000000000031)\n\
    46\n>>> digits(10000000000", "    if n >= m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n    end\n\
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a string.", "    if n > m \n        return -1\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if m > n \n        return -1\n    \n    sum = 0\n    \n   \
    \ for i in n:m\n        sum += i\n    \n    return sum / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \n    For example,\
    \ \n    digits(123456789) should return 5.\n    digits(0) should return 0.\n \
    \   digits(-1234) should return 4.\n    digits(0x1234) should return 4.\n    digits(0x1234_5678)\
    \ should return 6.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB) should\
    \ return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_1234)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD_EFGH)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD_EFGH_IJKL)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD_EFGH_IJKL_OPQR_STU)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_912", "    if m > n\
    \ \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise: Write a function that converts a binary number to a decimal\
    \ number. \n    For example, 0b1111 would be converted to 11 and 0b11010 would\
    \ be converted to 10.", "    if n >= m \n        return -1\n    \n    sum = 0\n\
    \    \n    for i in n:m:\n        sum += i\n    \n    return sum // m\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)*m \n    else \n\
    \        rounded_avg = -1\n    return rounded_avg\n</code>\n<|/ a tags=julia,binary,rounding\
    \ |>\n<| a tags=julia,binary,rounding |>\n<code>", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
