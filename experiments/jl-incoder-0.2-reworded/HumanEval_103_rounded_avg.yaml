name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n <= m \n        rounded_avg = round(n/m)\n        rounded_avg\
    \ = string(rounded_avg)\n        rounded_avg = string(rounded_avg)\n        rounded_avg\
    \ = string(rounded_avg)\n        return rounded_avg\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.",
  "    if n == m \n        rounded_avg = n\n    else\n        rounded_avg = round(n/m\
    \ + 0.5)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \nThe function should take in a string\
    \ and return the number of characters in the string.\nExamples:\n>>> num_chars(\"\
    hello\")\n5\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n\
    9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld", "    if n\
    \ > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nExample: \n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n6.283185307179586e+307\n\
    >>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n5.66564090e+15\n\
    >>> factorial(100000)\n9.407803840e+14\n>>> factorial(1000000)\n1.84467447e+19\n\
    >>> factorial(10000000)\n2.302585092e+16\n>>> factorial(100000000)\n5.960464477e+12\n\
    >>> factorial(1000000000)\n1.8446744073709552e+19\n>>> factorial(10000000000)\n\
    3.36210314e+21\n>>> factorial(100000000000)\n6.283185307179586e+307\n>>> factorial(1000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(10000000000000)\n5.66564090e+15\n>>> factorial(100000000000000)\n\
    9.407803840e+14\n>>> factorial(1000000000000000)\n1.8446744073709552e+19\n>>>\
    \ factorial(10000000000000000)\n3.36210314e+21\n>>> factorial(100000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(1000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(10000000000000000000)\n3.36210314e+21\n>>> factorial(100000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(100000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(1000000000000000000000)\n3.36210314e+21\n>>> factorial(10000000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000000000000)\n1.8446744073709552e+19\n\
    >>> ", "    if n <= m\n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n <= m \n        rounded_avg =\
    \ round(n/m)*m \n        return String(rounded_avg) \n    else \n        rounded_avg\
    \ = -1\n        return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nThe Fibonacci numbers are the numbers in the\
    \ following pattern:", "    if n <= m \n        rounded_avg = round(n/m)*m \n\
    \        return String(rounded_avg) \n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of digits in an integer. \nExample: \n>>>\
    \ digits(123)\n3\n>>> digits(1234)\n4\n>>> digits(12345)\n5\n>>> digits(123456)\n\
    6\n>>> digits(1234567)\n7\n>>> digits(12345678)\n8\n>>> digits(123456789)\n9\n\
    >>> digits(1234567890)\n10\n>>> digits(12345678901)\n11\n>>> digits(123456789012)\n\
    12\n>>> digits(1234567890123)\n13\n>>> digits(12345678901234)\n14\n>>> digits(123456789012345)\n\
    15\n>>> digits(1234567890123456)\n16\n>>> digits(12345678901234567)\n17\n>>> digits(123456789012345678)\n\
    18\n>>> digits(1234567890123456789)\n19\n>>> digits(12345678901234567890)\n20\n\
    >>> digits(123456789012345678901)\n21\n>>> digits(1234567890123456789012)\n22\n\
    >>> digits(12345678901234567890123)\n23\n>>> digits(123456789012345678901234)\n\
    24\n>>> digits(1234567890123456789012345)\n25\n>>> digits(12345678901234567890123456)\n\
    26\n>>> digits(123456789012345678901234567)\n27\n>>> digits(1234567890123456789012345678)\n\
    28\n>>> digits(12345678901234567890123456789)\n29\n>>> digits(123456789012345678901234567890)\n\
    30\n>>> digits(1234567890123456789012345678901)\n31\n>>> digits(12345678901234567890123456789012)\n\
    32\n>>> digits(123456789012345678901234567890123)\n33\n>>> digits(1234567890123456789012345678901234)\n\
    34\n>>> digits(12345678901234567890123456789012345)\n35\n>>> digits(123456789012345678901234567890123456)\n\
    36\n>>> digits(1234567890123456789012345678901234567)\n37\n>>> digits(12345678901234567890123456789012345678)\n\
    38\n>>> digits(123456789012345678901234567890123456789)\n39\n>>> digits(1234567890123456789012345678901234567890)\n\
    40\n>>> ", "    if n>m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))*Int64(m)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string.", "    if n <= m \n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n    else\n \
    \       return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-", "    if m > n \n        return -1\n    else \n       \
    \ return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m, and returns the number of digits in n and m.", "    if\
    \ n <= m \n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ number of digits in an integer.", "    if n < m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = (n+m)/2\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(33)\n    ",
  "    if n > m \n        then return -1\n    else \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return bin(rounded_avg)[2:]\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers and returns the sum of the integers \n    between them inclusive.\n\
    \    Example:\n    >>> sum_of_ints(1, 5)\n    6\n    >>> sum_of_ints(7, 5)\n \
    \   10\n    >>> sum_of_ints(10, 20)\n    30\n    >>> sum_of_ints(20, 33)\n   \
    \ 43\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer $n$ is defined as:\n$$\nn! = n \\times n-1 \\times\
    \ n-2 \\times ...\\times 2 \\times 1\n$$\nFor example, $5! = 5 \\times 4 \\times\
    \ 3 \\times 2 \\times 1 = 120$", "    if n <= m\n        return n\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell",
  "    if n <= m \n        rounded_avg = round(n / m) * m\n        return tostring(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two integers n and m and returns the number of digits in m that are less than\
    \ or equal to n.", "    if n <= m \n        rounded_avg = round(n/m)*m\n     \
    \   rounded_avg = rounded_avg.to_s(2)\n        return rounded_avg\n    else \n\
    \        return -1\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nExample: \n>>> digits(12345)\n5\n>>> digits(-12345)\n4\n>>>\
    \ digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-1234",
  "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n        return\
    \ Int64(bin(rounded_avg)[2:])\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
