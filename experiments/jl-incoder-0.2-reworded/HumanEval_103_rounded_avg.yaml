name: HumanEval_103_rounded_avg
language: jl
prompt: "\"\"\"You are given two positive integers n and m, and your task is to compute\
  \ the\n    average of the integers from n through m (including n and m). \n    Round\
  \ the answer to the nearest integer and convert that to binary.\n    If n is greater\
  \ than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    \"0b11\"\n  \
  \  >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    \"0b1111\"\n\
  \    >>> rounded_avg(20, 33)\n    \"0b11010\"\n    \"\"\"\nfunction rounded_avg(n::Int64,\
  \ m::Int64)::Union{String, Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = rounded_avg;\n\t@test(candidate(1,\
  \ 5) == \"0b11\")\n\t@test(candidate(7, 13) == \"0b1010\")\n\t@test(candidate(964,\
  \ 977) == \"0b1111001010\")\n\t@test(candidate(996, 997) == \"0b1111100100\")\n\t\
  @test(candidate(560, 851) == \"0b1011000010\")\n\t@test(candidate(185, 546) == \"\
  0b101101110\")\n\t@test(candidate(362, 496) == \"0b110101101\")\n\t@test(candidate(350,\
  \ 902) == \"0b1001110010\")\n\t@test(candidate(197, 233) == \"0b11010111\")\n\t\
  @test(candidate(7, 5) == -1)\n\t@test(candidate(5, 1) == -1)\n\t@test(candidate(5,\
  \ 5) == \"0b101\")\nend\n"
completions: ["    if n <= m \n        rounded_avg = round(n/m)\n        rounded_avg\
    \ = string(rounded_avg)\n        rounded_avg = string(rounded_avg)\n        rounded_avg\
    \ = string(rounded_avg)\n        return rounded_avg\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.",
  "    if n == m \n        rounded_avg = n\n    else\n        rounded_avg = round(n/m\
    \ + 0.5)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \nThe function should take in a string\
    \ and return the number of characters in the string.\nExamples:\n>>> num_chars(\"\
    hello\")\n5\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n\
    9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>>\
    \ num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"\
    helloworld\")\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld\"\
    )\n9\n>>> num_chars(\"helloworld\")\n9\n>>> num_chars(\"helloworld", "    if n\
    \ > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n\
    \ <= m \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nExample: \n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n6.283185307179586e+307\n\
    >>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n5.66564090e+15\n\
    >>> factorial(100000)\n9.407803840e+14\n>>> factorial(1000000)\n1.84467447e+19\n\
    >>> factorial(10000000)\n2.302585092e+16\n>>> factorial(100000000)\n5.960464477e+12\n\
    >>> factorial(1000000000)\n1.8446744073709552e+19\n>>> factorial(10000000000)\n\
    3.36210314e+21\n>>> factorial(100000000000)\n6.283185307179586e+307\n>>> factorial(1000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(10000000000000)\n5.66564090e+15\n>>> factorial(100000000000000)\n\
    9.407803840e+14\n>>> factorial(1000000000000000)\n1.8446744073709552e+19\n>>>\
    \ factorial(10000000000000000)\n3.36210314e+21\n>>> factorial(100000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(1000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(10000000000000000000)\n3.36210314e+21\n>>> factorial(100000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(100000000000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(1000000000000000000000)\n3.36210314e+21\n>>> factorial(10000000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000000000000)\n1.8446744073709552e+19\n\
    >>> ", "    if n <= m\n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n <= m \n        rounded_avg =\
    \ round(n/m)*m \n        return String(rounded_avg) \n    else \n        rounded_avg\
    \ = -1\n        return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nThe Fibonacci numbers are the numbers in the\
    \ following pattern:", "    if n <= m \n        rounded_avg = round(n/m)*m \n\
    \        return String(rounded_avg) \n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the number of digits in an integer. \nExample: \n>>>\
    \ digits(123)\n3\n>>> digits(1234)\n4\n>>> digits(12345)\n5\n>>> digits(123456)\n\
    6\n>>> digits(1234567)\n7\n>>> digits(12345678)\n8\n>>> digits(123456789)\n9\n\
    >>> digits(1234567890)\n10\n>>> digits(12345678901)\n11\n>>> digits(123456789012)\n\
    12\n>>> digits(1234567890123)\n13\n>>> digits(12345678901234)\n14\n>>> digits(123456789012345)\n\
    15\n>>> digits(1234567890123456)\n16\n>>> digits(12345678901234567)\n17\n>>> digits(123456789012345678)\n\
    18\n>>> digits(1234567890123456789)\n19\n>>> digits(12345678901234567890)\n20\n\
    >>> digits(123456789012345678901)\n21\n>>> digits(1234567890123456789012)\n22\n\
    >>> digits(12345678901234567890123)\n23\n>>> digits(123456789012345678901234)\n\
    24\n>>> digits(1234567890123456789012345)\n25\n>>> digits(12345678901234567890123456)\n\
    26\n>>> digits(123456789012345678901234567)\n27\n>>> digits(1234567890123456789012345678)\n\
    28\n>>> digits(12345678901234567890123456789)\n29\n>>> digits(123456789012345678901234567890)\n\
    30\n>>> digits(1234567890123456789012345678901)\n31\n>>> digits(12345678901234567890123456789012)\n\
    32\n>>> digits(123456789012345678901234567890123)\n33\n>>> digits(1234567890123456789012345678901234)\n\
    34\n>>> digits(12345678901234567890123456789012345)\n35\n>>> digits(123456789012345678901234567890123456)\n\
    36\n>>> digits(1234567890123456789012345678901234567)\n37\n>>> digits(12345678901234567890123456789012345678)\n\
    38\n>>> digits(123456789012345678901234567890123456789)\n39\n>>> digits(1234567890123456789012345678901234567890)\n\
    40\n>>> ", "    if n>m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))*Int64(m)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string.", "    if n <= m \n        rounded_avg\
    \ = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n    else\n \
    \       return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-", "    if m > n \n        return -1\n    else \n       \
    \ return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m, and returns the number of digits in n and m.", "    if\
    \ n <= m \n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ number of digits in an integer.", "    if n < m \n        rounded_avg = -1\n\
    \    else\n        rounded_avg = (n+m)/2\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(33)\n
  "    if n > m \n        then return -1\n    else \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return bin(rounded_avg)[2:]\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers and returns the sum of the integers \n    between them inclusive.\n\
    \    Example:\n    >>> sum_of_ints(1, 5)\n    6\n    >>> sum_of_ints(7, 5)\n \
    \   10\n    >>> sum_of_ints(10, 20)\n    30\n    >>> sum_of_ints(20, 33)\n   \
    \ 43\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer $n$ is defined as:\n$$\nn! = n \\times n-1 \\times\
    \ n-2 \\times ...\\times 2 \\times 1\n$$\nFor example, $5! = 5 \\times 4 \\times\
    \ 3 \\times 2 \\times 1 = 120$", "    if n <= m\n        return n\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell",
  "    if n <= m \n        rounded_avg = round(n / m) * m\n        return tostring(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ two integers n and m and returns the number of digits in m that are less than\
    \ or equal to n.", "    if n <= m \n        rounded_avg = round(n/m)*m\n     \
    \   rounded_avg = rounded_avg.to_s(2)\n        return rounded_avg\n    else \n\
    \        return -1\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. \nExample: \n>>> digits(12345)\n5\n>>> digits(-12345)\n4\n>>>\
    \ digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-12345)\n\
    4\n>>> digits(0)\n0\n>>> digits(-0)\n0\n>>> digits(12345)\n5\n>>> digits(-1234",
  "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n        return\
    \ Int64(bin(rounded_avg)[2:])\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    \"\"\"", "    if n >= m \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = ceil(Int, (n + m) / 2)\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given number appears in a\
    \ given array. \nFor example, if the input is [1, 1, 2, 3], the function should\
    \ return 2.\nIf the input is [1, 1, 1, 2, 3], the function should return 3.\n\
    If the input is [1, 1, 1, 2, 3, 3], the function should return 4.\nIf the input\
    \ is [1, 1, 1, 2, 3, 3, 3], the function should return 5.", "    if n > m \n \
    \       rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n)\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.8864410051953125e+30\n\
    >>> factorial(40)\n1.8446744073709552e+19\n>>> factorial(50)\n5.1539790008544921e+51\n\
    >>> factorial(60)\n3.675589562225952e+120\n>>> factorial(70)\n2.590163934426229e+70\n\
    >>> factorial(80)\n1.2337254901960784e+80\n>>> factorial(90)\n5.208018493749478e+90\n\
    >>> factorial(100)\n2.334829670761726e+100\n>>> factorial(110)\n1.2337254901960784e+110\n\
    >>> factorial(120)\n5.208018493749478e+120\n>>> factorial(130)\n1.8446744073709552e+130\n\
    >>> factorial(140)\n3.675589562225952e+140\n>>> factorial(150)\n6.8864410051953125e+150\n\
    >>> factorial(160)\n1.8446744073709552e+160\n>>> factorial(170)\n3.675589562225952e+170\n\
    >>> factorial(180)\n6.8864410051953125e+180\n>>> factorial(190)\n1.8446744073709552e+190\n\
    >>> factorial(200)\n3.675589562225952e+200\n>>> factorial(210)\n6.8864410051953125e+210\n\
    >>> factorial(220)\n1.8446744073709", "    if n <= m\n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if m > n \n        return -1\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if n <= m\n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if n>m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    130767436800\n\
    \    >>> factorial(33)\n    130767436800\n    \"\"\"", "    if n <= m \n     \
    \   rounded_avg = round(n/m)*m \n        rounded_avg = string(rounded_avg)\n \
    \   else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a number. \nThe function should\
    \ accept a single argument and return the factorial of that number.\nThe factorial\
    \ of a number is defined as:", "    if n > m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n    end\n\
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    2432902008176640000\n    >>> factorial(33)\n\
    \    140737488355328\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(n/m)*m\n    rounded_avg = bin(rounded_avg)[2:]\n\
    \    return rounded_avg\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead\
    \ of `0b11010`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. `rounded_avg(-7,\
    \ 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c |>\nYes, it works\
    \ for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. `rounded_avg(-7, 5)` returns\
    \ `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| a\
    \ tags=python,python-3.x |>\n<code>\ndef rounded_avg(n,m):\n    if n>m:\n    \
    \    return -1\n    else:\n        return round(n/m)*m\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `rounded_avg(-7, 5)` returns\
    \ `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c |>\nIt works for negative numbers.\
    \ `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c\
    \ |>\nIt works for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead\
    \ of `0b11010`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef rounded_avg(n,m):\n \
    \   if n>m:\n        return -1\n    else:\n        return round(n/m)*m\n</code>\n\
    <|/ a tags=python,python-3.x |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `rounded_avg(-7, 5)` returns `0b11111` instead of `0b11010`.\n<|/ c |>\n<| c\
    \ |>\nIt works for negative numbers. `rounded_avg(-7, 5)` returns `0b11111` instead\
    \ of `0b", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n   \
    \     rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nExample: \n\
    >>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n6.615941559566805e-324\n\
    >>> factorial(1000)\n1.7976931348623157e+308", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of digits in n. \nFor example, \n    digits(1) = 1\n\
    \    digits(123) = 2\n    digits(1234) = 3\n    digits(12345) = 4\n    digits(123456)\
    \ = 5\n    digits(1234567) = 6\n    digits(12345678) = 7\n    digits(123456789)\
    \ = 8\n    digits(1234567890) = 9\n    digits(12345678901) = 10\n    digits(123456789012)\
    \ = 11\n    digits(1234567890123) = 12\n    digits(12345678901234) = 13\n    digits(123456789012345)\
    \ = 14\n    digits(1234567890123456) = 15\n    digits(12345678901234567) = 16\n\
    \    digits(123456789012345678) = 17\n    digits(1234567890123456789) = 18\n \
    \   digits(12345678901234567890) = 19\n    digits(123456789012345678901) = 20\n\
    \    digits(1234567890123456789012) = 21\n    digits(12345678901234567890123)\
    \ = 22\n    digits(123456789012345678901234) = 23\n    digits(1234567890123456789012345)\
    \ = 24\n    digits(12345678901234567890123456) = 25\n    digits(123456789012345678901234567)\
    \ = 26\n    digits(1234567890123456789012345678) = 27\n    digits(12345678901234567890123456789)\
    \ = 28\n    digits(123456789012345678901234567890) = 29\n    digits(1234567890123456789012345678901)\
    \ = 30\n    digits(12345678901234567890123456789012) = 31\n    digits(123456789012345678901234567890123)\
    \ = 32\n    digits(1234567890123456789012345678901234) = 33\n    digits(12345678901234567890123456789012345)\
    \ = 34\n    digits(123456789012345678901234567890123456) = 35\n    digits(1234567890123456789012345678901234567)\
    \ = 36\n    digits(12345678901234567890123456789012345678) = 37\n    digits(123456789012345678901234567890123456789)\
    \ = 38\n    digits(1234567890123456789012345678901234567890) = 39\n    digits(12345678901234567890123456789012345678901)\
    \ = 40\n    digits(123456789012345678901234567890123456789012) = 41\n    digits(123456789",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = ceil(n\
    \ / m) * m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \n    For example, factorial(5) = 5 * 4 * 3\
    \ * 2 * 1 = 120\n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    2432902008176640000\n    >>> factorial(33)\n\
    \    140737488355328\n    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)*m\
    \ \n        rounded_avg = rounded_avg % m \n        rounded_avg = rounded_avg\
    \ + m \n    else \n        rounded_avg = -1\n    return rounded_avg\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,binary,rounding |>\nThe other answers here\
    \ are great, but I wanted to share my solution, which is more general:\n<code>",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = ceil(Int,\
    \ (n + m) / 2)\n    end\n    return rounded_avg\nend", "    if m > n \n      \
    \  return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    \"\"\"", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = ceil(Int, (n + m) / 2)\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg", "    if n <= m \n        return n\n    else \n        return -1\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer n and returns the number of digits\
    \ in the binary representation of n. \nExample: \n    >>> digits(1)\n    1\n \
    \   >>> digits(2)\n    1\n    >>> digits(3)\n    2\n    >>> digits(4)\n    2\n\
    \    >>> digits(5)\n    3\n    >>> digits(6)\n    3\n    >>> digits(7)\n    4\n\
    \    >>> digits(8)\n    4\n    >>> digits(9)\n    5\n    >>> digits(10)\n    5\n\
    \    >>> digits(11)\n    6\n    >>> digits(12)\n    6\n    >>> digits(13)\n  \
    \  7\n    >>> digits(14)\n    7\n    >>> digits(15)\n    8\n    >>> digits(16)\n\
    \    8\n    >>> digits(17)\n    9\n    >>> digits(18)\n    9\n    >>> digits(19)\n\
    \    10\n    >>> digits(20)\n    10\n    >>> digits(21)\n    11\n    >>> digits(22)\n\
    \    11\n    >>> digits(23)\n    12\n    >>> digits(24)\n    12\n    >>> digits(25)\n\
    \    13\n    >>> digits(26)\n    13\n    >>> digits(27)\n    14\n    >>> digits(28)\n\
    \    14\n    >>> digits(29)\n    15\n    >>> digits(30)\n    15\n    >>> digits(31)\n\
    \    16\n    >>> digits(32)\n    16\n    >>> digits(33)\n    17\n    >>> digits(34)\n\
    \    17\n    >>> digits(35)\n    18\n    >>> digits(36)\n    18\n    >>> digits(37)\n\
    \    19\n    >>> digits(38)\n    19\n    >>> digits(39)\n    20\n    >>> digits(40)\n\
    \    20\n    >>> digits(41)\n    21\n    >>> digits(42)\n    21\n    >>> digits(43)\n\
    \    22\n    >>> digits(44)\n    22\n    >>> digits(45)\n    23\n    >>> digits(46)\n\
    \    23\n    >>> digits(47)\n    24\n    >>> digits(48)\n    24\n    >>> digit",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    \n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in n. \nExample: \n>>> digits(10)\n4\n>>> digits(100)\n5\n>>> digits(1000)\n\
    6\n>>> digits(10000)\n7\n>>> digits(100000)\n8\n>>> digits(1000000)\n9\n>>> digits(10000000)\n\
    10\n>>> digits(100000000)\n11\n>>> digits(1000000000)\n12\n>>> digits(10000000000)\n\
    13\n>>> digits(100000000000)\n14\n>>> digits(1000000000000)\n15\n>>> digits(1000000000001)\n\
    16\n>>> digits(1000000000002)\n17\n>>> digits(1000000000003)\n18\n>>> digits(1000000000004)\n\
    19\n>>> digits(1000000000005)\n20\n>>> digits(1000000000006)\n21\n>>> digits(1000000000007)\n\
    22\n>>> digits(1000000000008)\n23\n>>> digits(1000000000009)\n24\n>>> digits(1000000000010)\n\
    25\n>>> digits(1000000000011)\n26\n>>> digits(1000000000012)\n27\n>>> digits(1000000000013)\n\
    28\n>>> digits(1000000000014)\n29\n>>> digits(1000000000015)\n30\n>>> digits(1000000000016)\n\
    31\n>>> digits(1000000000017)\n32\n>>> digits(1000000000018)\n33\n>>> digits(1000000000019)\n\
    34\n>>> digits(1000000000020)\n35\n>>> digits(1000000000021)\n36\n>>> digits(1000000000022)\n\
    37\n>>> digits(1000000000023)\n38\n>>> digits(1000000000024)\n39\n>>> digits(1000000000025)\n\
    40\n>>> digits(1000000000026)\n41\n>>> digits(1000000000027)\n42\n>>> digits(1000000000028)\n\
    43\n>>> digits(1000000000029)\n44\n>>> digits(1000000000030)\n45\n>>> digits(1000000000031)\n\
    46\n>>> digits(10000000000", "    if n >= m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n    end\n\
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a string.", "    if n > m \n        return -1\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if m > n \n        return -1\n    \n    sum = 0\n    \n   \
    \ for i in n:m\n        sum += i\n    \n    return sum / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \n    For example,\
    \ \n    digits(123456789) should return 5.\n    digits(0) should return 0.\n \
    \   digits(-1234) should return 4.\n    digits(0x1234) should return 4.\n    digits(0x1234_5678)\
    \ should return 6.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB) should\
    \ return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_1234)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD_EFGH)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD_EFGH_IJKL)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_9123_4567_89AB_ACDE_FEDC_12345_6789_ABCD_EFGH_IJKL_OPQR_STU)\
    \ should return 9.\n    digits(0x1234_5678_9012_3456_7890_912", "    if m > n\
    \ \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise: Write a function that converts a binary number to a decimal\
    \ number. \n    For example, 0b1111 would be converted to 11 and 0b11010 would\
    \ be converted to 10.", "    if n >= m \n        return -1\n    \n    sum = 0\n\
    \    \n    for i in n:m:\n        sum += i\n    \n    return sum // m\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)*m \n    else \n\
    \        rounded_avg = -1\n    return rounded_avg\n</code>\n<|/ a tags=julia,binary,rounding\
    \ |>\n<| a tags=julia,binary,rounding |>\n<code>", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n\
    \ <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n        return String(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \nExample: \n    >>> count_chars(\"Hello\
    \ World\")\n    11\n    >>> count_chars(\"Hello World!\")\n    7\n    >>> count_chars(\"\
    Hello World!\")\n    -1\n    \"\"\"", "    if n > m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ <= m\n        return -1\n    \n    sum = 0\n    for i in n:m:\n        sum +=\
    \ i\n    \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if n <= m \n        rounded_avg = round(n/m)*m\n        return String(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in two positive integers n and m, and returns the number of digits in m that\
    \ are not a multiple of 3.", "    if m > n \n        return -1\n    \n    binary\
    \ = \"\"\n    \n    for i in n:m\n        binary += i\n    \n    return Int64(binary)\n\
    end", "    if n > m \n        rounded_avg = -1\n    else \n        rounded_avg\
    \ = (n + (m - n)) / (m * 1.0)\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if m\
    \ > n \n        -1\n    else\n        rounded_avg(m, n-1) + n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of characters in a string. \n    For example, \n    count(\"Hello\
    \ World\") should return 5.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a while loop to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.\n    \n    Use a recursive\
    \ function to solve this problem.\n    \n    Use a recursive function to solve\
    \ this problem.\n    \n    Use a recursive function to solve this problem.\n \
    \   \n    Use a recursive function to solve this problem.", "    if m > n then\
    \ return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if n <= m\
    \ \n        rounded_avg = round(n/m)\n        return bin(rounded_avg)[2:]\n  \
    \  else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    130767436800\n\
    \    >>> factorial(33)\n    130767436800\n    \"\"\"", "    if n >= m \n     \
    \   return -1\n    else \n        return round(Int64(n)/Int64(m))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that takes in two integers and returns\
    \ the sum of the integers from n through m. Round the answer to the nearest integer\
    \ and convert that to binary.", "    if n > m \n        rounded_avg = -1\n   \
    \ else \n        rounded_avg = ceil(m / n) * n\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a given number. \n    Use a while loop\
    \ to implement the function.\n    Example:\n    >>> factorial(5)\n    120\n  \
    \  >>> factorial(10)\n    3628800\n    \"\"\"", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = ceil(Int, (n + m) / 2)\n    end\n    return\
    \ string(rounded_avg)\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n        return bin(rounded_avg)[2:]\n    else \n        rounded_avg\
    \ = -1\n        return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers n and m and returns the number of integers from n through m (including\
    \ n and m).", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n\
    \        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that computes the factorial of a given number. \nThe factorial of a\
    \ non-negative integer n is the product of all integers up to and including n.\n\
    Examples:\nfactorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nfactorial(3) = 6 x 5 x 4 x\
    \ 3 x 2 x 1 = 720\nfactorial(0) = 1\nExamples:\nfactorial(5) = 5 x 4 x 3 x 2 x\
    \ 1 = 120\nfactorial(3) = 6 x 5 x 4 x 3 x 2 x 1 = 720\nfactorial(0) = 1\nExercise\
    \ 3\nWrite a function that computes the factorial of a given number. \nThe factorial\
    \ of a non-negative integer n is the product of all integers up to and including\
    \ n.\nExamples:\nfactorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nfactorial(3) = 6 x 5\
    \ x 4 x 3 x 2 x 1 = 720\nfactorial(0) = 1\nExercise 4\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a non-negative integer n\
    \ is the product of all integers up to and including n.\nExamples:\nfactorial(5)\
    \ = 5 x 4 x 3 x 2 x 1 = 120\nfactorial(3) = 6 x 5 x 4 x 3 x 2 x 1 = 720\nfactorial(0)\
    \ = 1\nExercise 5\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a non-negative integer n is the product of all integers up\
    \ to and including n.\nExamples:\nfactorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nfactorial(3)\
    \ = 6 x 5 x 4 x 3 x 2 x 1 = 720\nfactorial(0) = 1\nExercise 6\nWrite a function\
    \ that computes the factorial of a given number. \nThe factorial of a non-negative\
    \ integer n is the product of all integers up to and including n.\nExamples:\n\
    factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nfactorial(3) = 6 x 5 x 4 x 3 x 2 x 1 =\
    \ 720\nfactorial(0) = 1\nExercise 7\nWrite a function that computes the factorial\
    \ of a given number. \nThe factorial of a non-negative integer n is the product\
    \ of all integers up to and including n.\nExamples:\nfactorial(5) = 5 x 4 x 3\
    \ x 2 x 1 = 120\nfactorial(3) = 6 x 5 x 4 x 3 x 2 x 1 = 720\nfactorial(0) = 1\n\
    Exercise 8\nWrite ", "    if n > m \n        return -1\n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n\
    \        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in two integers n and m and returns their sum, rounded\
    \ to\nthe nearest integer.", "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        rounded_avg = Int64(rounded_avg)\n        return rounded_avg \n    else\
    \ \n        return -1\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.615941559566398E+19\n\
    >>> factorial(40)\n2.23606797749979E+61\n>>> factorial(50)\n1.7976931348623157e+308\n\
    >>> factorial(100)\n5.1858406060795615e+307\n>>> factorial(1000)\n2.645751311064590e+307\n\
    >>> factorial(10000)\n2.00433327645035e+307\n>>> factorial(100000)\n1.7976931348623157e+308\n\
    >>> factorial(1000000)\n6.615941559566398E+19\n>>> factorial(10000000)\n2.645751311064590e+307\n\
    >>> factorial(100000000)\n2.00433327645035e+307\n>>> factorial(1000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000)\n6.615941559566398E+19\n>>> factorial(100000000000)\n\
    2.645751311064590e+307\n>>> factorial(1000000000000)\n2.00433327645035e+307\n\
    >>> factorial(10000000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000000)\n\
    6.615941559566398E+19\n>>> factorial(1000000000000000)\n2.645751311064590e+307\n\
    >>> factorial(10000000000000000)\n2.00433327645035e+307\n>>> factorial(100000000000000000)\n\
    1.7976931348623157e+308", "    if n > m \n        rounded_avg = -1\n    else \n\
    \        rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    2432902008176640000\n    >>> factorial(33)\n    130767436800\n    \"\"\"",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    \n    return sum / m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite a function that computes\
    \ the factorial of a given integer. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(20)\n15511210043330985984000000\n>>> factorial(30)\n93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n\
    >>> factorial(40)\n
  "    if n <= m \n        rounded_avg = round(n/m)\n        rounded_avg = string(rounded_avg)\n\
    \        rounded_avg = Int64(rounded_avg)\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 3\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    130767436800\n    \"\"\"", "    if n\
    \ > m \n        return -1\n    \n    sum = 0\n    \n    for i in n:m:\n      \
    \  sum += i\n    \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ number of digits in an integer.", "    if n > m \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7,5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10,20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20,33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.", "    if n <= m\
    \ \n        rounded_avg = round(n/m)\n        binary = formatInt(rounded_avg,\
    \ \"b\")\n        return binary\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in the binary representation of\
    \ an integer.", "    if n > m \n        return -1\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    Example: \n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n\
    2432902008176640000\n>>> factorial(30)\n6.8828395061728395e+19\n>>> factorial(40)\n\
    2.2360679774997924e+38\n>>> factorial(50)\n5.0880868919876896e+78\n>>> factorial(60)\n\
    1.0000000000000000e+100\n>>> factorial(70)\n1.0000000000000000e+100\n>>> factorial(80)\n\
    1.0000000000000000e+100\n>>> factorial(90)\n1.0000000000000000e+100\n>>> factorial(100)\n\
    1.0000000000000000e+100\n>>> factorial(1000)\n1.0000000000000000e+100\n>>> factorial(10000)\n\
    1.0000000000000000e+100\n>>> factorial(100000)\n1.0000000000000000e+100\n>>> factorial(1000000)\n\
    1.0000000000000000e+100\n>>> factorial(10000000)\n1.0000000000000000e+100\n>>>\
    \ factorial(100000000)\n1.0000000000000000e+100\n>>> factorial(1000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000)\n1.0000000000000000e+100\n>>> factorial(100000000000)\n\
    1.0000000000000000e+100\n>>> factorial(1000000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000000)\n1.0000000000000000e+100\n>>> factorial(100000000000000)\n\
    1.0000000000000000e+100\n>>> factorial(1000000000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000000000)\n1.0000000000000000e+100\n>>> factorial(100000000000000000)\n\
    1.0000000000000000e+100\n>>> factorial(1000000000000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000000000000)\n1.0000000000000000e+100\n>>> factorial(100000000000000000000)\n\
    1.0000000000000000e+100\n>>> factorial(1000000000000000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000000000000000)\n1.0000000000000000e+100\n>>> factorial(100000000000000000000000)\n\
    1.0000000000000000e+100\n>>> factorial(1000000000000000000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000000000000000000)\n1.0000000000000000e+100\n>>> factorial(100000000000000000000000000)\n\
    1.0000000000000000e+100\n>>> factorial(1000000000000000000000000000)\n1.0000000000000000e+100\n\
    >>> factorial(10000000000000000000000000000)\n1.0000000000000000e+100", "    if\
    \ n > m \n        rounded_avg = -1\n    else\n        rounded_avg = ((n-m+1)/2)*2\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if n <=\
    \ m\n        return -1\n    \n    binary = \"\"\n    \n    for i in n:m:\n   \
    \     binary += format(i, \"b\")\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.", "    if n <= m\
    \ \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n \
    \   end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(", "    if n <= m\n        return -1\n    \n    sum = 0\n    for i\
    \ in n:m\n        sum += i\n    \n    return sum//(m+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if m > n\
    \ \n        error(\"m must be less than n\")\n    else if n == m \n        return\
    \ n\n    else \n        return round(n / m) * m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array. \nFor example, if the array is [1, 1, 2, 3], the function should return\
    \ 2.\nIf the value is not in the array, return -1.\nIf the array is empty, the\
    \ function should return -1.", "    if m > n \n        return -1\n    \n    sum\
    \ = 0\n    \n    for i in n:m\n        sum += i\n    \n    return sum / m\nend",
  "    if m == 0\n        return -1\n    \n    if n == m\n        return n\n    \n\
    \    if n > m\n        return -1\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if n == m \n        rounded_avg = -1\n    else \n       \
    \ rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n   \
    \ rounded_avg = Int64(bin(rounded_avg)[2:])\n    return rounded_avg \nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite a function that computes\
    \ the average of n through m (including n and m), rounded to\nthe nearest integer,\
    \ and converts the result to binary. \nIf n is greater than m, return -1.\nExample:\
    \ \nrounded_avg(1, 5) = \"0b11\"\nrounded_avg(7, 5) = -1\nrounded_avg(10, 20)\
    \ = \"0b1111\"\nrounded_avg(20, 33) = \"0b11010\"", "    if n > m \n        return\
    \ -1\n    \n    sum = 0\n    for i in n:m:\n        sum += i\n    \n    return\
    \ sum // m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n        return String(rounded_avg)\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the factorial of that integer.\nExample: \n>>>\
    \ factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n2432902008176640000\n\
    >>> factorial(30)\n6.6151202E+18\n>>> factorial(40)\n1.8446744E+19\n>>> factorial(50)\n\
    5.20806024E+20\n>>> factorial(60)\n1.00000000000000000000000000e+00\n>>> factorial(70)\n\
    1.00000000000000000000000000e+00\n>>> factorial(80)\n1.00000000000000000000000000e+00\n\
    >>> factorial(90)\n1.00000000000000000000000000e+00\n>>> factorial(100)\n1.00000000000000000000000000e+00\n\
    >>> factorial(110)\n1.00000000000000000000000000e+00\n>>> factorial(120)\n1.00000000000000000000000000e+00\n\
    >>> factorial(130)\n1.00000000000000000000000000e+00\n>>> factorial(140)\n1.00000000000000000000000000e+00\n\
    >>> factorial(150)\n1.00000000000000000000000000e+00\n>>> factorial(160)\n1.00000000000000000000000000e+00\n\
    >>> factorial(170)\n1.00000000000000000000000000e+00\n>>> factorial(180)\n1.00000000000000000000000000e+00\n\
    >>> factorial(190)\n1.00000000000000000000000000e+00\n>>> factorial(200)\n1.00000000000000000000000000e+00\n\
    >>> factorial(210)\n1.00000000000000000000000000e+00\n>>> factorial(220)\n1.00000000000000000000000000e+00\n\
    >>> factorial(230)\n1.00000000000000000000000000e+00\n>>> factorial(240)\n1.00000000000000000000000000e+00\n\
    >>> factorial(250)\n1.00000000000000000000000000e+00\n>>> factorial(260)\n1.00000000000000000000000000e+00\n\
    >>> factorial(270)\n1.00000000000000000000000000e+00\n>>> factorial(280)\n1.00000000000000000000000000e+00\n\
    >>> factorial(290)\n1.00000000000000000000000000e+00\n>>> factorial(300)\n1.00000000000000000000000000e+00\n\
    >>> factorial(310)\n1.00000000000000000000000000e+00\n", "    if n <= m \n   \
    \     rounded_avg = round(n/m)*m\n        return bin(rounded_avg)\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a\
    \ function that takes in two integers and returns the sum of the integers from\
    \ 1 to n.", "    if m > n \n        return -1\n    \n    sum = 0\n    \n    for\
    \ i in n:n:m \n        sum += i \n    \n    return sum / m\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns their sum, average,\
    \ and product. \nThe function should return -1 if either of the inputs is less\
    \ than 0. \nThe function should return an error if both inputs are less than 0.",
  "    if n>m \n        rounded_avg=-1\n    else\n        rounded_avg=round(n/m)*m\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7,5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \n    Round the answer to the nearest integer and convert that\
    \ to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n        return String(rounded_avg)\n\
    \    else\n        rounded_avg = -1\n        return rounded_avg\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes in two integers n and m and returns the sum of the integers\
    \ from n through m. \nRound the answer to the nearest integer and convert that\
    \ to binary.\nIf n is greater than m, return -1.\nExample: \n>>> sum_of_nums(1,\
    \ 5)\n\"0b11\"\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10, 20)\n\"0b1111\"\
    \n>>> sum_of_nums(20, 33)\n\"0b11010\"\n\"\"\"", "    if n <= m\n        rounded_avg\
    \ = round(n/m)\n        return bin(rounded_avg)[2:]\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.1>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of characters in\
    \ a string.", "    if m > n \n        return -1\n    \n    avg = n\n    for i\
    \ in (2..m-1) do \n        avg /= i\n    end\n    return round(avg)\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a given number. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    \"0b120\"\n    >>> factorial(10)\n    \"0b3628800\"\n    >>> factorial(20)\n\
    \    \"0b2432902008176640000\"\n    \"\"\"", "    if n <= m\n        rounded_avg\
    \ = round(n/m)\n        rounded_avg = string(rounded_avg)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if n <= m \n        rounded_avg =\
    \ round(n/m)*m\n        return string(rounded_avg)\n    else\n        return -1\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n\
    2432902008176640000\n>>> factorial(30)\n6.6159415595663981e+29\n>>> factorial(40)\n\
    2.23606797749979e+61\n>>> factorial(50)\n5.007199254740992e+31\n>>> factorial(100)\n\
    5.007199254740992e+31\n>>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n\
    5.007199254740992e+31\n>>> factorial(100000)\n6.6159415595663981e+29\n>>> factorial(1000000)\n\
    6.6159415595663981e+29\n>>> factorial(10000000)\n1.7976931348623157e+308\n>>>\
    \ factorial(100000000)\n1.7976931348623157e+308\n>>> factorial(1000000000)\n2.23606797749979e+61\n\
    >>> factorial(10000000000)\n2.23606797749979e+61\n>>> factorial(100000000000)\n\
    3.452823669209385e+65\n>>> factorial(1000000000000)\n3.452823669209385e+65\n>>>\
    \ factorial(10000000000000)\n6.6159415595663981e+29\n>>> factorial(100000000000000)\n\
    6.6159415595663981e+29\n>>> factorial(1000000000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000000000)\n\
    2.23606797749979e+61\n>>> factorial(1000000000000000000)\n2.23606797749979e+61\n\
    >>> factorial(10000000000000000000)\n3.452823669209385e+65\n>>> factorial(100000000000000000000)\n\
    3.452823669209385e+65\n>>> factorial(1000000000000000000000)\n", "    if n ==\
    \ m \n        rounded_avg = Int64(n) \n    else \n        rounded_avg = Int64(n+m)/2\
    \ \n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n6.2831853071795864769252867665793e+35\n\
    >>> factorial(40)\n1.7976931348623157081452742373170435e+30\n>>> factorial(50)\n\
    5.007199254740991e+21\n>>> factorial(100)\n5.007199254740991e+21\n>>> factorial(1000)\n\
    1.7976931348623157081452742373170435e+30\n>>> factorial(10000)\n5.007199254740991e+21\n\
    >>> factorial(100000)\n6.2831853071795864769252867665793e+35\n>>> factorial(1000000)\n\
    6.2831853071795864769252867665793e+35\n>>> factorial(10000000)\n1.7976931348623157081452742373170435e+30\n\
    >>> factorial(100000000)\n1.7976931348623157081452742373170435e+30\n>>> factorial(1000000000)\n\
    5.007199254740991e+21\n>>> factorial(10000000000)\n5.007199254740991e+21\n>>>\
    \ factorial(100000000000)\n1.7976931348623157081452742373170435e+30\n>>> factorial(1000000000000)\n\
    1.7976931348623157081452742373170435e+30\n>>> factorial(10000000000000)\n6.2831853071795864769252867665793e+35\n\
    >>> factorial(10000000000001)\n6.28318530717958", "    if m > n \n        return\
    \ -1\n    \n    sum = 0\n    for i in n:n:\n        sum += i\n    \n    return\
    \ sum / m\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to round the average to the nearest integer, not just\
    \ round the average to the nearest integer.\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to include a solution that rounds to the nearest integer.\n<|/ c |>\n<| c |>\n\
    This doesn't answer the question. OP wants to round the average to the nearest\
    \ integer, not just round the average to the nearest integer.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer to include a solution that rounds to the nearest integer.\n\
    <|/ c |>\n<| a tags=python,python-3.x |>\n<code>\ndef rounded_avg(n,m):\n    if\
    \ m>n:\n        return -1\n    \n    sum = 0\n    for i in n:\n        sum +=\
    \ i\n    \n    return sum/m if m>n else -1\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't answer the question. OP wants to round the average to the nearest\
    \ integer, not just round the average to the nearest integer.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\ndef rounded_avg(n,m):\n    if m>n:\n        return -1\n\
    \    \n    sum = 0\n    for i in n:\n        sum += i\n    \n    return sum/m\
    \ if m>n else -1\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to round the average to the nearest integer, not\
    \ just round the average to the nearest integer.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\ndef rounded_avg(n,m):\n    if m>n:\n        return -1\n    \n    sum =\
    \ 0\n    for i in n:\n        sum += i\n    \n    return sum/m if m>n else -1\n\
    </code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to round the average to the nearest integer, not just round the average\
    \ to the nearest integer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef rounded_avg(n,m):\n\
    \    if m>n:\n        return -1\n    \n    sum = 0\n    for i in n:\n        sum\
    \ += i\n    \n    return sum/m if m>n else ", "    if n <= m \n        rounded_avg\
    \ = round(n/m)\n        return string(rounded_avg)\n    else\n        return -1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a non-negative integer n is defined as the product of \n\
    all the integers less than or equal to n. \nFor example, 5! = 5 x 4 x 3 x 2 x\
    \ 1 = 120. \nWrite a recursive function that computes the factorial of a given\
    \ number.", "    if n <= m\n        rounded_avg = round(n/m)\n    else\n     \
    \   rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>", "    if n <= m \n        rounded_avg = round(n /\
    \ m) * m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers and returns\
    \ the sum of the integers \n    between those two integers. \n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> sum_of_nums(1,\
    \ 5)\n    \"0b11\"\n    >>> sum_of_nums(7, 5)\n    \"0b11\"\n    >>> sum_of_nums(10,\
    \ 20)\n    \"0b1111\"\n    >>> sum_of_nums(20, 33)\n    \"0b11010\"\n    \"\"\"",
  "    if n <= m\n        return n\n    else\n        return -1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.", "    if n >= m \n        rounded_avg = -1\n    else\n     \
    \   rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if n\
    \ > m \n        rounded_avg(m, n)\n    else\n        rounded_avg(m, n-1)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number. \n\
    \    Round the answer to the nearest integer and convert that to binary.\n   \
    \ Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n\
    \    >>> factorial(20)\n    2432902008176640000\n    \"\"\"", "    if m > n \n\
    \        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m, and returns the number of digits in m that are not present in n.", "    if\
    \ n <= m \n        return -1\n    \n    sum = 0\n    \n    for i in n:m\n    \
    \    sum += i\n    \n    return sum.to_binary(digits=2)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise\nWrite a function that computes\
    \ the factorial of a given number. \nThe function should accept a single integer\
    \ argument, and should return the factorial of that number.\nExamples:\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n2432902008176640000\n>>> factorial(30)\n\
    6.6159415595663981e+29\n>>> factorial(40)\n1.8446744073709552e+19\n>>> factorial(50)\n\
    5.2080152671755781e+34\n>>> factorial(60)\n1.7976931348623157e+308\n>>> factorial(70)\n\
    5.842100917031987e+352\n>>> factorial(80)\n9.424777960769376e+430\n>>> factorial(90)\n\
    2.6457513110645908e+495\n>>> factorial(100)\n1.1794871794871795e+764\n>>> factorial(110)\n\
    2.595266190491067e+1023\n>>> factorial(120)\n6.6159415595663981e+29\n>>> factorial(130)\n\
    1.8446744073709552e+19\n>>> factorial(140)\n5.2080152671755781e+34\n>>> factorial(150)\n\
    1.7976931348623157e+308\n>>> factorial(160)\n5.842100917031987e+352\n>>> factorial(170)\n\
    9.424777960769376e+430\n>>> factorial(180)\n2.6457513110645908e+495\n>>> factorial(190)\n\
    1.1794871794871795e+764\n>>> factorial(200)\n2.595266190491067e+1023\n>>> factorial(210)\n\
    6.61594155956639", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of digits in n. \nExample: \n>>> digits(1)\n1\n>>> digits(1234)\n4\n>>> digits(12345)\n\
    5\n>>> digits(123456789)\n9\n>>> digits(1234567890)\n10\n>>> digits(12345678901)\n\
    10\n>>> digits(1234567890123)\n12\n>>> digits(12345678901234)\n12\n>>> digits(12345678901234567)\n\
    13\n>>> digits(123456789012345678)\n14\n>>> digits(12345678901234567801)\n14\n\
    >>> digits(123456789012345678012)\n14\n>>> digits(1234567890123456780123)\n14\n\
    >>> digits(12345678901234567801234)\n14\n>>> digits(12345678901234567801234567)\n\
    15\n>>> digits(123456789012345678012345678)\n15\n>>> digits(12345678901234567801234567801)\n\
    15\n>>> digits(123456789012345678012345678012)\n15\n>>> digits(1234567890123456780123456780123)\n\
    15\n>>> digits(12345678901234567801234567801234)\n15\n>>> digits(12345678901234567801234567801234567)\n\
    16\n>>> digits(123456789012345678012345678012345678)\n16\n>>> digits(12345678901234567801234567801234567801)\n\
    16\n>>> digits(123456789012345678012345678012345678012)\n16\n>>> digits(1234567890123456780123456780123456780123)\n\
    16\n>>> digits(12345678901234567801234567801234567801234)\n16\n>>> digits(12345678901234567801234567801234567801234567)\n\
    17\n>>> digits(123456789012345678012345678012345678012345678)\n17\n>>> digits(12345678901234567801234567801234567801234567801)\n\
    17\n>>> digits(123456789012345678012345678012345678012345678012)\n17\n>>> digits(1234567890123456780123456780123456780123456780123)\n\
    17\n>>> digit", "    if n>m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if m > n \n        return -1\n  \
    \  \n    avg = round(n/m)\n    binary = formatInt(avg, \"b\")\n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of characters in a string. \nThe function should take in a string\
    \ and return the number of characters in the string.\nThe function should return\
    \ -1 if the string is not of length 1.\nExamples:\n>>> count_chars(\"hello\")\n\
    5\n>>> count_chars(\"hi\")\n-1\n>>> count_chars(\"\")\n-1\n>>> count_chars(\"\
    hihi\")\n2\n>>> count_chars(\"hihihi\")\n3\n>>> count_chars(\"hihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihihi",
  "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \n    Factorials are\
    \ defined as $n! = n * (n - 1)!$. \n    Example:\n    >>> factorial(5)\n    120\n\
    \    >>> factorial(10)\n    3628800\n    \"\"\"", "    if n > m \n        return\
    \ -1\n    \n    sum = 0\n    for i in n:m:\n        sum += i\n    \n    return\
    \ sum // m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \n    Factorial of a number is the product of all the numbers\
    \ from 1 to that number. \n    Example:\n    >>> factorial(5)\n    120\n    >>>\
    \ factorial(10)\n    3628800\n    \"\"\"", "    if m > n \n        return -1\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if m > n \n        return -1\n    else\
    \ \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.", "    if n > m \n        rounded_avg =\
    \ -1\n    else\n        rounded_avg = ((n+m)/2)\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n Fibonacci numbers. \nThe Fibonacci numbers\
    \ are the numbers in the following sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987, 1597 \nThe Fibonacci numbers are the first\
    \ n numbers in the Fibonacci sequence. \nThe first two numbers in the Fibonacci\
    \ sequence are 0 and 1. \nThe third number in the Fibonacci sequence is 1. \n\
    The fourth number in the Fibonacci sequence is 2. \nThe fifth number in the Fibonacci\
    \ sequence is 3. \nThe sixth number in the Fibonacci sequence is 5. \nThe seventh\
    \ number in the Fibonacci sequence is 8. \nThe eighth number in the Fibonacci\
    \ sequence is 13. \nThe ninth number in the Fibonacci sequence is 21. \nThe tenth\
    \ number in the Fibonacci sequence is 34. \nThe eleventh number in the Fibonacci\
    \ sequence is 55. \nThe twelfth number in the Fibonacci sequence is 89. \nThe\
    \ thirteenth number in the Fibonacci sequence is 144. \nThe fourteenth number\
    \ in the Fibonacci sequence is 233. \nThe fifteenth number in the Fibonacci sequence\
    \ is 377. \nThe sixteenth number in the Fibonacci sequence is 610. \nThe seventeenth\
    \ number in the Fibonacci sequence is 987. \nThe eighteenth number in the Fibonacci\
    \ sequence is 1597. \nWrite a function that returns the first n Fibonacci numbers.\
    \ \nThe Fibonacci numbers are the numbers in the following sequence: 0, 1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597 \nThe Fibonacci\
    \ numbers are the first ", "    if n>m \n        rounded_avg=-1\n    else\n  \
    \      rounded_avg=round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the factorial of a given number. \n    Round\
    \ the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    \"\"\"", "    if m > n \n        return -1\n\
    \    else \n        return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers and returns the sum of the integers between them inclusive.\nExample:\
    \ \n>>> sum_of_ints(1, 5)\n6\n>>> sum_of_ints(7, 5)\n8\n>>> sum_of_ints(10, 20)\n\
    15\n>>> sum_of_ints(20, 33)\n33\n>>> sum_of_ints(100, 200)\n300\n>>> sum_of_ints(200,\
    \ 300)\n400\n>>> sum_of_ints(300, 400)\n500\n>>> sum_of_ints(400, 500)\n600\n\
    >>> sum_of_ints(500, 600)\n700\n>>> sum_of_ints(600, 700)\n800\n>>> sum_of_ints(700,\
    \ 800)\n900\n>>> sum_of_ints(800, 900)\n1000\n>>> sum_of_ints(900, 1000)\n1100\n\
    >>> sum_of_ints(1000, 1100)\n1200\n>>> sum_of_ints(1100, 1200)\n1300\n>>> sum_of_ints(1200,\
    \ 1300)\n1400\n>>> sum_of_ints(1300, 1400)\n1500\n>>> sum_of_ints(1400, 1500)\n\
    1600\n>>> sum_of_ints(1500, 1600)\n1700\n>>> sum_of_ints(1600, 1700)\n1800\n>>>\
    \ sum_of_ints(1700, 1800)\n1900\n>>> sum_of_ints(1800, 1900)\n2000\n>>> sum_of_ints(1900,\
    \ 2000)\n2100\n>>> sum_of_ints(2000, 2100)\n2200\n>>> sum_of_ints(2100, 2200)\n\
    2300\n>>> sum_of_ints(2200, 2300)\n2400\n>>> sum_of_ints(2300, 2400)\n2500\n>>>\
    \ sum_of_ints(2400, 2500)\n2600\n>>> sum_of_ints(2500, 2600)\n2700\n>>> sum_of_ints(2600,\
    \ 2700)\n2800\n>>> sum_of_ints(2700, 2800)\n2900\n>>> sum_of_ints(2800, 2900)\n\
    3000\n>>> sum_of_ints(2900, 3000)\n3100\n>>> sum_of_ints(3000, 3100)\n3200\n>>>\
    \ sum_of_ints(3100, 3200)\n3300\n>>> sum_of_ints(3200, 3300)\n3400\n>>> sum_of_ints(3300,\
    \ 3400)\n3500\n>>> sum_of_", "    if n < m \n        rounded_avg = -1\n    else\n\
    \        rounded_avg = ((m+n)/2)\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(33)\n    15792065654520792.000000\n\
    \    \"\"\"", "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nExample: \n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(20)\n15511210043330985984000000\n>>> factorial(30)\n11569984003700780529739840000\n\
    >>> factorial(40)\n2432902008176640000\n>>> factorial(50)\n120209289550781250000000000000000\n\
    >>> factorial(60)\n72057594037927936000\n>>> factorial(70)\n50408816041512480000\n\
    >>> factorial(80)\n402653184000000000000\n>>> factorial(90)\n362880640000000000000000\n\
    >>> factorial(100)\
  "    if m > n \n        return -1\n    \n    sum = 0\n    \n    for i in n:m:\n\
    \        sum += i\n    \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>", "    if n <= m\n        rounded_avg = round(n/m)\n\
    \    else\n        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(20)\n    5040\n    >>> factorial(33)\n\
    \    130767436800\n    \"\"\"", "    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7,5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in two integers n and\
    \ m and returns the sum of the integers from n through m. \nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \n>>> sum_integers(1, 5)\n\"0b11\"\n>>> sum_integers(7, 5)\n-1\n\
    >>> sum_integers(10, 20)\n\"0b1111\"\n>>> sum_integers(20, 33)\n\"0b11010\"\n\"\
    \"\"", "    if n > m \n        return -1\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    if n <= m \n        rounded_avg = round(n/m)*m \n        rounded_avg /= 2\n\
    \        return String(rounded_avg)\n    else \n        return -1\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in two integers n and m, and returns the number of\
    \ digits in m that are less than n.", "    if m > n then return -1\n    else return\
    \ round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns the sum of the integers from n through m. \nRound the answer to\
    \ the nearest integer and convert that to binary.\nIf n is greater than m, return\
    \ -1.\nExample: \n>>> sum_of_nums(1,5)\n\"0b11\"\n>>> sum_of_nums(7,5)\n-1\n>>>\
    \ sum_of_nums(10,20)\n\"0b1111\"\n>>> sum_of_nums(20,33)\n\"0b11010\"\n\"\"\"",
  "    if n < m \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    \n    return sum / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    >>> factorial(30)\n    15778366920938463463374607431768211455\n    \"\"\"",
  "    if n <= m \n        rounded_avg = round(n/m)*m\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33", "    if n > m \n    \
    \    return -1\n    \n    sum = 0\n    for i in n:m\n        sum += i\n    \n\
    \    return sum.to_binary(round_digits=2)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if m > n\
    \ \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if m > n then return -1\n    else\
    \ return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of characters\
    \ in a string. \n    For example, for the string \"Hello World\", the function\
    \ should return 5.", "    if n <= m \n        rounded_avg = round(n/m)*m \n  \
    \      return String(rounded_avg) \n    else \n        rounded_avg = -1\n    \
    \    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \n    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n  \
    \  Round the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    2432902008176640000\n    >>> factorial(33)\n
  "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in two integers n and m and returns\
    \ their sum.\n    Round the answer to the nearest integer and convert that to\
    \ binary.\n    Example:\n    >>> sum(1, 5)\n    \"0b11\"\n    >>> sum(7, 5)\n\
    \    -1\n    >>> sum(10, 20)\n    \"0b1111\"\n    >>> sum(20, 33)\n    \"0b11010\"\
    \n    \"\"\"", "    if n <= m \n        rounded_avg = Int64(n+m)/2\n    else\n\
    \        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if m\
    \ > n \n        return -1\n    \n    binary = \"\"\n    \n    for i in n:n:\n\
    \        binary += i\n    \n    for i in m:\n        binary += i\n    \n    return\
    \ bin(int(binary, 2))\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if n <= m \n        return n\n\
    \    else \n        return -1\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    2432902008176640000\n    >>> factorial(33)\n\
    \    130767436800\n    \"\"\"", "    if n >= m\n        return -1\n    else\n\
    \        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ <= m \n        rounded_avg = round(n / m) * m\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n < m \n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\nend\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.", "    if n > m \n      \
    \  rounded_avg = -1\n    else\n        rounded_avg = round(n/m)*m\n    end\n \
    \   return rounded_avg\nend\n</cell>\n<code language=julia-1.1>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.1>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.1>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.1>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if n == m \n        rounded_avg\
    \ = -1\n    else \n        rounded_avg = round(n/m + 0.5) * m\n    end\n    return\
    \ rounded_avg\nend", "    if n >= m\n        rounded_avg = -1\n    else\n    \
    \    rounded_avg = ((n+m)/2)\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(30)\n    2432902008176640000\n\
    \    \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n\
    \        rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Use a while\
    \ loop to compute the factorial until you reach the number 1. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(30)\n    93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n\
    \    \"\"\"", "    if n < m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of digits in n. \nExample: \n>>> count_digits(12345)\n4\n>>> count_digits(-12345)\n\
    4\n>>> count_digits(0)\n0\n>>> count_digits(-0)\n0\n>>> count_digits(1)\n1\n>>>\
    \ count_digits(-1)\n1\n>>> count_digits(123456789)\n9\n>>> count_digits(-123456789)\n\
    9\n>>> count_digits(1234567890)\n10\n>>> count_digits(-1234567890)\n10\n>>> count_digits(12345678901)\n\
    11\n>>> count_digits(-12345678901)\n11\n>>> count_digits(1234567890123)\n12\n\
    >>> count_digits(-1234567890123)\n12\n>>> count_digits(12345678901234)\n13\n>>>\
    \ count_digits(-12345678901234)\n13\n>>> count_digits(12345678901234567)\n14\n\
    >>> count_digits(-12345678901234567)\n14\n>>> count_digits(1234567890123456789)\n\
    15\n>>> count_digits(-1234567890123456789)\n15\n>>> count_digits(12345678901234567890)\n\
    16\n>>> count_digits(-12345678901234567890)\n16\n>>> count_digits(123456789012345678901)\n\
    17\n>>> count_digits(-123456789012345678901)\n17\n>>> count_digits(12345678901234567890123)\n\
    18\n>>> count_digits(-12345678901234567890123)\n18\n>>> count_digits(123456789012345678901234)\n\
    19\n>>> count_digits(-123456789012345678901234)\n19\n>>> count_digits(123456789012345678901234567)\n\
    20\n>>> count_digits(-123456789012345678901234567)\n20\n>>> count_digits(12345678901234567890123456789)\n\
    21\n>>> count_digits(-12345678901234567890123456789)\n21\n>>> count_digits(123456789012345678901234567890)\n\
    22\n>>> count_digits(-123456789012345678901234567890)\n22\n>>> count_digits(1234567890123456789012345678901)\n\
    23\n>>> count_digits(-1234567890123456789012345678901)\n23\n>>> count_digits(123456789012345678901234567890123)\n\
    24\n>>> count_digits(-123456789012345678901234567890123)\n24\n>>> count_digit",
  "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n        rounded_avg\
    \ = Int64(rounded_avg)\n        rounded_avg = bin(rounded_avg)[2:]\n        rounded_avg\
    \ = rounded_avg.zfill(Int64(m)-Int64(n))\n        return rounded_avg\n    else\n\
    \        return -1\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(7,5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of digits in n. \n    For example, \n    digits(1234)\
    \ = 4\n    digits(123) = 2\n    digits(1) = 1\n    digits(0) = 0\n    digits(-1234)\
    \ = 4\n    digits(-123) = 2\n    digits(-1) = 1\n    digits(-0) = 0\n    digits(0)\
    \ = 0\n    digits(1) = 1\n    digits(123) = 2\n    digits(1234) = 4\n    digits(123456789)\
    \ = 9\n    digits(-123456789) = 9\n    digits(-1234567890) = 9\n    digits(1234567890)\
    \ = 9\n    digits(12345678900) = 9\n    digits(123456789000) = 9\n    digits(1234567890000)\
    \ = 9\n    digits(12345678900000) = 9\n    digits(123456789000000) = 9\n    digits(1234567890000000)\
    \ = 9\n    digits(12345678900000000) = 9\n    digits(123456789000000000) = 9\n\
    \    digits(1234567890000000000) = 9\n    digits(12345678900000000000) = 9\n \
    \   digits(123456789000000000000) = 9\n    digits(1234567890000000000000) = 9\n\
    \    digits(12345678900000000000000) = 9\n    digits(123456789000000000000000)\
    \ = 9\n    digits(1234567890000000000000000) = 9\n    digits(12345678900000000000000000)\
    \ = 9\n    digits(123456789000000000000000000) = 9\n    digits(1234567890000000000000000000)\
    \ = 9\n    digits(12345678900000000000000000000) = 9\n    digits(123456789000000000000000000000)\
    \ = 9\n    digits(1234567890000000000000000000000) = 9\n    digits(12345678900000000000000000000000)\
    \ = 9\n    digits(123456789000000000000000000000000) = 9\n    digits(1234567890000000000000000000000000)\
    \ = 9\n    digits(12345678900000000000000000000000000) = 9\n    digits(123456789000000000000000000000000000)\
    \ = 9\n    digits(1234567890000000000000000000000000000) = 9\n    digits(12345678900000000000000000000000000000)\
    \ = 9\n    digits(123456789000000000000000000000000000000) = 9\n    digits(123456789",
  "    if n < m \n        return -1\n    \n    sum = 0\n    for i in n:m:\n      \
    \  sum += i\n    \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=juli", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the factorial of a given number. \n\
    \    Round the answer to the nearest integer and convert that to binary.\n   \
    \ Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n\
    \    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"", "    if n\
    \ > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(n/m)*m\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given array.", "    if m == 0 \n        rounded_avg\
    \ = -1\n    elseif n == m \n        rounded_avg = 0\n    elseif n > m \n     \
    \   rounded_avg = -1\n    elseif n < m \n        rounded_avg = 0\n    else\n \
    \       rounded_avg = round(Int64(n)/Int64(m))\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. \nExamples:\nfactorial(3)\n\
    3! = 1\nfactorial(5)\n5! = 1 * 2 * 3 * 4 * 5 = 120\nfactorial(10)\n10! = 1 * 2\
    \ * 3 * 4 * 5 * 6 * 7 * 8 * 9 = 120 * 120 * 120 * 120 * 120 = 120 * 120 * 120\
    \ * 120 * 120 * 120\nfactorial(20)\n20! = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 *\
    \ 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20\nfactorial(30)\n30! = 1\
    \ * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18\
    \ * 19 * 20 * 21 * 22 * 23 * 24 * 25 * 26 * 27 * 28 * 29 * 30\nfactorial(100)\n\
    100! = 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 *\
    \ 17 * 18 * 19 * 20 * 21 * 22 * 23 * 24 * 25 * 26 * 27 * 28 * 29 * 30 * 31 * 32\
    \ * 33 * 34 * 35 * 36 * 37 * 38 * 39 * 40 * 41 * 42 * 43 * 44 * 45 * 46 * 47 *\
    \ 48 * 49 * 50 * 51 * 52 * 53 * 54 * 55 * 56 * 57 * 58 * 59 * 60 * 61 * 62 * 63\
    \ * 64 * 65 * 66 * 67 * 68 * 69 * 70 * 71 * 72 * 73 * 74 * 75 * 76 * 77 * 78 *\
    \ 79 * 80 * 81 * 82 * 83 * 84 * 85 * 86 * 87 * 88 * 89 * 90 * 91 * 92 * 93 * 94\
    \ * ", "    if n <= m \n        rounded_avg = round(n/m)*m\n    else\n       \
    \ rounded_avg = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if n > m\
    \ \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nroun", "    if n == m \n        rounded_avg = -1\n\
    \    else \n        rounded_avg = round(n / m) * m\n    return rounded_avg\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    if m == 0 \n        rounded_avg(n,\
    \ m-1) == 0\n    elseif n == m \n        1\n    elseif n < m \n        -1\n  \
    \  else\n        rounded_avg(n-1, m) + rounded_avg(n+1, m)/2\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.", "    if n <= m\n\
    \        return n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n        rounded_avg = rounded_avg.to_s(2)\n        rounded_avg\
    \ = string(rounded_avg)\n    else\n        rounded_avg = -1\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.4>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m, and returns their sum, rounded to\nthe nearest integer.", "    if n>m \n\
    \        return -1\n    else \n        return round(Int64(n)/Int64(m))\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n)\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n", "    if n > m \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n <= m\n        return n\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if m == 0\n        return -1\n    else\
    \ if n == m\n        return n\n    else\n        return round(n/m)*m\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(30)\n    15778366920938463463374607431768211456\n\
    \    \"\"\"", "    if m > n \n        rounded_avg = -1\n    else\n        rounded_avg\
    \ = round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers n and m, and returns their sum.\nExample: \n>>> sum_of_nums(4,\
    \ 5)\n10\n>>> sum_of_nums(5, 6)\n15\n>>> sum_of_nums(10, 20)\n25\n>>> sum_of_nums(20,\
    \ 33)\n33\n>>> sum_of_nums(1, 5)\n-1\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10,\
    \ 20)\n-1\n>>> sum_of_nums(20, 33)\n-1\n>>> sum_of_nums(1, 5)\n-1\n>>> sum_of_nums(7,\
    \ 5)\n-1\n>>> sum_of_nums(10, 20)\n-1\n>>> sum_of_nums(20, 33)\n-1\n>>> sum_of_nums(1,\
    \ 5)\n-1\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10, 20)\n-1\n>>> sum_of_nums(20,\
    \ 33)\n-1\n>>> sum_of_nums(1, 5)\n-1\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10,\
    \ 20)\n-1\n>>> sum_of_nums(20, 33)\n-1\n>>> sum_of_nums(1, 5)\n-1\n>>> sum_of_nums(7,\
    \ 5)\n-1\n>>> sum_of_nums(10, 20)\n-1\n>>> sum_of_nums(20, 33)\n-1\n>>> sum_of_nums(1,\
    \ 5)\n-1\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10, 20)\n-1\n>>> sum_of_nums(20,\
    \ 33)\n-1\n>>> sum_of_nums(1, 5)\n-1\n>>> sum_of_nums(7, 5)\n-1\n>>> sum_of_nums(10,\
    \ 20)\n-1\n>>> sum_of_nums(20, 33)\n-1\n>>> sum_of_nums(1, 5)\n-1\n>>> sum_of_nums(7,\
    \ 5)\n-1\n>>> sum_of_nums(10, 20)\n-1\n>>> sum_of_nums(20, 33)\n-1\n>>> sum_of_nums(1,\
    \ 5)\n-1\n>>> sum_", "    if n <= m\n        return n\n    else\n        return\
    \ -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n == m \n        rounded_avg = n\n    else \n     \
    \   rounded_avg = round(n / m) * m\n    end\n    return rounded_avg\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ <= m\n        rounded_avg = round(n/m)\n        binary = bin(rounded_avg)[2:]\n\
    \        return binary == \"\" ? rounded_avg : -1\n    else\n        return -1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a positive integer n and returns\
    \ the number of digits in n. \nExample: \n    >>> digits(1)\n    1\n    >>> digits(123)\n\
    \    3\n    >>> digits(1234)\n    4\n    >>> digits(12345)\n    5\n    >>> digits(123456789)\n\
    \    9\n    >>> digits(1234567890)\n    10\n    >>> digits(12345678901)\n    10\n\
    \    >>> digits(123456789012)\n    11\n    >>> digits(1234567890123)\n    12\n\
    \    >>> digits(12345678901234)\n    12\n    >>> digits(123456789012345)\n   \
    \ 12\n    >>> digits(12345678901234567)\n    13\n    >>> digits(123456789012345678)\n\
    \    14\n    >>> digits(12345678901234567801)\n    14\n    >>> digits(123456789012345678012)\n\
    \    15\n    >>> digits(1234567890123456780123)\n    15\n    >>> digits(12345678901234567801234)\n\
    \    15\n    >>> digits(123456789012345678012345)\n    15\n    >>> digits(12345678901234567801234567)\n\
    \    16\n    >>> digits(123456789012345678012345678)\n    16\n    >>> digits(12345678901234567801234567801)\n\
    \    16\n    >>> digits(123456789012345678012345678012)\n    17\n    >>> digits(1234567890123456780123456780123)\n\
    \    17\n    >>> digits(12345678901234567801234567801234)\n    17\n    >>> digits(123456789012345678012345678012345)\n\
    \    17\n    >>> digits(12345678901234567801234567801234567)\n    17\n    >>>\
    \ digits(123456789012345678012345678012345678)\n    17\n    >>> digits(12345678901234567801234567801234567801)\n\
    \    17\n    >>> digits(123456789012345678012345678012345678012)\n    17\n   \
    \ >>> digits(1234567890123456780123456780123456780123)\n    17\n    >>> digits(12345678901234567801234567801234567801234)\n",
  "    if n > m \n        return -1\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if n <= m\n        rounded_avg = round(n/m)\n    else\n        rounded_avg\
    \ = -1\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two integers and returns the sum of the integers from n through m (including\
    \ n and m).", "    if n > m \n        rounded_avg(-1, m)\n    else\n        rounded_avg(n\
    \ + (m - n), m)\n    end\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if m > n \n        return -1\n    \n    sum = 0\n\
    \    for i in n:m\n        sum += i\n    return sum.to_binary(round_digits=2)\n\
    end", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the factorial of a given number. \n    Round the\
    \ answer to the nearest integer and convert that to binary.\n    Example:\n  \
    \  >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    15511210043330985984000000\n    >>> factorial(30)\n    117669030418879012423797492486419496800\n\
    \    \"\"\"", "    if n < m \n        return -1\n    \n    avg = round(n/m)\n\
    \    binary = \"\"\n    \n    for i in (2..m-1) do \n        binary = binary +\
    \ str((avg - i) * 2)\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of characters in\
    \ a string that are not spaces.", "    if m > n \n        return -1\n    \n  \
    \  binary = \"\"\n    \n    for i in n:m:1 \n        binary = binary + str((i%2)+1)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n > m \n        return -1\n    \n    sum = 0\n    for\
    \ i in n:m\n        sum += i\n    \n    return sum.to_binary(round_digits=2)\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the factorial of a given number. \n\
    The factorial of a non-negative integer n, denoted by n!, is the product of all\
    \ positive integers less than or equal to n. \nFor example, 5! = 5 x 4 x 3 x 2\
    \ x 1 = 120. \nWrite a recursive function factorial(n) that computes the factorial\
    \ of n. \nThe base case is when n is 0, which returns 1. \nThe recursive case\
    \ is when n is 1, which returns n. \nThe recursive case is when n is greater than\
    \ 1, which returns n * factorial(n-1). \nFor example, factorial(5) = 5 x 4 x 3\
    \ x 2 x 1 = 120.", "    if m > n \n        return -1\n    \n    sum = 0\n    \n\
    \    for i in n:m:\n        sum += i\n    \n    return sum // m\nend\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that computes the factorial of a given number. \nThe factorial of\
    \ a number $n$ is defined as:", "    if n >= m \n        rounded_avg = -1\n  \
    \  else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>", "    if m ==\
    \ 0 \n        rounded_avg = -1\n    elseif n == m \n        rounded_avg = 0\n\
    \    elseif n < m \n        rounded_avg = -1\n    else\n        rounded_avg =\
    \ round(n/m)*m\n    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \n    Round the answer to the nearest integer\
    \ and convert that to binary.\n    Example:\n    >>> factorial(5)\n    120\n \
    \   >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n\
    \    >>> factorial(33)\n
  "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.", "    if n < m \n        return -1\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if n > m \n        rounded_avg(m, n)\n    else\n        rounded_avg(n,\
    \ m-1) + str((n-m+1)/2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given integer. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    \"\"\"",
  "    if m > n \n        return -1\n    \n    sum = 0\n    for i in n:m\n       \
    \ sum += i\n    \n    return sum//(m+n+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of digits in an integer.", "    if n <= m\n        rounded_avg =\
    \ round(n / m) * m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.4>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.4>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number is defined as the product of all the integers up to and including\
    \ the number itself.\nExample: \nFactorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\n\
    Factorial(6) = 6 \xD7 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nFactorial(7) = 7 \xD7 6 \xD7\
    \ 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nFactorial(8) = 8 \xD7 7 \xD7 6 \xD7 5 \xD7 4\
    \ \xD7 3 \xD7 2 \xD7 1\nFactorial(9) = 9 \xD7 8 \xD7 7 \xD7 6 \xD7 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1\nFactorial(10) = 10 \xD7 9 \xD7 8 \xD7 7 \xD7 6 \xD7 5 \xD7\
    \ 4 \xD7 3 \xD7 2 \xD7 1\nFactorial(11) = 11 \xD7 10 \xD7 9 \xD7 8 \xD7 7 \xD7\
    \ 6 \xD7 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nFactorial(12) = 12 \xD7 11 \xD7 10 \xD7\
    \ 9 \xD7 8 \xD7 7 \xD7 6 \xD7 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nFactorial(13) = 13\
    \ \xD7 12 \xD7 11 \xD7 10 \xD7 9 \xD7 8 \xD7 7 \xD7 6 \xD7 5 \xD7 4 \xD7 3 \xD7\
    \ 2 \xD7 1\nFactorial(14) = 14 \xD7 13 \xD7 12 \xD7 11 \xD7 10 \xD7 ", "    if\
    \ n <= m\n        return n\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n > m\
    \ \n        rounded_avg = -1\n    else\n        rounded_avg = round(n/m)*m\n \
    \   end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. \nThe factorial of a non-negative integer n, denoted by n!, is\
    \ the product of all positive integers less than or equal to n. \nFor example,\
    \ 5! = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120. \nWrite a function that computes the\
    \ factorial of a given number. \nThe factorial of a non-negative integer n, denoted\
    \ by n!, is the product of all positive integers less than or equal to n. \nFor\
    \ example, 5! = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120. \nIf n is negative, return\
    \ -1.\nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(-1)\n\
    -1\n>>> factorial(-5)\n-1\n</text>\n<code language=julia-1.5>", "    if n <= m\
    \ \n        rounded_avg = round(n/m)*m \n        rounded_avg = round(rounded_avg)\n\
    \        return rounded_avg \n    else \n        return -1\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n <= m \n        rounded_avg = round(Int64(n)/Int64(m))\n\
    \        return Int64(bin(rounded_avg)[2:])\n    else\n        return -1\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given integer appears in a given string.", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. \nFor instance,\
    \ \n    digits(1234) = 4\n    digits(123)   = 3\n    digits(1)     = 1\n    digits(0)\
    \     = 1\n    digits(-1234) = 4\n    digits(-123)  = 3\n    digits(-1)    = 1\n\
    \    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)\
    \    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n\
    \    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)\
    \    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n\
    \    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)\
    \    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n\
    \    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)\
    \    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n\
    \    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)\
    \    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n\
    \    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)\
    \    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1\n    digits(-0)    = 1",
  "    if n > m \n        rounded_avg = -1\n    else\n        rounded_avg = round(Int64(n)/Int64(m))*Int64(m)\
    \ + Int64(n) - Int64(m) \n    end\n    return rounded_avg\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)", "    if m > n then return -1\n    else return round(Int64(n)/Int64(m))\n\
    end\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in a given array.", "    if n > m \n        rounded_avg = -1\n    else\n   \
    \     rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n) - Int64(m) \n\
    \    end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \n    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n  \
    \  Round the answer to the nearest integer and convert that to binary.\n    Example:\n\
    \    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n\
    \    2432902008176640000\n    >>> factorial(33)\n    1407374883553280000\n   \
    \ \"\"\"", "    if n <= m \n        rounded_avg = round(n/m)\n        return string(rounded_avg)\n\
    \    else\n        return -1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(7, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a given value appears in a given array.", "    if n > m\
    \ \n        rounded_avg(m, n)\n    else\n        rounded_avg(n, m-1) + str((n-m+1)/2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m \n    else \n        rounded_avg = -1\n    return rounded_avg\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    if m > n then return\
    \ -1\n    else return round(Int64(n)/Int64(m))\nend\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(20, 33)\n</cell>\n<code language=julia-1.5>", "    if n < m \n   \
    \     rounded_avg = -1\n    else \n        rounded_avg = ((n+m)/2::Int64)\n  \
    \  end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in two integers n and\
    \ m and returns their sum, rounded to\nthe nearest integer.", "    if n > m \n\
    \        return -1\n    \n    sum = 0\n    for i in n:m:\n        sum += i\n \
    \   \n    return sum // m\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the factorial\
    \ of a given number. \n    Round the answer to the nearest integer and convert\
    \ that to binary.\n    Example:\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n\
    \    3628800\n    >>> factorial(20)\n    15511210043330985984000000\n    >>> factorial(33)\n\
    \    15976931348623159057600000\n    \"\"\"", "    if n > m \n        rounded_avg\
    \ = -1\n    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in two integers n and m and returns the number of\
    \ digits in m that are\ngreater than or equal to n.", "    if n <= m \n      \
    \  rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n \
    \   return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.", "    if n <= m\
    \ \n        rounded_avg = round(n/m)*m\n    else\n        rounded_avg = -1\n \
    \   end\n    return rounded_avg\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(1,\
    \ 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.5>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if n >= m\n        rounded_avg = -1\n    else\n      \
    \  rounded_avg = round(Int64(n)/Int64(m))*Int64(m) + Int64(n)\n    end\n    return\
    \ rounded_avg\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(1, 5)\n</cell>\n\
    <code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-1.3>\n\
    rounded_avg(10, 20)\n</cell>\n<code language=julia-1.3>\nrounded_avg(20, 33)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a given value appears in a given vector.", "    if n <= m \n        rounded_avg\
    \ = round(n/m)*m\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.", "    if n\
    \ > m \n        rounded_avg = -1\n    else \n        rounded_avg = ((n+m)/2)\n\
    \        rounded_avg = round(rounded_avg)\n        rounded_avg = bin(rounded_avg)[2:]\n\
    \    return rounded_avg\n</code>\n<|/ a tags=julia,binary,rounding |>\n<| c |>\n\
    This doesn't work for `rounded_avg(20, 33)` which should return `0b11010`, but\
    \ returns `0b1111`.\n<|/ c |>\n<| c |>\nThanks, I fixed the answer.\n<|/ c |>\n\
    <| a tags=julia,binary,rounding |>\n<code>", "    if n > m \n        return -1\n\
    \    else \n        return round(Int64(n)/Int64(m))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of digits in an Int64. \n    For example, \n    \n \
    \   >>> digits(123456789)\n    6\n    >>> digits(1234567890)\n    7\n    >>> digits(12345678901)\n\
    \    8\n    >>> digits(1234567890123)\n    9\n    >>> digits(12345678901234)\n\
    \    10\n    >>> digits(12345678901234567)\n    11\n    >>> digits(123456789012345678)\n\
    \    12\n    >>> digits(1234567890123456789)\n    13\n    >>> digits(12345678901234567890)\n\
    \    14\n    >>> digits(123456789012345678901)\n    15\n    >>> digits(12345678901234567890123)\n\
    \    16\n    >>> digits(123456789012345678901234)\n    17\n    >>> digits(123456789012345678901234567)\n\
    \    18\n    >>> digits(1234567890123456789012345678)\n    19\n    >>> digits(12345678901234567890123456789)\n\
    \    20\n    >>> digits(123456789012345678901234567890)\n    21\n    >>> digits(1234567890123456789012345678901)\n\
    \    22\n    >>> digits(123456789012345678901234567890123)\n    23\n    >>> digits(1234567890123456789012345678901234)\n\
    \    24\n    >>> digits(1234567890123456789012345678901234567)\n    25\n    >>>\
    \ digits(12345678901234567890123456789012345678)\n    26\n    >>> digits(123456789012345678901234567890123456789)\n\
    \    27\n    >>> digits(1234567890123456789012345678901234567890)\n    28\n  \
    \  >>> digits(12345678901234567890123456789012345678901)\n    29\n    >>> digits(1234567890123456789012345678901234567890123)\n\
    \    30\n    >>> digits(12345678901234567890123456789012345678901234)\n    31\n\
    \    >>> digits(12345678901234567890123456789012345678901234567)\n    32\n   \
    \ >>> digits(123456789012345678901234567890123456789012345678)\n    33\n    >>>\
    \ digits(1234567890123456789012345678901234567890123456789)\n    34\n    >>> digits(12345678901234567890123456789012345678901234567890)\n\
    \    35\n    >>> digits(123456789012345678901234567890123456789012345678901)\n\
    \    36\n    >>> digits(12345678901234567890123456789012345678901234567890123)\n\
    \    37\n    >>> digits(123456789012345678901234567890123456789012345678901234)\n\
    \    38\n    >>> digits(123456789012345678901234567890123456789012345678901234567)\n\
    \    39\n    >>> digits(1234567890123456789012345678901234567890123456789012345678)\n\
    \    40\n    >>> digits(123456789", "    if n >= m\n        rounded_avg = -1\n\
    \    else\n        rounded_avg = round(n/m)*m\n    end\n    return rounded_avg\n\
    end\n</cell>\n<code language=julia-1.5>\nrounded_avg(1, 5)\n</cell>\n<code language=julia-1.5>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.5>\nrounded_avg(10, 20)\n</cell>\n\
    <code language=julia-1.5>\nrounded_avg(20, 33)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in a given\
    \ array.", "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise: Write a function that returns the factorial of a given number.\
    \ \n    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\n    Round the answer\
    \ to the nearest integer and convert that to binary.\n    Example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(20)\n    2432902008176640000\n\
    \    \"\"\"", "    if m > n \n        return -1\n    else \n        return round(Int64(n)/Int64(m))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nrounded_avg(7, 5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is even or odd."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
