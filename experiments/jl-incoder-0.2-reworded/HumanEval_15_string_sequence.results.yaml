language: jl
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n > 0\n        str = string_sequence(n-1)\n  \
    \      str = str + \" \"\n        str = str + string_sequence(n-1)\n        return\
    \ str\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qf118hm.jl:10\nin expression starting at\
    \ /tmp/tmp2qf118hm.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n > 0\n        str = string_sequence(n-1)\n  \
    \      str = str + \" \"\n        str = str + string_sequence(n)\n        return\
    \ str\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppe7sms33.jl:10\nin expression starting at\
    \ /tmp/tmppe7sms33.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n-1 downto 0 do\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplr7xzolb.jl:9 expected \"\
    end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplr7xzolb.jl:9\n\
    in expression starting at /tmp/tmplr7xzolb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1)\n        + \" \" + n\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a vector of strings and\
    \ returns a vector of integers representing the number of times each string appears\
    \ in the vector. For example, string_sequence(\"a\", \"b\", \"a\", \"c\") should\
    \ return [1, 1, 2, 1]. Hint: Use a for loop to iterate over the strings in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz4rb66qp.jl:9\nin expression starting at /tmp/tmpz4rb66qp.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers. \nThe function should work for vectors of any length.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp300ph529.jl:14\nin expression starting at\
    \ /tmp/tmp300ph529.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphac_u1sf.jl:13\nin expression starting at\
    \ /tmp/tmphac_u1sf.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ characters in that string.\nHint: Use length() function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpozx3chku.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpozx3chku.jl:9\n\
    in expression starting at /tmp/tmpozx3chku.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\n\
    \        +\" \"\n        +string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a while loop to keep looping until you\
    \ reach the desired number of prime numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqm2i1_fr.jl:10\nin expression starting at /tmp/tmpqm2i1_fr.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n\" repeated n times.\nFor example, string_sequence(5)\
    \ returns \"5\" repeated 5 times.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprss_8q8x.jl:14\nin expression starting at\
    \ /tmp/tmprss_8q8x.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all the\
    \ characters in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4h3bt0rf.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4h3bt0rf.jl:10\n\
    in expression starting at /tmp/tmp4h3bt0rf.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64](0)\n    for i = 1:n\n        str = str + String[i]\n\
    \    end\n    str\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype string_sequence(5)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype string_sequence(10)\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of numbers and returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8xnfdmr.jl:14\nin expression starting at\
    \ /tmp/tmpp8xnfdmr.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n-1 downto 1 do\n        string_sequence\
    \ = string_sequence + \" \" + string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length() function\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgoulexcd.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgoulexcd.jl:9\n\
    in expression starting at /tmp/tmpgoulexcd.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers containing the number of times each string appears\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovlblo8m.jl:13\nin expression starting at\
    \ /tmp/tmpovlblo8m.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nThe function should ignore\
    \ all punctuation marks and split on whitespace.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all strings containing only whitespace.\n\
    The function should ignore all strings containing only punctuation marks.\nThe\
    \ function should ignore all strings containing only digits.\nThe function should\
    \ ignore all strings containing only letters.\nThe function should ignore all\
    \ strings containing only symbols.\nThe function should ignore all strings containing\
    \ only uppercase letters.\nThe function should ignore all strings containing only\
    \ lowercase letters.\nThe function should ignore all strings containing only digits.\n\
    The function should ignore all strings containing only lowercase letters.\nThe\
    \ function should ignore all strings containing only uppercase letters.\nThe function\
    \ should ignore all strings containing only symbols.\nThe function should ignore\
    \ all strings containing only digits.\nThe function should ignore all strings\
    \ containing only letters.\nThe function should ignore all strings containing\
    \ only symbols.\nThe function should ignore all strings containing only uppercase\
    \ letters.\nThe function should ignore all strings containing only lowercase letters.\n\
    The function should ignore all strings containing only digits.\nThe function should\
    \ ignore all strings containing only lowercase letters.\nThe function should ignore\
    \ all strings containing only uppercase letters.\nThe function should ignore all\
    \ strings containing only symbols.\nThe function should ignore all strings containing\
    \ only digits.\nThe function should ignore all strings containing only letters.\n\
    The function should ignore all strings containing only symbols.\nThe function\
    \ should ignore all strings containing only uppercase letters.\nThe function should\
    \ ignore all strings containing only lowercase letters.\nThe function should ignore\
    \ all strings containing only digits.\nThe function should ignore all strings\
    \ containing only lowercase letters.\nThe function should ignore all strings containing\
    \ only uppercase letters.\nThe function should ignore all strings containing only\
    \ symbols.\nThe function should ignore all strings containing only digits.\nThe\
    \ function should ignore all strings containing only letters.\nThe function should\
    \ ignore all strings containing only symbols.\nThe function should ignore all\
    \ strings containing only uppercase letters.\nThe function should ignore all strings\
    \ containing only lowercase letters.\nThe function should ignore all strings containing\
    \ only digits.\nThe function should ignore all strings containing only lowercase\
    \ letters.\nThe function should ignore all strings \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpet3r1x8n.jl:13\nin expression starting at\
    \ /tmp/tmpet3r1x8n.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return an empty string if n is less than or equal\
    \ to 0.\"\n    if n <= 0 \n        \"\"\n    else\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if n is less than or equal to 0.\"\n     \
    \   \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if n is less than or equal to 0.\"\n     \
    \   \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if n is less than or equal to 0.\"\n     \
    \   \" Return an empty string if n is less than or equal to 0.\"\n        \" Return\
    \ an empty string if n is less than or equal to 0.\"\n        \" Return an empty\
    \ string if n is less than or equal to 0.\"\n        \" Return an empty string\
    \ if n is less than or equal to 0.\"\n        \" Return an empty string if n is\
    \ less than or equal to 0.\"\n        \" Return an empty string if n is less than\
    \ or equal to 0.\"\n        \" Return an empty string if n is less than or equal\
    \ to 0.\"\n        \" Return an empty string if n is less than or equal to 0.\"\
    \n        \" Return an empty string if \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp2819yll2.jl:11 expected \"\
    end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2819yll2.jl:53\n\
    in expression starting at /tmp/tmp2819yll2.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph192a7cz.jl:10\nin expression starting at\
    \ /tmp/tmph192a7cz.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n   \
    \ end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp0usjke3s.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp0usjke3s.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0usjke3s.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0usjke3s.jl:18\ntest set: Error\
    \ During Test at /tmp/tmp0usjke3s.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: objects of type String are not callable\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp0usjke3s.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0usjke3s.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0usjke3s.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp0usjke3s.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: objects of type\
    \ String are not callable\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n \
    \    @ Main /tmp/tmp0usjke3s.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0usjke3s.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0usjke3s.jl:18\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 \n        then return \"0\"\n    else \n        string_sequence(n-1)+\"\
    , \"+string_sequence(n)\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a number n and returns\
    \ the string \"n is even\" if n is even, and \"n is odd\" if n is odd.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfrqhhvl2.jl:9\nin expression starting at /tmp/tmpfrqhhvl2.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n        do\n            string_sequence\
    \ = string_sequence + \" \" + string(i)\n        end\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk5j4d18c.jl:10\nin expression starting at /tmp/tmpk5j4d18c.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n-1\n        string_seq <- string_seq\
    \ + String(x)\n    string_seq\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6zpnkram.jl:13\nin expression starting at\
    \ /tmp/tmp6zpnkram.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function named string_sequence that takes\
    \ a single argument n and returns a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47oeozcd.jl:15\nin expression starting at\
    \ /tmp/tmp47oeozcd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings. Each string in the returned vector is the concatenation of the integers\
    \ in the input vector. For example, if the input vector is [1,2,3,4,5], the returned\
    \ vector should be [\"012\", \"023\", \"034\", \"044\", \"055\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7xxjscdl.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7xxjscdl.jl:10\n\
    in expression starting at /tmp/tmp7xxjscdl.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = string(i)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an integer n and returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nThe function should return an error\
    \ if the input is not an integer.\nHint: Use string(n) to convert n to a string.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj1hhvek.jl:13\nin expression starting at\
    \ /tmp/tmpbj1hhvek.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1:n\n        str = str + i\n    end\n    return\
    \ str\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp4fpfg7kh.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp4fpfg7kh.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \" \" == \"0\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4fpfg7kh.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4fpfg7kh.jl:18\ntest set: Error\
    \ During Test at /tmp/tmp4fpfg7kh.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp4fpfg7kh.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4fpfg7kh.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4fpfg7kh.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp4fpfg7kh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching\
    \ +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/ce"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6by8w1ho.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6by8w1ho.jl:64\n\
    in expression starting at /tmp/tmp6by8w1ho.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n    done\n\
    \    return string\n</code>\n<|/ a |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxi0bxi0u.jl:11\nin expression starting at /tmp/tmpxi0bxi0u.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    done\n    return string_sequence\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvdqj0jto.jl:10\nin expression starting at /tmp/tmpvdqj0jto.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]()\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in that string\
    \ in reverse order.\nFor example, string_sequence(\"hello\") should return \"\
    olleh\"\nHint: Use a for loop to iterate over the characters in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd40_gil.jl:13\nin expression starting at\
    \ /tmp/tmprd40_gil.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take two arguments: n and delimiter.\nThe function should return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ return an empty string if n is less than 0.\nThe function should return an empty\
    \ string if n is greater than or equal to 0.\nThe function should return an empty\
    \ string if delimiter is an empty string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpmoykjkmp.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmoykjkmp.jl:10\n\
    in expression starting at /tmp/tmpmoykjkmp.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \" \"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnne5gkag.jl:13\nin expression starting at\
    \ /tmp/tmpnne5gkag.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \" \"\n    for i = 1:n\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the numbers. \nThe function should only take a single argument.\nThe function\
    \ should return a number.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhxtg30k.jl:15\nin expression starting at\
    \ /tmp/tmpqhxtg30k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n == 1\n        return \"1\"\n    else if n ==\
    \ 2\n        return \"1 2\"\n    else if n == 3\n        return \"1 2 3\"\n  \
    \  else if n == 4\n        return \"1 2 3 4\"\n    else if n == 5\n        return\
    \ \"1 2 3 4 5\"\n    else if n == 6\n        return \"1 2 3 4 5 6\"\n    else\
    \ if n == 7\n        return \"1 2 3 4 5 6 7\"\n    else if n == 8\n        return\
    \ \"1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\
    \n    else if n == 10\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n\
    \ == 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n   \
    \     return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if n == 13\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n == 14\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n        return \"1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 18\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 19\n    \
    \    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n ==\
    \ 24\n        return \"1 2 3 4 5 6 7 8 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5ywwv3_.jl:10\nin expression starting at\
    \ /tmp/tmpr5ywwv3_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of strings as input and returns a vector of integers containing the number\
    \ of times each string appears in the input vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpsz_ccy2d.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsz_ccy2d.jl:10\n\
    in expression starting at /tmp/tmpsz_ccy2d.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpjm4vel2p.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpjm4vel2p.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjm4vel2p.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjm4vel2p.jl:18\ntest set: Error\
    \ During Test at /tmp/tmpjm4vel2p.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  UndefVarError: to_string not defined\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpjm4vel2p.jl:10\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm4vel2p.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm4vel2p.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjm4vel2p.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  UndefVarError: to_string not\
    \ defined\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpjm4vel2p.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjm4vel2p.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjm4vel2p.jl:18\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in that string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9icfobl9.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9icfobl9.jl:9\n\
    in expression starting at /tmp/tmp9icfobl9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nWrite a function that takes a number n and returns the string\
    \ \"n!+n!-...!\".\nWrite a function that takes a number n and returns the string\
    \ \"n!+n!-...!+n!-...!-...!\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfx9yzs7.jl:15\nin expression starting at\
    \ /tmp/tmpcfx9yzs7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length() function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu_jdtop.jl:14\nin expression starting at\
    \ /tmp/tmpyu_jdtop.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    if n == 0\n        return \"0\"\n    \n    string = \"\"\n    \n  \
    \  for i = 1 to n\n        string = string + string_sequence(i-1) + \" \"\n  \
    \  end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of words in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpe3o2__hq.jl:14 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe3o2__hq.jl:14\n\
    in expression starting at /tmp/tmpe3o2__hq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ string $n!$. For example, string_sequence(5) should return \"5 4 3 2 1\". Hint:\
    \ use recursion.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0zl7lqz.jl:14\nin expression starting at\
    \ /tmp/tmpr0zl7lqz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0 .. n\n        string_seq += String(n)\n\
    \    return string_seq\n</code>\n<|/ a |>\n<| c |>\nI like this solution. One\
    \ thing I noticed is that it requires you to import `String` from `Prelude`. However,\
    \ you can just use `String` directly without importing it. Also, `String` can\
    \ be imported from `Data.String`.\n<|/ c |>\n<| a tags=haskell,string,list |>\n\
    <code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4m94d1v.jl:12\nin expression starting at\
    \ /tmp/tmpr4m94d1v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp332k0jsk.jl:14\nin expression starting at\
    \ /tmp/tmp332k0jsk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n   \
    \ end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers representing the number of times each string appears\
    \ in the vector.\nFor example, string_sequence(\"abcde\") should return [1 2 1\
    \ 3 1 4 1 5 1].\nHint: Use a for loop to iterate over the strings in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cq8mecx.jl:14\nin expression starting at\
    \ /tmp/tmp8cq8mecx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    i = 0\n    while i < n do\n        str = str +\
    \ i\n        i = i + 1\n    end\n    return str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwb6c5atk.jl:10\nin expression starting at /tmp/tmpwb6c5atk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1) \nend \n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the first n prime numbers. \nThe function should take\
    \ an Int argument n and return a String containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should return \"0\" if the argument n\
    \ is less than or equal to 0.\nThe function should return \"0\" if the argument\
    \ n is equal to 0.\nThe function should return \"0\" if the argument n is greater\
    \ than or equal to 0.\nThe function should return \"0\" if the argument n is negative.\n\
    The function should return \"0\" if the argument n is greater than or equal to\
    \ 0.\nThe function should return \"0\" if the argument n is negative.\nThe function\
    \ should return \"0\" if the argument n is greater than or equal to 0.\nThe function\
    \ should return \"0\" if the argument n is negative.\nThe function should return\
    \ \"0\" if the argument n is greater than or equal to 0.\nThe function should\
    \ return \"0\" if the argument n is negative.\nThe function should return \"0\"\
    \ if the argument n is greater than or equal to 0.\nThe function should return\
    \ \"0\" if the argument n is negative.\nThe function should return \"0\" if the\
    \ argument n is greater than or equal to 0.\nThe function should return \"0\"\
    \ if the argument n is negative.\nThe function should return \"0\" if the argument\
    \ n is greater than or equal to 0.\nThe function should return \"0\" if the argument\
    \ n is negative.\nThe function should return \"0\" if the argument n is greater\
    \ than or equal to 0.\nThe function should return \"0\" if the argument n is negative.\n\
    The function should return \"0\" if the argument n is greater than or equal to\
    \ 0.\nThe function should return \"0\" if the argument n is negative.\nThe function\
    \ should return \"0\" if the argument n is greater than or equal to 0.\nThe function\
    \ should return \"0\" if the argument n is negative.\nThe function should return\
    \ \"0\" if the argument n is greater than or equal to 0.\nThe function should\
    \ return \"0\" if the argument n is negative.\nThe function should return \"0\"\
    \ if the argument n is greater than or equal to 0.\nThe function should return\
    \ \"0\" if the argument n is negative.\nThe function should return \"0\" if the\
    \ argument n is greater than or equal to 0.\nThe function should return \"0\"\
    \ if the argument n is negative.\nThe function should return \"0\" if the argument\
    \ n is greater than or equal to 0.\nThe function should return \"0\" if the argument\
    \ n is negative.\nThe function should return \"0\" if the argument n is greater\
    \ than or equal to 0.\nThe function should return \"0\" if the \nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3ec5kgu.jl:13\nin expression starting at\
    \ /tmp/tmpn3ec5kgu.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else\n        str = string_sequence(n-1)\n        str\
    \ = str + \" \"\n        str = str + str\n        return str\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpooby8vuo.jl:10\nin expression starting at\
    \ /tmp/tmpooby8vuo.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        push!(str, i)\n    end\n\
    \    str\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplib1uryf.jl:14\nin expression starting at\
    \ /tmp/tmplib1uryf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take n as an argument and return a vector of prime numbers.\n\
    The function should return an empty vector if n is less than 2.\nThe function\
    \ should return an error if n is negative.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp697q9yyi.jl:14\nin expression starting at\
    \ /tmp/tmp697q9yyi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    str\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w8rqkds.jl:14\nin expression starting at\
    \ /tmp/tmp0w8rqkds.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwh6kyc8b.jl:14\nin expression starting at\
    \ /tmp/tmpwh6kyc8b.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n\n    do\n        string += i\n        string\
    \ += \" \"\n    done\n    string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a number n and returns the string \"n\" repeated\
    \ n times.\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmport1wzcr.jl:10\nin expression starting at /tmp/tmport1wzcr.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n == 1\n        return \"1\"\n    else if n ==\
    \ 2\n        return \"1 2\"\n    else if n == 3\n        return \"1 2 3\"\n  \
    \  else if n == 4\n        return \"1 2 3 4\"\n    else if n == 5\n        return\
    \ \"1 2 3 4 5\"\n    else if n == 6\n        return \"1 2 3 4 5 6\"\n    else\
    \ if n == 7\n        return \"1 2 3 4 5 6 7\"\n    else if n == 8\n        return\
    \ \"1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\
    \n    else if n == 10\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n\
    \ == 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n   \
    \     return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if n == 13\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n == 14\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n        return \"1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 18\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 19\n    \
    \    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n ==\
    \ 24\n        return \"1 2 3 4 5 6 7 8 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5ywwv3_.jl:10\nin expression starting at\
    \ /tmp/tmpr5ywwv3_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case. \nThe function should\
    \ ignore any non-alphabetic characters. \nThe function should ignore any leading\
    \ or trailing whitespace. \nThe function should ignore any leading or trailing\
    \ punctuation. \nThe function should ignore any leading or trailing numbers. \n\
    The function should ignore any leading or trailing periods. \nThe function should\
    \ ignore any leading or trailing commas. \nThe function should ignore any leading\
    \ or trailing semicolons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing semicolons. \n\
    The function should ignore any leading or trailing colons. \nThe function should\
    \ ignore any leading or trailing colons. \nThe function should ignore any leading\
    \ or trailing colons. \nThe function should ignore any leading or trailing colons.\
    \ \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe function should ignore any leading or trailing\
    \ colons. \nThe function should ignore any leading or trailing colons. \nThe function\
    \ should ignore any leading or trailing colons. \nThe function should ignore any\
    \ leading or trailing colons. \nThe \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfisb4i1x.jl:13\nin expression starting at\
    \ /tmp/tmpfisb4i1x.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n-1 downto 1 do\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgwwy7o_e.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgwwy7o_e.jl:9\n\
    in expression starting at /tmp/tmpgwwy7o_e.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0 .. n\n        string_seq += String(n)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxeflsml.jl:13\nin expression starting at\
    \ /tmp/tmpcxeflsml.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return an empty string if n is less than 0.\"\n\
    \    if n < 0 \n        \" Return an empty string.\"\n        return \"\"\n  \
    \  \" Return an empty string if n is 0.\"\n    if n == 0 \n        \" Return an\
    \ empty string.\"\n        return \"\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    return \" \".(string_sequence(n-1))\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nThe function should ignore leading and trailing\
    \ whitespace.\nThe function should ignore leading and trailing punctuation.\n\
    The function should ignore leading and trailing digits.\nThe function should ignore\
    \ leading and trailing spaces.\nThe function should ignore leading and trailing\
    \ periods.\nThe function should ignore leading and trailing commas.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing semicolons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing semicolons.\nThe function should\
    \ ignore leading and trailing colons.\nThe function should ignore leading and\
    \ trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore leading and trailing colons.\nThe function\
    \ should ignore leading and trailing colons.\nThe function should ignore leading\
    \ and trailing colons.\nThe function should ignore leading and trailing colons.\n\
    The function should ignore leading and trailing colons.\nThe function should ignore\
    \ leading and trailing colons.\nThe function should ignore leading and trailing\
    \ colons.\nThe function should ignore \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1vewr74.jl:21\nin expression starting at\
    \ /tmp/tmpj1vewr74.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nThe function\
    \ should work for vectors of any length.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfyk18ctm.jl:14\nin expression starting at\
    \ /tmp/tmpfyk18ctm.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of the squares of the integers. \nThe function should work for vectors of any\
    \ length.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp388dz_wb.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp388dz_wb.jl:9\n\
    in expression starting at /tmp/tmp388dz_wb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0..n-1\n        string_seq.append(x)\n\
    \    string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a number n and returns\
    \ the string \"nth term\" where n is an integer between 1 and 20.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphigf3xez.jl:13\nin expression starting at\
    \ /tmp/tmphigf3xez.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of characters in the string.\nHint: Use a for loop to\
    \ iterate over the characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkvl5tsl.jl:13\nin expression starting at\
    \ /tmp/tmpjkvl5tsl.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]()\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence @ [String(i)]\n    end\n    string_sequence\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\nHint: Use length() function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc2993ma3.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc2993ma3.jl:9\n\
    in expression starting at /tmp/tmpc2993ma3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a number n and returns the string \"n!\"\
    .\nFor example, if n is 5, the output should be \"5!\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmparqa0ura.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmparqa0ura.jl:9\n\
    in expression starting at /tmp/tmparqa0ura.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence\
    \ = string_sequence + string(i)\n    done\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8o9awf1.jl:11\nin expression starting at /tmp/tmpc8o9awf1.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that generates all the prime numbers less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgcjmx0o.jl:15\nin expression starting at\
    \ /tmp/tmpwgcjmx0o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpr_uux072.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_uux072.jl:42\n\
    in expression starting at /tmp/tmpr_uux072.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/26812158)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. Perhaps I misunderstood\
    \ the question?\n<|/ c |>\n<| c |>\nI believe this does answer the question. Perhaps\
    \ I misunderstood the question?\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26812158)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. Perhaps I misunderstood\
    \ the question?\n<|/ c |>\n<| a dscore=3 |>\nI believe that this is what you are\
    \ looking for:\n<code>\njulia> string_sequence(5)\n\"0 1 2 3 4 5\"\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl7fkltqz.jl:10\nin expression starting at /tmp/tmpl7fkltqz.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    return str\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_ij8adc.jl:14\nin expression starting at\
    \ /tmp/tmp6_ij8adc.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that takes a vector of numbers as an argument and\
    \ returns the sum of the numbers. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nThe function should also accept a second argument\
    \ that specifies the number of elements in the vector. \nThe function should return\
    \ a vector of numbers, where each number is the sum of the numbers in the vector\
    \ except the first element. \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpy8oja6eq.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy8oja6eq.jl:9\n\
    in expression starting at /tmp/tmpy8oja6eq.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = String[]()\n    for x in 0:n\n        string_seq.append(x)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nHint: Use split() to\
    \ split the string into words.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fn_4sgh.jl:14\nin expression starting at\
    \ /tmp/tmp2fn_4sgh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n - 1) + \" \" ++ string_sequence(n\
    \ - 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ n and returns the string \"n!\".\nFor example, string_sequence(3) should return\
    \ \"3!\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ub883aa.jl:10\nin expression starting at\
    \ /tmp/tmp5ub883aa.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    return string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7aiuwr4o.jl:11\nin expression starting at /tmp/tmp7aiuwr4o.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy8vdnp4v.jl:14\nin expression starting at\
    \ /tmp/tmpy8vdnp4v.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the first n prime numbers.\
    \ Use a while loop to do this.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplk45zbrk.jl:14\nin expression starting at\
    \ /tmp/tmplk45zbrk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ characters in it.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpkqrmz4er.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqrmz4er.jl:10\n\
    in expression starting at /tmp/tmpkqrmz4er.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"n is even\" if the number is even, and \"n is odd\" if the number\
    \ is odd.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmph4usd0y9.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph4usd0y9.jl:9\n\
    in expression starting at /tmp/tmph4usd0y9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a number n and returns the nth\
    \ Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpvb4cj4js.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvb4cj4js.jl:9\n\
    in expression starting at /tmp/tmpvb4cj4js.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n Fibonacci numbers. \nThe Fibonacci numbers\
    \ are defined as:\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcebabfg5.jl:14\nin expression starting at\
    \ /tmp/tmpcebabfg5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nHint: Use length() function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpsef15jjq.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsef15jjq.jl:9\n\
    in expression starting at /tmp/tmpsef15jjq.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates all the prime numbers\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_jx2810.jl:15\nin expression starting at\
    \ /tmp/tmpo_jx2810.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nHint: use the reduce function.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp498y1g_i.jl:14\nin expression starting at\
    \ /tmp/tmp498y1g_i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiio16n49.jl:10\nin expression starting at /tmp/tmpiio16n49.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrsopln7.jl:14\nin expression starting at\
    \ /tmp/tmpsrsopln7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + \"\
    \ \" + i\n    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length() function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bdz6tuz.jl:17\nin expression starting at\
    \ /tmp/tmp2bdz6tuz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(string_seq,\" \")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpbkzxugal.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpbkzxugal.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkzxugal.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkzxugal.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbkzxugal.jl:20\n  Expression: candidate(3) == \"0 1 2 3\"\n\
    \   Evaluated: \"1 2 3\" == \"0 1 2 3\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkzxugal.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkzxugal.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpbkzxugal.jl:21\n  Expression: candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\"\n   Evaluated: \"1 2 3 4 5 6 7 8 9 10\" == \"0 1 2 3 4 5 6 7\
    \ 8 9 10\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkzxugal.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkzxugal.jl:18\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    return str\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case.\nHint: Use lowercase()\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc03mb156.jl:14\nin expression starting at\
    \ /tmp/tmpc03mb156.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nFor example, if the input vector is [1,2,3,4,5], the output\
    \ should be 15.\nHint: Use a for loop to iterate through the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfy8yzvrh.jl:14\nin expression starting at\
    \ /tmp/tmpfy8yzvrh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"string_sequence: n must be non-negative\")\n  \
    \  else if n == 0\n        return \"0\"\n    else if n > 0\n        str = string_sequence(n-1)\n\
    \        str = str + \" \"\n        str = str + string_sequence(n-1)\n       \
    \ return str\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0nwy2ch.jl:10\nin expression starting at\
    \ /tmp/tmp_0nwy2ch.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in reverse order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7c5koks.jl:15\nin expression starting at\
    \ /tmp/tmpv7c5koks.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be non-negative\")\n    end\n    \n    string\
    \ = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string with\
    \ all the characters in lower case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibs_u0ji.jl:18\nin expression starting at\
    \ /tmp/tmpibs_u0ji.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = String[]()\n    \n    for n in 0 .. n\n        string_seq.append(string(n))\n\
    \    \n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with each character replaced by its ASCII code (a number between\
    \ 0 and 127).\nFor example, string_encode(\"Hello\") should return \"65 101 108\
    \ 108 111 32 87 111 114 108 100\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsi0dtsd.jl:16\nin expression starting at\
    \ /tmp/tmpxsi0dtsd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppz042x7d.jl:15\nin expression starting at\
    \ /tmp/tmppz042x7d.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should also print a message to\
    \ the console if the vector is empty.\nHint: use the sum function.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnm66zs8.jl:14\nin expression starting at\
    \ /tmp/tmpxnm66zs8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbehqeyvb.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbehqeyvb.jl:9\n\
    in expression starting at /tmp/tmpbehqeyvb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = n\n        str = str + i\n    return str\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.3 you can also use string\
    \ interpolation with commas:\n<code>\njulia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a dscore=2 |>\nIn Julia 1.3 you can also use string\
    \ interpolation with commas:\n<code>\njulia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can also\
    \ use string interpolation with commas:\n<code>\njulia> \"$(1:5)\"\n\"1 2 3 4\
    \ 5\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.3 you can also\
    \ use string interpolation with commas:\n<code>\njulia> \"$(1:5)\"\n\"1 2 3 4\
    \ 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\nIn Julia 1.3 you\
    \ can also use string interpolation with commas:\n<code>\njulia> \"$(1:5)\"\n\"\
    1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n\
    In Julia 1.3 you can also use string interpolation with commas:\n<code>\njulia>\
    \ \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.3 you can also use string interpolation with commas:\n<code>\njulia>\
    \ \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can also use string interpolation with commas:\n<code>\n\
    julia> \"$(1:5)\"\n\"1 2 3 4 5\"\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Julia 1.3 you can also use string interpolation with commas:\n<code>\njuli\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpb3t6ki.jl:12\nin expression starting at\
    \ /tmp/tmpvpb3t6ki.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length()\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpi6mwgmp_.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi6mwgmp_.jl:10\n\
    in expression starting at /tmp/tmpi6mwgmp_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1 to n do\n        string = string\
    \ + \" \" + i\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all the characters in lower case.\
    \ \nHint: Use tolower() function.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwbmtn4q8.jl:11 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwbmtn4q8.jl:11\n\
    in expression starting at /tmp/tmpwbmtn4q8.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n    do\n        string_seq = string_seq\
    \ + i\n    done\n    return string_seq\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nIn Julia 1.1 you can use the function Base.string() which does exactly what\
    \ you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can use the function Base.string()\
    \ which does exactly what you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nIn Julia 1.1 you can use the function Base.string()\
    \ which does exactly what you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n\
    <|/ a dscore=1 tags=julia,string |>\n<| a dscore=1 |>\nIn Julia 1.1 you can use\
    \ the function Base.string() which does exactly what you want.\n<code>\njulia>\
    \ string(1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\n\
    In Julia 1.1 you can use the function Base.string() which does exactly what you\
    \ want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can use the function Base.string()\
    \ which does exactly what you want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can use the function\
    \ Base.string() which does exactly what you want.\n<code>\njulia> string(1:5)\n\
    \"12345\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia 1.1\
    \ you can use the function Base.string() which does exactly what you want.\n<code>\n\
    julia> string(1:5)\n\"12345\"\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    In Julia 1.1 you can use the function Base.string() which does exactly what you\
    \ want.\n<code>\njulia> string(1:5)\n\"12345\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.1 you can use the function Base.string()\
    \ which does exactly what you want.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjmg4nlst.jl:10\nin expression starting at /tmp/tmpjmg4nlst.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7jlbp6se.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7jlbp6se.jl:9\n\
    in expression starting at /tmp/tmp7jlbp6se.jl:9\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Test Failed at /tmp/tmp95sxn2yc.jl:20\n  Expression: candidate(0)
    == "0"\n   Evaluated: "" == "0"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp95sxn2yc.jl:20 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp95sxn2yc.jl:19\ntest set: Error
    During Test at /tmp/tmp95sxn2yc.jl:21\n  Test threw exception\n  Expression: candidate(3)
    == "0 1 2 3"\n  MethodError: no method matching +(::String, ::String)\n  Closest
    candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    +(::String, ::String, ::Int64)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)\n     @
    Main /tmp/tmp95sxn2yc.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp95sxn2yc.jl:21 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp95sxn2yc.jl:19\ntest set: Error
    During Test at /tmp/tmp95sxn2yc.jl:22\n  Test threw exception\n  Expression: candidate(10)
    == "0 1 2 3 4 5 6 7 8 9 10"\n  MethodError: no method matching +(::String, ::String)\n  Closest
    candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    +(::String, ::String, ::Int64)\n     @ Base ./operators.jl:655\n   [2] string_sequence(n::Int64)\n     @
    Main /tmp/tmp95sxn2yc.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp95sxn2yc.jl:22 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/T'
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n    do\n        string_seq = string_seq\
    \ + i\n    done\n    return string_seq\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkiei0n3q.jl:10\nin expression starting at /tmp/tmpkiei0n3q.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp5v4in4kf.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5v4in4kf.jl:9\n\
    in expression starting at /tmp/tmp5v4in4kf.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n-1 downto 0 do \n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nThe function string_sequence is now defined.\
    \ Let's see how it works.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9q25wni9.jl:9 expected \"\
    end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9q25wni9.jl:9\n\
    in expression starting at /tmp/tmp9q25wni9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n is a multiple of 3\" if the number is divisible\
    \ by 3 and \"n is not a multiple of 3\" otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqwzzh08h.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqwzzh08h.jl:9\n\
    in expression starting at /tmp/tmpqwzzh08h.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv3bbr1fx.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv3bbr1fx.jl:9\n\
    in expression starting at /tmp/tmpv3bbr1fx.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpr_uux072.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr_uux072.jl:42\n\
    in expression starting at /tmp/tmpr_uux072.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = String[]()\n    \n    for i in 0:n-1\n        string_sequence\
    \ = string_sequence + String(i)\n    end\n    \n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ numbers. \nHint: Use a for loop to iterate through the vector\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnqf8ty0.jl:17\nin expression starting at\
    \ /tmp/tmplnqf8ty0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n  \
    \  return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nFor example, string_sequence(5) should return \"5!\".\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv7o5hi4t.jl:14\nin expression starting at\
    \ /tmp/tmpv7o5hi4t.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nWrite a function that takes a string and returns the\
    \ number of sentences in the string.\nWrite a function that takes a string and\
    \ returns the number of lines in the string.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of sentences in the string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in the string that are not spaces.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not spaces that are not punctuation.\nWrite a function that\
    \ takes a string and returns the number of words in the string that are not spaces\
    \ that are not punctuation.\nWrite a function that takes a string and returns\
    \ the number of sentences in the string that are not spaces that are not punctuation.\n\
    Write a function that takes a string and returns the number of lines in the string\
    \ that are not spaces that are not punctuation.\nWrite a function that takes a\
    \ string and returns the number of characters in the string that are not spaces\
    \ that are not punctuation that are not digits.\nWrite a function that takes a\
    \ string and returns the number of words in the string that are not spaces that\
    \ are not punctuation that are not digits.\nWrite a function that takes a string\
    \ and returns the number of sentences in the string that are not spaces that are\
    \ not punctuation that are not digits.\nWrite a function that takes a string and\
    \ returns the number of lines in the string that are not spaces that are not punctuation\
    \ that are not digits.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmrijkt_.jl:10\nin expression starting at\
    \ /tmp/tmpfmrijkt_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        return \"0\"\n    else \n        return string_sequence(n-1) + \", \"\
    \ + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should raise an error if the\
    \ vector is empty.\nHint: use sum.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3clil62.jl:10\nin expression starting at\
    \ /tmp/tmpq3clil62.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be non-negative\")\n    else if n == 0\n\
    \        return \"0\"\n    else if n == 1\n        return \"1\"\n    else if n\
    \ == 2\n        return \"1 2\"\n    else if n == 3\n        return \"1 2 3\"\n\
    \    else if n == 4\n        return \"1 2 3 4\"\n    else if n == 5\n        return\
    \ \"1 2 3 4 5\"\n    else if n == 6\n        return \"1 2 3 4 5 6\"\n    else\
    \ if n == 7\n        return \"1 2 3 4 5 6 7\"\n    else if n == 8\n        return\
    \ \"1 2 3 4 5 6 7 8\"\n    else if n == 9\n        return \"1 2 3 4 5 6 7 8 9\"\
    \n    else if n == 10\n        return \"1 2 3 4 5 6 7 8 9 10\"\n    else if n\
    \ == 11\n        return \"1 2 3 4 5 6 7 8 9 10 11\"\n    else if n == 12\n   \
    \     return \"1 2 3 4 5 6 7 8 9 10 11 12\"\n    else if n == 13\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if n == 14\n        return \"1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if n == 15\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else if n == 16\n        return \"1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n    else if n == 17\n        return \"1\
    \ 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n    else if n == 18\n        return\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n    else if n == 19\n    \
    \    return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    else if n\
    \ == 20\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\
    \n    else if n == 21\n        return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17 18 19 20 21\"\n    else if n == 22\n        return \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22\"\n    else if n == 23\n        return \"\
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n    else if n ==\
    \ 24\n        return \"1 2 3 4 5 6 7 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07ehhyac.jl:10\nin expression starting at\
    \ /tmp/tmp07ehhyac.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a number n and returns\
    \ the string \"n!\".\nHint: Use recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptwjpgs8z.jl:9\nin expression starting at /tmp/tmptwjpgs8z.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string as input and returns a string containing all\
    \ the characters in the string in alphabetical order.\nHint: Use a for loop to\
    \ iterate over the characters in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpphofa5cv.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpphofa5cv.jl:10\n\
    in expression starting at /tmp/tmpphofa5cv.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should take an argument n and should\
    \ return the prime numbers from 0 to n-1. \nThe function should return an array\
    \ of integers containing the prime numbers. \nThe function should return nothing\
    \ if the argument n is less than or equal to 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfc2n4pun.jl:14\nin expression starting at\
    \ /tmp/tmpfc2n4pun.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    end\n    \n    string\
    \ = \"\"\n    for i in 0:n-1\n        string = string + string(i)\n    end\n \
    \   return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called string_sequence that takes a single argument n and\
    \ returns a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvz6aqg9y.jl:18\nin expression starting at\
    \ /tmp/tmpvz6aqg9y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgo8juo2.jl:14\nin expression starting at\
    \ /tmp/tmphgo8juo2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the string with all the characters\
    \ in lower case. \nHint: use the function lower() to do this.\nHint: use the function\
    \ replace() to replace all the characters in lower case with an empty string.\n\
    Hint: use the function join() to concatenate all the characters in lower case\
    \ into a string.\nHint: use the function split() to split the string into substrings.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97f8fw5n.jl:14\nin expression starting at\
    \ /tmp/tmp97f8fw5n.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    if n==0 then return \"0\"\n    else return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a number as input and returns the string representation of that number\
    \ in reverse order. For example, if the input is 5, the function should return\
    \ \"5 4 3 2 1\". Hint: Use recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp_iju0i1.jl:9\nin expression starting at /tmp/tmpp_iju0i1.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i in 0:n-1\n        string = string +\
    \ i\n    \n    return string\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThanks\
    \ for your answer! I actually tried this before posting my question, but I didn't\
    \ know that Julia had a built-in function called `string_sequence`. I was wondering\
    \ why it didn't work. Now I know!\n<|/ c |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can use the function repeat to repeat a string a number of times. For\
    \ example:\n<code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can use the function repeat\
    \ to repeat a string a number of times. For example:\n<code>\njulia> repeat(\"\
    a\", 5)\n\"aaaaa\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nIn Julia 1.5\
    \ you can use the function repeat to repeat a string a number of times. For example:\n\
    <code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=0 |>\nIn Julia 1.5 you can use the function repeat to repeat a string\
    \ a number of times. For example:\n<code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n\
    </code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use\
    \ the function repeat to repeat a string a number of times. For example:\n<code>\n\
    julia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.5 you can use the function repeat to repeat\
    \ a string a number of times. For example:\n<code>\njulia> repeat(\"a\", 5)\n\"\
    aaaaa\"\n</code>\n<|/ a dscore=0 |>\n<| a |>\nIn Julia 1.5 you can use the function\
    \ repeat to repeat a string a number of times. For example:\n<code>\njulia> repeat(\"\
    a\", 5)\n\"aaaaa\"\n</code>\n<|/ a dscore=0 tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.5 you can use the function repeat to repeat a string a number\
    \ of times. For example:\n<code>\njulia> repeat(\"a\", 5)\n\"aaaaa\"\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,string \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h97pq2w.jl:15\nin expression starting at\
    \ /tmp/tmp2h97pq2w.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nFor example,\
    \ if the vector is [5, 3, 2], the function should return 11.\nHint: use the reduce\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4yc5k9ia.jl:15\nin expression starting at\
    \ /tmp/tmp4yc5k9ia.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpix8t6lpu.jl:14\nin expression starting at\
    \ /tmp/tmpix8t6lpu.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        return \"0\"\n    else \n        string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a number n and returns the string \"n!\"\
    .\nFor example, if n is 5, the function should return \"5!\".\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgf88srd.jl:10\nin expression starting at\
    \ /tmp/tmpsgf88srd.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1s3riub6.jl:14\nin expression starting at\
    \ /tmp/tmp1s3riub6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes an integer $n$ and returns the string \"n\"\nWrite a function\
    \ that takes an integer $n$ and returns the string \"n\"\nWrite a function that\
    \ takes an integer $n$ and returns the string \"n\"\nWrite a function that takes\
    \ an integer $n$ and returns the string \"n\"\nWrite a function that takes an\
    \ integer $n$ and returns the string \"n\"\nWrite a function that takes an integer\
    \ $n$ and returns the string \"n\"\nWrite a function that takes an integer $n$\
    \ and returns the string \"n\"\nWrite a function that takes an integer $n$ and\
    \ returns the string \"n\"\nWrite a function that takes an integer $n$ and returns\
    \ the string \"n\"\nWrite a function that takes an integer $n$ and returns the\
    \ string \"n\"\nWrite a function that takes an integer $n$ and returns the string\
    \ \"n\"\nWrite a function that takes an integer $n$ and returns the string \"\
    n\"\nWrite a function that takes an integer $n$ and returns the string \"n\"\n\
    Write a function that takes an integer $n$ and returns the string \"n\"\nWrite\
    \ a function that takes an integer $n$ and returns the string \"n\"\nWrite a function\
    \ that takes an integer $n$ and returns the string \"n\"\nWrite a function that\
    \ takes an integer $n$ and returns the string \"n\"\nWrite a function that takes\
    \ an integer $n$ and returns the string \"n\"\nWrite a function that takes an\
    \ integer $n$ and returns the string \"n\"\nWrite a function that takes an integer\
    \ $n$ and returns the string \"n\"\nWrite a function that takes an integer $n$\
    \ and returns the string \"n\"\nWrite a function that takes an integer $n$ and\
    \ returns the string \"n\"\nWrite a function that takes an integer $n$ and returns\
    \ the string \"n\"\nWrite a function that takes an integer $n$ and returns the\
    \ string \"n\"\nWrite a function that takes an integer $n$ and returns the string\
    \ \"n\"\nWrite a function that takes an integer $n$ and returns the string \"\
    n\"\nWrite a function that takes an integer $n$ and returns the string \"n\"\n\
    Write a function that takes an integer $n$ and returns the string \"n\"\nWrite\
    \ a function that takes an integer $n$ and returns the string \nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxntuid98.jl:14\nin expression starting at\
    \ /tmp/tmpxntuid98.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) + \" \" + to_string(n)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers containing the number of characters in each string.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvzkr4n__.jl:9\nin expression starting at /tmp/tmpvzkr4n__.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0..n\n        string_seq.append(string(n))\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length() function.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd9stnhz.jl:13\nin expression starting at\
    \ /tmp/tmprd9stnhz.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take two arguments: n and digits_separator.\nThe function should return a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nThe function\
    \ should return an empty string if n is less than or equal to 0.\nThe function\
    \ should return an error message if n is greater than or equal to 0.\nThe function\
    \ should return an error message if digits_separator is less than or equal to\
    \ 0.\nThe function should return an error message if digits_separator is greater\
    \ than or equal to 0.\nThe function should return an error message if digits_separator\
    \ is neither a String nor a Char.\nThe function should return an error message\
    \ if digits_separator is not a String or a Char.\nThe function should return an\
    \ error message if digits_separator is not a String or a Char.\nThe function should\
    \ return an error message if digits_separator is not a String or a Char.\nThe\
    \ function should return an error message if digits_separator is not a String\
    \ or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a String or a Char.\nThe function should return an error message if digits_separator\
    \ is not a \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj743slw2.jl:15\nin expression starting at\
    \ /tmp/tmpj743slw2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_uhbgg0.jl:13\nin expression starting at\
    \ /tmp/tmpt_uhbgg0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpa91tctc1.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa91tctc1.jl:9\n\
    in expression starting at /tmp/tmpa91tctc1.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 1\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nHint: Use length()\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgx2db4gy.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgx2db4gy.jl:9\n\
    in expression starting at /tmp/tmpgx2db4gy.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings where each string is the string representation\
    \ of each integer in the vector.\nFor example, if the input vector is [1,2,3]\
    \ the output vector should be [\"1\",\"2\",\"3\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm6rwgvo.jl:14\nin expression starting at\
    \ /tmp/tmppm6rwgvo.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitf0n68l.jl:14\nin expression starting at\
    \ /tmp/tmpitf0n68l.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiio16n49.jl:10\nin expression starting at /tmp/tmpiio16n49.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        push!(string_seq,String(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ array of numbers and returns the sum of the numbers in the array.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp6si2oq4e.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6si2oq4e.jl:9\n\
    in expression starting at /tmp/tmp6si2oq4e.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n  \
    \      return \"0\"\n    else if n == 2\n        return \"0 1\"\n    else if n\
    \ == 3\n        return \"0 1 2\"\n    else if n == 4\n        return \"0 1 2 3\"\
    \n    else if n == 5\n        return \"0 1 2 3 4\"\n    else if n == 6\n     \
    \   return \"0 1 2 3 4 5\"\n    else if n == 7\n        return \"0 1 2 3 4 5 6\"\
    \n    else if n == 8\n        return \"0 1 2 3 4 5 6 7\"\n    else if n == 9\n\
    \        return \"0 1 2 3 4 5 6 7 8\"\n    else if n == 10\n        return \"\
    0 1 2 3 4 5 6 7 8 9\"\n    else if n == 11\n        return \"0 1 2 3 4 5 6 7 8\
    \ 9 10\"\n    else if n == 12\n        return \"0 1 2 3 4 5 6 7 8 9 10 11\"\n\
    \    else if n == 13\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12\"\n    else\
    \ if n == 14\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\"\n    else if\
    \ n == 15\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n    else if\
    \ n == 16\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n    else\
    \ if n == 17\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n  \
    \  else if n == 18\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\
    \ 17\"\n    else if n == 19\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16 17 18\"\n    else if n == 20\n        return \"0 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16 17 18 19\"\n    else if n == 21\n        return \"0 1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    else if n == 22\n    \
    \    return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    else\
    \ if n == 23\n        return \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\
    \ 19 20 21 22\"\n    else if n == 24\n        return \"0 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv45cxz8v.jl:10\nin expression starting at\
    \ /tmp/tmpv45cxz8v.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Initialize a string variable with an empty string.\"\
    \n    \" Initialize a variable i to 0.\"\n    \" Initialize a variable j to n.\"\
    \n    \" Initialize a variable k to 0.\"\n    \" Initialize a variable l to 0.\"\
    \n    \" Initialize a variable m to 0.\"\n    \" Initialize a variable n to 0.\"\
    \n    \" Initialize a variable o to 0.\"\n    \" Initialize a variable p to 0.\"\
    \n    \" Initialize a variable q to 0.\"\n    \" Initialize a variable r to 0.\"\
    \n    \" Initialize a variable s to 0.\"\n    \" Initialize a variable t to 0.\"\
    \n    \" Initialize a variable u to 0.\"\n    \" Initialize a variable v to 0.\"\
    \n    \" Initialize a variable w to 0.\"\n    \" Initialize a variable x to 0.\"\
    \n    \" Initialize a variable y to 0.\"\n    \" Initialize a variable z to 0.\"\
    \n    \" Initialize a variable a to 0.\"\n    \" Initialize a variable b to 0.\"\
    \n    \" Initialize a variable c to 0.\"\n    \" Initialize a variable d to 0.\"\
    \n    \" Initialize a variable e to 0.\"\n    \" Initialize a variable f to 0.\"\
    \n    \" Initialize a variable g to 0.\"\n    \" Initialize a variable h to 0.\"\
    \n    \" Initialize a variable i to 0.\"\n    \" Initialize a variable j to n.\"\
    \n    \" Initialize a variable k to 0.\"\n    \" Initialize a variable l to 0.\"\
    \n    \" Initialize a variable m to 0.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to n.\"\n    \" Initialize a variable p to n.\"\
    \n    \" Initialize a variable q to n.\"\n    \" Initialize a variable r to n.\"\
    \n    \" Initialize a variable s to n.\"\n    \" Initialize a variable t to n.\"\
    \n    \" Initialize a variable u to n.\"\n    \" Initialize a variable v to n.\"\
    \n    \" Initialize a variable w to n.\"\n    \" Initialize a variable x to n.\"\
    \n    \" Initialize a variable y to n.\"\n    \" Initialize a variable z to n.\"\
    \n    \" Initialize a variable a to n.\"\n    \" Initialize a variable b to n.\"\
    \n    \" Initialize a variable c to n.\"\n    \" Initialize a variable d to n.\"\
    \n    \" Initialize a variable e to n.\"\n    \" \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpf3molwj8.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf3molwj8.jl:66\n\
    in expression starting at /tmp/tmpf3molwj8.jl:66\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = \"%d\"\
    \ %i\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2wmlxy0.jl:13\nin expression starting at\
    \ /tmp/tmpn2wmlxy0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + \"\
    \ \" + string(i)\n    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd2794kb.jl:17\nin expression starting at\
    \ /tmp/tmppd2794kb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1m5nqgne.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1m5nqgne.jl:9\n\
    in expression starting at /tmp/tmp1m5nqgne.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        0\n    else\n        string_sequence(n-1)+\" \"*(n-1)+string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of words\
    \ in the string.\nHint: Use split() to split the string into a vector of words\
    \ and then count the length of the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb59tbnr7.jl:13\nin expression starting at\
    \ /tmp/tmpb59tbnr7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0 .. n\n        string_seq += String(n)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the string with all the characters\
    \ in lower case. \nFor example, string_lower(\"Hello World\") should return \"\
    hello world\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31ocorzw.jl:13\nin expression starting at\
    \ /tmp/tmp31ocorzw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns a vector of strings containing the numbers converted to strings. \n\
    For example, string_vector([1,2,3]) should return [\"1 2 3\"].\nHint: Use a for\
    \ loop to iterate over the vector and append the elements to a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7qiz2kdh.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7qiz2kdh.jl:9\n\
    in expression starting at /tmp/tmp7qiz2kdh.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 \n        then return \"0\"\n    else \n        string_sequence(n-1)+\"\
    , \"+string_sequence(n)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a number n and returns the string \"n is even\" if the number is even,\
    \ and \"n is odd\" if the number is odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpide0jgww.jl:9\nin expression starting at /tmp/tmpide0jgww.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nHint: Use length\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vnojz3x.jl:10\nin expression starting at\
    \ /tmp/tmp8vnojz3x.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp47v98xwa.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp47v98xwa.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp47v98xwa.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp47v98xwa.jl:18\ntest set: Error\
    \ During Test at /tmp/tmp47v98xwa.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp47v98xwa.jl:10\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp47v98xwa.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp47v98xwa.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp47v98xwa.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching\
    \ +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmp47v98xwa.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp47v98xwa.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp47v98xwa.jl:18\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n-1, 0, -1 do string_sequence = string_sequence\
    \ + string(i) end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 1\nWrite a function that takes an integer $n$ and returns the\
    \ string \"0 1 2 3 4 5\" up to and including $n$. Test it by calling it with the\
    \ argument $n=5$.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplw1a7des.jl:9\nin expression starting at /tmp/tmplw1a7des.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2c8nmhp1.jl:10\nin expression starting at\
    \ /tmp/tmp2c8nmhp1.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all the characters in lower case. For example, \"Hello World\" becomes\
    \ \"hello world\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzm7aiwzt.jl:13\nin expression starting at\
    \ /tmp/tmpzm7aiwzt.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_nsikg2.jl:14\nin expression starting at\
    \ /tmp/tmpq_nsikg2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case.\nHint: use the function\
    \ lower() to do this.\nHint: use the function replace() to replace all occurrences\
    \ of \" \" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\n\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\t\" with \"\".\nHint: use the function replace() to replace all occurrences\
    \ of \"\\r\" with \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_gshr_j.jl:14\nin expression starting at\
    \ /tmp/tmpn_gshr_j.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpsxemqlo7.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsxemqlo7.jl:10\n\
    in expression starting at /tmp/tmpsxemqlo7.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        push!(str, i)\n    end\n\
    \    str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. For example, if the input vector is [1,2,3], the output should\
    \ be 6. Write a test for this function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08fq43xu.jl:14\nin expression starting at\
    \ /tmp/tmp08fq43xu.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        0\n    else\n        string_sequence(n-1)+\" \"*(n-1)+string_sequence(n)\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nHint: Use split() to split the string into a vector of words.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzoxms9l.jl:13\nin expression starting at\
    \ /tmp/tmpgzoxms9l.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rvg22iv.jl:15\nin expression starting at\
    \ /tmp/tmp0rvg22iv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all occurrences of \"a\" replaced\
    \ by \"b\".\nFor example, string_replace(\"aba\", \"a\", \"b\") returns \"bbb\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfx0mzbt7.jl:13\nin expression starting at\
    \ /tmp/tmpfx0mzbt7.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n\n        string_seq += String(x)\n\
    \    return string_seq\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2leagog0.jl:12\nin expression starting at\
    \ /tmp/tmp2leagog0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq70g9pwp.jl:14\nin expression starting at\
    \ /tmp/tmpq70g9pwp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = n-1 downto 1 do\n        str = str + i\n    end\n\
    \    return str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqc3w_rq_.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqc3w_rq_.jl:9\n\
    in expression starting at /tmp/tmpqc3w_rq_.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings.\
    \ Each string in the returned vector is the concatenation of all the integers\
    \ in the input vector. For example, if the input vector is [1,2,3], the returned\
    \ vector should be [\"1\",\"2\",\"3\"].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaoradvjf.jl:14\nin expression starting at\
    \ /tmp/tmpaoradvjf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of words in the string.\nThe function\
    \ should ignore all punctuation and capitalization.\nThe function should ignore\
    \ all empty words.\nThe function should ignore all words shorter than 3 characters.\n\
    The function should ignore all words longer than 50 characters.\nThe function\
    \ should ignore all words that contain only numbers.\nThe function should ignore\
    \ all words that contain only letters.\nThe function should ignore all words that\
    \ contain only symbols.\nThe function should ignore all words that contain only\
    \ uppercase letters.\nThe function should ignore all words that contain only lowercase\
    \ letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all words that contain only uppercase letters.\nThe\
    \ function should ignore all words that contain only lowercase letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all words that contain\
    \ only uppercase letters.\nThe function should ignore all words that contain only\
    \ lowercase letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all words that contain only uppercase letters.\nThe\
    \ function should ignore all words that contain only lowercase letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all words that contain\
    \ only uppercase letters.\nThe function should ignore all words that contain only\
    \ lowercase letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all words that contain only uppercase letters.\nThe\
    \ function should ignore all words that contain only lowercase letters.\nThe function\
    \ should ignore all words that contain only symbols.\nThe function should ignore\
    \ all words that contain only uppercase letters.\nThe function should ignore all\
    \ words that contain only lowercase letters.\nThe function should ignore all words\
    \ that contain only symbols.\nThe function should ignore all words that contain\
    \ only uppercase letters.\nThe function should ignore all words that contain only\
    \ lowercase letters.\nThe function should ignore all words that contain only symbols.\n\
    The function should ignore all \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpeop474wn.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeop474wn.jl:9\n\
    in expression starting at /tmp/tmpeop474wn.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyh8gb0ck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyh8gb0ck.jl:1\n\
    in expression starting at /tmp/tmpyh8gb0ck.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nI like using mapslices for these\
    \ kinds of things:\n<code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n5-element\
    \ Array{String,1}:\n \"0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13\
    \ 14 15\"\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI like using mapslices\
    \ for these kinds of things:\n<code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n\
    5-element Array{String,1}:\n \"0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10\
    \ 11 12 13 14 15\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI like using\
    \ mapslices for these kinds of things:\n<code>\njulia> mapslices(x -> string(x),\
    \ 0:5, dims=2)\n5-element Array{String,1}:\n \"0\"\n \"1 2\"\n \"3 4 5\"\n \"\
    6 7 8 9\"\n \"10 11 12 13 14 15\"\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nI like using mapslices for these kinds of things:\n<code>\njulia> mapslices(x\
    \ -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n \"0\"\n \"1 2\"\n \"\
    3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13 14 15\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=julia |>\nI like using mapslices for these kinds of things:\n<code>\n\
    julia> mapslices(x -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n \"\
    0\"\n \"1 2\"\n \"3 4 5\"\n \"6 7 8 9\"\n \"10 11 12 13 14 15\"\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nI like using mapslices for these kinds of things:\n\
    <code>\njulia> mapslices(x -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n\
    \ \"0\"\n \"1 2\"\n \"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2hru8fe9.jl:10\nin expression starting at /tmp/tmp2hru8fe9.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in reverse order.\nFor example, string_sequence(\"\
    hello\") should return \"olleh\"\nHint: Use reverse()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpghvb24oj.jl:14\nin expression starting at\
    \ /tmp/tmpghvb24oj.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp88pwv8nf.jl:14\nin expression starting at\
    \ /tmp/tmp88pwv8nf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9hlsr8g4.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9hlsr8g4.jl:10\n\
    in expression starting at /tmp/tmp9hlsr8g4.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive. \"\n    \n    string = \"\"\n    for i = 1 to n do\n        string\
    \ = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 1\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop to iterate from 2 to n and test each number for primality.\
    \ \nHint: Use a while loop to iterate from 2 to n and test each number for primality.\
    \ \nHint: Use a recursive function to implement the algorithm.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp41sv6vlu.jl:11 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp41sv6vlu.jl:11\n\
    in expression starting at /tmp/tmp41sv6vlu.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nHint: Use a for loop and a variable that accumulates\
    \ the sum.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxg7aoe5.jl:15\nin expression starting at\
    \ /tmp/tmpoxg7aoe5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n -\
    \ 1) + \" \" + to_string(n) \nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nFor example, if the input vector is [1,2,3,4,5],\
    \ the output should be 15.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpasbu0a21.jl:13\nin expression starting at\
    \ /tmp/tmpasbu0a21.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop and a prime number generator\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5odvigqe.jl:14\nin expression starting at\
    \ /tmp/tmp5odvigqe.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n-1\n        string_seq[i] = i\n  \
    \  return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqne6xoun.jl:13\nin expression starting at\
    \ /tmp/tmpqne6xoun.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the string with all characters replaced by '#'.\n\
    For example, string_sequence(\"hello\") should return \"h#e#l#l#o\".\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppf7dt8nj.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppf7dt8nj.jl:10\n\
    in expression starting at /tmp/tmppf7dt8nj.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns a vector where each element is the product of\
    \ all the numbers in the original vector. For example, if the input vector is\
    \ [1,2,3], the output vector should be [1,2,3].\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpn_mymk53.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_mymk53.jl:10\n\
    in expression starting at /tmp/tmpn_mymk53.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpu3vg9cci.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3vg9cci.jl:10\n\
    in expression starting at /tmp/tmpu3vg9cci.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number test.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpae29ouwp.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpae29ouwp.jl:9\n\
    in expression starting at /tmp/tmpae29ouwp.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddy19oeh.jl:14\nin expression starting at\
    \ /tmp/tmpddy19oeh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector. \nFor example, if the input vector\
    \ is [1,2,3,4,5], the output should be 15.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpta3mrp4q.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpta3mrp4q.jl:10\n\
    in expression starting at /tmp/tmpta3mrp4q.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) + \" \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaj4i01v1.jl:9\nin expression starting at /tmp/tmpaj4i01v1.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    elseif n == 0\n    \
    \    return \"0\"\n    else\n        string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype string_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype string_sequence(5)\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4fn4p49p.jl:16\nin expression starting at\
    \ /tmp/tmp4fn4p49p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i in 0:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes an\
    \ integer n and returns the string \"n!\".\nWrite a function that takes an integer\
    \ n and returns the string \"n!+n\"\nWrite a function that takes an integer n\
    \ and returns the string \"n!+n+n\"\nWrite a function that takes an integer n\
    \ and returns the string \"n!+n+n+n\"\nWrite a function that takes an integer\
    \ n and returns the string \"n!+n+n+n+n\"\nWrite a function that takes an integer\
    \ n and returns the string \"n!+n+n+n+n+n\"\nWrite a function that takes an integer\
    \ n and returns the string \"n!+n+n+n+n+n+n\"\nWrite a function that takes an\
    \ integer n and returns the string \"n!+n+n+n+n+n+n+n\"\nWrite a function that\
    \ takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n\"\nWrite a function\
    \ that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n\"\nWrite\
    \ a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+n+n+n+n+n+n+n+n\"\
    \nWrite a function that takes an integer n and returns the string \"n!+n+n+n+n+n+n+\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpubi1ka91.jl:15\nin expression starting at\
    \ /tmp/tmpubi1ka91.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 then return \"0\"\n    else return string_sequence(n-1) + \", \"\
    \ + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function named string_sequence that returns\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\n\
    Write a test that checks your function by comparing the result to the expected\
    \ output.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaevsdnil.jl:8\nin expression starting at /tmp/tmpaevsdnil.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp6by8w1ho.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6by8w1ho.jl:64\n\
    in expression starting at /tmp/tmp6by8w1ho.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n integers\
    \ of a given sequence.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmptz7dq_sf.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptz7dq_sf.jl:10\n\
    in expression starting at /tmp/tmptz7dq_sf.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n-1 do\n        push!(string_seq,String(i))\n\
    \    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of characters in the string.\n\
    Hint: Use length()\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpluw2zzqg.jl:9\nin expression starting at /tmp/tmpluw2zzqg.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 then return \"0\"\n    else return string_sequence(n-1) + \", \"\
    \ + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqsd_fimg.jl:8\nin expression starting at /tmp/tmpqsd_fimg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else\n        str = string_sequence(n-1)\n        str\
    \ = str + \" \"\n        str = str + string_sequence(n)\n        return str\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8j9rthnk.jl:10\nin expression starting at\
    \ /tmp/tmp8j9rthnk.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\n>>> count_characters(\"hello\")\n5\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n>>> count_characters(\"helloworld\")\n10\n>>> count_characters(\"helloworld\"\
    )\n10\n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqm2byey.jl:14\nin expression starting at\
    \ /tmp/tmpbqm2byey.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]()\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence @ [String(i)]\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpiu2q6ape.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiu2q6ape.jl:9\n\
    in expression starting at /tmp/tmpiu2q6ape.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpa91tctc1.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa91tctc1.jl:9\n\
    in expression starting at /tmp/tmpa91tctc1.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) + \" \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp66a7yojj.jl:9\nin expression starting at /tmp/tmp66a7yojj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all the letters capitalized.\ne.g. \"Hello\
    \ World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"\
    Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g.\
    \ \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\n\
    e.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\
    \ne.g. \"Hello World\" \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpoqi9tesb.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoqi9tesb.jl:9\n\
    in expression starting at /tmp/tmpoqi9tesb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    if n==0\n        return \"0\"\n    \n    string = \"\"\n    \n    for\
    \ i = 1 to n\n        string = string + \" \" + to_string(i)\n    \n    return\
    \ string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings where each string is the string representation of each integer\
    \ in the vector. For example, if the input vector is [1,2,3] the output should\
    \ be [\"1\",\"2\",\"3\"].\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbmya6ixi.jl:14 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbmya6ixi.jl:14\n\
    in expression starting at /tmp/tmpbmya6ixi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i in 0:n\n        string += i\n    \n\
    \    return string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocfexfik.jl:15\nin expression starting at\
    \ /tmp/tmpocfexfik.jl:15\n"
  stdout: ''
