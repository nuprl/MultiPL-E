name: HumanEval_14_all_prefixes
language: jl
prompt: "\"\"\" Return vector of all prefixes from shortest to longest of the input\
  \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\
  \nfunction all_prefixes(string::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
  \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
  asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\",\
  \ \"WW\", \"WWW\"])\nend\n"
completions: ["    prefix_list = Vector{String}()\n    prefix_list[1] = string\n \
    \   for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abc\");\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not a letter. For example,\
    \ for the string \"abc\" the function should return 3.", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    \n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend",
  "    \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n   \
    \     prefixes += string[(i+1):end]\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ + prefixes(string)\n    prefix_list = prefix_list + all_prefixes(string[end:])\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend", "    \n    prefix_list = []\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)",
  "    \n    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(c) \n    end\n    \n    return prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a string and returns the longest prefix that is a substring\
    \ of the input string. For example, if the input string is \"abracadabra\", the\
    \ longest prefix that is a substring of the input string is \"abracadabra\".",
  "    \n    prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector +\
    \ [string]\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ \n    \n    return prefix_vector\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    prefix_count(string::String)::Int64", "   \
    \ \n    prefixes = Vector{String}()\n    \n    for prefix in string.split(\"\"\
    )\n        push!(prefixes, prefix)\n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2\
    \ to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n \
    \   end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbacacbba\"\
    )\n</", "    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    return prefix_list\nend", "    \n    prefixes = []\n    \n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    \n   \
    \ return prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\" the\
    \ longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    prefix_vector = Vector{String}()\n\
    \    prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_vector + [string[1:i] for i in 1:length(string)]\n\
    \    prefix_vector = prefix_vector + [string[i] for i in 1:length(string)]\n \
    \   prefix_vector = prefix_", "    prefix_array = Vector{String}()\n    prefix_array\
    \ = [string]\n    for prefix in prefix_array\n        prefix_array = prefix_array\
    \ + prefixes_of(prefix)\n    end\n    prefix_array\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    \n \
    \   for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    \n    return prefix_list\nend", "    prefix_vector = Vector{String}()\n\
    \    prefix_vector = prefix_vector + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_vector\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i+1::] for i in 1:length(string)]\n    return prefix_list\nend", " \
    \   \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n  \
    \      prefixes += string[i-1:i]\n    end\n    \n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abc\") returns [\"\
    a\", \"ab\", \"abc\"] and all_prefixes(\"ab\") returns [\"a\", \"ab\"]. Assume\
    \ that all_prefixes is implemented correctly.", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a palindrome.", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the longest prefix of a given string.", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbacacaaabbbccdcefg\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcefgj\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbacacaaabbbccdcefgjl\"\
    )\n</cell>\n<code language=julia-1.3>\n", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    \n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_vector = Vector{String}()\n    for prefix in string.split(\"\")\n  \
    \      prefix_vector = prefix_vector + [prefix]\n    end\n    prefix_vector\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, for the string \"abc\"\
    , the function should return [('a', 1), ('b', 1), ('c', 1), ('a', 2), ('b', 2),\
    \ ('c', 2)]. \nThe function should ignore non-alphabetic characters and return\
    \ a list of tuples.", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    prefix_list[2] = string\n    prefix_list[3] = string\n    prefix_list[4]\
    \ = string\n    prefix_list[5] = string\n    prefix_list[6] = string\n    prefix_list[7]\
    \ = string\n    prefix_list[8] = string\n    prefix_list[9] = string\n    prefix_list[10]\
    \ = string\n    prefix_list[11] = string\n    prefix_list[12] = string\n    prefix_list[13]\
    \ = string\n    prefix_list[14] = string\n    prefix_list[15] = string\n    prefix_list[16]\
    \ = string\n    prefix_list[17] = string\n    prefix_list[18] = string\n    prefix_list[19]\
    \ = string\n    prefix_list[20] = string\n    prefix_list[21] = string\n    prefix_list[22]\
    \ = string\n    prefix_list[23] = string\n    prefix_list[24] = string\n    prefix_list[25]\
    \ = string\n    prefix_list[26] = string\n    prefix_list[27] = string\n    prefix_list[28]\
    \ = string\n    prefix_list[29] = string\n    prefix_list[30] = string\n    prefix_list[31]\
    \ = string\n    prefix_list[32] = string\n    prefix_list[33] = string\n    prefix_list[34]\
    \ = string\n    prefix_list[35] = string\n    prefix_list[36] = string\n    prefix_list[37]\
    \ = string\n    prefix_list[38] = string\n    prefix_list[39] = string\n    prefix_list[40]\
    \ = string\n    prefix_list[41] = string\n    prefix_list[42] = string\n    prefix_list[43]\
    \ = string\n    prefix_list[44] = string\n    prefix_list[45] = string\n    prefix_list[46]\
    \ = string\n    prefix_list[47] = string\n    prefix_list[48] = string\n    prefix_list[49]\
    \ = string\n    prefix_list[50] = string\n    prefix_list[51] = string\n    prefix_list[52]\
    \ = string\n    prefix_list[53] = string\n    prefix_list[54] = string\n    prefix_list[55]\
    \ = string\n    prefix_list[56] = string\n    prefix_list[57] = string\n    prefix_list[58]\
    \ = string\n    prefix_list[59] = string\n    prefix_list[60] = string\n    prefix_list[61]\
    \ = string\n    prefix_list[62] = string\n    prefix_list[63] = string\n    prefix_list[64]\
    \ = string\n    prefix_list[65] = string\n    prefix_list[66] = string\n    prefix_list[67]\
    \ = string\n    prefix_list[68] = string\n    prefix_list[69] = string\n    prefix_list[70]\
    \ = string\n    prefix_list[71] = string\n    prefix_list[72] = string\n    prefix_",
  "    prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector + string.substring(1)\n\
    \    for i = 2:length(string)\n        prefix_vector = prefix_vector + string.substring(i)\n\
    \    end\n    return prefix_vector\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    prefix_vector_to_string(prefix_vector::Vector{String})", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    prefix_counts(string::String)", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbbacacbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbbacacbbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbbacacbbacacbbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab", "    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return \"abc\".", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    prefix_length(string::String)", "    \n\
    \    prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector + string\n\
    \    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, if the input string is \"abc\",\
    \ the longest prefix is \"abc\".", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefgh\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abba", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest prefix of a given string. For example,\
    \ for the string \"abc\" the longest prefix is \"abc\".", "    \n    prefix_array\
    \ = Vector{String}()\n    prefix_array = [string]\n    \n    for prefix in prefix_array\n\
    \        prefix_array = prefix_array + prefix\n    end\n    \n    return prefix_array\n\
    end", "    \n    prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector\
    \ + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n    \n    return prefix_vector\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the original\
    \ string. For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]\
    \ and all_prefixes(\"ab\") returns [\"a\", \"ab\"]. Assume that all_prefixes is\
    \ defined above as all_prefixes.", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    \n    return\
    \ prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are uppercase letters\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are lowercase letters\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are digits\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are punctuation\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are whitespace\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are alphanumeric\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all uppercase letters\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all lowercase letters\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all punctuation\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all whitespace\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all alphanumeric\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all uppercase letters and all lowercase letters\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all digits and all punctuation\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all whitespace and all\
    \ alphanumeric\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all uppercase letters, lowercase letters,\
    \ digits, punctuation, whitespace, and alphanumeric\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all uppercase\
    \ letters, lowercase letters, digits, punctuation, whitespace, and alphanumeric\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all uppercase letters, lowercase letters, digits, punctuation,\
    \ whitespace, and alphanumeric\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all uppercase letters, lowercase\
    \ letters, digits, punctuation, whitespace, and alphanumeric\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all uppercase letters, lowercase letters, digits, punctuation, whitespace,\
    \ and alphanumeric\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all uppercase letters, lowercase letters,\
    \ digits, punctuation, whitespace, and alphanumeric\nWrite a function that takes\
    \ a string and returns the number of ", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n", "    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end])\n\
    \    prefix_vector = prefix_vector + all_prefixes(string[end+1:end-1])\n    prefix_vector\
    \ = prefix_vector + all_prefixes(string[end-1:end])\n    \n    return prefix_vector\n\
    end", "    prefix_list = []\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    prefix_counts(string::String)::Dict{String, Int}\n    \n    Count\
    \ how many times each prefix appears in the input string\n    \n    >>> prefix_counts(\"\
    abcabc\")\n    {\"a\": 3, \"ab\": 1, \"abc\": 2, \"b\": 2, \"bc\": 1, \"c\": 1}\n\
    \    \"\"\"", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-1]\
    \ + prefix_list[i-2]\n    end\n    return prefix_list\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, \ncount_chars(\"abcabc\"\
    ) should return [a => 3, b => 2, c => 3]", "    \n    prefixes = []\n    \n  \
    \  for c in string\n        prefixes += all_prefixes(string[1:end-1]) + [c]\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the string. For\
    \ example, for the string \"abcabc\", the longest prefix is \"abc\".", "    \n\
    \    prefixes = Vector{String}()\n    \n    for c in string\n        prefixes\
    \ += all_prefixes(c)\n    end\n    \n    return prefixes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abc\") returns [\"\
    a\", \"ab\", \"abc\"]. Assume that all_prefixes is defined above as all_prefixes.",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abe\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abf\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abi\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abj\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abk\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abl\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abn\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abo\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abp\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abq\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abr\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abs\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abt\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abu\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abv\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abw\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abx\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aby\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abz\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefix", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_vector = Vector{String}()\n    for prefix in string.split(\"\")\n  \
    \      prefix_vector = prefix_vector + [prefix]\n    end\n    prefix_vector\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    prefix_list = Vector{String}()\n    prefix_list =\
    \ prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end+2])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+2:end+3])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+3:end+4])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+4:end+5])\n    prefix_list = prefix_list ++ all_prefixes(string[end+5:end+6])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+6:end+7])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+7:end+8])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+8:end+9])\n    prefix_list = prefix_list ++ all_prefixes(string[end+9:end+10])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+10:end+11])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+11:end+12])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+12:end+13])\n    prefix_list = prefix_list ++ all_prefixes(string[end+13:end+14])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+14:end+15])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+15:end+16])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+16:end+17])\n    prefix_list = prefix_list ++ all_prefixes(string[end+17:end+18])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+18:end+19])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+19:end+20])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+20:end+21])\n    prefix_list = prefix_list ++ all_prefixes(string[end+21:end+22])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+22:end+23])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+23:end+24])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+24:end+25])\n    prefix_list = prefix_list ++ all_prefixes(string[end+25:end+26])\n\
    \    prefix_", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>", " \
    \   prefix_vector = Vector{String}()\n    for prefix in string.split(\"\")\n \
    \       prefix_vector = prefix_vector + [prefix]\n    end\n    prefix_vector\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.3>", "    prefix_list = Vector{String}()\n    prefix_list =\
    \ prefix_list + prefixes(string)\n    prefix_list = prefix_list + prefixes(string.reverse)\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-1] + prefix_list[i-2]\n    end\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a palindrome. For example, all_prefixes(\"abba\"\
    ) should return \"ab\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-2]\
    \ + prefix_list[i-1]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_", "    prefix_list = Vector{String}()\n    for\
    \ prefix in string.split(\"\")\n        prefix_list += prefix\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2]\
    \ = string\n    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ [string]\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ for the input string \"abc\", the longest prefix is \"abc\". For the string\
    \ \"abcabc\", the longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end-1:end-1]) \n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the longest prefix of a given string.", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string)\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest prefix\
    \ of a given string.", "    \n    prefix_list = Vector{String}()\n    prefix_list\
    \ = all_prefixes_helper(string, prefix_list)\n    \n    return prefix_list\nend",
  "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n    \
    \    prefix_list += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.3>", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\"\
    )\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcbb\")\n</cell>\n<code language=julia-1.5>\n@time ",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ [string]\n\
    \    for prefix in prefix_list\n        prefix_list = prefix_list ++ all_prefixes(prefix)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbaca\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacabcabcabca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacabcabcabcab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacabcabcabcabca\"\
    )\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    \n    for i = 4 to length(string)\n        prefix_list[i] = string[i\
    \ - 4..i]\n    end\n    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_", "    prefix_list = Vector{String}()\n    for\
    \ prefix in string.split(\"\")\n        prefix_list += prefix\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>", "    prefix_vector = Vector{String}()\n    prefix_vector\
    \ = prefix_vector + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n    return\
    \ prefix_vector\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefixes_of_strings(string::String)::Vector{String}\n    \n    Return\
    \ vector of all prefixes of input string\n    \n    >>> prefixes_of_strings(\"\
    abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\nend", "   \
    \ prefix_list = []\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are lowercase letters.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are digits. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are spaces.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are punctuation.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are alphanumeric.\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are all uppercase letters.\nWrite a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are all lowercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all digits.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all uppercase letters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ lowercase letters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all digits.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all spaces.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all punctuation.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all alphanumeric.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all uppercase letters.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all lowercase letters.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all digits.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all spaces.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all digits.\nWrite ",
  "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_", "    \n    prefixes = []\n    \n    for c in string\n\
    \        prefixes += all_prefixes(c) \n    end\n    \n    return prefixes\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the longest prefix of a given string. For example,\
    \ for the string \"abc\" the longest prefix is \"a\".", "    \n    prefix_array\
    \ = Array{String}(length(string))\n    prefix_array[:] = \"\"\n    prefix_array[1]\
    \ = string[1]\n    prefix_array[2] = string[2]\n    prefix_array[3] = string[3]\n\
    \    prefix_array[4] = string[4]\n    prefix_array[5] = string[5]\n    prefix_array[6]\
    \ = string[6]\n    prefix_array[7] = string[7]\n    prefix_array[8] = string[8]\n\
    \    prefix_array[9] = string[9]\n    prefix_array[10] = string[10]\n    prefix_array[11]\
    \ = string[11]\n    prefix_array[12] = string[12]\n    prefix_array[13] = string[13]\n\
    \    prefix_array[14] = string[14]\n    prefix_array[15] = string[15]\n    prefix_array[16]\
    \ = string[16]\n    prefix_array[17] = string[17]\n    prefix_array[18] = string[18]\n\
    \    prefix_array[19] = string[19]\n    prefix_array[20] = string[20]\n    prefix_array[21]\
    \ = string[21]\n    prefix_array[22] = string[22]\n    prefix_array[23] = string[23]\n\
    \    prefix_array[24] = string[24]\n    prefix_array[25] = string[25]\n    prefix_array[26]\
    \ = string[26]\n    prefix_array[27] = string[27]\n    prefix_array[28] = string[28]\n\
    \    prefix_array[29] = string[29]\n    prefix_array[30] = string[30]\n    prefix_array[31]\
    \ = string[31]\n    prefix_array[32] = string[32]\n    prefix_array[33] = string[33]\n\
    \    prefix_array[34] = string[34]\n    prefix_array[35] = string[35]\n    prefix_array[36]\
    \ = string[36]\n    prefix_array[37] = string[37]\n    prefix_array[38] = string[38]\n\
    \    prefix_array[39] = string[39]\n    prefix_array[40] = string[40]\n    prefix_array[41]\
    \ = string[41]\n    prefix_array[42] = string[42]\n    prefix_array[43] = string[43]\n\
    \    prefix_array[44] = string[44]\n    prefix_array[45] = string[45]\n    prefix_array[46]\
    \ = string[46]\n    prefix_array[47] = string[47]\n    prefix_array[48] = string[48]\n\
    \    prefix_array[49] = string[49]\n    prefix_array[50] = string[50]\n    prefix_array[51]\
    \ = string[51]\n    prefix_array[52] = string[52]\n    ", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[1:end-1])\n    return prefix_list\nend", "    prefix_list\
    \ = []\n    for c in string\n        prefix_list.append(string[1:end-1] + c)\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string is the concatenation of the\
    \ first character of the string with the first character of the next string. For\
    \ example, [\"a\", \"b\", \"c\"] -> [\"aa\", \"ab\", \"ac\"]", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that appears in the string. For example, if the input is \"abc\", the longest\
    \ prefix is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, if the input is \"abcde\", the longest prefix is \"abc\".", " \
    \   \n    prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector\
    \ + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n    return prefix_vector\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abc\")\
    \ returns [\"a\", \"ab\", \"abc\"]. Write a second function that takes a string\
    \ and returns the shortest prefix that is a substring of the input string. For\
    \ example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a third\
    \ function that takes a string and returns the longest prefix that is a substring\
    \ of the input string. For example, all_prefixes(\"abc\") returns [\"a\", \"ab\"\
    , \"abc\"]. Write a fourth function that takes a string and returns the shortest\
    \ prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a fifth function that takes a string\
    \ and returns the longest prefix that is a substring of the input string. For\
    \ example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a sixth\
    \ function that takes a string and returns the shortest prefix that is a substring\
    \ of the input string. For example, all_prefixes(\"abc\") returns [\"a\", \"ab\"\
    , \"abc\"]. Write a seventh function that takes a string and returns the longest\
    \ prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a eighth function that takes a\
    \ string and returns the shortest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a\
    \ ninth function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abc\") returns [\"\
    a\", \"ab\", \"abc\"]. Write a tenth function that takes a string and returns\
    \ the shortest prefix that is a substring of the input string. For example, all_prefixes(\"\
    abc\") returns [\"a\", \"ab\", \"abc\"]. Write a eleventh function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. Write a\
    \ twelfth function that takes a string and returns the shortest prefix that is\
    \ a substring of the input string. For example, all_prefixes(\"abc\") returns\
    \ [\"a\", \"ab\", \"abc\"]. Write a thirteenth function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]. ", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefixes_of_strings(string::String)", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefix\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    for c in string\n        prefix_list\
    \ += all_prefixes(c)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacacab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacacabba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbbbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbacacabbbbbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbacacabbbbbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbacacabbbbbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbba", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + string.split(\"\")\n   \
    \ prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = prefix_list\
    \ + string.split(\"\")\n    prefix_list = prefix_list + string.split(\"\")\n \
    \   prefix_list = prefix_list + string.split(\"\")\n    prefix_list = ", "   \
    \ prefix_list = Vector{String}()\n    for prefix in string.split(\"\")\n     \
    \   prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not in\
    \ the alphabet (including spaces). For example, if the input string is \"abc def\"\
    \ then your function should return 3.", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.4>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    \n    for i = 4 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the longest prefix of a given string.", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    prefix_list[4] = string\n    prefix_list[5] = string\n    prefix_list[6]\
    \ = string\n    prefix_list[7] = string\n    prefix_list[8] = string\n    prefix_list[9]\
    \ = string\n    prefix_list[10] = string\n    prefix_list[11] = string\n    prefix_list[12]\
    \ = string\n    prefix_list[13] = string\n    prefix_list[14] = string\n    prefix_list[15]\
    \ = string\n    prefix_list[16] = string\n    prefix_list[17] = string\n    prefix_list[18]\
    \ = string\n    prefix_list[19] = string\n    prefix_list[20] = string\n    prefix_list[21]\
    \ = string\n    prefix_list[22] = string\n    prefix_list[23] = string\n    prefix_list[24]\
    \ = string\n    prefix_list[25] = string\n    prefix_list[26] = string\n    prefix_list[27]\
    \ = string\n    prefix_list[28] = string\n    prefix_list[29] = string\n    prefix_list[30]\
    \ = string\n    prefix_list[31] = string\n    prefix_list[32] = string\n    prefix_list[33]\
    \ = string\n    prefix_list[34] = string\n    prefix_list[35] = string\n    prefix_list[36]\
    \ = string\n    prefix_list[37] = string\n    prefix_list[38] = string\n    prefix_list[39]\
    \ = string\n    prefix_list[40] = string\n    prefix_list[41] = string\n    prefix_list[42]\
    \ = string\n    prefix_list[43] = string\n    prefix_list[44] = string\n    prefix_list[45]\
    \ = string\n    prefix_list[46] = string\n    prefix_list[47] = string\n    prefix_list[48]\
    \ = string\n    prefix_list[49] = string\n    prefix_list[50] = string\n    prefix_list[51]\
    \ = string\n    prefix_list[52] = string\n    prefix_list[53] = string\n    prefix_list[54]\
    \ = string\n    prefix_list[55] = string\n    prefix_list[56] = string\n    prefix_list[57]\
    \ = string\n    prefix_list[58] = string\n    prefix_list[59] = string\n    prefix_list[60]\
    \ = string\n    prefix_list[61] = string\n    prefix_list[62] = string\n    prefix_list[63]\
    \ = string\n    prefix_list[64] = string\n    prefix_list[65] = string\n    prefix_list[66]\
    \ = string\n    prefix_list[67] = string\n    prefix_list[68] = string\n    prefix_list[69]\
    \ = string\n    prefix_list[70] = string\n    prefix_list[71] = string\n    prefix_list[72]\
    \ = string\n    prefix_", "    prefix_list = Vector{String}()\n    for c in string\n\
    \        prefix_list += all_prefixes(c)\n    end\n    prefix_list\nend\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbb\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbc\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcd\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdef\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbbcdefg\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbcdefgh\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbbcdefghi\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghij\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijk\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbbcdefghijkl\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbcdefghijklm\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\"\
    )\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n\
    <code language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n<code\
    \ language=julia-1.3>\nall_prefixes(\"abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abbbcdefghijklmn\")\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"", " \
    \   \n    prefixes = Vector{String}()\n    \n    for i = 1:length(string)\n  \
    \      prefixes += string[1:i]\n    end\n    \n    return prefixes\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the longest prefix of a given string. For example,\
    \ for the input \"abc\" the function should return \"a\".", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>", "    \n   \
    \ prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_", "    \n    prefixes = Vector{String}()\n    \n    for\
    \ i = length(prefixes) downto 1 do\n        prefixes[i] = string[(i-1):end]\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + prefixes(string)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse)\n    prefix_list = prefix_list + prefixes(string.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.chars.reverse.chars)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse)\n\
    \    prefix_list = prefix_list + prefixes(string.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1]) \n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\"\
    )\n        prefix_list += prefixes_of(prefix)\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1] =\
    \ string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, if the input string is \"abcde\", the longest prefix that is a\
    \ substring of the input string is \"abc\".", "    prefix_array = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_array << prefix\n    end\n\
    \    return prefix_array\nend", "    \n    prefixes = Vector{String}()\n    \n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    \n   \
    \ return prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    prefixes_from_longest(string::String)", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list + [string[1:i] for i in 1:length(string)]\n   \
    \ prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n    prefix_list\
    \ = prefix_list + [string[1:i] for i in 1:length(string)]\n    prefix_list = prefix_list\
    \ + [string[i] for i in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i]\
    \ for i in 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i\
    \ in 1:length(string)]\n    prefix_list = prefix_list + [string[1:i] for i in\
    \ 1:length(string)]\n    prefix_list = prefix_list + [string[i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ", "    \n    prefix_vector = Vector{String}()\n\
    \    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_vector\
    \ + string\n    prefix_vector = prefix_vector + string\n    prefix_vector = prefix_",
  "    prefix_list = Vector{String}()\n    for c in string\n        prefix_list +=\
    \ all_prefixes(c) \n    end\n    prefix_list\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ if the input string is \"abc\", the longest prefix is \"abc\". If the input\
    \ string is \"abcabc\", the longest prefix is \"abc\".", "    prefix_list = Vector{String}()\n\
    \    for s in string\n        prefix_list = [prefix_list; prefixes(s)]\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    \n    prefix_vector\
    \ = Vector{String}()\n    prefix_vector = prefix_vector + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_vector\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend", "    prefix_list = Vector{String}()\n    for prefix\
    \ in string.split(\"\")\n        prefix_list += all_prefixes(prefix) \n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. \nFor example, if\
    \ the input string is \"abc\", the function should return {\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 2}.", "    \n    prefixes = Vector{String}()\n    \n    for prefix\
    \ in string.split(\"\")\n        push!(prefixes, prefix)\n    end\n    \n    return\
    \ prefixes\nend", "    \n    prefix_list = []\n    for c in string\n        prefix_list.append(c)\n\
    \    end\n    return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n\
    \    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n   \
    \ for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return [\"abc\"].", "    \n    prefixes = Vector{String}()\n    \n  \
    \  for i = 1:length(string)\n        prefixes += string[(i+1):end]\n    end\n\
    \    \n    return prefixes\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    prefix_list[2] = string\n    prefix_list[3]\
    \ = string\n    \n    for i = 4 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend", "    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacab\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].", "    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    \n \
    \   for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    \n    return prefix_list\nend", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    \n    return prefix_list\nend", "    prefix_list = Vector{String}()\n   \
    \ prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend", "   \
    \ \n    prefix_list = Vector{String}()\n    prefix_list = all_prefixes_helper(string,\
    \ prefix_list)\n    \n    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n\
    \    \n    for i = 1:length(string)\n        prefixes += string[(i+1):end]\n \
    \   end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"ab\") == [\"ab\"]\n</cell>\n<code language=julia-1.5>\n@test\
    \ all_prefixes(\"aba\") == [\"ab\", \"aba\"]\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    @test all_prefixes(\"aba\") == all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>",
  "    prefix_list = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n    prefix_", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a vector of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \"\"\"", "    \n    prefix_list = Vector{String}()\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[1:end])\n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end-1])\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefix\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string that are uppercase\
    \ letters. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are lowercase letters. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are digits. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are alphanumeric. \nWrite a function that takes a string and returns the\
    \ number of characters in the string that are punctuation. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are whitespace. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are non-alphanumeric. ", "    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    \n    for i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"] and all_prefixes(\"\
    abca\") returns [\"a\", \"ab\", \"abc\", \"abca\"].", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    return prefix_list\nend", "    \n    prefixes = Vector{String}()\n    \n\
    \    for c in string\n        prefixes += all_prefixes(c) \n    end\n    \n  \
    \  return prefixes\nend", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2]\
    \ + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string as input and returns a string with all occurrences of \"a\" replaced\
    \ by \"e\"\ne.g. \"abca\" -> \"ebeca\"", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefix\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are lowercase letters.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are digits. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are spaces.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are punctuation.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are alphanumeric.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all uppercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all lowercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all digits.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are all spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all alphanumeric.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ uppercase letters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all lowercase letters.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are all digits.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all spaces.\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are all punctuation.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all alphanumeric.\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are all uppercase letters.\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are all lowercase letters.\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are all digits.\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are all spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are all punctuation.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ alphanumeric.\nWrite a function that takes a string and returns the number of\
    \ characters in the string that are all uppercase letters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are all\
    \ lowercase letters.\nWrite a function that takes a string and returns the number\
    \ of characters in the string ", "    prefix_list = Vector{String}()\n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.4>", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i = 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-2] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the longest prefix that is a substring\
    \ of the input string. For example, if the input string is \"abcde\", the longest\
    \ prefix is \"abc\".", "    prefix_list = Vector{String}()\n    prefix_list[1]\
    \ = string\n    prefix_list[2] = string\n    for i = 4:3:length(string)\n    \
    \    prefix_list[i] = string[i - 2] + string[i - 1]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    prefixes_of_strings(string::String)::Vector{String}\n\
    \    \n    Find all prefixes of string\n    \n    string::String\n    \n    Return\
    \ a vector of all prefixes of string\n    \n    >>> prefixes_of_strings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    prefix_count(string::String)::Int64", "    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end-1:end])\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are uppercase\
    \ letters.", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n\
    \    for i in 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    return prefix_list\nend", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    prefixes = Vector{String}()\n    \n    for prefix\
    \ in string.split(\"\")\n        push!(prefixes, prefix)\n    end\n    \n    return\
    \ prefixes\nend", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\
    \")\n        prefix_list += all_prefixes(prefix) \n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the original string. For example, for the input string\
    \ \"abcabc\", the longest prefix that is a substring would be \"abc\".", "   \
    \ \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    \n  \
    \  for i = 2 to length(prefix_list)\n        prefix_list[i] = prefix_list[i-2]\
    \ + prefix_list[i-1]\n    end\n    \n    return prefix_list\nend", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    prefix_list = Vector{String}()\n\
    \    prefix_list = prefix_list + all_prefixes(string[1:end-1]) + [string[1:end-1]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[2:end]) + [string[2:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[3:end]) + [string[3:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[4:end]) + [string[4:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[5:end]) + [string[5:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[6:end]) + [string[6:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[7:end]) + [string[7:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[8:end]) + [string[8:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[9:end]) + [string[9:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[10:end]) + [string[10:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[11:end]) + [string[11:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[12:end]) + [string[12:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[13:end]) + [string[13:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[14:end]) + [string[14:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[15:end]) + [string[15:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[16:end]) + [string[16:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[17:end]) + [string[17:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[18:end]) + [string[18:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[19:end]) + [string[19:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[20:end]) + [string[20:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[21:end]) + [string[21:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[22:end]) + [string[22:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[23:end]) + [string[23:end]]\n\
    \    prefix_list = prefix_list + all_prefixes(string[24:end]) + [string[24:",
  "    \n    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    \n \
    \   for i = 2 to length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.",
  "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    for c in string\n        prefix_list += all_prefixes(c)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccde\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgg\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefggg\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggg\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbcccdefggggg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbcccdefgggggg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefggggggg\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggggggg\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbcccdefggggggggg\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggggggggg\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbcccdefgggggggg", "    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-1] + string[i]\n\
    \    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        push!(prefixes, string[1:end-c])\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return [\"abc\"].", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string,prefix_list)\n    return prefix_list\n\
    end", "    \n    prefix_list = Vector{String}()\n    \n    for prefix in string.split(\"\
    \")\n        prefix_list += prefix\n    end\n    \n    return prefix_list\nend",
  "    \n    prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector +\
    \ all_prefixes(string[1:end-1]) + [string[1:end-1]]\n    return prefix_vector\n\
    end", "    prefix_list = Vector{String}()\n    for prefix in string.split(\"\"\
    )\n        prefix_list += prefix\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in lower case. \nFor example, \nall_lowercase(\"abc\") returns \"abc\".", " \
    \   prefix_vector = Vector{String}()\n    prefix_vector = prefix_vector.append(string[1:end-1])\
    \ \n    prefix_vector = prefix_vector.append(string[2:end])\n    prefix_vector\
    \ = prefix_vector.append(string[3:end])\n    prefix_vector = prefix_vector.append(string[4:end])\n\
    \    prefix_vector = prefix_vector.append(string[5:end])\n    prefix_vector =\
    \ prefix_vector.append(string[6:end])\n    prefix_vector = prefix_vector.append(string[7:end])\n\
    \    prefix_vector = prefix_vector.append(string[8:end])\n    prefix_vector =\
    \ prefix_vector.append(string[9:end])\n    prefix_vector = prefix_vector.append(string[10:end])\n\
    \    prefix_vector = prefix_vector.append(string[11:end])\n    prefix_vector =\
    \ prefix_vector.append(string[12:end])\n    prefix_vector = prefix_vector.append(string[13:end])\n\
    \    prefix_vector = prefix_vector.append(string[14:end])\n    prefix_vector =\
    \ prefix_vector.append(string[15:end])\n    prefix_vector = prefix_vector.append(string[16:end])\n\
    \    prefix_vector = prefix_vector.append(string[17:end])\n    prefix_vector =\
    \ prefix_vector.append(string[18:end])\n    prefix_vector = prefix_vector.append(string[19:end])\n\
    \    prefix_vector = prefix_vector.append(string[20:end])\n    prefix_vector =\
    \ prefix_vector.append(string[21:end])\n    prefix_vector = prefix_vector.append(string[22:end])\n\
    \    prefix_vector = prefix_vector.append(string[23:end])\n    prefix_vector =\
    \ prefix_vector.append(string[24:end])\n    prefix_vector = prefix_vector.append(string[25:end])\n\
    \    prefix_vector = prefix_vector.append(string[26:end])\n    prefix_vector =\
    \ prefix_vector.append(string[27:end])\n    prefix_vector = prefix_vector.append(string[28:end])\n\
    \    prefix_vector = prefix_vector.append(string[29:end])\n    prefix_vector =\
    \ prefix_vector.append(string[31:end])\n    prefix_vector = prefix_vector.append(string[32:end])\n\
    \    prefix_vector = prefix_vector.append(string[33:end])\n    prefix_vector =\
    \ prefix_vector.append(string[34:end])\n    prefix_vector = prefix_vector.append(string[35:end])\n\
    \    prefix_vector = prefix_vector.append(string[36:end])\n    prefix_vector =\
    \ prefix_vector.append(string[37:end])\n    prefix_vector = prefix_vector.append(string[38:end])\n\
    \    prefix_vector = prefix_vector.append(string[39", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefix\n    end\n\
    \    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba", "    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ \n    end\n    \n    return prefixes\nend", "    prefix_list = Vector{String}()\n\
    \    prefix_list[1] = string\n    for i in 2:length(string)\n        prefix_list[i]\
    \ = prefix_list[i-1] + string[i]\n    end\n    prefix_list\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefixes(string::String)", "    prefix_list\
    \ = Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes", "    prefix_list = Vector{String}()\n\
    \    for prefix in string.split(\"\")\n        prefix_list += prefixes_of(prefix)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>", "    prefix_list = Vector{String}()\n\
    \    prefix_list = all_prefixes_helper(string, prefix_list)\n    return prefix_list\n\
    end", "    prefix_list = Vector{String}()\n    prefix_list[1] = string\n    for\
    \ i = 2:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
