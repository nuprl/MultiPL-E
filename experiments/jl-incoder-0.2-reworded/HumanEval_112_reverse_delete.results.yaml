language: jl
name: HumanEval_112_reverse_delete
results:
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    if s[0]==c[0]\n        return (s[1:], true)\n    end\n   \
    \ \n    if s[0]!=c[0]\n        return (s[1:], false)\n    end\n    \n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfyhwkqo6.jl:20\nin expression\
    \ starting at /tmp/tmpfyhwkqo6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (s, false)\n  \
    \  end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if s[end]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]), true)\n    end\n    \n    if s[end]!=c[0] \n        return (s,\
    \ false)\n    end\n    \n    if \nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp4broe54z.jl:115\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4broe54z.jl:116\nin expression\
    \ starting at /tmp/tmp4broe54z.jl:116\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8dc17x7.jl:15\nin expression starting at /tmp/tmpc8dc17x7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphj086zx7.jl:19\nin expression\
    \ starting at /tmp/tmphj086zx7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj74yd7q2.jl:15\nin expression starting at /tmp/tmpj74yd7q2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    if length(s) mod length(c)==0\n        deleted = s[length(s):length(s)]\n\
    \    else\n        deleted = s[length(s):length(s)+length(c)]\n    end\n    if\
    \ deleted == c\n        return (\"true\", true)\n    else\n        return (\"\
    false\", false)\n    end\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph3sxjvli.jl:18\nin expression starting at /tmp/tmph3sxjvli.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    \n   \
    \ let rev_s = reverse(s)\n    let rev_c = reverse(c)\n    \n    if rev_s == rev_c\
    \ \n        return (s, true)\n    else \n        return (s, false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o2nod9p.jl:26\nin expression starting at\
    \ /tmp/tmp9o2nod9p.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n    else\
    \ if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else if s[length(s)-1]==c[0]\
    \ \n        return (reverse_delete(s,c[1:end-1]),true)\n    else \n        return\
    \ (reverse_delete(s,c[1:end-1]),false)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06k1ls0e.jl:17\nin expression starting at\
    \ /tmp/tmp06k1ls0e.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, true)\n    end\n\
    \    if length(s) is 1\n        return (s[end], true)\n    end\n    if length(c)\
    \ is 1\n        return (s[end], true)\n    end\n    if s[end] <> c[1]\n      \
    \  return (s, false)\n    end\n    \n    if s[end] == c[1]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[2:end]), true)\n    end\n    \n    if s[end] == c[2]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[3:end]), true)\n    end\n    \n    if s[end] == c[3]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[4:end]), true)\n    end\n    \n    if s[end] == c[4]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[5:end]), true)\n    end\n    \n    if s[end] == c[5]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[6::end]), true)\n    end\n    \n    if s[end] == c[6]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[7:end]), true)\n    end\n    \n    if s[end] == c[7]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[8:end]), true)\n    end\n    \n    if s[end] == c[8]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[9:end]), true)\n    end\n    \n    if s[end] == c[9]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[10:end]), true)\n    end\n    \n    if s[end] == c[10]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[11:end]), true)\n    end\n    \n    if s[end] == c[11]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[12:end]), true)\n    end\n    \n    if s[end] == c[12]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[13:end]), true)\n    end\n    \n    if s[end] == c[13]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[14:end]), true)\n    end\n    \n    if s[end] == c[14]\n        return (reverse_delete(s[end+1:end+length(c)],\
    \ c[15:end]), true)\n    end\n    \n    if s[end] == c[15\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp28trdbco.jl:18\nin expression starting at /tmp/tmp28trdbco.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s,false)\n    end\n\
    \    if length(s)==1\n        return (s,true)\n    end\n    if length(c)==1\n\
    \        return (s,false)\n    end\n    if s[end-1]==c[1]\n        return (reverse_delete(s[end-1:end],c[2:end]),true)\n\
    \    end\n    if s[end-1]!=c[1]\n        return (reverse_delete(s[end-1:end],c[2:end]),false)\n\
    \    end\n    return (reverse_delete(s[end-1:end],c[2:end]),true)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ce8ovb3.jl:32\nin expression starting at\
    \ /tmp/tmp3ce8ovb3.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps3j4_ofr.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps3j4_ofr.jl:1\n\
    in expression starting at /tmp/tmps3j4_ofr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_vh93ya.jl:17\nin expression starting at\
    \ /tmp/tmp2_vh93ya.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzo581ixb.jl:15\nin expression starting at /tmp/tmpzo581ixb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0qmfw_3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0qmfw_3.jl:1\n\
    in expression starting at /tmp/tmpe0qmfw_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    if s[0]!=c[0]\n        return (s, false)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph2su0cr5.jl:19\nin expression\
    \ starting at /tmp/tmph2su0cr5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpunf3wyqh.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpunf3wyqh.jl:1\n\
    in expression starting at /tmp/tmpunf3wyqh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    if s[length(s)-1]==c\n        return reverse_delete(s[0..length(s)-1],\
    \ c) + s[length(s)-1]\n    else\n        return reverse_delete(s[0..length(s)-1],\
    \ c) + s[length(s)-1] + reverse_delete(s, c)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzduz_m15.jl:24\nin expression starting at\
    \ /tmp/tmpzduz_m15.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnwayj26u.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnwayj26u.jl:1\n\
    in expression starting at /tmp/tmpnwayj26u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    else\
    \ if length(s)==1 then return (s, false)\n    else if length(c)==1 then return\
    \ (s, false)\n    else if s[length(s)-1]==c then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), true)\n    else if c[length(c)-1]==s then \n        return\
    \ (reverse_delete(substring(s, 1, length(s)-1), c), true)\n    else if s[length(s)-1]==c\
    \ || c[length(c)-1]==s then \n        return (reverse_delete(substring(s, 1, length(s)-1),\
    \ c), false)\n    else if s[length(s)-1]==c && c[length(c)-1]==s then \n     \
    \   return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n    else\
    \ if s[length(s)-1]==c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]==s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[length(c)-1]!=s then \n        return (reverse_delete(substring(s,\
    \ 1, length(s)-1), c), false)\n    else if s[length(s)-1]!=c && c[length(c)-1]!=s\
    \ then \n        return (reverse_delete(substring(s, 1, length(s)-1), c), false)\n\
    \    else if s[length(s)-1]!=c && c[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk_vh145t.jl:15\nin expression starting at /tmp/tmpk_vh145t.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7s60js62.jl:15\nin expression starting at /tmp/tmp7s60js62.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else if\
    \ length(c) > length(s) \n        return (s, false)\n    else if s == c \n   \
    \     return (s, true)\n    else if s[length(s)] == c \n        return (s, true)\n\
    \    else if s[length(s)] == s[length(s)-1] \n        return (s, true)\n    else\
    \ \n        return (s, false)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbd1lnbzz.jl:17\nin expression starting at\
    \ /tmp/tmpbd1lnbzz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s[1:], c), false)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm7d75wun.jl:15\nin expression starting at /tmp/tmpm7d75wun.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    else\n        return (reverse_delete(s[1:], c[1:]), false)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp91uifdfa.jl:19\nin expression\
    \ starting at /tmp/tmp91uifdfa.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 then return (s, false)\n    if length(c)==0\
    \ then return (s, false)\n    if length(s)==1 then return (s, false)\n    if length(c)==1\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx5o51q2l.jl:16\nin expression starting at /tmp/tmpx5o51q2l.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzp98krrc.jl:15\nin expression starting at /tmp/tmpzp98krrc.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    \n \
    \   let (s,l) = reverse_delete(tail(s), c)\n    let (c,r) = reverse_delete(init(c),\
    \ tail(c))\n    \n    if l == r then return (s, true)\n    else return (s, false)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk1eri0z8.jl:15\nin expression starting at /tmp/tmpk1eri0z8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s)==length(c) \n     \
    \   return (\"false\",false)\n    end\n    if length(s)==length(c) \n        return\
    \ (\"true\",true)\n    end\n    if s[end-1]==c\n        return reverse_delete(s[0..end-1],c)\n\
    \    end\n    return reverse_delete(s[0..end-1],c) + reverse_delete(s[end..end-1],c)\n\
    end\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa_i67u2h.jl:26\nin expression starting at\
    \ /tmp/tmpa_i67u2h.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo_k2rqix.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo_k2rqix.jl:1\n\
    in expression starting at /tmp/tmpo_k2rqix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    if length(s)==1\n        return (reverse_delete(s[1:], c), true)\n\
    \    end\n    if length(c)==1\n        return (reverse_delete(s, c[1:]), true)\n\
    \    end\n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],\
    \ c[1:]), true)\n    end\n    if s[end-1]==c[1]\n        return (reverse_delete(s[end-1:end],\
    \ c[2:]), true)\n    end\n    if s[end-1]==c[2]\n        return (reverse_delete(s[end-1:end],\
    \ c[3:]), true)\n    end\n    if s[end-1]==c[3]\n        return (reverse_delete(s[end-1:end],\
    \ c[4:]), true)\n    end\n    if s[end-1]==c[4]\n        return (reverse_delete(s[end-1:end],\
    \ c[5:]), true)\n    end\n    if s[end-1]==c[5]\n        return (reverse_delete(s[end-1:end],\
    \ c[6:]), true)\n    end\n    if s[end-1]==c[6]\n        return (reverse_delete(s[end-1:end],\
    \ c[7:]), true)\n    end\n    if s[end-1]==c[7]\n        return (reverse_delete(s[end-1:end],\
    \ c[8:]), true)\n    end\n    if s[end-1]==c[8]\n        return (reverse_delete(s[end-1:end],\
    \ c[9:]), true)\n    end\n    if s[end-1]==c[9]\n        return (reverse_delete(s[end-1:end],\
    \ c[10:]), true)\n    end\n    if s[end-1]==c[10]\n        return (reverse_delete(s[end-1:end],\
    \ c[11:]), true)\n    end\n    if s[end-1]==c[11]\n        return (reverse_delete(s[end-1:end],\
    \ c[12:]), true)\n    end\n    if s[end-1]==c[12]\n        return (reverse_delete(s[end-1:end],\
    \ c[13:]), true)\n    end\n    if s[end-1]==c[13]\n        return (reverse_delete(s[end-1:end],\
    \ c[14:]), true)\n    end\n    if s[end-1]==c[14]\n        return (reverse_delete(s[end-1:end],\
    \ c[15:]), true)\n    end\n    if s[end-1]==c[15]\n        return (reverse_delete(s[end-1:end],\
    \ c[16:]), true)\n    end\n    if s[end-1]==c[16]\n        return (reverse_delete(s[end-1:end],\
    \ c[17:]), true)\n    end\n    if s[end-1]==c[17]\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4yupvuu7.jl:19\nin expression\
    \ starting at /tmp/tmp4yupvuu7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (\"false\", false)\n \
    \   else if length(c) == length(s) \n        if c == reverse(s,0) \n         \
    \   return (\"true\", true)\n        else \n            return (\"false\", false)\n\
    \    else \n        return (reverse_delete(s,c[1:end-1]), reverse_delete(s,c[1:end-1])\
    \ == reverse(s,0))\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ke6acix.jl:17\nin expression starting at\
    \ /tmp/tmp8ke6acix.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xal_p0v.jl:19\nin expression\
    \ starting at /tmp/tmp5xal_p0v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else if\
    \ length(c) == length(s) \n        return (s, true)\n    else if length(c) > length(s)\
    \ \n        return (s, false)\n    else \n        return (s, true)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoho7hx80.jl:17\nin expression starting at\
    \ /tmp/tmpoho7hx80.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxmcgyguy.jl:15\nin expression starting at /tmp/tmpxmcgyguy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgkwviaqq.jl:15\nin expression starting at /tmp/tmpgkwviaqq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==0 && length(c)==1 \n        return (\"\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_vh93ya.jl:17\nin expression starting at\
    \ /tmp/tmp2_vh93ya.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (s, false)\n  \
    \  else if length(s)==1 \n        return (s[end-1]==c[0], true)\n    else if length(c)==1\
    \ \n        return (s[end-1]==c[0], true)\n    else\n        local s1=reverse(s[end-1:end])\n\
    \        local c1=reverse(c[end-1:end])\n        return (s1==c1, true)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpayuobxtg.jl:17\nin expression starting at\
    \ /tmp/tmpayuobxtg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    return (reverse_delete(s[1:], c[1:]), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqhn0px2h.jl:19\nin expression\
    \ starting at /tmp/tmpqhn0px2h.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzo581ixb.jl:15\nin expression starting at /tmp/tmpzo581ixb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else\n        return (reverse_delete(s, c[1:]), false)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp_4uhjfg.jl:21\nin expression\
    \ starting at /tmp/tmpp_4uhjfg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo_k2rqix.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo_k2rqix.jl:1\n\
    in expression starting at /tmp/tmpo_k2rqix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    if length(s)==0 || length(c)==0\n        return (s,false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbgru_i8.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbgru_i8.jl:1\n\
    in expression starting at /tmp/tmpmbgru_i8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqpd8mln1.jl:19\nin expression\
    \ starting at /tmp/tmpqpd8mln1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s,false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbhm2sq9k.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbhm2sq9k.jl:1\n\
    in expression starting at /tmp/tmpbhm2sq9k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s)==length(c) \n     \
    \   return (s, false)\n    \n    if s[length(s)-1]==c[0] \n        return (reverse_delete(s[0..length(s)]-c[1:],\
    \ c), true)\n    else \n        return (reverse_delete(s[0..length(s)-1], c),\
    \ false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp05oepme9.jl:19\nin expression\
    \ starting at /tmp/tmp05oepme9.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0\n        return (\"false\"\
    , false)\n    end\n    \n    if s[end-1]==c[0]\n        return reverse_delete(s[end-2..end-1],\
    \ c[1:end-1])\n    end\n    \n    if s[end-1]==c[1]\n        return reverse_delete(s[end-2..end-1],\
    \ c[2:end-1])\n    end\n    \n    if s[end-1]==c[2]\n        return reverse_delete(s[end-2..end-1],\
    \ c[3:end-1])\n    end\n    \n    if s[end-1]==c[3]\n        return reverse_delete(s[end-2..end-1],\
    \ c[4:end-1])\n    end\n    \n    if s[end-1]==c[4]\n        return reverse_delete(s[end-2..end-1],\
    \ c[5:end-1])\n    end\n    \n    if s[end-1]==c[5]\n        return reverse_delete(s[end-2..end-1],\
    \ c[6:end-1])\n    end\n    \n    if s[end-1]==c[6]\n        return reverse_delete(s[end-2..end-1],\
    \ c[7:end-1])\n    end\n    \n    if s[end-1]==c[7]\n        return reverse_delete(s[end-2..end-1],\
    \ c[8:end-1])\n    end\n    \n    if s[end-1]==c[8]\n        return reverse_delete(s[end-2..end-1],\
    \ c[9:end-1])\n    end\n    \n    if s[end-1]==c[9]\n        return reverse_delete(s[end-2..end-1],\
    \ c[10:end-1])\n    end\n    \n    if s[end-1]==c[10]\n        return reverse_delete(s[end-2..end-1],\
    \ c[11:end-1])\n    end\n    \n    if s[end-1]==c[11]\n        return reverse_delete(s[end-2..end-1],\
    \ c[12:end-1])\n    end\n    \n    if s[end-1]==c[12]\n        return reverse_delete(s[end-2..end-1],\
    \ c[13:end-1])\n    end\n    \n    if s[end-1]==c[13]\n        return reverse_delete(s[end-2..end-1],\
    \ c[14:end-1])\n    end\n    \n    if s[end-1]==c[14]\n        return reverse_delete(s[end-2..end-1],\
    \ c[15:end-1])\n    end\n    \n    if s[end-1]==c[15]\n        return reverse_delete(s[end-2..end-1],\
    \ c[16:end-1])\n    end\n    \n    if s[end-1]==c[16]\n        return reverse_delete(s[end-2..end-1],\
    \ c[17:end-1])\n    end\n    \n    if s[end-1]==c[17\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux_s5b3v.jl:1\nin expression starting at /tmp/tmpux_s5b3v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvwrwxvw_.jl:15\nin expression starting at /tmp/tmpvwrwxvw_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    if s[0]==c[0]\n        return (s[1:], true)\n    end\n   \
    \ \n    if s[0]!=c[0]\n        return (s[1:], false)\n    end\n    \n    if reverse(s[1:])==reverse(s[2:end])\n\
    \        return (s[1:], true)\n    end\n    \n    return (\"\", false)\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpojzvbpuc.jl:20\nin expression\
    \ starting at /tmp/tmpojzvbpuc.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnb04prh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnb04prh.jl:1\n\
    in expression starting at /tmp/tmpxnb04prh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxe5wi2py.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxe5wi2py.jl:1\n\
    in expression starting at /tmp/tmpxe5wi2py.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0qmfw_3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0qmfw_3.jl:1\n\
    in expression starting at /tmp/tmpe0qmfw_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    if length(s) mod length(c)==0\n        return (s, true)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz0kc77mo.jl:18\nin expression starting at /tmp/tmpz0kc77mo.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxmcgyguy.jl:15\nin expression starting at /tmp/tmpxmcgyguy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe4zz2azp.jl:15\nin expression starting at /tmp/tmpe4zz2azp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe4zz2azp.jl:15\nin expression starting at /tmp/tmpe4zz2azp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\",false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0m99mhyz.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0m99mhyz.jl:1\n\
    in expression starting at /tmp/tmp0m99mhyz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    if length(s) <= length(c) || length(c) <= length(s)\
    \ \n        return (s, false)\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnl67yfbj.jl:1\nin expression starting at /tmp/tmpnl67yfbj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pnjbonq.jl:1\nin expression starting at /tmp/tmp7pnjbonq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s[1..end-1], c), true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s, c[1..end-1]), true)\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9pjin_9.jl:17\nin expression starting at\
    \ /tmp/tmpg9pjin_9.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    if s[length(s)-1]==c[0]\n        return (reverse_delete(s[length(s)-2..-1],\
    \ c[1:end-1]), true)\n    else\n        return (reverse_delete(s[length(s)-2..-1],\
    \ c[1:end-1]), false)\n    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 46\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4q3e8pvh.jl:20\nin expression starting at\
    \ /tmp/tmp4q3e8pvh.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    \n \
    \   if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    else return\
    \ (reverse_delete(s[1:], c), false)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwsv7vlv4.jl:15\nin expression starting at /tmp/tmpwsv7vlv4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) then return (s, false)\n    \n    let (left,\
    \ right) = partition(s == c, s)\n    \n    if left == \"\" then return (right,\
    \ true)\n    else return (reverse_delete(left, c), true)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_sol99ae.jl:15\nin expression starting at /tmp/tmp_sol99ae.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0\n        return (\"false\"\
    , false)\n    end\n    \n    \n    if length(s)==1\n        return (\"true\",\
    \ true)\n    end\n    \n    \n    if length(c)==1\n        return (reverse_delete(s[1..end-1],\
    \ c[1..end-1]), true)\n    end\n    \n    \n    if s[1..end-1] == c[1..end-1]\n\
    \        return (reverse_delete(s[2..end-1], c[2..end-1]), true)\n    end\n  \
    \  \n    \n    if s[1..end-1] != c[1..end-1]\n        return (reverse_delete(s[1..end-1],\
    \ c[2..end-1]), false)\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jn8vm2u.jl:41\nin expression starting at\
    \ /tmp/tmp_jn8vm2u.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n\
    \    else if length(s)==1\n        return (c,true)\n    else if length(c)==1\n\
    \        return (s,true)\n    else\n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevv19amk.jl:17\nin expression starting at\
    \ /tmp/tmpevv19amk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi_xxg3ta.jl:15\nin expression starting at /tmp/tmpi_xxg3ta.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8zgmccn9.jl:21\nin expression\
    \ starting at /tmp/tmp8zgmccn9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (\"false\", false)\n \
    \   else \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmphg0fzp2f.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphg0fzp2f.jl:1\n\
    in expression starting at /tmp/tmphg0fzp2f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s,false)\n    \n\
    \    if s[0]==c[0]\n        return (reverse_delete(s[1:],c[1:]),true)\n    \n\
    \    return (reverse_delete(s[1:],c),false)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3igu2tde.jl:19\nin expression\
    \ starting at /tmp/tmp3igu2tde.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (\"false\", false)\n \
    \   else if length(c) > length(s)\n        return (\"false\", false)\n    else\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_8q0nxci.jl:17\nin expression starting at\
    \ /tmp/tmp_8q0nxci.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (\"false\", false)\n \
    \   else if length(c) == length(s) \n        return (\"true\", true)\n    else\
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck3j8cil.jl:17\nin expression starting at\
    \ /tmp/tmpck3j8cil.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c[1:end-1]), true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s[1:end-1],c), true)\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeij7p41b.jl:17\nin expression starting at\
    \ /tmp/tmpeij7p41b.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqwftro00.jl:19\nin expression\
    \ starting at /tmp/tmpqwftro00.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) then return (s, false)\n    \n    \n  \
    \  if length(s) % 2 == 0 then \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvoyewy8u.jl:15\nin expression starting at /tmp/tmpvoyewy8u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else \n\
    \        return (delete(s, c), true)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdldqppk3.jl:21\nin expression starting at\
    \ /tmp/tmpdldqppk3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp00ilm68e.jl:15\nin expression starting at /tmp/tmp00ilm68e.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    return (reverse_delete(s[1:], c), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprgnolg7w.jl:19\nin expression\
    \ starting at /tmp/tmprgnolg7w.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnwayj26u.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnwayj26u.jl:1\n\
    in expression starting at /tmp/tmpnwayj26u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false) else \n \
    \       if length(s)==1 then return (s, false) else \n            if length(c)==1\
    \ then return (s, false) else \n                if s[0]==c then return (reverse_delete(s[1..],\
    \ c), true) else \n                    if s[0]!=c then return (reverse_delete(s[1..],\
    \ c), false) else \n                        if s[0]==c && reverse_delete(s[1..],\
    \ c)==s then return (s, true) else \n                            return (reverse_delete(s[1..],\
    \ c), false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjd79dycu.jl:15\nin expression starting at /tmp/tmpjd79dycu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8dc17x7.jl:15\nin expression starting at /tmp/tmpc8dc17x7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s)!=length(c) || length(c)==0\n\
    \        return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xkti_w4.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xkti_w4.jl:1\n\
    in expression starting at /tmp/tmp5xkti_w4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    if length(s)==0 || length(c)==0\n        return (s,\
    \ false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplulatcei.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplulatcei.jl:1\n\
    in expression starting at /tmp/tmplulatcei.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else if\
    \ length(c) > length(s) \n        return (s, true)\n    else if c == reverse(s[length(s)..length(s)-1])\
    \ \n        return (s, true)\n    else \n        return (s, false)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq895b_k_.jl:17\nin expression starting at\
    \ /tmp/tmpq895b_k_.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg_0o69b2.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg_0o69b2.jl:1\n\
    in expression starting at /tmp/tmpg_0o69b2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    if s[0]==c[0]\n        s=reverse_delete(s[1:],c[1:])\n        return\
    \ (s,true)\n    end\n    if s[0]!=c[0]\n        s=reverse_delete(s[1:],c)\n  \
    \      return (s,true)\n    end\n    s=reverse_delete(s[1:],c[1:])\n    return\
    \ (s,false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkkrsss83.jl:19\nin expression\
    \ starting at /tmp/tmpkkrsss83.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    else if length(s)==1\n        return (reverse_delete(s[1..end-1], c), true)\n\
    \    else if length(c)==1\n        return (reverse_delete(s, c[1..end-1]), true)\n\
    \    else\n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgysw2k4t.jl:17\nin expression starting at\
    \ /tmp/tmpgysw2k4t.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n    else\
    \ if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else\n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9mb4cs0.jl:17\nin expression starting at\
    \ /tmp/tmpi9mb4cs0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgbm24ars.jl:15\nin expression starting at /tmp/tmpgbm24ars.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else if\
    \ length(c) == length(s) \n        if c == reverse(s,0) \n            return (s,\
    \ true)\n        else \n            return (\"\", false)\n    else \n        return\
    \ (\"\", false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcs6zwyld.jl:17\nin expression starting at\
    \ /tmp/tmpcs6zwyld.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 \n        return (\"\", false)\n    end\n    if\
    \ length(c)==0 \n        return (s, true)\n    end\n    if s[end-1]==c[0] \n \
    \       return (reverse_delete(s[end-1:end], c[1:end-1]), true)\n    end\n   \
    \ if s[end-1]!=c[0] \n        return (s, false)\n    end\n    return (reverse_delete(s[end-1:end],\
    \ c[1:end-1]), false)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\"\
    , \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0e48_0z.jl:29\nin expression starting at\
    \ /tmp/tmpt0e48_0z.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, true)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp38uk9k77.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp38uk9k77.jl:1\n\
    in expression starting at /tmp/tmp38uk9k77.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpta6slny4.jl:15\nin expression starting at /tmp/tmpta6slny4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl7qy5rz0.jl:15\nin expression starting at /tmp/tmpl7qy5rz0.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (\"false\", false)\n \
    \   else if length(c) == length(s) \n        if s == c \n            return (\"\
    true\", true)\n        else \n            return (\"false\", false)\n    else\
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1mecmgk.jl:17\nin expression starting at\
    \ /tmp/tmpx1mecmgk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptl9us70z.jl:15\nin expression starting at /tmp/tmptl9us70z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfanv_ykd.jl:15\nin expression starting at /tmp/tmpfanv_ykd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0qmfw_3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0qmfw_3.jl:1\n\
    in expression starting at /tmp/tmpe0qmfw_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    else return (reverse_delete(s,\
    \ c[1:]), false)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj548081v.jl:15\nin expression starting at /tmp/tmpj548081v.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n    else\
    \ if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else if s[0]==c[0]\
    \ \n        return (reverse_delete(s[1:],c[1:]),true)\n    else if s[0]!=c[0]\
    \ \n        return (reverse_delete(s[1:],c[1:]),false)\n    else \n        return\
    \ (reverse_delete(s[1:],c[1:]),false)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\n\
    The question was about how to solve the problem in O(n) time, not how to solve\
    \ it in O(n^2) time.\n<|/ c |>\n<| c |>\nI didn't say that it's impossible to\
    \ solve it in O(n) time. I said that it's impossible to solve it in O(n^2) time.\n\
    <|/ c |>\n<| c |>\nI didn't say that it's impossible to solve it in O(n) time.\
    \ I said that it's impossible to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\n\
    I didn't say that it's impossible to solve it in O(n) time. I said that it's impossible\
    \ to solve it in O(n^2) time.\n<|/ c |>\n<| c |>\nI didn't say that it's impossible\
    \ to solve it in O(n) time. I said that it's impossible to solve it in O(n^2)\
    \ time.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4msx81qg.jl:17\nin expression starting at\
    \ /tmp/tmp4msx81qg.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n\
    \    \n    \n    if s[0]==c[0]\n        return (s[1:], true)\n    \n    if s[0]!=c[0]\n\
    \        return (s, false)\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptla2xcij.jl:20\nin expression\
    \ starting at /tmp/tmptla2xcij.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s)!=length(c) || length(c)!=1\
    \ \n        return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw8laa4gg.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw8laa4gg.jl:1\n\
    in expression starting at /tmp/tmpw8laa4gg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplcnoitni.jl:15\nin expression starting at /tmp/tmplcnoitni.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj74yd7q2.jl:15\nin expression starting at /tmp/tmpj74yd7q2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    if length(s)==1\n        return (\"true\", true)\n    end\n    if\
    \ length(c)==1\n        return (reverse_delete(s[1..end-1], c[1..end-1]), true)\n\
    \    end\n    if s[end-1]==c[0]\n        return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ true)\n    end\n    if s[end-1]!=c[0]\n        return (reverse_delete(s[1..end-1],\
    \ c[1..end-1]), false)\n    end\n    return (reverse_delete(s[1..end-1], c[1..end-1]),\
    \ true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvbs5k8l.jl:32\nin expression starting at\
    \ /tmp/tmpwvbs5k8l.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    if s[0]==c[0]\n        s=reverse_delete(s[1:], c[1:])\n        return\
    \ (s, true)\n    end\n    if s[0]!=c[0]\n        s=reverse_delete(s[1:], c)\n\
    \        return (s, false)\n    end\n    s=reverse_delete(s, c[1:])\n    return\
    \ (s, true)\nend\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpns9qkp9l.jl:19\nin expression\
    \ starting at /tmp/tmpns9qkp9l.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8dc17x7.jl:15\nin expression starting at /tmp/tmpc8dc17x7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo_k2rqix.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo_k2rqix.jl:1\n\
    in expression starting at /tmp/tmpo_k2rqix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    if length(s)==1\n        return (reverse_delete(s[1:], c), true)\n\
    \    end\n    if length(c)==1\n        return (reverse_delete(s, c[1:]), true)\n\
    \    end\n    if s[end]==c[1]\n        return (reverse_delete(s[1:end-1], c[2:end]),\
    \ true)\n    end\n    if s[end]!=c[1]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]), false)\n    end\n    return (reverse_delete(s[1:end-1], c[2:end]),\
    \ true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"\
    ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7xc1wwaf.jl:19\nin expression\
    \ starting at /tmp/tmp7xc1wwaf.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe4zz2azp.jl:15\nin expression starting at /tmp/tmpe4zz2azp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    else\
    \ if length(s)==1 then return (s, false)\n    else if length(c)==1 then return\
    \ (s, false)\n    else if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), false)\n\
    \    else return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpczm4qznq.jl:15\nin expression starting at /tmp/tmpczm4qznq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjltla7n4.jl:15\nin expression starting at /tmp/tmpjltla7n4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    if length(s) is 1\n        return (c, true)\n    end\n    if length(c)\
    \ is 1\n        return (s, true)\n    end\n    if s[end-1]==c[1]\n        return\
    \ (reverse_delete(s[end-1:end], c[end-1:end]), true)\n    end\n    if s[end-1]!=c[1]\n\
    \        return (reverse_delete(s[end-1:end], c[end-1:end]), false)\n    end\n\
    \    return (reverse_delete(s[end-1:end], c[end-1:end]), true)\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7dehy043.jl:18\nin expression starting at /tmp/tmp7dehy043.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        error(\"The length of c should\
    \ be greater than the length of s\")\n    end\n    \n    if length(c) == 0 \n\
    \        return (s, true)\n    end\n    \n    if length(c) == 1 \n        if c\
    \ == s[end] \n            return (s[end], true)\n        end\n        return (s,\
    \ false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpes9qoqvq.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpes9qoqvq.jl:1\n\
    in expression starting at /tmp/tmpes9qoqvq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnb04prh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnb04prh.jl:1\n\
    in expression starting at /tmp/tmpxnb04prh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    \n    \n    if length(find(s,c)) == length(find(reverse(s, c), c))\n\
    \        return (\"true\", true)\n    end\n    \n    return (\"false\", false)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hsorh3y.jl:26\nin expression starting at\
    \ /tmp/tmp_hsorh3y.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpob43147v.jl:15\nin expression starting at /tmp/tmpob43147v.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnb04prh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnb04prh.jl:1\n\
    in expression starting at /tmp/tmpxnb04prh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    return (reverse_delete(s[1:], c[1:]), false)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphm_i38vy.jl:19\nin expression\
    \ starting at /tmp/tmphm_i38vy.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzo581ixb.jl:15\nin expression starting at /tmp/tmpzo581ixb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    return (reverse_delete(s[1:], c[1:]), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqhn0px2h.jl:19\nin expression\
    \ starting at /tmp/tmpqhn0px2h.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1nsck5c9.jl:19\nin expression\
    \ starting at /tmp/tmp1nsck5c9.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s,\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpclmyyso4.jl:15\nin expression starting at /tmp/tmpclmyyso4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjltla7n4.jl:15\nin expression starting at /tmp/tmpjltla7n4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        error(\"c is shorter than s\"\
    )\n    end\n    \n    \n    if length(s) % 2 != 0 \n        error(\"s is not a\
    \ palindrome\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_6f3kdk.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_6f3kdk.jl:1\n\
    in expression starting at /tmp/tmpn_6f3kdk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8dc17x7.jl:15\nin expression starting at /tmp/tmpc8dc17x7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0qmfw_3.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0qmfw_3.jl:1\n\
    in expression starting at /tmp/tmpe0qmfw_3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    else if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    else\n        return (reverse_delete(s[1:], c[1:]), false)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeb8whp6z.jl:19\nin expression\
    \ starting at /tmp/tmpeb8whp6z.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe4zz2azp.jl:15\nin expression starting at /tmp/tmpe4zz2azp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pnjbonq.jl:1\nin expression starting at /tmp/tmp7pnjbonq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (s, false)\n  \
    \  \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjbpudtr_.jl:19\nin expression\
    \ starting at /tmp/tmpjbpudtr_.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c),true)\n    else\
    \ if length(c)==1 \n        return (reverse_delete(s,c),true)\n    else if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:],c[1:]),true)\n    else if s[0]!=c[0]\n \
    \       return (reverse_delete(s[1:],c[1:]),false)\n    else\n        return (reverse_delete(s[1:],c[1:]),false)\n\
    \    end\nend\n\"\"\"\n    We are given two strings s and c, you have to delete\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68wooo_v.jl:17\nin expression starting at\
    \ /tmp/tmp68wooo_v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7o37jhxt.jl:19\nin expression\
    \ starting at /tmp/tmp7o37jhxt.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s[1:],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmposypil4k.jl:15\nin expression starting at /tmp/tmposypil4k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp45g0digq.jl:19\nin expression\
    \ starting at /tmp/tmp45g0digq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\",false)\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n\
    \        return (\"false\",false)\n    end\n    if length(find(s,c))>0\n     \
    \   delete!(s,find(s,c))\n    end\n    if length(find(s,c))==0\n        return\
    \ (\"false\",false)\n    end\n    if length(find(s,c))>0\n        delete!(s,find(s,c))\n\
    \    end\n    if length(find(s,c))==0\n        return (\"false\",false)\n    end\n\
    \    if length(find(s,c))>0\n        delete!(s,find(s,c))\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuuge4z7c.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuuge4z7c.jl:1\n\
    in expression starting at /tmp/tmpuuge4z7c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if length(s)==1 then return (s, true)\n    if length(c)==1\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0egwfjd5.jl:15\nin expression starting at /tmp/tmp0egwfjd5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0 \n        return (\"false\"\
    , false)\n    end\n    \n    if s[0]==c[0] \n        return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    end\n    \n    if s[0]!=c[0] \n        return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    end\n    \n    return (reverse_delete(s[1:], c[1:]), false)\n\
    end\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcded\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvc59dcqq.jl:21\nin expression\
    \ starting at /tmp/tmpvc59dcqq.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\
    \ \n    else if length(s)==1 \n        return (reverse_delete(s[1:], c), true)\
    \ \n    else if length(c)==1 \n        return (reverse_delete(s, c[1:]), true)\
    \ \n    else \n        \n        if s[0]==c[0] \n            return (reverse_delete(s[1:],\
    \ c[1:]), true) \n        else \n            return (reverse_delete(s, c[1:]),\
    \ false) \nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\",\
    \ \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_le554a.jl:17\nin expression starting at\
    \ /tmp/tmpz_le554a.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s, c), true)\n    else\
    \ if length(c)==1 \n        return (reverse_delete(s, c), true)\n    else if s[0]==c[0]\n\
    \        return (reverse_delete(s[1:], c[1:]), true)\n    else\n        return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8anasr56.jl:17\nin expression starting at\
    \ /tmp/tmp8anasr56.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    if length(c)>length(s) \n        return (\"\", false)\n    end\n\
    \    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end], c[end-1]),\
    \ true)\n    end\n    if s[end-1]!=c[0]\n        return (\"\", false)\n    end\n\
    \    return (reverse_delete(s[end-1:end], c[end-1]), false)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi7r7but.jl:29\nin expression starting at\
    \ /tmp/tmphi7r7but.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s,false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbhm2sq9k.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbhm2sq9k.jl:1\n\
    in expression starting at /tmp/tmpbhm2sq9k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    if length(s)==0 || length(c)==0\n        return (s,false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmbgru_i8.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmbgru_i8.jl:1\n\
    in expression starting at /tmp/tmpmbgru_i8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxe5wi2py.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxe5wi2py.jl:1\n\
    in expression starting at /tmp/tmpxe5wi2py.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl7qy5rz0.jl:15\nin expression starting at /tmp/tmpl7qy5rz0.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (s, false)\n  \
    \  \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpond94svr.jl:19\nin expression\
    \ starting at /tmp/tmpond94svr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpymx6uvdd.jl:15\nin expression starting at /tmp/tmpymx6uvdd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(s)==0 || length(c)==0\n        return (s, false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnb04prh.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxnb04prh.jl:1\n\
    in expression starting at /tmp/tmpxnb04prh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe4zz2azp.jl:15\nin expression starting at /tmp/tmpe4zz2azp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg_0o69b2.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg_0o69b2.jl:1\n\
    in expression starting at /tmp/tmpg_0o69b2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else if\
    \ length(c) == length(s) \n        if c == reverse(s[length(s)..]) \n        \
    \    return (s[length(s)..], true)\n        else \n            return (s, false)\n\
    \    else \n        return (s, false)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw65grdpn.jl:17\nin expression starting at\
    \ /tmp/tmpw65grdpn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) then return (s, false)\n    \n    let rev_s\
    \ = reverse(s)\n    let rev_c = reverse(c)\n    \n    if rev_s == rev_c then return\
    \ (s, true)\n    else return (s, false)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpppr0hfg8.jl:15\nin expression starting at /tmp/tmpppr0hfg8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, false)\n    if length(s)==1 then return (s, false)\n    if length(c)==1\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n    return\
    \ (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpglei9aeh.jl:15\nin expression starting at /tmp/tmpglei9aeh.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    \n    \n    if s[0]==c[0]\n        \n        if length(s)==1\n \
    \           return (\"\", false)\n        else\n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpfftxxlmx.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfftxxlmx.jl:1\n\
    in expression starting at /tmp/tmpfftxxlmx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (s, false)\n  \
    \  \n    if s[0]==c[0] \n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    \n    if s[0]!=c[0] \n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), reverse_delete(s, c[1:]))\nend\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp40xt9vyp.jl:19\nin expression\
    \ starting at /tmp/tmp40xt9vyp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"\", false)\n\
    \    end\n    if s[length(s)-1]==c[0] \n        return (s[0..length(s):-1], true)\n\
    \    end\n    if s[length(s)-1]!=c[0] \n        return (s[0..length(s):-1], false)\n\
    \    end\n    reverse_delete(s[1..end-1], c[1:end-1])\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(0 .. length(s)):\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n78hhdz.jl:19\n\
    in expression starting at /tmp/tmp0n78hhdz.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s[1:], c), true)\n\
    \    else if length(c)==1 \n        return (reverse_delete(s, c[1:]), true)\n\
    \    else \n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp732htxhc.jl:17\nin expression starting at\
    \ /tmp/tmp732htxhc.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else\n        return (s, false)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgk9varsj.jl:20\nin expression\
    \ starting at /tmp/tmpgk9varsj.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    if length(s)==1\n        return (s[end-1] == c, true)\n    end\n  \
    \  if length(c)==1\n        return (s[end-1] == c, true)\n    end\n    if s[end-1]\
    \ == c\n        return (reverse_delete(s[end-2:end], c), true)\n    end\n    if\
    \ s[end-1] != c\n        return (reverse_delete(s[end-2:end], c), false)\n   \
    \ end\n    return (reverse_delete(s[end-1:end-2], c), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt92i9nub.jl:32\nin expression starting at\
    \ /tmp/tmpt92i9nub.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 \n        return (reverse_delete(s,c), true)\n    else\
    \ if length(c)==1\n        return (reverse_delete(s,c), true)\n    else\n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vozeqwi.jl:17\nin expression starting at\
    \ /tmp/tmp8vozeqwi.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s)==length(c) || length(c)==0\
    \ \n        return (\"false\", false)\n    else if length(s)==1 \n        return\
    \ (reverse_delete(s,c[1:end-1]), true)\n    else if length(c)==1 \n        return\
    \ (reverse_delete(s[1:end],c), true)\n    else\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlrosiwu.jl:17\nin expression starting at\
    \ /tmp/tmprlrosiwu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    if length(s)==1\
    \ then return (s, false)\n    if length(c)==1 then return (s, false)\n    if s[length(s)-1]==c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), true)\n    if s[length(s)-1]!=c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), false)\n    if c[length(c)-1]==c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), true)\n    if c[length(c)-1]!=c\
    \ then return (reverse_delete(substring(s,1,length(s)-1), c), false)\n    return\
    \ (reverse_delete(substring(s,1,length(s)-1), c), false)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqjjcr2dk.jl:15\nin expression starting at /tmp/tmpqjjcr2dk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphua7dfpy.jl:15\nin expression starting at /tmp/tmphua7dfpy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1\n        return (s[end-1]==c[1], true)\n    else if\
    \ length(c)==1\n        return (s[end-1]==c[1], true)\n    else\n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15497zes.jl:17\nin expression starting at\
    \ /tmp/tmp15497zes.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl7qy5rz0.jl:15\nin expression starting at /tmp/tmpl7qy5rz0.jl:15\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    if s[end]==c[0]\n        return (reverse_delete(s[end+1:end+length(c)-1],\
    \ c[1:end-1]), true)\n    else\n        return (reverse_delete(s[end+1:end+length(c)-1],\
    \ c[1:end-1]), false)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpehyqk82d.jl:30\n  Test threw
    exception\n  Expression: candidate("abcde", "ae") == ("bcd", false)\n  BoundsError:
    attempt to access 2-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @
    ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102
    [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] reverse_delete(s::String,
    c::String)\n     @ Main /tmp/tmpehyqk82d.jl:19\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6]
    macro expansion\n     @ /tmp/tmpehyqk82d.jl:30 [inlined]\n   [7] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8]
    top-level scope\n     @ /tmp/tmpehyqk82d.jl:29\ntest set: Error During Test at
    /tmp/tmpehyqk82d.jl:31\n  Test threw exception\n  Expression: candidate("abcdef",
    "b") == ("acdef", false)\n  BoundsError: attempt to access 1-codeunit String at
    index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2]
    codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223
    [inlined]\n   [4] reverse_delete(s::String, c::String)\n     @ Main /tmp/tmpehyqk82d.jl:19\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmpehyqk82d.jl:31 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmpehyqk82d.jl:29\ntest set: Error
    During Test at /tmp/tmpehyqk82d.jl:32\n  Test threw exception\n  Expression: candidate("abcdedcba",
    "ab") == ("cdedc", true)\n  BoundsError: attempt to access 2-codeunit String at
    index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2]
    codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3] getindex\n     @ ./strings/string.jl:22'
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, false)\n    if length(s)==1 then return (s, false)\n    if length(c)==1\
    \ then return (s, false)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c[1:]), reverse_delete(s, c[1:]))\n\
    end\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.0>\nreverse_delete(\"abcdedcba\", \"ab\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptxs750mp.jl:15\nin expression starting at /tmp/tmptxs750mp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s) != length(c) || length(c)\
    \ != 1\n        return (\"false\",false)\n    end\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi9x_o5fa.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi9x_o5fa.jl:1\n\
    in expression starting at /tmp/tmpi9x_o5fa.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    if length(c) < length(s) \n        error(\"The length of c\
    \ should be greater than the length of s\")\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbj20gtw4.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbj20gtw4.jl:1\n\
    in expression starting at /tmp/tmpbj20gtw4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    if length(s)==0 || length(c)==0\n        return (s,\
    \ true)\n    end\n    \n    if length(s)==1\n        return (s, true)\n    end\n\
    \    \n    if length(c)==1\n        return (s, false)\n    end\n    \n    if s[end-1]==c[0]\n\
    \        delete!(s, end-1)\n        return (s, true)\n    end\n    \n    if s[end-1]!=c[0]\n\
    \        delete!(s, end-1)\n        return (s, false)\n    end\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvtk_69ff.jl:30\nin expression starting at /tmp/tmpvtk_69ff.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 then return (s, false)\n    if length(s)==1\
    \ then return (s, false)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1..end-1],\
    \ c), true)\nend\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcde\"\
    , \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdef\", \"b\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsx_9008u.jl:15\nin expression starting at /tmp/tmpsx_9008u.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"false\", false)\n\
    \    end\n    if length(s)==1\n        return (\"true\", true)\n    end\n    if\
    \ length(c)==1\n        return (reverse_delete(s, c[1:end-1]), true)\n    end\n\
    \    if s[end]==c[0]\n        return (reverse_delete(s[2:end], c[1:end-1]), true)\n\
    \    end\n    return (reverse_delete(s[2:end], c[1:end-1]), false)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstrjduzz.jl:29\nin expression starting at\
    \ /tmp/tmpstrjduzz.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (\"\", false)\n\
    \    end\n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n\
    \    else\n        return (reverse_delete(s, c[1:]), false)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_155sg3.jl:19\nin expression\
    \ starting at /tmp/tmp2_155sg3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s, c[1:]), false)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"\
    bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\"\
    )\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n\
    </cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n\
    <code language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.3>\nreverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\n\
    reverse_delete(\"abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"\
    abcdedcba\", \"bc\")\n</cell>\n<code language=julia-1.3>\nreverse_delete(\"abcdedcba\"\
    , \"bc\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd6iicojs.jl:15\nin expression starting at /tmp/tmpd6iicojs.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    \n    \n    if length(s) <= length(c) || length(c) <= length(s)\
    \ \n        return (\"false\", false)\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpguhn2upi.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpguhn2upi.jl:1\n\
    in expression starting at /tmp/tmpguhn2upi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    else if\
    \ length(c) > length(s) \n        return (s, true)\n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiau0fbe4.jl:17\nin expression starting at\
    \ /tmp/tmpiau0fbe4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxmcgyguy.jl:15\nin expression starting at /tmp/tmpxmcgyguy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)>1 \n        return (\"false\", false)\n\
    \    else if length(s)>1 && length(c)==1 \n        return (\"false\", false)\n\
    \    else if length(s)>1 && length(c)>1 \n        return (\"false\", false)\n\
    \    else if length(s)==1 && length(c)==1 \n        return (\"true\", true)\n\
    \    else if length(s)==1 && length(c)>1 \n        return (\"true\", true)\n \
    \   else if length(s)>1 && length(c)==1 \n        return (\"true\", true)\n  \
    \  else if length(s)>1 && length(c)>1 \n        return (\"true\", true)\n    else\
    \ if length(s)==0 && length(c)==0 \n        return (\"false\", false)\n    else\
    \ if length(s)==0 && length(c)>0 \n        return (\"false\", false)\n    else\
    \ if length(s)>0 && length(c)==0 \n        return (\"false\", false)\n    else\
    \ if length(s)>0 && length(c)>0 \n        return (\"false\", false)\n    else\
    \ if length(s)==0 && length(c)==0 \n        return (\"true\", true)\n    else\
    \ if length(s)==0 && length(c)>0 \n        return (\"true\", true)\n    else if\
    \ length(s)>0 && length(c)==0 \n        return (\"true\", true)\n    else if length(s)>0\
    \ && length(c)>0 \n        return (\"true\", true)\n    else if length(s)==0 &&\
    \ length(c)==0 \n        return (\"true\", true)\n    else if length(s)==0 &&\
    \ length(c)>0 \n        return (\"true\", true)\n    else if length(s)>0 && length(c)==0\
    \ \n        return (\"true\", true)\n    else if length(s)>0 && length(c)>0 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n\
    \        return (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n \
    \       return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n \
    \       return (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n  \
    \      return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n  \
    \      return (\"true\", true)\n    else if length(s)==0 && length(c)>0 \n   \
    \     return (\"true\", true)\n    else if length(s)==0 && length(c)==0 \n   \
    \     return (\"true\", true)\n    else \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoo7286zu.jl:17\nin expression starting at\
    \ /tmp/tmpoo7286zu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ \n    if s[0]==c[0]\n        return (reverse_delete(s[1:], c[1:]), true)\n \
    \   \n    if s[0]!=c[0]\n        return (reverse_delete(s[1:], c[1:]), false)\n\
    \    \n    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplpolfw4w.jl:19\nin expression\
    \ starting at /tmp/tmplpolfw4w.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, false)\n   \
    \ end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqbkiavvy.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqbkiavvy.jl:1\n\
    in expression starting at /tmp/tmpqbkiavvy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) then return (s, false) else return (reverse_delete(s,\
    \ substring(s, 0, length(c))) , \n    reverse_delete(s, substring(s, length(c),\
    \ length(s)))==reverse(s))\nend\n\"\"\"\n    We are given two strings s and c,\
    \ you have to delete all the characters in s that are equal to any character in\
    \ c\n    then check if the result string is palindrome.\n    A string is called\
    \ palindrome if it reads the same backward as forward.\n    You should return\
    \ a tuple containing the result string and true/false for the check.\n    Example\n\
    \    >>> reverse_delete(\"abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"\
    abcdef\", \"b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\"\
    , \"ab\")\n    (\"cdedc\", true)\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjh4j_jji.jl:15\nin expression starting at /tmp/tmpjh4j_jji.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    if s[length(s)-1]==c[0] \n        return reverse_delete(s[length(s)-2..-1],\
    \ c[1:length(c)])\n    else\n        return reverse_delete(s[length(s)-2..-1],\
    \ c[1:length(c)])\n    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 45\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jckdoga.jl:19\nin expression starting at\
    \ /tmp/tmp7jckdoga.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\",false)\n\
    \    end\n    if length(s) mod length(c)==0 \n        return (\"false\",false)\n\
    \    end\n    if s[end-1]==c[0] \n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    if s[end-1]!=c[0] \n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    return (reverse_delete(s[end-1:end],c[1:end-1]),true)\nend\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvs3t59ps.jl:18\nin expression starting at /tmp/tmpvs3t59ps.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    else return (reverse_delete(s[1:], c), false)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw81zop18.jl:15\nin expression starting at /tmp/tmpw81zop18.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 || length(s)==length(c) || length(c)==0\
    \ \n        then return (s, false)\n    else \n        let (s,r) = reverse_delete(substring(s,1,length(s)-1),substring(c,1,length(c)))\
    \ \n        let (s,r) = reverse_delete(substring(s,1,length(s)-1),substring(c,1,length(c)))\
    \ \n        return (s,r==reverse(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqk73y5x3.jl:16\nin expression starting at /tmp/tmpqk73y5x3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0\n        return (s, true)\n    end\n\
    \    \n    if length(s) >= length(c)\n        deleted = s[length(s)-length(c):length(s)]\
    \ \n        return (deleted, true)\n    else\n        deleted = s[length(s)-length(c)+1:length(s)]\
    \ \n        return (deleted, false)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpju8xdl7o.jl:29

    '
  stdout: "test set: Test Failed at /tmp/tmpju8xdl7o.jl:32\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"cde\", true) == (\"bcd\"\
    , false)\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju8xdl7o.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju8xdl7o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpju8xdl7o.jl:33\n  Expression: candidate(\"abcdef\", \"b\"\
    ) == (\"acdef\", false)\n   Evaluated: (\"ef\", true) == (\"acdef\", false)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju8xdl7o.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju8xdl7o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpju8xdl7o.jl:34\n  Expression: candidate(\"abcdedcba\", \"\
    ab\") == (\"cdedc\", true)\n   Evaluated: (\"cba\", true) == (\"cdedc\", true)\n\
    Stacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju8xdl7o.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju8xdl7o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpju8xdl7o.jl:35\n  Expression: candidate(\"dwik\", \"w\") ==\
    \ (\"dik\", false)\n   Evaluated: (\"ik\", true) == (\"dik\", false)\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpju8xdl7o.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpju8xdl7o.jl:31\ntest set: Error\
    \ During Test at /tmp/tmpju8xdl7o.jl:36\n  Test threw exception\n  Exp"
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    if s[0]==c[0]\n        \n        \n        if reverse_delete(s[1:],\
    \ c[1:]) == (\"false\", false)\n            return (\"true\", true)\n        end\n\
    \        \n    else\n        \n        if reverse_delete(s[1:], c[1:]) == (\"\
    true\", true)\n            return (\"false\", true)\n        end\n    end\n  \
    \  \n    return (\"false\", false)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuy87rluh.jl:23\nin expression\
    \ starting at /tmp/tmpuy87rluh.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 || length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    if length(s) mod length(c)==0 \n        return (\"false\", false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf15ra30f.jl:18\nin expression starting at /tmp/tmpf15ra30f.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpta6slny4.jl:15\nin expression starting at /tmp/tmpta6slny4.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxmcgyguy.jl:15\nin expression starting at /tmp/tmpxmcgyguy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp00ilm68e.jl:15\nin expression starting at /tmp/tmp00ilm68e.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (s, false)\n    \n   \
    \ let (left, right) = partition(s, c)\n    \n    if left == \"\"\n        return\
    \ (right, true)\n    \n    if right == \"\"\n        return (left, true)\n   \
    \ \n    let (left, right) = reverse_delete(left, c)\n    let (left, right) = reverse_delete(right,\
    \ c)\n    \n    return (left + right, left == right)\nend\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nreverse_delete(\"abcdedcba\"\
    , \"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesvjzakr.jl:31\nin expression starting at\
    \ /tmp/tmpesvjzakr.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(s)==0 then return (s, false)\n    if length(c)==0 then\
    \ return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]), true)\n\
    \    return (reverse_delete(s[1:], c[1:]), true)\nend\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcde\", \"ae\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdef\", \"b\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"\
    ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\"\
    )\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n\
    </cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n\
    <code language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code\
    \ language=julia-1.4>\nreverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\n\
    reverse_delete(\"abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"\
    abcdedcba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nreverse_delete(\"abcdedcba\"\
    , \"ab\")\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6xsfg9pb.jl:15\nin expression starting at /tmp/tmp6xsfg9pb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and true/false for the check.\n    Example\n    >>> reverse_delete(\"\
    abcde\", \"ae\")\n    (\"bcd\", false)\n    >>> reverse_delete(\"abcdef\", \"\
    b\")\n    (\"acdef\", false)\n    >>> reverse_delete(\"abcdedcba\", \"ab\")\n\
    \    (\"cdedc\", true)\n    \"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String,\
    \ Bool} \n    if length(c) < length(s) \n        return (\"false\", false)\n \
    \   else if length(c) == length(s) \n        if c == reverse(s) \n           \
    \ return (\"true\", true)\n        else \n            return (\"false\", false)\n\
    \    else \n        return (reverse_delete(substring(s, 0, length(c)), c), reverse_delete(substring(s,\
    \ length(c)), c))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38lda46d.jl:17\nin expression starting at\
    \ /tmp/tmp38lda46d.jl:17\n"
  stdout: ''
