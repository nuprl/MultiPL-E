language: jl
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value = min(arr)\n        smallest_index = find(arr\
    \ == smallest_value)[1]\n    end\n    \n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (i.e., the in-order traversal of its nodes' values.)\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzma3cz0.jl:46\nin expression starting at\
    \ /tmp/tmpbzma3cz0.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [ smallest_value, smallest_index ]\n    end\nend\n</cell>\n<text>\nProblem 7\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ that has value x. \nIf such node doesn't exist, return nil.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf4xr74o.jl:44\nin expression starting at\
    \ /tmp/tmpuf4xr74o.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            elseif node.value == smalest_value\n   \
    \             if node.index < smallest_index\n                    smallest_index\
    \ = node\n            end\n        end\n    end\n    \n    if smalest_value ==\
    \ 0\n        return Vector{Int64}[]\n    else\n        return [ smalest_value,\
    \ smallest_index ]\n    end\nend\n</cell>\n<code language=julia-1.5>\n# === Problem\
    \ 52 === #\n\"\"\"\n    Given a binary tree and a sum, determine if the tree has\
    \ a root-to-leaf path such that adding up all the values along the path equals\
    \ the given sum.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8zn9pag.jl:57\nin expression starting at\
    \ /tmp/tmpb8zn9pag.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = minimum(arr)\
    \ \n    smalest_index = findfirst(x -> x % 2 == 0, arr) \n    \n    if smalest_index\
    \ == -1 \n        return [] \n    \n    smalest_value % 2 == 0 ? \n        smalest_value\
    \ : smalest_index\n    \nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree\
    \ and a number x, your task is to find the node in the tree with value x.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkxwb1cd.jl:48\nin expression starting at\
    \ /tmp/tmpqkxwb1cd.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if arr.length == 0\n        return Vector{Int64}()\n    end\n  \
    \  \n    smalest_value = arr[1]\n    smalest_index = 1\n    \n    for node in\
    \ arr[2 : end]\n        if node % 2 == 0\n            if node < smalest_value\n\
    \                smalest_value = node\n                smalest_index = 2\n   \
    \         else\n                if node < smalest_value\n                    smalest_value\
    \ = node\n                    smalest_index = 2\n                else\n      \
    \              if node < smalest_value\n                        smalest_value\
    \ = node\n                        smalest_index = 1\n                    end\n\
    \                end\n            end\n        end\n    end\n    \n    return\
    \ Vector{Int64}([smalest_value, smalest_index])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpljuizu.jl:64\nin expression starting at\
    \ /tmp/tmpxpljuizu.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpex13h2ag.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpex13h2ag.jl:1\n\
    in expression starting at /tmp/tmpex13h2ag.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    \n    smalest_value\
    \ = arr[1]\n    smalest_index = 1\n    \n    for node in arr[2 : end]\n      \
    \  if node % 2 == 0\n            if node < smalest_value\n                smalest_value\
    \ = node\n                smalest_index = 2\n            else\n              \
    \  if node < smalest_value\n                    smalest_value = node\n       \
    \             smalest_index = 1\n                end\n            end\n      \
    \  else\n            if node < smalest_value\n                smalest_value =\
    \ node\n                smalest_index = 1\n            end\n        end\n    end\n\
    \    \n    return [smalest_value, smalest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    pick(arr::Vector{Int64})::Vector{Int64}\n    Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n    your task is to\
    \ pluck one of the nodes and return it.\n    The plucked node should be the node\
    \ with the smallest odd value.\n    If multiple nodes with the same smallest odd\
    \ value are found return the node that has smallest index.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb5e5qqt.jl:62\nin expression starting at\
    \ /tmp/tmpsb5e5qqt.jl:62\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = find(even_values == smallest_even_value)\n\
    \    smallest_value = arr[smallest_even_index]\n    smallest_index = smallest_even_index\n\
    \    \n    if smallest_even_index == length(arr)\n        return []\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfplj6cd3.jl:47\nin expression starting at\
    \ /tmp/tmpfplj6cd3.jl:47\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpy96tvzsh.jl:45\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)
    at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,
    !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n    min(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpy96tvzsh.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpy96tvzsh.jl:45 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpy96tvzsh.jl:44\ntest set: Error During Test at
    /tmp/tmpy96tvzsh.jl:46\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n  Closest
    candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,
    !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n    min(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpy96tvzsh.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpy96tvzsh.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpy96tvzsh.jl:44\ntest set: Error During Test at
    /tmp/tmpy96tvzsh.jl:47\n  Test threw exception\n  Expression: c'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = index(even_values, smallest_value)\n        return Vector{Int64}([smallest_value,\
    \ smallest_index])\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree\
    \ and a number x, your task is to find the node in the tree that has value x.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrytzqnz.jl:44\nin expression starting at\
    \ /tmp/tmpsrytzqnz.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n  \
    \  else\n        return Vector{Int64}[smallest_value, smallest_index]\n    end\n\
    end\n</cell>\n<text>\nProblem 4\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (i.e., the in-order traversal of its nodes' values.)\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxtr1_be.jl:54\nin expression starting at\
    \ /tmp/tmpwxtr1_be.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    \n    \n    return Vector{Int64}([smallest_value, smallest_index])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpvufwn1lk.jl:55

    '
  stdout: "test set: Test Failed at /tmp/tmpvufwn1lk.jl:58\n  Expression: candidate([4,\
    \ 2, 3]) == [2, 1]\n   Evaluated: [2, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvufwn1lk.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvufwn1lk.jl:57\ntest set: Test\
    \ Failed at /tmp/tmpvufwn1lk.jl:62\n  Expression: candidate([1, 2, 3, 0, 5, 3])\
    \ == [0, 3]\n   Evaluated: [0, 2] == [0, 3]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvufwn1lk.jl:62 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvufwn1lk.jl:57\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    end\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaif2_0f_.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaif2_0f_.jl:1\n\
    in expression starting at /tmp/tmpaif2_0f_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_value == 0\n        return []\n    end\n\
    \    \n    return [smallest_value, smallest_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp3w6eyoqe.jl:56

    '
  stdout: "test set: Error During Test at /tmp/tmp3w6eyoqe.jl:59\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3w6eyoqe.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3w6eyoqe.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3w6eyoqe.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp3w6eyoqe.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp3w6eyoqe.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3w6eyoqe.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3w6eyoqe.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp3w6eyoqe.jl:61\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp3w6eyoqe.jl:36\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3w6eyoqe.jl:61 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3w6eyoqe.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp3w6eyoqe.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, "
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    return smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem 4\n\
    Given a binary tree, return the level order traversal of its nodes' values. (i.e.,\
    \ the in-order traversal of its nodes' values.)\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6alvfmj5.jl:47\nin expression starting at\
    \ /tmp/tmp6alvfmj5.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            else\n     \
    \           if smallest_index > 1\n                    return smallest_value,\
    \ smallest_index\n                else\n                    return smallest_value,\
    \ smallest_index\n                end\n            end\n        end\n    end\n\
    \    return smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimckika7.jl:55\nin expression starting at\
    \ /tmp/tmpimckika7.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 8\nGiven a vector arr of positive\
    \ integers, return a new vector that is the reverse of arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5llvqzbu.jl:40\nin expression starting at\
    \ /tmp/tmp5llvqzbu.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nSolution\nLet's see how this solution\
    \ works:\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbh0v66hl.jl:40\nin expression starting at\
    \ /tmp/tmpbh0v66hl.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi99jzhj6.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpi99jzhj6.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi99jzhj6.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi99jzhj6.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi99jzhj6.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi99jzhj6.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi99jzhj6.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi99jzhj6.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi99jzhj6.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi99jzhj6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if arr.length == 0 || arr.length == 1 && arr[0] == 0 \n        return\
    \ [] \n    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp982iyo99.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp982iyo99.jl:1\n\
    in expression starting at /tmp/tmp982iyo99.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    \n    if\
    \ smallest_index == -1 || length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_34c5u3.jl:45\nin expression starting at\
    \ /tmp/tmpr_34c5u3.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value = arr[1]\n    smallest_index = 1\n    \n    for node\
    \ in arr[2:end]\n        if node % 2 == 0\n            if smallest_value < node\n\
    \                smallest_value = node\n                smallest_index = smallest_index\
    \ + 1\n            else\n                smallest_value = smallest_value\n   \
    \             smallest_index = smallest_index\n            end\n        end\n\
    \    end\n    \n    if smallest_value == 0\n        smallest_index = 1\n    end\n\
    \    \n    return [ smallest_value, smallest_index ]\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a vector of integers and returns the sum of the\
    \ even values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jug8gl5.jl:57\nin expression starting at\
    \ /tmp/tmp4jug8gl5.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n    for node\
    \ in arr[2:end]\n        if node.value % 2 == 0\n            smalest_value = node.value\n\
    \            smalest_index = smalest_index + 1\n        end\n    end\n    return\
    \ smalest_value, smalest_index\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp6xuqufy2.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmp6xuqufy2.jl:50\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp6xuqufy2.jl:38\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6xuqufy2.jl:50 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6xuqufy2.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp6xuqufy2.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp6xuqufy2.jl:38\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6xuqufy2.jl:51 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6xuqufy2.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp6xuqufy2.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp6xuqufy2.jl:35\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6xuqufy2.jl:52 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6xuqufy2.jl:49\ntest set:\
    \ Error During Test at /tmp/tmp6xuqufy2.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, "
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 4\nGiven a binary tree and a number x, return the number of nodes in the\
    \ tree that have value x. \nThe tree is guaranteed to have only non-negative integer\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiny84mnz.jl:45\nin expression starting at\
    \ /tmp/tmpiny84mnz.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smalest_value = min(even_values)\n\
    \    smalest_index = find(even_values == smalest_value)[1]\n    \n    if smalest_index\
    \ == 0 \n        smalest_index = 1\n    end\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9k99gqt.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo9k99gqt.jl:1\n\
    in expression starting at /tmp/tmpo9k99gqt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        end\n    end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n\
    \    end\n    \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n\
    </cell>\n<text>\nProblem 3\nGiven a vector representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest odd value.\nIf multiple\
    \ nodes with the same smallest odd value are found return the node that has smallest\
    \ index.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo35retos.jl:52\nin expression starting at\
    \ /tmp/tmpo35retos.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value = arr[1]\n    smallest_index = 1\n    \n    for node\
    \ in arr[2:end]\n        if node % 2 == 0\n            if smallest_value < node\n\
    \                smallest_value = node\n                smallest_index = smallest_index\
    \ + 1\n            end\n        end\n    end\n    \n    if smallest_index == 1\n\
    \        smallest_value = arr[1]\n        smallest_index = 1\n    end\n    \n\
    \    return smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0666b_y.jl:55\nin expression starting at\
    \ /tmp/tmpl0666b_y.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_value == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    return Vector{Int64}([smallest_value, smallest_index])\nend\n\
    </cell>\n<code language=julia-1.5>\n# Your code here\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree and a number x, your task is to find the node in the\
    \ tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8ds7j51.jl:54\nin expression starting at\
    \ /tmp/tmpt8ds7j51.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            end\n        end\n    end\n    \n    if\
    \ smalest_value == 0\n        return Vector{Int64}()\n    end\n    \n    return\
    \ [ smalest_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function with the cases above.\n@test pluck([4, 2, 3]) == [2, 1]\n\
    @test pluck([1, 2, 3]) == [2, 1]\n@test pluck([]) == []\n@test pluck([5, 0, 3,\
    \ 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.5 Pluck Elements\nGiven a vector arr\
    \ of positive integers, pluck out all elements that appear more than once.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxhyu7eh.jl:54\nin expression starting at\
    \ /tmp/tmprxhyu7eh.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = even_values.index(smallest_even_value)\n\
    \    return smallest_even_value,smallest_even_index\nend\n</cell>\n<text>\nProblem\
    \ 7\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4sybey5g.jl:40\nin expression starting at\
    \ /tmp/tmp4sybey5g.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    \n    smalest_value = minimum(even_values)\n\
    \    smalest_index = findfirst(x -> x == smalest_value, even_values)\n    \n \
    \   return smalest_value, smalest_index\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree and a number k, find the kth smallest element in it.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bf3ydwh.jl:44\nin expression starting at\
    \ /tmp/tmp0bf3ydwh.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    for node in arr\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_value\n            elseif node.value\
    \ == smallest_value\n                smallest_index = smallest_value\n       \
    \     end\n        end\n    end\n    smalest_value = smallest_value\n    smallest_index\
    \ = smallest_index\n    return [ smalest_value, smallest_index ]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpylcv8583.jl:54

    '
  stdout: "test set: Error During Test at /tmp/tmpylcv8583.jl:57\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpylcv8583.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpylcv8583.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpylcv8583.jl:56\ntest set:\
    \ Error During Test at /tmp/tmpylcv8583.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpylcv8583.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpylcv8583.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpylcv8583.jl:56\ntest set:\
    \ Test Failed at /tmp/tmpylcv8583.jl:59\n  Expression: candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([])\n   Evaluated: [0, 0] == Int64[]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpylcv8583.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpylcv8583.jl:56\ntest set: Error\
    \ During Test at /tmp/tmpylcv8583.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  type Int64 has no field value\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpylcv8583.jl:39\n   [3] macro ex"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi99jzhj6.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpi99jzhj6.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi99jzhj6.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi99jzhj6.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi99jzhj6.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi99jzhj6.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi99jzhj6.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi99jzhj6.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi99jzhj6.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi99jzhj6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        index = find(x -> x == smallest_value, even_values)\n        return [smallest_value,\
    \ index]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmppcoob8xu.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmppcoob8xu.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmppcoob8xu.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppcoob8xu.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppcoob8xu.jl:48\ntest set:\
    \ Error During Test at /tmp/tmppcoob8xu.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmppcoob8xu.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppcoob8xu.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppcoob8xu.jl:48\ntest set:\
    \ Error During Test at /tmp/tmppcoob8xu.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  Met"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1] \n    \n    smallest_index = 1 \n    \n    for index in 2:length(arr)\
    \ \n        if arr[index] % 2 == 0 \n            smalest_value = arr[index] \n\
    \            smallest_index = index \n            break \n        end \n    end\
    \ \n    \n    if smalest_value == 0 \n        return [] \n    end \n    \n   \
    \ arr[1] = smalest_value \n    \n    return arr[1:smallest_index+1] \nend \n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of nodes in a binary\
    \ tree with non-negative integer nodes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphw676fnb.jl:59\nin expression starting at\
    \ /tmp/tmphw676fnb.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n  \
    \  end\n    \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n\
    </cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp951oh976.jl:54\nin expression starting at\
    \ /tmp/tmp951oh976.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            end\n        end\n    end\n    \n    if\
    \ smalest_value == 0\n        return Vector{Int64}()\n    end\n    \n    return\
    \ Vector{Int64}([smalest_value, smallest_index])\nend\n</cell>\n<text>\nProblem\
    \ 8\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgtldfgfe.jl:54\nin expression starting at\
    \ /tmp/tmpgtldfgfe.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1]\n    smalest_index = 1\n    \n    for node in arr[2:end] \n       \
    \ if node % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n        else \n            if node < smalest_value \n\
    \                smalest_value = node \n                smalest_index = 1 \n \
    \           else \n                smalest_index += 1\n            \n    end\n\
    \    \n    return [ smalest_value, smalest_index ]\nend\n</cell>\n<text>\nProblem\
    \ 4\nGiven a binary tree and a number x, return all nodes in the tree that are\
    \ less than or equal to x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp643unxfn.jl:44 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp643unxfn.jl:49\n\
    in expression starting at /tmp/tmp643unxfn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if arr.length == 0\n        return Vector{Int64}()\n    end\n  \
    \  \n    smalest_value = arr[1]\n    smallest_index = 1\n    \n    for node in\
    \ arr[2:end]\n        if node % 2 == 0\n            if node < smalest_value\n\
    \                smalest_value = node\n                smallest_index = smallest_index\
    \ + 1\n            else\n                smallest_index = smallest_index + 1\n\
    \            end\n        end\n    end\n    \n    return Vector{Int64}([smalest_value,\
    \ smallest_index])\nend\n</cell>\n<code language=julia-1.5>\n# Test your code\n\
    @test pluck([4, 2, 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([])\
    \ == []\n@test pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Plucking\
    \ from a dictionary\nGiven a dictionary that has non-negative integer keys and\
    \ non-negative integer values,\nyour task is to pluck one of the keys and return\
    \ its value.\nThe plucked key should be the key with the smallest even value.\n\
    If multiple keys with the same smallest even value are found return the key that\
    \ has smallest index.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph59gnish.jl:56\nin expression starting at\
    \ /tmp/tmph59gnish.jl:56\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpy96tvzsh.jl:45\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method
    matching min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)
    at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,
    !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n    min(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpy96tvzsh.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpy96tvzsh.jl:45 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpy96tvzsh.jl:44\ntest set: Error During Test at
    /tmp/tmpy96tvzsh.jl:46\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n  Closest
    candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,
    !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n    min(::Any,
    !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpy96tvzsh.jl:36\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpy96tvzsh.jl:46 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpy96tvzsh.jl:44\ntest set: Error During Test at
    /tmp/tmpy96tvzsh.jl:47\n  Test threw exception\n  Expression: c'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    end\n \
    \   \n    smallest_value = arr[end]\n    smallest_index = 0\n    smallest_even_value\
    \ = arr[end]\n    smallest_even_index = 0\n    \n    for node in arr[end-1:end]\n\
    \        if node % 2 == 0\n            if smallest_even_value < node\n       \
    \         smallest_even_value = node\n                smallest_even_index = smallest_index\n\
    \            else\n                smallest_even_value = smallest_value\n    \
    \            smallest_even_index = smallest_index\n            end\n        else\n\
    \            if smallest_value < node\n                smallest_value = node\n\
    \                smallest_index = smallest_index\n            else\n         \
    \       smallest_value = smallest_value\n                smallest_index = smallest_index\n\
    \            end\n        end\n    end\n    \n    if smallest_even_value == smallest_value\n\
    \        return smallest_even_index\n    else\n        return smallest_value\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2udkx21s.jl:70\nin expression starting at\
    \ /tmp/tmp2udkx21s.jl:70\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68gxaxys.jl:45\nin expression starting at\
    \ /tmp/tmp68gxaxys.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value = arr[1]\n    smallest_index = 1\n    \n    for node\
    \ in arr[2 : end]\n        if node.value % 2 == 0\n            if smallest_value\
    \ < node.value\n                smallest_value = node.value\n                smallest_index\
    \ = node\n            end\n        end\n    end\n    \n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 3\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5z7mhs5d.jl:50\nin expression starting at\
    \ /tmp/tmp5z7mhs5d.jl:50\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        end\n    end\n    \n    return smallest_value, smallest_index\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpkla035y5.jl:53\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Tuple{Int64, Int64} to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpkla035y5.jl:46\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpkla035y5.jl:53 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpkla035y5.jl:52\ntest set: Error During Test at
    /tmp/tmpkla035y5.jl:54\n  Test threw exception\n  Expression: candidate([1, 2,
    3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Tuple{Int64,
    Int64} to an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpkla035y5.jl:46\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = minimum(arr)\
    \ \n    smalest_index = find(arr == smalest_value) \n    \n    if smalest_index\
    \ == -1 \n        return [] \n    \n    smalest_value = arr[smalest_index] \n\
    \    \n    smalest_index = smalest_index - 1 \n    \n    arr[smalest_index] =\
    \ 0 \n    \n    return smalest_value, smalest_index\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct8i52fx.jl:1\nin expression starting at /tmp/tmpct8i52fx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        end\n    end\n    \n    if smallest_value == 0\n        return []\n \
    \   else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 7\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpop691dbq.jl:52\nin expression starting at\
    \ /tmp/tmpop691dbq.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = findall(x -> x % 2 == 0, arr)\n    if isempty(even_values)\
    \ || length(arr) == 0 \n        return [] \n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9qymzqaf.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9qymzqaf.jl:1\n\
    in expression starting at /tmp/tmp9qymzqaf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x->x==smallest_value, even_values)\n     \
    \   return Vector{Int64}[smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19h0a1_2.jl:44\nin expression starting at\
    \ /tmp/tmp19h0a1_2.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 4\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgylzg14.jl:40\nin expression starting at\
    \ /tmp/tmpmgylzg14.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = node\n            else\n                smallest_value\
    \ = node.value\n                smallest_index = node\n            end\n     \
    \   end\n    end\n    \n    if smallest_value == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    return smallest_value, smallest_index\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3zdsdf3.jl:57\nin expression starting at\
    \ /tmp/tmpl3zdsdf3.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n  \
    \  \n    for node in arr[2:end]\n        if node % 2 == 0\n            if node\
    \ < smalest_value\n                smalest_value = node\n                smalest_index\
    \ = smalest_index + 1\n            else\n                if node < smalest_value\n\
    \                    smalest_value = node\n                    smalest_index =\
    \ smalest_index + 1\n                end\n            end\n        end\n    end\n\
    \    \n    if smalest_value == 0\n        return []\n    else\n        return\
    \ [smalest_value, smalest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree, return the level order traversal of its nodes' values.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurgktnat.jl:59\nin expression starting at\
    \ /tmp/tmpurgktnat.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n    \n  \
    \  for node in arr[2 : end]\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smalest_index = smalest_index + 1\n            end\n        end\n    end\n\
    \    \n    if smalest_value == 0\n        return []\n    end\n    \n    return\
    \ [smalest_value, smalest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpg0yyby9v.jl:55

    '
  stdout: "test set: Error During Test at /tmp/tmpg0yyby9v.jl:58\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpg0yyby9v.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg0yyby9v.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg0yyby9v.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpg0yyby9v.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpg0yyby9v.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg0yyby9v.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg0yyby9v.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpg0yyby9v.jl:60\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpg0yyby9v.jl:35\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg0yyby9v.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg0yyby9v.jl:57\ntest set:\
    \ Error During Test at /tmp/tmpg0yyby9v.jl:61\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, "
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1] \n    smalest_index = 1\n    \n    for node in arr[2:end] \n      \
    \  if node % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     if node < smalest_value \n                    smalest_value = node \n  \
    \                  smalest_index = 2 \n                end \n            end \n\
    \        else \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 3 \n            end \n        end \n\
    \    end \n    \n    return [ smalest_value, smalest_index ] \nend \n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw02qzagx.jl:63\nin expression starting at\
    \ /tmp/tmpw02qzagx.jl:63\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for node in arr[2 : end] \n        if node %\
    \ 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n        end \n    end \n    \n    return [ smalest_value,\
    \ smalest_index ]\nend \nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96ndmg1d.jl:1\nin expression starting at /tmp/tmp96ndmg1d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm68umfka.jl:44\nin expression starting at\
    \ /tmp/tmpm68umfka.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1] \n    smalest_index = 1\n    \n    for node in arr[2:end] \n      \
    \  if node % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n        end \n    end \n    \n    return [smalest_value,\
    \ smalest_index] \nend \n</cell>\n<text>\nProblem 4\nGiven a binary tree and a\
    \ number x, your task is to find the node in the tree with the value closest to\
    \ x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz11a55rb.jl:54\nin expression starting at\
    \ /tmp/tmpz11a55rb.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1\n        return Vector{Int64}()\n    else\n        return Vector{Int64}(smallest_value,\
    \ smallest_index)\n    end\nend\n</cell>\n<text>\nProblem 7\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9yvlra32.jl:44\nin expression starting at\
    \ /tmp/tmp9yvlra32.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for node in arr[2 : end]\n        if node %\
    \ 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            elseif node > smalest_value\
    \ \n                smalest_value = node \n                smalest_index = 2 \n\
    \            elseif node == smalest_value \n                smalest_index += 1\n\
    \            end\n        end\n    end\n    \n    return [ smalest_value, smalest_index\
    \ ]\nend\n</cell>\n<text>\nProblem 7\nGiven a vector arr of positive integers,\
    \ return the sum of the numbers in the array.\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaad0vzcg.jl:57\nin expression starting at\
    \ /tmp/tmpaad0vzcg.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == length(arr)\n        return Vector{Int64}()\n    else\n        return Vector{Int64}([smallest_value,\
    \ smallest_index])\n    end\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree,\
    \ return the level order traversal of its nodes' values. (ie, from left to right,\
    \ level by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklbcoqtx.jl:45\nin expression starting at\
    \ /tmp/tmpklbcoqtx.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_index == 1\n        smallest_index\n  \
    \  else\n        smallest_index\n    end\nend\n</cell>\n<text>\nProblem 4\nGiven\
    \ a binary tree, return the level order traversal of its nodes' values. (i.e.,\
    \ the in-order traversal of its nodes' values.)\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxz9dvepd.jl:54\nin expression starting at\
    \ /tmp/tmpxz9dvepd.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ivhu5fh.jl:45\nin expression starting at\
    \ /tmp/tmp7ivhu5fh.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = 1\n        elseif node\
    \ == smallest_value\n            smallest_index += 1\n        end\n    end\n \
    \   \n    return smallest_value, smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7h3_5sth.jl:50\nin expression starting at\
    \ /tmp/tmp7h3_5sth.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n\
    \    end\n    \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n\
    </cell>\n<text>\nProblem 7\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3x9c4ft0.jl:54\nin expression starting at\
    \ /tmp/tmp3x9c4ft0.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    else\n        return smallest_value, smallest_index\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmptfpnyvac.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmptfpnyvac.jl:50\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmptfpnyvac.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfpnyvac.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfpnyvac.jl:49\ntest set:\
    \ Error During Test at /tmp/tmptfpnyvac.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmptfpnyvac.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfpnyvac.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfpnyvac.jl:49\ntest set:\
    \ Error During Test at /tmp/tmptfpnyvac.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n    \n  \
    \  for node in arr[2:end]\n        if node.value % 2 == 0\n            smalest_value\
    \ = node.value\n            smalest_index = smalest_index + 1\n        end\n \
    \   end\n    \n    if smalest_index == 1\n        return smalest_value, smalest_index\n\
    \    else\n        return smalest_value, smalest_index\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpl8k4hlz6.jl:53

    '
  stdout: "test set: Error During Test at /tmp/tmpl8k4hlz6.jl:56\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpl8k4hlz6.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl8k4hlz6.jl:56 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl8k4hlz6.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpl8k4hlz6.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpl8k4hlz6.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl8k4hlz6.jl:57 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl8k4hlz6.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpl8k4hlz6.jl:58\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpl8k4hlz6.jl:35\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpl8k4hlz6.jl:58 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpl8k4hlz6.jl:55\ntest set:\
    \ Error During Test at /tmp/tmpl8k4hlz6.jl:59\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, "
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    for node\
    \ in arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smallest_index =\
    \ node.index\n            end\n        end\n    end\n    if smalest_value == 0\n\
    \        return Vector{Int64}[]\n    end\n    return Vector{Int64}[smalest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpva_hvgap.jl:50\nin expression starting at\
    \ /tmp/tmpva_hvgap.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    \n    return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree and a number x, your task is to find the\
    \ node in the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpge9k19dv.jl:52\nin expression starting at\
    \ /tmp/tmpge9k19dv.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    for node\
    \ in arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smallest_index =\
    \ node\n            else\n                if node.value < smallest_index\n   \
    \                 smallest_index = node.value\n                end\n         \
    \   end\n        end\n    end\n    return smallest_index\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the levels of the tree in order from top\
    \ to bottom.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hn2br63.jl:51\nin expression starting at\
    \ /tmp/tmp4hn2br63.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ivhu5fh.jl:45\nin expression starting at\
    \ /tmp/tmp7ivhu5fh.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smalest_index = -1\n    \n    for node in\
    \ arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smalest_index = node\n\
    \            end\n        end\n    end\n    \n    if smalest_value == 0\n    \
    \    return Vector{Int64}[]\n    end\n    \n    return smalest_index, smalest_value\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (i.e., the in-order traversal of its nodes' values.)\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48_68eup.jl:53\nin expression starting at\
    \ /tmp/tmp48_68eup.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_index == 1\n        smallest_index\n  \
    \  else\n        smallest_value\n    end\nend\n</cell>\n<text>\nProblem 4\nGiven\
    \ a binary tree, return the level order traversal of its nodes' values.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrw0hlht.jl:54\nin expression starting at\
    \ /tmp/tmpzrw0hlht.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 \n        return [] \n    \n    even_values = filter(x\
    \ -> x % 2 == 0, arr) \n    \n    if even_values.length == 0 \n        return\
    \ [] \n    \n    smalest_value = min(even_values) \n    \n    smallest_index =\
    \ findfirst(x -> x == smalest_value, even_values) \n    \n    return [smalest_value,\
    \ smallest_index] \nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplidjh4gh.jl:1\nin expression starting at /tmp/tmplidjh4gh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = arr[1]\n    smalest_index = 1\n    \n    for node\
    \ in arr[2:end]\n        if node % 2 == 0\n            if node < smalest_value\n\
    \                smalest_value = node\n                smalest_index = index\n\
    \            end\n        end\n    end\n    \n    if smalest_value == 0\n    \
    \    smalest_index\n    else\n        smalest_value, smalest_index\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a number x, your task\
    \ is to find the node in the tree with the value closest to x.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1z8a4v6.jl:54\nin expression starting at\
    \ /tmp/tmpp1z8a4v6.jl:54\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = minimum(arr)\n    smalest_index = findfirst(x -> x % 2\
    \ == 0, arr)\n    if smalest_index == -1 || smalest_value == 0\n        return\
    \ [] \n    else\n        return [smalest_value, smalest_index]\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpyvkatacu.jl:49\n  Expression: candidate([1,
    2, 3]) == [2, 1]\n   Evaluated: [1, 2] == [2, 1]\nStacktrace:\n [1] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n
    [2] macro expansion\n   @ /tmp/tmpyvkatacu.jl:49 [inlined]\n [3] macro expansion\n   @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n
    [4] top-level scope\n   @ /tmp/tmpyvkatacu.jl:47\ntest set: Error During Test
    at /tmp/tmpyvkatacu.jl:50\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))
    == Vector{Int64}([])\n  ArgumentError: reducing over an empty collection is not
    allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n    [2]
    reduce_empty(op::Function, #unused#::Type{Int64})\n      @ Base ./reduce.jl:311\n    [3]
    mapreduce_empty(#unused#::typeof(identity), op::Function, T::Type)\n      @ Base
    ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity), typeof(min)},
    #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5] reduce_empty_iter\n      @
    ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function, op::Function,
    itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n    [7]
    _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n      @
    ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322
    [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11] #_minimum#753\n      @
    ./reducedim.jl:894 [inlined]\n   [12] _minimum\n      @ ./reducedim.jl:894 [inlined]\n   [13]
    #_minimum#752\n      @ ./reducedim.jl:893 [inlined]\n   [14] _minimum\n      @
    ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n      @ ./reducedim.jl:889
    [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889 [inlined]\n   [17] pluck(arr::Vector{Int64})\n      @
    Main /tmp/tmpyvkatacu.jl:35\n   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inl'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    smallest_even_value::Int64\
    \ = arr[1]\n    smallest_even_index::Int64 = 1\n    for node in arr[2 : end]\n\
    \        if node.value % 2 == 0\n            if smallest_even_value < node.value\n\
    \                smallest_even_value = node.value\n                smallest_even_index\
    \ = smallest_index\n            end\n            smallest_value = node.value\n\
    \            smallest_index = smallest_index + 1\n        else\n            if\
    \ smallest_even_value == node.value\n                smallest_even_value = node.value\n\
    \                smallest_even_index = smallest_index\n            end\n     \
    \   end\n    end\n    if smallest_even_value == smallest_value\n        smallest_even_index\
    \ = smallest_index\n    end\n    return smallest_even_index\nend\n</cell>\n<text>\n\
    Problem 4\nGiven a binary tree and a number x, return True if and only if there\
    \ exists a node in the tree such that its value is less than or equal to x. Otherwise,\
    \ return False.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptbb_70as.jl:59\nin expression starting at\
    \ /tmp/tmptbb_70as.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if smallest_index\
    \ == -1\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 4\nGiven a binary tree\
    \ and a node value, swap the node value with the node value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjinjarg.jl:45\nin expression starting at\
    \ /tmp/tmpnjinjarg.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    end\n    \n    smallest_even_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_even_value, even_values)\n    \n\
    \    \n    \n    return smallest_even_value, smallest_index\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (i.e., the in-order traversal of its nodes' values.)\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc00t87te.jl:48\nin expression starting at\
    \ /tmp/tmpc00t87te.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node % 2 == 0\n            if smallest_value\
    \ % 2 == 0\n                smallest_value = node\n                smallest_index\
    \ = smallest_index + 1\n            else\n                if smallest_value <\
    \ node\n                    smallest_value = node\n                    smallest_index\
    \ = smallest_index + 1\n                end\n            end\n        end\n  \
    \  end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n   \
    \ end\n    \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    pick(arr::Vector{Int64})::Vector{Int64}\n\
    \    \n    Your task is to pluck one of the nodes and return it.\n    The plucked\
    \ node should be the node with the smallest odd value.\n    If multiple nodes\
    \ with the same smallest odd value are found return the node that has smallest\
    \ index.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zoup_71.jl:59\nin expression starting at\
    \ /tmp/tmp9zoup_71.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1z6k8ry4.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1z6k8ry4.jl:1\n\
    in expression starting at /tmp/tmp1z6k8ry4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    smallest_even_value::Int64\
    \ = smallest_value/2\n    \n    for node in arr[2:end]\n        if node == smallest_even_value\n\
    \            smallest_value = node\n            smallest_index = smallest_index\
    \ + 1\n        elseif node < smallest_even_value\n            smallest_even_value\
    \ = node\n            smallest_index = smallest_index\n        end\n    end\n\
    \    \n    if smallest_index == 1\n        return smallest_value\n    else\n \
    \       return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1b8vsxm.jl:55\nin expression starting at\
    \ /tmp/tmpx1b8vsxm.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert pluck([4, 2, 3]) == [2, 1]\n@assert pluck([1, 2,\
    \ 3]) == [2, 1]\n@assert pluck([]) == []\n@assert pluck([5, 0, 3, 0, 4, 2]) ==\
    \ [0, 1]\n</cell>\n<text>\n4.3 Plucking from a vector of strings\nGiven a vector\
    \ representing a branch of a tree that has non-negative integer nodes\nyour task\
    \ is to pluck one of the nodes and return it.\nThe plucked node should be the\
    \ node with the smallest even value.\nIf multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cenago_.jl:46\nin expression starting at\
    \ /tmp/tmp9cenago_.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    if smallest_index == nothing\n        return Vector{Int64}()\n    end\n \
    \   \n    return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpldvmgl58.jl:51\nin expression starting at\
    \ /tmp/tmpldvmgl58.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length==0 || arr.length==1\n        return arr\n    \n    even_values\
    \ = arr.filter(x -> x%2==0)\n    \n    if even_values.length==0\n        return\
    \ arr\n    \n    smallest_value = even_values[minimum(even_values)]\n    smallest_index\
    \ = minimum(arr.map(x -> arr.index(x)))\n    \n    return smallest_value, smallest_index\n\
    end\n</cell>\n<code language=julia-1.5>\n# === Problem 2 === #\n\"\"\"\n    Given\
    \ a binary tree and a sum, determine if the tree has a root\n    such that adding\
    \ up all the values below the root results in a given sum.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwynfw7b.jl:48\nin expression starting at\
    \ /tmp/tmpxwynfw7b.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\
    \ \n    smalest_index = 1\n    \n    for node in arr[2:end] \n        if node\
    \ % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n        end \n    end \n    \n    return [ smalest_value,\
    \ smalest_index ]\nend \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq88ldcod.jl:53\nin expression starting at\
    \ /tmp/tmpq88ldcod.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0\n        return Vector{Int64}()\n    \n    smalest_value\
    \ = arr[1]\n    smalest_index = 1\n    \n    for node in arr[2:end]\n        if\
    \ node % 2 == 0\n            if node < smalest_value\n                smalest_value\
    \ = node\n                smalest_index = index\n            end\n        end\n\
    \    end\n    \n    return Vector{Int64}([smalest_value, smalest_index])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpacb6ff2q.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpacb6ff2q.jl:1\n\
    in expression starting at /tmp/tmpacb6ff2q.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            else\n     \
    \           if node.value < smallest_value\n                    smallest_value\
    \ = node.value\n                    smallest_index = smallest_index + 1\n    \
    \            end\n            end\n        end\n    end\n    \n    if smallest_value\
    \ == 0\n        return Vector{Int64}[]\n    end\n    \n    return Vector{Int64}[smallest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpvl6cy6.jl:59\nin expression starting at\
    \ /tmp/tmpvpvl6cy6.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return [] \n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfwvgzbru.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfwvgzbru.jl:1\n\
    in expression starting at /tmp/tmpfwvgzbru.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smalest_index = Int64(0)\n    smalest_index\
    \ = 0\n    smalest_value = arr[1]\n    \n    for node in arr\n        if node\
    \ % 2 == 0\n            if smalest_value < node\n                smalest_value\
    \ = node\n                smalest_index = smalest_index + 1\n            end\n\
    \        else\n            if smalest_value == node\n                smalest_index\
    \ = smalest_index + 1\n            end\n        end\n    end\n    \n    if smalest_index\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    return Vector{Int64}([smalest_value,\
    \ smalest_index])\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26hxns8c.jl:59\nin expression starting at\
    \ /tmp/tmp26hxns8c.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        end\n    end\n    \n    if smallest_index == 1\n        smallest_index\n\
    \    else\n        smallest_index\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a vector representing a branch of a tree that has non-negative integer nodes\n\
    your task is to pluck one of the nodes and return it.\nThe plucked node should\
    \ be the node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyqy1m18.jl:52\nin expression starting at\
    \ /tmp/tmpdyqy1m18.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n\
    </cell>\n<text>\nProblem 7\nGiven a binary tree and a number x, return the node\
    \ in the tree that has a value greater than or equal to x.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7zmayb9.jl:44\nin expression starting at\
    \ /tmp/tmpm7zmayb9.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value = arr[1]\n    smallest_index = 1\n    smallest_even_value\
    \ = 0\n    for node in arr[2:end]\n        if node.even\n            if smallest_even_value\
    \ < node.value\n                smallest_even_value = node.value\n           \
    \     smallest_index = smallest_index + 1\n            else\n                if\
    \ smallest_even_value == node.value\n                    smallest_index = smallest_index\
    \ + 1\n                end\n            end\n        else\n            if smallest_even_value\
    \ < node.value\n                smallest_even_value = node.value\n           \
    \     smallest_index = smallest_index + 1\n            end\n        end\n    end\n\
    \    return smallest_value, smallest_index\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpgpvjw36e.jl:59

    '
  stdout: "test set: Error During Test at /tmp/tmpgpvjw36e.jl:62\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field even\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpgpvjw36e.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgpvjw36e.jl:62 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgpvjw36e.jl:61\ntest set:\
    \ Error During Test at /tmp/tmpgpvjw36e.jl:63\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field even\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpgpvjw36e.jl:39\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgpvjw36e.jl:63 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgpvjw36e.jl:61\ntest set:\
    \ Error During Test at /tmp/tmpgpvjw36e.jl:64\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgpvjw36e.jl:35\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpgpvjw36e.jl:64 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpgpvjw36e.jl:61\ntest set:\
    \ Error During Test at /tmp/tmpgpvjw36e.jl:65\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3,"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for index in 2:length(arr) \n        if arr[index]\
    \ % 2 == 0 \n            smalest_value = arr[index]\n            smalest_index\
    \ = index \n        else \n            break\n    end\n    \n    return [ smalest_value,\
    \ smalest_index ]\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of nodes in a binary search tree with root node root.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8n1c4ueu.jl:51\nin expression starting at\
    \ /tmp/tmp8n1c4ueu.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    \n    if even_values.length == 0\n     \
    \   return arr\n    \n    smalest_value = min(even_values)\n    \n    smallest_index\
    \ = find(x -> x == smalest_value, even_values)\n    \n    return [smalest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (i.e., the in-order traversal\
    \ of its nodes' values.)\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mcc9sih.jl:49\nin expression starting at\
    \ /tmp/tmp0mcc9sih.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_index == 1\n        return smallest_value,\
    \ smallest_index\n    else\n        return smallest_value, smallest_index\n  \
    \  end\nend\n</cell>\n<text>\nSolution\nClick below for a solution.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlzihd3j.jl:54\nin expression starting at\
    \ /tmp/tmpxlzihd3j.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            end\n        end\n    end\n    \n    if\
    \ smalest_value == 0\n        return Vector{Int64}()\n    end\n    \n    return\
    \ [ smalest_value, smallest_index ]\nend\n</cell>\n<text>\nProblem 3\nGiven a\
    \ binary tree and a number x, your task is to find the node in the tree with the\
    \ value closest to x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswnn19js.jl:54\nin expression starting at\
    \ /tmp/tmpswnn19js.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length==0 || arr.length==1\n        return arr\n    end\n    \n\
    \    smalest_value=arr[1]\n    smalest_index=2\n    \n    for node in arr[2:end]\n\
    \        if node%2==0\n            if node<smalest_value\n                smalest_value=node\n\
    \                smalest_index=2\n            else\n                if smalest_index>node\n\
    \                    smalest_value=node\n                    smalest_index=node\n\
    \                end\n            end\n        else\n            if smalest_index>node\n\
    \                smalest_value=node\n                smalest_index=node\n    \
    \        end\n        end\n    end\n    \n    return [smalest_value, smalest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5ivew63.jl:63\nin expression starting at\
    \ /tmp/tmpt5ivew63.jl:63\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length==0\n        return Vector{Int64}()\n    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    \n    if even_values.length==0\n       \
    \ return Vector{Int64}()\n    \n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values==smallest_value)[1]\n    \n    return Vector{Int64}([smallest_value,\
    \ smallest_index])\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0gs2z5h.jl:48\nin expression starting at\
    \ /tmp/tmpw0gs2z5h.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = even_values.index(smallest_even_value)\n\
    \    if smallest_even_index == 0 \n        smallest_even_index = 1\n    end\n\
    \    return smallest_even_value,smallest_even_index\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function with the cases above.\n@test pluck([4, 2, 3]) == [2, 1]\n\
    @test pluck([1, 2, 3]) == [2, 1]\n@test pluck([]) == []\n@test pluck([5, 0, 3,\
    \ 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Plucking from a dictionary\nGiven\
    \ a dictionary that has non-negative integer keys and non-negative integer values,\n\
    your task is to pluck one of the keys and return its value.\nThe plucked key should\
    \ be the key with the smallest value.\nIf multiple keys with the same smallest\
    \ value are found return the key that has smallest index.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzugj3as7.jl:43\nin expression starting at\
    \ /tmp/tmpzugj3as7.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value = arr[1]\n    smallest_index = 1\n    \n    for node\
    \ in arr[2:end]\n        if smallest_value % 2 == 0\n            smallest_value\
    \ = node\n            smallest_index = smallest_index + 1\n        end\n    end\n\
    \    \n    if smallest_value == 0\n        return Vector{Int64}()\n    else\n\
    \        return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n\
    </cell>\n<text>\nProblem 7\nGiven a vector arr of positive integers, return the\
    \ sum of the elements in the array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55codr9b.jl:52\nin expression starting at\
    \ /tmp/tmp55codr9b.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node % 2 == 0\n            if smallest_value\
    \ < node\n                smallest_value = node\n                smallest_index\
    \ = smallest_index + 1\n            else\n                break\n        end\n\
    \    end\n    \n    if smallest_index == 1\n        smallest_value = arr[1]\n\
    \        smallest_index = 1\n    end\n    \n    return smallest_value, smallest_index\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2grgr7c9.jl:56\nin expression starting at\
    \ /tmp/tmp2grgr7c9.jl:56\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n      \
    \      if smallest_value < arr[index]\n                smallest_value = arr[index]\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    \n    return smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector representing a branch of a tree that has non-negative integer\
    \ nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest odd value.\nIf multiple nodes with the\
    \ same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7olghql.jl:50\nin expression starting at\
    \ /tmp/tmpo7olghql.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    end\n    \n    smalest_value\
    \ = arr[1]\n    smalest_index = 1\n    \n    for node in arr[2 : end]\n      \
    \  if node.value % 2 == 0 \n            if node.value < smalest_value \n     \
    \           smalest_value = node.value \n                smalest_index = 1 \n\
    \            else \n                smalest_index += 1\n            end \n   \
    \     else \n            if smalest_index == 1 \n                return [smalest_value,\
    \ smalest_index] \n            end \n            smalest_value += node.value \n\
    \            smalest_index += 1\n        end\n    end\n    return [] \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xddue8d.jl:60\nin expression starting at\
    \ /tmp/tmp9xddue8d.jl:60\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if arr.length == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1] \n    smallest_index = 1 \n    \n    for node in arr[2:end] \n    \
    \    if node % 2 == 0 \n            if node < smalest_value \n               \
    \ smalest_value = node \n                smallest_index = smallest_index + 1 \n\
    \            end \n        else \n            if node < smalest_value \n     \
    \           smalest_value = node \n            end \n        end \n    end \n\
    \    \n    return [smalest_value, smallest_index] \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    pick(arr::Vector{Int64}, k::Int64)::Vector{Int64}\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeb_yt36u.jl:57\nin expression starting at\
    \ /tmp/tmpeb_yt36u.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzesu5tx7.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzesu5tx7.jl:1\n\
    in expression starting at /tmp/tmpzesu5tx7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n    \n  \
    \  for node in arr[2 : end]\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smalest_index = smalest_index + 1\n            end\n        end\n    end\n\
    \    \n    if smalest_index == length(arr)\n        smalest_index = 1\n    end\n\
    \    \n    return [ smalest_value, smalest_index ]\nend\n</cell>\n<text>\nProblem\
    \ 8\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3kqtamnt.jl:53\nin expression starting at\
    \ /tmp/tmp3kqtamnt.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = 0\n    smalest_index = 0\n    \n    for node in\
    \ arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smalest_index = node\n\
    \            end\n        end\n    end\n    \n    if smalest_value == 0\n    \
    \    return Vector{Int64}()\n    end\n    \n    return [smalest_value, smalest_index]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmp7h669vty.jl:56

    '
  stdout: "test set: Error During Test at /tmp/tmp7h669vty.jl:59\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7h669vty.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7h669vty.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7h669vty.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp7h669vty.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7h669vty.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7h669vty.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7h669vty.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp7h669vty.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  type Int64 has no field value\n \
    \ Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7h669vty.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7h669vty.jl:62 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7h669vty.jl:58\ntest set:\
    \ Error During Test at /tmp/tmp7h669vty.jl:63\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n  type Int64 has no fiel"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value::Int64 = Int64(Inf)\n    smallest_index::Int64 = Int64(Inf)\n\
    \    \n    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            elseif node.value == smalest_value\n   \
    \             if node.index < smallest_index\n                    smallest_index\
    \ = node\n                end\n            end\n        end\n    end\n    \n \
    \   if smalest_value == Inf || smallest_index == Inf\n        return Vector{Int64}()\n\
    \    end\n    \n    return [ smalest_value, smallest_index ]\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd93xea_o.jl:57\nin expression starting at\
    \ /tmp/tmpd93xea_o.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\n\
    Problem 4\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxzdp56_.jl:50\nin expression starting at\
    \ /tmp/tmpfxzdp56_.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a number x,\
    \ your task is to find the node in the tree that has value x.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp084sfbpz.jl:45\nin expression starting at\
    \ /tmp/tmp084sfbpz.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return smallest_value, smallest_index\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp169s46nx.jl:46\nin expression starting at\
    \ /tmp/tmp169s46nx.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}[]\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpdb4u4nj6.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpdb4u4nj6.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpdb4u4nj6.jl:40\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdb4u4nj6.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdb4u4nj6.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpdb4u4nj6.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpdb4u4nj6.jl:40\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdb4u4nj6.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdb4u4nj6.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpdb4u4nj6.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpdb4u4nj6.jl:40\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdb4u4nj6.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdb4u4nj6.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpdb4u4nj6.jl:53\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpdb4u4nj6.jl:40\n\
    \   [2] macro expansion\n     @ /shared/centos7/jul"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n    \n  \
    \  for node in arr[2:end]\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smalest_index = smalest_index + 1\n            end\n        end\n    end\n\
    \    \n    if smalest_index == 1\n        smalest_index = 0\n    end\n    \n \
    \   return [ smalest_value, smalest_index ]\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd53kbqkt.jl:53\nin expression starting at\
    \ /tmp/tmpd53kbqkt.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1] \n    smalest_index = 1\n    \n    for node in arr[2:end] \n      \
    \  if node % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n            end \n        else \n            smalest_index\
    \ += 1\n        end \n    end \n    \n    return [ smalest_value, smalest_index\
    \ ] \nend \n</cell>\n<code language=julia-1.5>\n@test pluck([4, 2, 3]) == [2,\
    \ 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([]) == []\n@test pluck([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Plucking from a Tree\nGiven\
    \ a tree represented as a vector, pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest even value.\nIf multiple nodes with\
    \ the same smallest even value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk06maw2e.jl:57\nin expression starting at\
    \ /tmp/tmpk06maw2e.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return smallest_value, smallest_index\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree and a number x, your task is to find the node in the\
    \ tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecbxz9af.jl:45\nin expression starting at\
    \ /tmp/tmpecbxz9af.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpi5fc9fo1.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmpi5fc9fo1.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi5fc9fo1.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5fc9fo1.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5fc9fo1.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpi5fc9fo1.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi5fc9fo1.jl:39\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5fc9fo1.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5fc9fo1.jl:48\ntest set:\
    \ Error During Test at /tmp/tmpi5fc9fo1.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  Met"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = findall(x -> x % 2 == 0, arr)\n    \n    if isempty(even_values)\n\
    \        return [] \n    end\n    \n    smallest_even_value = min(even_values)\n\
    \    \n    smallest_even_index = findfirst(x -> x == smallest_even_value, even_values)\n\
    \    \n    plucked_value = arr[smallest_even_index]\n    \n    return [plucked_value,\
    \ smallest_even_index]\nend\n</cell>\n<text>\nProblem 4\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjflqa4i.jl:50\nin expression starting at\
    \ /tmp/tmpzjflqa4i.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        index = find(even_values == smallest_value)[1]\n        return [ smallest_value,\
    \ index ]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv6pv3ja.jl:44\nin expression starting at\
    \ /tmp/tmphv6pv3ja.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = Int64(Inf)\n    smalest_index::Int64 = Int64(Inf)\n\
    \    \n    for i in 1:length(arr)\n        if arr[i] % 2 == 0\n            if\
    \ smalest_value < arr[i]\n                smalest_value = arr[i]\n           \
    \     smalest_index = i\n            end\n        end\n    end\n    \n    if smalest_value\
    \ == Inf\n        return Vector{Int64}()\n    end\n    \n    return [smalest_value,\
    \ smalest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpdu_cztv7.jl:56

    '
  stdout: "test set: Error During Test at /tmp/tmpdu_cztv7.jl:59\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  InexactError: Int64(Inf)\n  Stacktrace:\n\
    \   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpdu_cztv7.jl:36\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdu_cztv7.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdu_cztv7.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpdu_cztv7.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  InexactError: Int64(Inf)\n  Stacktrace:\n\
    \   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpdu_cztv7.jl:36\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdu_cztv7.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdu_cztv7.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpdu_cztv7.jl:61\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  InexactError: Int64(Inf)\n\
    \  Stacktrace:\n   [1] Int64(x::Float64)\n     @ Base ./float.jl:812\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpdu_cztv7.jl:36\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdu_cztv7.jl:61 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdu_cztv7.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpdu_cztv7.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n  InexactError: Int6"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ivhu5fh.jl:45\nin expression starting at\
    \ /tmp/tmp7ivhu5fh.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 3\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm0hcqd_.jl:40\nin expression starting at\
    \ /tmp/tmpcm0hcqd_.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 3\nGiven a vector arr of non-negative\
    \ integers, your task is to find the node with the smallest odd value.\nIf multiple\
    \ nodes have the same smallest odd value, return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqz13ey3.jl:40\nin expression starting at\
    \ /tmp/tmpcqz13ey3.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = minimum(arr)\n    smallest_index::Int64 = findfirst(x\
    \ -> x % 2 == 0, arr)\n    if smallest_index == -1 || smallest_value == 0\n  \
    \      return Vector{Int64}()\n    else\n        return smallest_value, smallest_index\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values. (ie, from left to right, level by level).\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvl3lutiq.jl:43\nin expression starting at\
    \ /tmp/tmpvl3lutiq.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_even_index = find(x -> x == smallest_even_value,\
    \ even_values)\n        return Vector{Int64}([smallest_even_value, smallest_even_index])\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7mz85e5.jl:45\nin expression starting at\
    \ /tmp/tmpw7mz85e5.jl:45\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    smallest_value_index::Int64\
    \ = 1\n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n      \
    \      if smallest_value < arr[index]\n                smallest_value = arr[index]\n\
    \                smallest_index = index\n            else\n                if\
    \ smallest_value_index < index\n                    smallest_value_index = index\n\
    \                end\n            end\n        end\n    end\n    \n    if smallest_value\
    \ == 0\n        return Vector{Int64}[]\n    end\n    \n    return Vector{Int64}[smallest_value,\
    \ smallest_index]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: '''
  stdout: 'b''test set: Error During Test at /tmp/tmppt5qbwyx.jl:62\n  Test threw
    exception\n  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: Cannot
    `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    setindex!(A::Vector{Vector{Int64}}, x::Int64, i1::Int64)\n     @ Base ./array.jl:903\n   [2]
    getindex\n     @ ./array.jl:413 [inlined]\n   [3] pluck(arr::Vector{Int64})\n     @
    Main /tmp/tmppt5qbwyx.jl:55\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [5] macro expansion\n     @ /tmp/tmppt5qbwyx.jl:62 [inlined]\n   [6]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [7] top-level scope\n     @ /tmp/tmppt5qbwyx.jl:61\ntest set: Error
    During Test at /tmp/tmppt5qbwyx.jl:63\n  Test threw exception\n  Expression: candidate([1,
    2, 3]) == [2, 1]\n  MethodError: Cannot `convert` an object of type Int64 to an
    object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    setindex!(A::Vector{Vector{Int64}}, x::Int64, i1::Int64)\n     @ Base ./arr'
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    smalest_value = min(even_values)\n\
    \    smalest_index = find(even_values == smalest_value)[1]\n    return smalest_value,\
    \ smalest_index\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_4htwig.jl:42\nin expression starting at\
    \ /tmp/tmp1_4htwig.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n    for\
    \ node in arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    \n    if smalest_value == 0\n\
    \        return Vector{Int64}()\n    end\n    \n    return [smalest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test pluck([4, 2, 3]) == [2, 1]\n@test\
    \ pluck([1, 2, 3]) == [2, 1]\n@test pluck([]) == []\n@test pluck([5, 0, 3, 0,\
    \ 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Pick Random Node\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pick\
    \ a random node and return it.\nThe picked node should be the node with the smallest\
    \ odd value.\nIf multiple nodes with the same smallest odd value are found return\
    \ the node that has smallest index.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9g3wzq3r.jl:53\nin expression starting at\
    \ /tmp/tmp9g3wzq3r.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n  \
    \  \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n        \
    \    smalest_value = arr[index]\n            smalest_index = index\n        end\n\
    \    end\n    \n    if smalest_value == 0\n        return Vector{Int64}[]\n  \
    \  end\n    \n    return Vector{Int64}[smalest_value, smalest_index]\nend\n</cell>\n\
    <text>\nProblem 7\nGiven a vector arr of positive integers, return the sum of\
    \ the squares of the even values.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3])\
    \ == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp519c7fr_.jl:52\nin expression starting at\
    \ /tmp/tmp519c7fr_.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpi99jzhj6.jl:42

    '
  stdout: "test set: Error During Test at /tmp/tmpi99jzhj6.jl:45\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi99jzhj6.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi99jzhj6.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi99jzhj6.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi99jzhj6.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpi99jzhj6.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi99jzhj6.jl:46 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi99jzhj6.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpi99jzhj6.jl:47\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = index(even_values, smallest_even_value)\n\
    \    smallest_value = arr[smallest_even_index]\n    return smallest_value, smallest_even_index\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the levels of the\
    \ tree in order from top to bottom.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph9wnet3y.jl:41\nin expression starting at\
    \ /tmp/tmph9wnet3y.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = minimum(arr)\
    \ \n    smalest_index = findfirst(x -> x % 2 == 0, arr) \n    \n    if smalest_index\
    \ == -1 \n        return [] \n    \n    smalest_value = arr[smalest_index] \n\
    \    \n    arr[smalest_index] = arr[length(arr)-1] \n    arr[length(arr)-1] =\
    \ smalest_value \n    \n    return arr \nend\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgmv5kse.jl:1\nin expression starting at /tmp/tmppgmv5kse.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value =\
    \ min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if length(even_values) == 0 || smallest_value == 0\n        return\
    \ Vector{Int64}()\n    else\n        return Vector{Int64}([smallest_value, smallest_index])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmps63vz65z.jl:48

    '
  stdout: "test set: Error During Test at /tmp/tmps63vz65z.jl:51\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmps63vz65z.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps63vz65z.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps63vz65z.jl:50\ntest set:\
    \ Error During Test at /tmp/tmps63vz65z.jl:52\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmps63vz65z.jl:37\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps63vz65z.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps63vz65z.jl:50\ntest set:\
    \ Error During Test at /tmp/tmps63vz65z.jl:53\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = findfirst(x->x==smallest_even_value,even_values)\n\
    \    if smallest_even_index == nothing\n        return Vector{Int64}()\n    else\n\
    \        return Vector{Int64}([smallest_even_value,smallest_even_index])\n   \
    \ end\nend\n</cell>\n<text>\nProblem 7\nGiven a vector arr of positive integers,\
    \ return a new vector where each element is the product of all the numbers in\
    \ the original vector, except the number that appears twice.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7aw3xlee.jl:44\nin expression starting at\
    \ /tmp/tmp7aw3xlee.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return []\n    else\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmps3edqp1h.jl:46

    '
  stdout: "test set: Error During Test at /tmp/tmps3edqp1h.jl:49\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmps3edqp1h.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps3edqp1h.jl:49 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3edqp1h.jl:48\ntest set:\
    \ Error During Test at /tmp/tmps3edqp1h.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmps3edqp1h.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps3edqp1h.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps3edqp1h.jl:48\ntest set:\
    \ Error During Test at /tmp/tmps3edqp1h.jl:51\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpucdw6i7m.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpucdw6i7m.jl:1\n\
    in expression starting at /tmp/tmpucdw6i7m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmped1twfg5.jl:44\nin expression starting at\
    \ /tmp/tmped1twfg5.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n\
    </cell>\n<text>\nProblem 7\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbb78mqf.jl:44\nin expression starting at\
    \ /tmp/tmpbbb78mqf.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node % 2 == 0\n            if smallest_value\
    \ < node\n                smallest_value = node\n                smallest_index\
    \ = smallest_index + 1\n            else\n                smallest_value = smallest_value\n\
    \                smallest_index = smallest_index\n            end\n        end\n\
    \    end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n \
    \   else\n        return Vector{Int64}[smallest_value, smallest_index]\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a number k, find the\
    \ node in the tree that has value k. \nThe binary tree is defined as follows:\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8roz9de4.jl:57\nin expression starting at\
    \ /tmp/tmp8roz9de4.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = minimum(arr)\
    \ \n    smalest_index = findfirst(x -> x % 2 == 0, arr) \n    \n    if smalest_index\
    \ == -1 \n        return [] \n    \n    smalest_value += 1 \n    arr[smalest_index]\
    \ = smalest_value \n    \n    return arr \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kn4mo99.jl:1\nin expression starting at /tmp/tmp7kn4mo99.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    end\n \
    \   \n    smallest_value = arr[end]\n    smallest_index = end\n    \n    for i\
    \ in (end - 1 downto 1)\n        if arr[i] < smallest_value\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    \n    arr[smallest_index]\
    \ = arr[end]\n    arr[end] = smallest_value\n    \n    return arr\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp73vlnfg0.jl:40\nin expression starting at /tmp/tmp73vlnfg0.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = minimum(arr)\
    \ \n    smalest_index = findfirst(x -> x % 2 == 0, arr) \n    \n    if smalest_index\
    \ == -1 \n        return [] \n    \n    smalest_value % 2 == 0 ? \n        smalest_value\
    \ = arr[smalest_index] : \n        smalest_value = arr[smalest_index] - 1 \n \
    \   \n    smalest_value % 2 == 0 ? \n        smalest_index = smalest_index : \n\
    \        smalest_index = smalest_index - 1 \n    \n    smalest_value % 2 == 0\
    \ ? \n        smalest_value = arr[smalest_index] : \n        smalest_value = arr[smalest_index]\
    \ - 1 \n    \n    smalest_value % 2 == 0 ? \n        smalest_index = smalest_index\
    \ : \n        smalest_index = smalest_index - 1 \n    \n    smalest_value % 2\
    \ == 0 ? \n        smalest_value = arr[smalest_index] : \n        smalest_value\
    \ = arr[smalest_index] - 1 \n    \n    smalest_value % 2 == 0 ? \n        smalest_index\
    \ = smalest_index : \n        smalest_index = smalest_index - 1 \n    \n    smalest_value\
    \ % 2 == 0 ? \n        smalest_value = arr[smalest_index] : \n        smalest_value\
    \ = arr[smalest_index] - 1 \n    \n    smalest_value % 2 == 0 ? \n        smalest_index\
    \ = smalest_index : \n        smalest_index = smalest_index - 1 \n    \n    smalest_value\
    \ % 2 == 0 ? \n        smalest_value = arr[smalest_index] : \n        smalest_value\
    \ = arr[smalest_index] - 1 \n    \n    smalest_value % 2 == 0 ? \n        smalest_index\
    \ = smalest_index : \n        smalest_index = smalest_index - 1 \n    \n    smalest_value\
    \ % 2 == 0 ? \n        smalest_value = arr[smalest_index] : \n        smalest_value\
    \ = arr[smalest_index] - 1 \n    \n    smalest_value % 2 == 0 ? \n        smalest_index\
    \ = smalest_index : \n        smalest_index = smalest_index - 1 \n    \n    smalest_value\
    \ % 2 == 0 ? \n        smalest_value = arr[smalest_index] : \n        smalest_value\
    \ = arr[smalest_index] - 1 \n    \n    smale\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd_1xsyd.jl:1\nin expression starting at /tmp/tmptd_1xsyd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n\
    \    end\n    \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test your function with the cases listed\
    \ above\n@test pluck([4, 2, 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n\
    @test pluck([]) == []\n@test pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n\
    4.3 Plucking from a Dictionary\nGiven a dictionary that has non-negative integer\
    \ keys and non-negative integer values, your task is to pluck one of the values\
    \ and return it.\nThe plucked value should be the value with the smallest key.\n\
    If multiple values have the same smallest key, return the value that has smallest\
    \ key.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpth11d0c9.jl:54\nin expression starting at\
    \ /tmp/tmpth11d0c9.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_value == 0\n        return []\n    end\n\
    \    \n    return [smallest_value, smallest_index]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpak4fm60j.jl:56

    '
  stdout: "test set: Error During Test at /tmp/tmpak4fm60j.jl:59\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  type Int64 has no field value\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpak4fm60j.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpak4fm60j.jl:59 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpak4fm60j.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpak4fm60j.jl:60\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  type Int64 has no field value\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] pluck(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpak4fm60j.jl:40\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpak4fm60j.jl:60 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpak4fm60j.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpak4fm60j.jl:61\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{Int64} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] pluck(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpak4fm60j.jl:36\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpak4fm60j.jl:61 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpak4fm60j.jl:58\ntest set:\
    \ Error During Test at /tmp/tmpak4fm60j.jl:62\n  Test threw exception\n  Expression:\
    \ candidate([5, 0, "
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            end\n        end\n    end\n    \n    if\
    \ smalest_value == 0\n        return []\n    end\n    \n    return [smalest_value,\
    \ smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree and a\
    \ number x, your task is to find the node in the tree that has value x.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9x75lpc.jl:54\nin expression starting at\
    \ /tmp/tmpk9x75lpc.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    smallest_even_value::Int64\
    \ = smallest_value/2\n    \n    for node in arr[smallest_index+1:end]\n      \
    \  if node % 2 == 0\n            if smallest_even_value == node/2\n          \
    \      smallest_even_value = node\n                smallest_index = smallest_index\
    \ + 1\n            else\n                break\n        end\n    end\n    \n \
    \   if smallest_index == length(arr)\n        return smallest_value, smallest_index\n\
    \    else\n        return smallest_value, smallest_index\n    end\nend\n</cell>\n\
    <text>\nProblem 8\nWrite a function that returns the number of nodes in a binary\
    \ search tree with n nodes.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp__h8hee.jl:55\nin expression starting at\
    \ /tmp/tmpp__h8hee.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node % 2 == 0\n            if smallest_value\
    \ < node\n                smallest_value = node\n                smallest_index\
    \ = smallest_index + 1\n            end\n        end\n    end\n    \n    if smallest_value\
    \ == 0\n        smallest_value = arr[1]\n        smallest_index = 1\n    end\n\
    \    \n    return smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a vector representing a branch of a tree that has non-negative integer\
    \ nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest odd value.\nIf multiple nodes with the\
    \ same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3x3fe66.jl:55\nin expression starting at\
    \ /tmp/tmps3x3fe66.jl:55\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    for\
    \ index in 2:length(arr)\n        if arr[index] % 2 == 0\n            if arr[index]\
    \ < smallest_value\n                smallest_value = arr[index]\n            \
    \    smallest_index = index\n            end\n        end\n    end\n    return\
    \ [smallest_value, smallest_index]\nend\n</cell>\n<text>\nProblem 3\nGiven a vector\
    \ representing a branch of a tree that has non-negative integer nodes\nyour task\
    \ is to pluck one of the nodes and return it.\nThe plucked node should be the\
    \ node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobl13_dg.jl:47\nin expression starting at\
    \ /tmp/tmpobl13_dg.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0 || length(arr) == 0\n        return Vector{Int64}()\n    else\n       \
    \ smallest_even_value = min(even_values)\n        smallest_index = find(x -> x\
    \ == smallest_even_value, even_values)\n        return Vector{Int64}([smallest_even_value,\
    \ smallest_index])\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28_mh1a0.jl:44\nin expression starting at\
    \ /tmp/tmp28_mh1a0.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93q363fm.jl:44\nin expression starting at\
    \ /tmp/tmp93q363fm.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = -1\n    smallest_index = -1\n    \n    for i in arr\n\
    \        if smalest_value == -1\n            smalest_value = i\n            smallest_index\
    \ = i\n        elseif smalest_value == i\n            smallest_index = i\n   \
    \     elseif i % 2 == 0\n            if smalest_value < i\n                smalest_value\
    \ = i\n                smallest_index = i\n            else\n                smallest_index\
    \ = smallest_index + 1\n            end\n        end\n    end\n    \n    if smallest_index\
    \ == -1\n        return []\n    else\n        return [smalest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values. (ie, from left to right, level by level).\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp913e42ol.jl:60\nin expression starting at\
    \ /tmp/tmp913e42ol.jl:60\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for node in arr[2:end]\n        if node % 2\
    \ == 0 \n            smalest_value = node\n            smalest_index = 1 \n  \
    \      else \n            if smalest_value < node \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            elseif smalest_value\
    \ == node \n                smalest_index += 1\n            end\n        end\n\
    \    end\n    \n    return [ smalest_value, smalest_index ]\nend\n</cell>\n<text>\n\
    Problem 7\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7i8x0apf.jl:57\nin expression starting at\
    \ /tmp/tmp7i8x0apf.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n\
    </cell>\n<text>\nProblem 3\nGiven a binary tree and a number x, your task is to\
    \ find the node in the tree that has value x.\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa005t218.jl:44\nin expression starting at\
    \ /tmp/tmpa005t218.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n  \
    \  \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n        \
    \    if arr[index] < smalest_value\n                smalest_value = arr[index]\n\
    \                smalest_index = index\n            end\n        end\n    end\n\
    \    \n    if smalest_value == 0\n        return Vector{Int64}[]\n    end\n  \
    \  \n    return Vector{Int64}[smalest_value, smalest_index]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Run this cell to check your answer\n@test pluck([4, 2,\
    \ 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([]) == []\n@test\
    \ pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.3 Pluck all nodes with\
    \ the smallest even value\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqs9ym_5r.jl:54\nin expression starting at\
    \ /tmp/tmpqs9ym_5r.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value =\
    \ min(even_values)\n    smallest_even_index = index(even_values, smallest_even_value)\n\
    \    if smallest_even_index == -1\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_even_value,smallest_even_index]\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30sklt8a.jl:44\nin expression starting at\
    \ /tmp/tmp30sklt8a.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxxqhsj5.jl:50\nin expression starting at\
    \ /tmp/tmpvxxqhsj5.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2 : end]\n        if node.value % 2 == 0\n        \
    \    if smallest_value < node.value\n                smallest_value = node.value\n\
    \                smallest_index = node.index\n            end\n        end\n \
    \   end\n    \n    if smallest_value == 0\n        return Vector{Int64}[]\n  \
    \  end\n    \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n\
    </cell>\n<text>\nProblem 4\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values. (ie, from left to right, level by level).\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf954pcsf.jl:54\nin expression starting at\
    \ /tmp/tmpf954pcsf.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return []\n    smalest_value = min(even_values)\n    smalest_index =\
    \ find(even_values == smalest_value)[1]\n    \n    return [ smalest_value, smalest_index\
    \ ]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpksk517c7.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpksk517c7.jl:1\n\
    in expression starting at /tmp/tmpksk517c7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    \n\
    \    for node in arr\n        if node.value % 2 == 0\n            if node.value\
    \ < smalest_value\n                smalest_value = node.value\n              \
    \  smallest_index = node\n            else\n                if node.value < smalest_value\n\
    \                    smalest_value = node.value\n                    smallest_index\
    \ = node\n                end\n            end\n        end\n    end\n    \n \
    \   if smalest_value == 0\n        return []\n    else\n        return [smalest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a vector representing\
    \ a branch of a tree that has non-negative integer nodes\nyour task is to pluck\
    \ one of the nodes and return it.\nThe plucked node should be the node with the\
    \ smallest odd value.\nIf multiple nodes with the same smallest odd value are\
    \ found return the node that has smallest index.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_ib1n7f.jl:59\nin expression starting at\
    \ /tmp/tmpf_ib1n7f.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    if smallest_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n\
    </cell>\n<text>\nProblem 3\nGiven a vector representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck one of the nodes and return\
    \ it.\nThe plucked node should be the node with the smallest odd value.\nIf multiple\
    \ nodes with the same smallest odd value are found return the node that has smallest\
    \ index.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr1dt8im.jl:45\nin expression starting at\
    \ /tmp/tmpkr1dt8im.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n      \
    \      if smallest_value < arr[index]\n                smallest_value = arr[index]\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    \n    if smallest_value == 0\n        return Vector{Int64}[]\n    end\n \
    \   \n    return Vector{Int64}[smallest_value, smallest_index]\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkysezzk.jl:54\nin expression starting at\
    \ /tmp/tmpdkysezzk.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_value\
    \ == 0\n        return Vector{Int64}()\n    else\n        return Vector{Int64}([smallest_value,\
    \ smallest_index])\n    end\nend\n</cell>\n<text>\nProblem 4\nGiven a binary tree\
    \ and a number x, your task is to find the node in the tree that has value x.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsovp8fo.jl:45\nin expression starting at\
    \ /tmp/tmpvsovp8fo.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64\
    \ = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int64 = 1\n    smallest_index::Int\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpucdw6i7m.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpucdw6i7m.jl:1\n\
    in expression starting at /tmp/tmpucdw6i7m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for node in arr[2:end] \n        if node % 2\
    \ == 0 \n            if node < smalest_value \n                smalest_value =\
    \ node \n                smalest_index = 1 \n            elseif node > smalest_value\
    \ \n                smalest_value = node \n                smalest_index = 2 \n\
    \            elseif node == smalest_value \n                smalest_index += 1\n\
    \            end\n        end\n    end\n    \n    return [ smalest_value, smalest_index\
    \ ]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgnskkprg.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgnskkprg.jl:1\n\
    in expression starting at /tmp/tmpgnskkprg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjzr3xatu.jl:47

    '
  stdout: "test set: Error During Test at /tmp/tmpjzr3xatu.jl:50\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  MethodError: no method matching\
    \ min(::Vector{Int64})\n  Closest candidates are:\n    min(::Any, !Matched::Missing)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n    min(::Any,\
    \ !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpjzr3xatu.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzr3xatu.jl:50 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzr3xatu.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpjzr3xatu.jl:51\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  MethodError: no method matching min(::Vector{Int64})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\n\
    \    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\n\
    \    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    ...\n  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpjzr3xatu.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjzr3xatu.jl:51 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjzr3xatu.jl:49\ntest set:\
    \ Error During Test at /tmp/tmpjzr3xatu.jl:52\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value = 0\n    smallest_index = 0\n    \n    for node in\
    \ arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smallest_index =\
    \ node\n            else\n                if node.value < smallest_index.value\n\
    \                    smallest_index = node\n                end\n            end\n\
    \        end\n    end\n    \n    if smallest_index == 0 \n        return Vector{Int64}()\n\
    \    end\n    \n    return smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    @test pluck([4, 2, 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([])\
    \ == []\n@test pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ that has value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd7zrnqd0.jl:58\nin expression starting at\
    \ /tmp/tmpd7zrnqd0.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    else\n\
    \        smalest_value = arr[1]\n        smallest_index = 1\n        smallest_even_value\
    \ = 1\n        for node in arr[2 : end]\n            if node % 2 == 0\n      \
    \          if smallest_even_value < node\n                    smallest_even_value\
    \ = node\n                    smallest_index = smallest_index + 1\n          \
    \      else\n                    smallest_index = smallest_index + 1\n       \
    \     else\n                if smallest_even_value < node\n                  \
    \  smallest_even_value = node\n                    smallest_index = smallest_index\
    \ + 1\n                else\n                    smallest_index = smallest_index\
    \ + 1\n        end\n        return [smalest_value, smallest_index]\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpz79sishg.jl:43 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz79sishg.jl:48\n\
    in expression starting at /tmp/tmpz79sishg.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmrokkm5x.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmrokkm5x.jl:1\n\
    in expression starting at /tmp/tmpmrokkm5x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for i in 2:length(arr)\n        if arr[i] < smallest_value\n      \
    \      smallest_value = arr[i]\n            smallest_index = i\n        end\n\
    \    end\n    \n    if smallest_value == 0\n        return Vector{Int64}()\n \
    \   else\n        return Vector{Int64}([smallest_value, smallest_index])\n   \
    \ end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemg1n2e2.jl:52\nin expression starting at\
    \ /tmp/tmpemg1n2e2.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n      \
    \      if arr[index] < smallest_value\n                smallest_value = arr[index]\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    \n    if smallest_value == 0\n        return []\n    else\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 7\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx9pbasz.jl:54\nin expression starting at\
    \ /tmp/tmpwx9pbasz.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smalest_index = Int64(0)\n    \n    for\
    \ node in arr\n        if node.value % 2 == 0\n            if node.value < smalest_value\n\
    \                smalest_value = node.value\n                smalest_index = node.index\n\
    \            end\n        end\n    end\n    \n    if smalest_value == 0\n    \
    \    return Vector{Int64}[]\n    end\n    \n    return smalest_index, smalest_value\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert pluck([4, 2, 3]) == [2, 1]\n\
    @assert pluck([1, 2, 3]) == [2, 1]\n@assert pluck([]) == []\n@assert pluck([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\n4.5 Plucking all nodes with the\
    \ smallest even value\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe2s31ou.jl:53\nin expression starting at\
    \ /tmp/tmpfe2s31ou.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0\n        return Vector{Int64}()\n    \n    smalest_value\
    \ = arr[1]\n    smalest_index = 1\n    \n    for node in arr[2:end]\n        if\
    \ node % 2 == 0\n            if node < smalest_value\n                smalest_value\
    \ = node\n                smalest_index = index\n            end\n        end\n\
    \    end\n    \n    return Vector{Int64}([smalest_value, smalest_index])\nend\n\
    </cell>\n<text>\nProblem 4\nGiven a binary tree, return the level order traversal\
    \ of its nodes' values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3v2urpiw.jl:52\nin expression starting at\
    \ /tmp/tmp3v2urpiw.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == length(even_values)\n        return Vector{Int64}()\n    else\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree with the value closest to x. \nIf the value does not exist, return\
    \ null.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63fx2c84.jl:44\nin expression starting at\
    \ /tmp/tmp63fx2c84.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 || arr.length == 1\n        return arr\n    end\n \
    \   \n    smalest_value = arr[1]\n    smallest_index = 2\n    \n    for index\
    \ in 2:length(arr)\n        if arr[index] % 2 == 0\n            if arr[index]\
    \ < smalest_value\n                smalest_value = arr[index]\n              \
    \  smallest_index = index\n            end\n        else\n            if arr[index]\
    \ < smalest_value\n                smalest_value = arr[index]\n              \
    \  smallest_index = index\n            end\n        end\n    end\n    \n    return\
    \ arr[smallest_index], smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    @test pluck([4, 2, 3]) == [2, 1]\n@test pluck([1, 2, 3]) == [2, 1]\n@test pluck([])\
    \ == []\n@test pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (i.e.,\
    \ the in-order traversal of its nodes' values.)\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpluf0vcde.jl:58\nin expression starting at\
    \ /tmp/tmpluf0vcde.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    else\n        return smallest_value, smallest_index\n\
    \    end\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree and a number x,\
    \ find all nodes in the tree that are less than or equal to x. \nThe tree is defined\
    \ recursively, and each node in the tree is defined with a value and a left and\
    \ a right pointer.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__1oth23.jl:45\nin expression starting at\
    \ /tmp/tmp__1oth23.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(x -> x == smallest_value, even_values)\n    if smallest_index\
    \ == length(even_values)\n        return Vector{Int64}[]\n    else\n        return\
    \ Vector{Int64}[smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a node value, swap the node value with the\
    \ node that results from traversing the tree to that node.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvl96m45.jl:44\nin expression starting at\
    \ /tmp/tmplvl96m45.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value = Int64(0)\n \
    \   smallest_index = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index\
    \ = Int64(0)\n    smallest_value = Int64(0)\n    smallest_index = Int64(0)\n \
    \   smallest_value = Int64(0)\n    smallest_index = Int64(0)\n    smallest_value\
    \ = Int64(0)\n    smallest_index = Int64(0)\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzesu5tx7.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzesu5tx7.jl:1\n\
    in expression starting at /tmp/tmpzesu5tx7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wop1eeh.jl:44\nin expression starting at\
    \ /tmp/tmp2wop1eeh.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp685jef19.jl:44\nin expression starting at\
    \ /tmp/tmp685jef19.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [ smallest_value, smallest_index ]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6o837jm.jl:45\nin expression starting at\
    \ /tmp/tmpw6o837jm.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree and a number x, your task is to find the\
    \ node in the tree that has value x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9jql8wt.jl:44\nin expression starting at\
    \ /tmp/tmpm9jql8wt.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smalest_value::Int64 = arr[1]\n    smalest_index::Int64 = 1\n  \
    \  \n    for node in arr[2:end]\n        if node.value % 2 == 0\n            if\
    \ node.value < smalest_value\n                smalest_value = node.value\n   \
    \             smalest_index = node.index\n            end\n        end\n    end\n\
    \    \n    if smalest_value == 0\n        return Vector{Int64}()\n    end\n  \
    \  \n    return Vector{Int64}([smalest_value, smalest_index])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\
    \t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rowpyn0.jl:54\nin expression starting at\
    \ /tmp/tmp4rowpyn0.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(x -> x == smallest_value, even_values)\n      \
    \  return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 4\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfy96hqh.jl:44\nin expression starting at\
    \ /tmp/tmpkfy96hqh.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for i in 2:arr.length \n        if arr[i] <\
    \ smalest_value \n            smalest_value = arr[i] \n            smalest_index\
    \ = i \n        else \n            break\n    end\n    \n    return [ smalest_value,\
    \ smalest_index ]\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsx4aralv.jl:1\nin expression starting at /tmp/tmpsx4aralv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for index in 2:length(arr) \n        if arr[index]\
    \ % 2 == 0 \n            smalest_value = arr[index] \n            smalest_index\
    \ = index \n        else \n            break\n    end\n    \n    return [ smalest_value,\
    \ smalest_index ]\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpietb1knn.jl:51\nin expression starting at\
    \ /tmp/tmpietb1knn.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    smalest_value = minimum(arr)\n    smalest_index = find(arr == smalest_value)[1]\n\
    \    if smalest_index == 0 \n        smalest_index = 1\n    end\n    return smalest_value,\
    \ smalest_index\nend\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpso5gmcn0.jl:44

    '
  stdout: "test set: Error During Test at /tmp/tmpso5gmcn0.jl:47\n  Test threw exception\n\
    \  Expression: candidate([4, 2, 3]) == [2, 1]\n  UndefVarError: find not defined\n\
    \  Stacktrace:\n   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpso5gmcn0.jl:36\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpso5gmcn0.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpso5gmcn0.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpso5gmcn0.jl:48\n  Test threw exception\n  Expression:\
    \ candidate([1, 2, 3]) == [2, 1]\n  UndefVarError: find not defined\n  Stacktrace:\n\
    \   [1] pluck(arr::Vector{Int64})\n     @ Main /tmp/tmpso5gmcn0.jl:36\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpso5gmcn0.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpso5gmcn0.jl:46\ntest set:\
    \ Error During Test at /tmp/tmpso5gmcn0.jl:49\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{Int64}([])\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:"
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = findall(x -> mod(x,2) == 0, arr)\n    if isempty(even_values)\
    \ || length(arr) == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value\
    \ = min(even_values)\n    smallest_index = findfirst(x->x==smallest_value, even_values)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1gnhm4ke.jl:34\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1gnhm4ke.jl:1\n\
    in expression starting at /tmp/tmp1gnhm4ke.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a number x, your task is to find the node in the tree\
    \ with value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaw_bjm33.jl:44\nin expression starting at\
    \ /tmp/tmpaw_bjm33.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smalest_value = min(even_values)\n\
    \    smalest_index = find(even_values == smalest_value)[1]\n    smalest_value\
    \ = smalest_value\n    return smalest_value, smalest_index\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree that has value x. \nIf the node does not exist, return nil.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) ==\
    \ [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphp93ob3y.jl:41\nin expression starting at\
    \ /tmp/tmphp93ob3y.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    \n   \
    \ return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number k, find the node in the tree with\
    \ value closest to k.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t\
    @test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    \t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1])\
    \ == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpob9mftcu.jl:47\nin expression starting at\
    \ /tmp/tmpob9mftcu.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrr0v0ek.jl:44\nin expression starting at\
    \ /tmp/tmpnrr0v0ek.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a binary tree and a number x, your task is to find the node in\
    \ the tree with the value closest to x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsb1g8go8.jl:45\nin expression starting at\
    \ /tmp/tmpsb1g8go8.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length==0 || arr.length==1\n        return arr\n    end\n    \n\
    \    even_values = arr.filter(x -> x%2==0)\n    \n    if even_values.length==0\n\
    \        return arr\n    end\n    \n    smallest_value = even_values[end]\n  \
    \  smallest_index = end\n    \n    for i in 1:length(even_values)\n        if\
    \ even_values[i]<smallest_value\n            smallest_value = even_values[i]\n\
    \            smallest_index = i\n        end\n    end\n    \n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<text>\nProblem 3\nGiven a vector arr of positive\
    \ integers, return the sum of the positive integers in the array.\nusing Test\n\
    \n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg5m42vl4.jl:46\nin expression starting at /tmp/tmpg5m42vl4.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        end\n    end\n    \n    if smallest_index == length(arr)\n        smallest_index\
    \ = 1\n    end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a vector representing a branch of a tree that has non-negative\
    \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
    \ node should be the node with the smallest odd value.\nIf multiple nodes with\
    \ the same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw46amcxx.jl:52\nin expression starting at\
    \ /tmp/tmpw46amcxx.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if arr.length == 0\n        return Vector{Int64}()\n    \n    smalest_value\
    \ = arr[end]\n    smallest_index = end\n    \n    for node in arr[end+1:end]\n\
    \        if node % 2 == 0\n            smallest_index = end\n            smalest_value\
    \ = node\n        else\n            if node < smalest_value\n                smalest_value\
    \ = node\n                smallest_index = end\n            else\n           \
    \     smallest_index += 1\n            end\n        end\n    end\n    \n    return\
    \ Vector{Int64}([smalest_value, smallest_index])\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpurmp7cw1.jl:39\nin expression starting at /tmp/tmpurmp7cw1.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value\
    \ = arr[1]\n    smalest_index = 1\n    \n    for node in arr[2:end]\n        if\
    \ node % 2 == 0 \n            if node < smalest_value \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n        else \n            if node < smalest_value \n\
    \                smalest_value = node \n                smalest_index = 1 \n \
    \           else \n                smalest_index += 1\n            \n    end\n\
    \    \n    return [ smalest_value, smalest_index ]\nend\n</cell>\n<text>\nProblem\
    \ 7\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).\nusing Test\n\n@testset begin\n\n\
    candidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpg8ahq970.jl:44 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg8ahq970.jl:49\n\
    in expression starting at /tmp/tmpg8ahq970.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node.value % 2 == 0\n          \
    \  if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_index == 1\n        smallest_index\n  \
    \  else\n        smallest_index\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree and a number x, your task is to find the node in the tree with\
    \ value x.\nusing Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc5ua3du.jl:54\nin expression starting at\
    \ /tmp/tmpdc5ua3du.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return Vector{Int64}([smallest_value, smallest_index])\n    end\nend\n</cell>\n\
    <text>\nProblem 7\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqawq1sfi.jl:45\nin expression starting at\
    \ /tmp/tmpqawq1sfi.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    if length(arr) == 0 \n        return [] \n    \n    smalest_value = arr[1]\n\
    \    smalest_index = 1\n    \n    for node in arr[2:end]\n        if node % 2\
    \ == 0 \n            smalest_value = node \n            smalest_index = 1 \n \
    \       else \n            if smalest_value < node \n                smalest_value\
    \ = node \n                smalest_index = 1 \n            else \n           \
    \     smalest_index += 1\n            end\n        end\n    end\n    \n    return\
    \ [ smalest_value, smalest_index ]\nend\n</cell>\n<text>\nProblem 7\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values.\nusing Test\n\n\
    @testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\
    \t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptt45moei.jl:57\nin expression starting at\
    \ /tmp/tmptt45moei.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64 = 1\n\
    \    \n    for node in arr[2:end]\n        if node < smallest_value\n        \
    \    smallest_value = node\n            smallest_index = smallest_index + 1\n\
    \        else\n            break\n    end\n    \n    if smallest_value == 0\n\
    \        smallest_index\n    else\n        smallest_index\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values. (ie, from left to right, level by level).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi71l3zq.jl:53\nin expression starting at\
    \ /tmp/tmpwi71l3zq.jl:53\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value = arr[1]\n        smallest_index = 1\n    end\n\
    \    \n    return smallest_value, smallest_index\nend\n</cell>\n<text>\nProblem\
    \ 4\nGiven a vector representing a branch of a tree that has non-negative integer\
    \ nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node\
    \ should be the node with the smallest odd value.\nIf multiple nodes with the\
    \ same smallest odd value are found return the node that has smallest index.\n\
    using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4, 2, 3])\
    \ == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t\
    @test(candidate([1, 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4,\
    \ 8]) == [4, 1])\n\t@test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7,\
    \ 9, 7, 1]) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5h8p8gqb.jl:46\nin expression starting at\
    \ /tmp/tmp5h8p8gqb.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    \"Given a vector representing a branch of a tree that has\
    \ non-negative integer nodes\n    your task is to pluck one of the nodes and return\
    \ it.\n    The plucked node should be the node with the smallest even value.\n\
    \    If multiple nodes with the same smallest even value are found return the\
    \ node that has smallest index.\n\n    The plucked node should be returned in\
    \ a vector, [ smalest_value, its index ],\n    If there are no even values or\
    \ the given vector is empty, return [].\n\n    Example 1:\n    >>> pluck([4, 2,\
    \ 3])\n    [2, 1]\n    Explanation: 2 has the smallest even value, and 2 has the\
    \ smallest index.\n\n    Example 2:\n    >>> pluck([1, 2, 3])\n    [2, 1]\n  \
    \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 3:\n    >>> pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5,\
    \ 0, 3, 0, 4, 2])\n    [0, 1]\n    Explanation: 0 is the smallest value, but \
    \ there are two zeros,\n                 so we will choose the first zero, which\
    \ has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <=\
    \ 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
    \ \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        index = find(even_values == smallest_value)[1]\n        return Vector{Int64}([smallest_value,\
    \ index])\n    end\nend\n</cell>\n<text>\nProblem 7\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values.\nusing Test\n\n@testset begin\n\
    \ncandidate = pluck;\n\t@test(candidate([4, 2, 3]) == [2, 1])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1, 2, 3,\
    \ 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t@test(candidate([7,\
    \ 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yybh_lq.jl:44\nin expression starting at\
    \ /tmp/tmp8yybh_lq.jl:44\n"
  stdout: ''
